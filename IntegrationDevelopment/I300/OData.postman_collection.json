{
	"info": {
		"_postman_id": "3a28c9ca-1c3f-4461-b050-56e4ef04afa3",
		"name": "MyBIIntegrationOData",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1878971"
	},
	"item": [
		{
			"name": "Part 1: Client Application Configuration",
			"item": [
				{
					"name": "Lesson 1.1: Signing In to Acumatica ERP",
					"item": [
						{
							"name": "Example: Using Generic Inquiry-Based OData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\".ASPXAUTH recieved\", function () {\r",
											"    pm.expect(pm.cookies.indexOf('.ASPXAUTH')).to.be.not.null;\r",
											"});\r",
											"pm.test(\".ASP.NET_SessionId recieved\", function () {\r",
											"    pm.expect(pm.cookies.indexOf('.ASP.NET_SessionId')).to.be.not.null;\r",
											"});\r",
											"pm.test(\"Response contains Modified Stock Items\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Modified Stock Items\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLGI}}/$metadata",
									"host": [
										"{{EndpointURLGI}}"
									],
									"path": [
										"$metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "Example: Using DAC-Based OData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\".ASPXAUTH recieved\", function () {\r",
											"    pm.expect(pm.cookies.indexOf('.ASPXAUTH')).to.be.not.null;\r",
											"});\r",
											"pm.test(\".ASP.NET_SessionId recieved\", function () {\r",
											"    pm.expect(pm.cookies.indexOf('.ASP.NET_SessionId')).to.be.not.null;\r",
											"});\r",
											"pm.test(\"Response contains Schema Namespace=\\\"PX.Api\\\"\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Schema Namespace=\\\"PX.Api\\\"\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLDAC}}/$metadata",
									"host": [
										"{{EndpointURLDAC}}"
									],
									"path": [
										"$metadata"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Part 2: Initial Data Retrieval",
			"item": [
				{
					"name": "Lesson 2.1: Retrieving the List of Customers with Contacts",
					"item": [
						{
							"name": "Example: Using a Custom Generic Inquiry (Generic Inquiry-Based OData)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contacts exist\", function (){\r",
											"    const jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.value).to.be.not.empty;\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLGI}}/Customer%20Contacts",
									"host": [
										"{{EndpointURLGI}}"
									],
									"path": [
										"Customer%20Contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Example: Using GET and the $expand and $select Parameters (DAC-Based OData)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Contacts exist\", function (){\r",
											"    const jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.value).to.be.not.empty;\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLDAC}}/PX_Objects_AR_Customer?$select=AcctCD,AcctName,CustomerClassID&$expand=ContactByDefBillContactID($select=Email,Phone1),AddressByDefAddressID($select=AddressLine1,AddressLine2,City,State,PostalCode)",
									"host": [
										"{{EndpointURLDAC}}"
									],
									"path": [
										"PX_Objects_AR_Customer"
									],
									"query": [
										{
											"key": "$select",
											"value": "AcctCD,AcctName,CustomerClassID"
										},
										{
											"key": "$expand",
											"value": "ContactByDefBillContactID($select=Email,Phone1),AddressByDefAddressID($select=AddressLine1,AddressLine2,City,State,PostalCode)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Lesson 2.2: Retrieving the Quantities of Stock Items",
					"item": [
						{
							"name": "Example: Using a Generic Inquiry with Parameters (Generic Inquiry-Based OData)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Some data is retrieved\", function (){\r",
											"    const jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.value).to.be.not.empty;\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLGI}}/ItemAvailabilityData_WithParameters?InventoryID=AALEGO500",
									"host": [
										"{{EndpointURLGI}}"
									],
									"path": [
										"ItemAvailabilityData_WithParameters"
									],
									"query": [
										{
											"key": "InventoryID",
											"value": "AALEGO500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Example: Retrieving Quantities from Tables (DAC-Based OData)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Some data is retrieved\", function (){\r",
											"    const jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse.value).to.be.not.empty;\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLDAC}}/PX_Objects_IN_INSiteStatus?$select=QtyOnHand,QtyAvail&$expand=InventoryItemByInventoryID($select=InventoryCD,Descr),INSiteBySiteID($select=SiteCD)&$filter=InventoryID eq 41",
									"host": [
										"{{EndpointURLDAC}}"
									],
									"path": [
										"PX_Objects_IN_INSiteStatus"
									],
									"query": [
										{
											"key": "$select",
											"value": "QtyOnHand,QtyAvail"
										},
										{
											"key": "$expand",
											"value": "InventoryItemByInventoryID($select=InventoryCD,Descr),INSiteBySiteID($select=SiteCD)"
										},
										{
											"key": "$filter",
											"value": "InventoryID eq 41"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Part 3: Retrieval of the Delta of Records",
			"item": [
				{
					"name": "Lesson 3.1: Retrieving the List of Modified Stock Items",
					"item": [
						{
							"name": "Example: Filtering the Result of a Generic Inquiry (Generic Inquiry-Based OData) | Retrieving the List of Modified Stock Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contains AALEGO500\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AALEGO500\");\r",
											"});\r",
											"pm.test(\"Response does not contain AACOMPUT01\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"AACOMPUT01\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Set current date\r",
											"var moment = require('moment');\r",
											"pm.environment.set('currentDate', moment().format((\"YYYY-MM-DD\")));\r",
											"\r",
											"//Modify stock items\r",
											"var requestSignIn = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/auth/login'),\r",
											"    method: 'POST',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.variables.replaceIn(\r",
											"            '{ \"name\": \"{{Username}}\", \"password\": \"{{Password}}\", \"tenant\": \"{{Tenant}}\", \"branch\": \"{{Branch}}\"}')\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(requestSignIn,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for sing in should be 204 to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 204);\r",
											"    pm.expect(response).to.have.property('status', 'No Content');\r",
											"  });\r",
											"\r",
											"var requestAACOMPUT01 = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/Default/23.200.001/StockItem?$select=InventoryID,ItemStatus'),\r",
											"    method: 'PUT',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: '{\"InventoryID\": {\"value\": \"AACOMPUT01\"},\"ItemStatus\": {\"value\": \"Inactive\"}}'\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(requestAACOMPUT01,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for AACOMPUT01 should be OK to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"  });\r",
											"\r",
											"var requestAALEGO500 = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/Default/23.200.001/StockItem?$select=InventoryID,Description'),\r",
											"    method: 'PUT',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: '{\"InventoryID\": {\"value\": \"AALEGO500\"},\"Description\": {\"value\": \"Lego, 500 piece set\"}}'\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(requestAALEGO500, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for AALEGO500 should be OK to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"  });\r",
											"\r",
											"var requestSignOut = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/auth/logout'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(requestSignOut,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for sing out should be 204 to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 204);\r",
											"    pm.expect(response).to.have.property('status', 'No Content');\r",
											"  });\r",
											"});\r",
											"\r",
											"});\r",
											"\r",
											"});\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLGI}}/Modified%20Stock%20Items?$filter=ItemStatus eq 'Active' and LastModifiedOn gt {{currentDate}}",
									"host": [
										"{{EndpointURLGI}}"
									],
									"path": [
										"Modified%20Stock%20Items"
									],
									"query": [
										{
											"key": "$filter",
											"value": "ItemStatus eq 'Active' and LastModifiedOn gt {{currentDate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Example: Filtering the Requested Data (DAC-Based OData)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response contains AALEGO500\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"AALEGO500\");\r",
											"});\r",
											"pm.test(\"Response does not contain AACOMPUT01\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"AACOMPUT01\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//Set current date\r",
											"var moment = require('moment');\r",
											"pm.environment.set('currentDate', moment().format((\"YYYY-MM-DD\")));\r",
											"\r",
											"//Modify stock items\r",
											"var requestSignIn = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/auth/login'),\r",
											"    method: 'POST',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: pm.variables.replaceIn(\r",
											"            '{ \"name\": \"{{Username}}\", \"password\": \"{{Password}}\", \"tenant\": \"{{Tenant}}\", \"branch\": \"{{Branch}}\"}')\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(requestSignIn,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for sing in should be 204 to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 204);\r",
											"    pm.expect(response).to.have.property('status', 'No Content');\r",
											"  });\r",
											"\r",
											"var requestAACOMPUT01 = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/Default/23.200.001/StockItem?$select=InventoryID,ItemStatus'),\r",
											"    method: 'PUT',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: '{\"InventoryID\": {\"value\": \"AACOMPUT01\"},\"ItemStatus\": {\"value\": \"Inactive\"}}'\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(requestAACOMPUT01,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for AACOMPUT01 should be OK to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"  });\r",
											"\r",
											"var requestAALEGO500 = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/Default/23.200.001/StockItem?$select=InventoryID,Description'),\r",
											"    method: 'PUT',\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: '{\"InventoryID\": {\"value\": \"AALEGO500\"},\"Description\": {\"value\": \"Lego, 500 piece set\"}}'\r",
											"    },\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(requestAALEGO500, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for AALEGO500 should be OK to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"  });\r",
											"\r",
											"var requestSignOut = {\r",
											"    url: pm.variables.replaceIn('{{InstanceURL}}/entity/auth/logout'),\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(requestSignOut,  (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('Response for sing out should be 204 to process', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 204);\r",
											"    pm.expect(response).to.have.property('status', 'No Content');\r",
											"  });\r",
											"});\r",
											"\r",
											"});\r",
											"\r",
											"});\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURLDAC}}/PX_Objects_IN_InventoryItem?$select=InventoryCD,Descr,ItemStatus,LastModifiedDateTime,BaseUnit&$expand=INSiteByDfltSiteID($select=SiteCD),INItemClassByItemClassID($select=ItemClassCD),INSiteStatusCollection($select=QtyOnHand)&$filter=StkItem eq true and ItemStatus eq 'AC' and LastModifiedDateTime eq {{currentDate}}",
									"host": [
										"{{EndpointURLDAC}}"
									],
									"path": [
										"PX_Objects_IN_InventoryItem"
									],
									"query": [
										{
											"key": "$select",
											"value": "InventoryCD,Descr,ItemStatus,LastModifiedDateTime,BaseUnit"
										},
										{
											"key": "$expand",
											"value": "INSiteByDfltSiteID($select=SiteCD),INItemClassByItemClassID($select=ItemClassCD),INSiteStatusCollection($select=QtyOnHand)"
										},
										{
											"key": "$filter",
											"value": "StkItem eq true and ItemStatus eq 'AC' and LastModifiedDateTime eq {{currentDate}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{Password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{Username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "http://localhost",
			"type": "string"
		},
		{
			"key": "InstanceURL",
			"value": "{{BaseURL}}/MyStoreInstance",
			"type": "string"
		},
		{
			"key": "EndpointURLGI",
			"value": "{{InstanceURL}}/t/{{Tenant}}/api/OData/GI",
			"type": "string"
		},
		{
			"key": "EndpointURLDAC",
			"value": "{{InstanceURL}}/t/{{Tenant}}/api/OData/DAC",
			"type": "string"
		},
		{
			"key": "Username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "Password",
			"value": "123",
			"type": "string"
		},
		{
			"key": "Tenant",
			"value": "MyStore",
			"type": "string"
		},
		{
			"key": "Branch",
			"value": "MYSTORE",
			"type": "string"
		}
	]
}