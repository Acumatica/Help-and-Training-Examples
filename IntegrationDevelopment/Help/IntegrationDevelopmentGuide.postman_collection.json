{
	"info": {
		"_postman_id": "20e302e5-33e0-4f1c-b7b1-13d83e1700df",
		"name": "REST API Examples (Integration Development Guide)",
		"description": "This collection contains examples from the [REST API Examples](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=bbb8b84b-07d7-4a69-adf8-33dc5d430b60) chapter of the Integration Development Guide of Acumatica ERP.\n\n**Testing the Requests**\n\nTo test the examples, you configure this collection and the Acumatica ERP instance to be used as follows:\n\n- Deploy a new Acumatica ERP instance with three tenants that are based on the U100, SalesDemo, and T100 datasets. For details on deploying an instance, see [To Deploy an Acumatica ERP Instance](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b18ad378-0a8c-44f1-a14c-6b4f9c6271e4) in the Installation Guide.\n    \n- Specify the base URL of the site in the _BaseURL_ variable of the collection.\n    \n- Specify the instance URL in the _InstanceURL_ variable of the collection.\n    \n- Make sure the URL of the Default/24.200.001 endpoint is in the _EndpointURL_ variable.\n    \n- Make sure the URL of the MANUFACTURING/24.200.001 endpoint is in the _ManufacturingEndpointURL_ variable.\n    \n- Specify the tenant name, branch, username, and password to access the tenant with the U100 data in the _TenantU100_, _BranchU100_, _UsernameU100_, and _PasswordU100_ variables.\n    \n- Specify the tenant name, branch, username, and password to access the tenant with the T100 data in the _TenantT100_, _BranchT100_, _UsernameT100_, and _PasswordT100_ variables.\n    \n- Specify the tenant name, branch, username, and password to access the tenant with the T100 data in the _TenantSalesDemo_, _BranchSalesDemo_, _UsernameSalesDemo_, and _PasswordSalesDemo_ variables.\n    \n\nOther variables are used by particular requests and are specified during execution of other requests. You do not need to feel their values manually.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1878971"
	},
	"item": [
		{
			"name": "Basic Requests",
			"item": [
				{
					"name": "Sign In to the Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\".ASPXAUTH recieved\", function () {\r",
									"    pm.expect(pm.cookies.indexOf('.ASPXAUTH')).to.be.not.null;\r",
									"});\r",
									"pm.test(\".ASP.NET_SessionId recieved\", function () {\r",
									"    pm.expect(pm.cookies.indexOf('.ASP.NET_SessionId')).to.be.not.null;\r",
									"});\r",
									"pm.execution.setNextRequest(\"Sign Out from the Service\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\" : \"{{UsernameU100}}\",\r\n\"password\" : \"{{PasswordU100}}\",\r\n\"company\" : \"{{TenantU100}}\",\r\n\"branch\" : \"{{BranchU100}}\"\r\n}"
						},
						"url": {
							"raw": "{{InstanceURL}}entity/auth/login",
							"host": [
								"{{InstanceURL}}entity"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "This example shows how to sign in to Acumatica ERP. This process is described in [Sign-In to the Service](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0322492a-de9b-4443-b256-923c48aff31d)."
					},
					"response": []
				},
				{
					"name": "Sign Out from the Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Create a Record\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{InstanceURL}}entity/auth/logout",
							"host": [
								"{{InstanceURL}}entity"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "This example shows how to sign out from Acumatica ERP. This process is described in [Sign-Out from the Service](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f6701ec1-2296-4155-8242-03d29006bf6e)."
					},
					"response": []
				},
				{
					"name": "Create a Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Customer ID is JOHNGOOD\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerID.value).to.eql('JOHNGOOD');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Update a Record\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"CustomerID\" : {\"value\" : \"JOHNGOOD\"},\r\n  \"CustomerName\" : {\"value\" : \"John Good\"},\r\n  \"CustomerClass\" : {\"value\" : \"DEFAULT\"},\r\n  \"MainContact\" : \r\n    {\r\n      \"Email\" : {\"value\" : \"demo@gmail.com\"},\r\n      \"Address\" : \r\n        {\r\n          \"AddressLine1\" : {\"value\" : \"4030 Lake Washington Blvd NE\"},\r\n          \"AddressLine2\" : {\"value\" : \"Suite 100\"},\r\n          \"City\" : {\"value\" : \"Kirkland\"},\r\n          \"State\" : {\"value\" : \"WA\" },\r\n          \"PostalCode\" : {\"value\" : \"98033\"}\r\n        }      \r\n    }  \r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Customer",
							"host": [
								"{{EndpointURL}}Customer"
							]
						},
						"description": "This example shows the creation of a record, which is described in [Create a Record](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9d966d50-a0a1-4456-a9ff-1cc2159d48d4)."
					},
					"response": []
				},
				{
					"name": "Update a Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Customer ID is JOHNGOOD\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerID.value).to.eql('JOHNGOOD');\r",
									"});\r",
									"pm.test(\"Customer class is ECCUSTOMER\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerClass.value).to.eql('ECCUSTOMER');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve a Record by Key Fields\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"CustomerClass\" : {\"value\" : \"ECCUSTOMER\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Customer?$filter=MainContact/Email eq 'demo@gmail.com'&$select=CustomerID,CustomerClass,MainContact/Email&$expand=MainContact",
							"host": [
								"{{EndpointURL}}Customer"
							],
							"query": [
								{
									"key": "$filter",
									"value": "MainContact/Email eq 'demo@gmail.com'"
								},
								{
									"key": "$select",
									"value": "CustomerID,CustomerClass,MainContact/Email"
								},
								{
									"key": "$expand",
									"value": "MainContact"
								}
							]
						},
						"description": "This example shows the update of a record, which is described in [Update a Record](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=af48c02a-afbc-4fdb-b1e5-635ac7ebbaf1)."
					},
					"response": []
				},
				{
					"name": "Retrieve a Record by Key Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Order number is 000001\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderNbr.value).to.eql('000001');\r",
									"});\r",
									"pm.test(\"Sales order includes detail lines\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).length.to.be.gte(1);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve a Record by ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/SO/000001?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"SO",
								"000001"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the retrieval of a record by the values of its key fields, which is described in [Retrieve a Record by Key Fields](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=52c97a83-1fa1-40e9-8219-52a89a91f2da)."
					},
					"response": []
				},
				{
					"name": "Retrieve a Record by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Order number is 000001\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderNbr.value).to.eql('000001');\r",
									"});\r",
									"pm.test(\"Sales order includes detail lines\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).length.to.be.gte(1);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Records by Conditions\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/a6295b33-c7f6-e811-b817-00155d408001?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"a6295b33-c7f6-e811-b817-00155d408001"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the retrieval of a record by the value of the entity ID, which is described in [Retrieve a Record by ID](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=bc9531b0-717b-4b2d-8899-ff7ca805ade1)."
					},
					"response": []
				},
				{
					"name": "Retrieve Records by Conditions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//The data for sign-in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Modification of stock items before request\r",
									"var callback = (pm, error, response) => {\r",
									"    var endpointurl = pm.collectionVariables.get('EndpointURL');\r",
									"    var requestAPJAM08 = {\r",
									"        url: endpointurl+'StockItem?$select=InventoryID,ItemStatus',\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"InventoryID\": {\"value\": \"APJAM08\"},\"ItemStatus\": {\"value\": \"Inactive\"}}'\r",
									"        },\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(requestAPJAM08,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for APJAM08 should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"\r",
									"        var requestAPJAM32 = {\r",
									"            url: endpointurl+'StockItem?$select=InventoryID,Description',\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"InventoryID\": {\"value\": \"APJAM32\"},\"Description\": {\"value\": \"Apple jam, 32 oz\"}}'\r",
									"            },\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"        pm.sendRequest(requestAPJAM32, (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for APJAM32 should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									"//Sign in and modify stock items\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response contains APJAM32\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"APJAM32\");\r",
									"});\r",
									"pm.test(\"Response does not contain APJAM08\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"APJAM08\");\r",
									"});\r",
									"//Modification of a stock item after request\r",
									"var endpointurl = pm.collectionVariables.get('EndpointURL');\r",
									"var requestAPJAM08 = {\r",
									"    url: endpointurl+'StockItem?$select=InventoryID,ItemStatus',\r",
									"    method: 'PUT',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: '{\"InventoryID\": {\"value\": \"APJAM08\"},\"ItemStatus\": {\"value\": \"Active\"}}'\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestAPJAM08,  (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    }\r",
									"\r",
									"    pm.test('Response for APJAM08 should be OK to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code', 200);\r",
									"        pm.expect(response).to.have.property('status', 'OK');\r",
									"    });\r",
									"\r",
									"    //Sign out and set the next request\r",
									"    var url = pm.collectionVariables.get('InstanceURL');\r",
									"    pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Retrieve Records Filtered by Custom Fields\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}StockItem?$expand=WarehouseDetails&$filter=ItemStatus eq 'Active' and LastModified gt datetimeoffset'2019-08-18T23%3A59%3A59.999%2B04%3A00'",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$expand",
									"value": "WarehouseDetails"
								},
								{
									"key": "$filter",
									"value": "ItemStatus eq 'Active' and LastModified gt datetimeoffset'2019-08-18T23%3A59%3A59.999%2B04%3A00'"
								}
							]
						},
						"description": "This example shows the retrieval of records that satisfy the specified conditions, which is described in [Retrieve Records by Conditions](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=775ca16b-cba6-4c1d-89d5-c1df7833bfea)."
					},
					"response": []
				},
				{
					"name": "Retrieve Records Filtered by Custom Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//The data for sign-in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Sign in and modify stock items\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list has more than 1 item\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.gt(0);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Data from an Inquiry Form\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}SalesInvoice?$filter=cf.Decimal(f='Document.CuryBalanceWOTotal') eq 0M and cf.DateTime(f='Document.DiscDate') gt datetimeoffset'2024-02-18T23%3A59%3A59.999%2B04%3A00' ",
							"host": [
								"{{EndpointURL}}SalesInvoice"
							],
							"query": [
								{
									"key": "$filter",
									"value": "cf.Decimal(f='Document.CuryBalanceWOTotal') eq 0M and cf.DateTime(f='Document.DiscDate') gt datetimeoffset'2024-02-18T23%3A59%3A59.999%2B04%3A00' "
								}
							]
						},
						"description": "This example shows the retrieval of records that satisfy the specified conditions, which is described in [Retrieve Records by Conditions](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=775ca16b-cba6-4c1d-89d5-c1df7833bfea)."
					},
					"response": []
				},
				{
					"name": "Retrieve Data from an Inquiry Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"InventoryID is APJAM08\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.InventoryID.value).to.eql('APJAM08');\r",
									"});\r",
									"pm.test(\"Response includes one detail line\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Results).to.have.lengthOf(2);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Records in Batches\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"InventoryID\" : {\"value\" : \"APJAM08\" } ,\r\n  \"WarehouseID\" : {\"value\" : \"RETAIL\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}InventorySummaryInquiry?$expand=Results",
							"host": [
								"{{EndpointURL}}InventorySummaryInquiry"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Results"
								}
							]
						},
						"description": "This example shows the retrieval of data from an inquiry form, which is described in [Retrieve Data from an Inquiry Form](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6340cff3-4732-4231-9e42-5d1e5e65b5dd)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Records in Batches",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list has 5 items\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.lengthOf(5);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Records with Attributes\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$top=5&$skip=5&$select=CustomerID,LocationID,OrderNbr,OrderType",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$top",
									"value": "5"
								},
								{
									"key": "$skip",
									"value": "5"
								},
								{
									"key": "$select",
									"value": "CustomerID,LocationID,OrderNbr,OrderType"
								}
							]
						},
						"description": "This example shows how to retrieve the second batch of five sales orders (that is, from 6th to 10th) by using the REST API. This example is described in [Retrieve the List of Records in Batches](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0ea8ce7c-4423-4286-a481-37e7261cc30f)."
					},
					"response": []
				},
				{
					"name": "Retrieve Records with Attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The contact has one attribute\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    jsonResponse.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.LastName.value === 'Sans' && item.FirstName.value === 'Stephane') {\r",
									"            pm.expect(item.Attributes.length).to.eq(1);};\r",
									"    }\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Operate with Archived Records\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Contact?$expand=Attributes&$select=FirstName,LastName,JobTitle,Attributes/AttributeID,Attributes/Value",
							"host": [
								"{{EndpointURL}}Contact"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes"
								},
								{
									"key": "$select",
									"value": "FirstName,LastName,JobTitle,Attributes/AttributeID,Attributes/Value"
								}
							]
						},
						"description": "This example shows how to get leads together with their attributes. This process is described in [Retrieve Records with Attributes](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=56831ee7-14b0-45ef-8207-dace30beb2cb)."
					},
					"response": []
				},
				{
					"name": "Operate with Archived Records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).length.to.be.gt(0);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Remove a Record by Key Fields\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PX-ApiArchive",
								"value": "SHOW",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Shipment?$select=ShipmentNbr,ShipmentDate&$filter=ShipmentDate lt datetimeoffset'2024-12-31'",
							"host": [
								"{{EndpointURL}}Shipment"
							],
							"query": [
								{
									"key": "$select",
									"value": "ShipmentNbr,ShipmentDate"
								},
								{
									"key": "$filter",
									"value": "ShipmentDate lt datetimeoffset'2024-12-31'"
								}
							]
						},
						"description": "This example shows how to make archived records visible for a request. This process is described in [Operate with Archived Records](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e03cadc1-a0c5-4ead-8afb-ee78b497beb2)."
					},
					"response": []
				},
				{
					"name": "Remove a Record by Key Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Remove a Record by ID\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}StockItem/CGFEEDER",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"path": [
								"CGFEEDER"
							]
						},
						"description": "This example shows the removal of a record by key fields, which is described in [Remove a Record by Key Fields](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d806636f-3cb8-4fd6-bc1e-fef9cdf9683d)."
					},
					"response": []
				},
				{
					"name": "Remove a Record by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Execute an Action That Is Present in an Endpoint\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/e59cc6da-cc6c-ea11-b82d-00155d408001",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"e59cc6da-cc6c-ea11-b82d-00155d408001"
							]
						},
						"description": "This example shows the removal of a record by its ID, which is described in [Remove a Record by ID](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=04825ddc-c3af-49de-8663-ae119e84b987)."
					},
					"response": []
				},
				{
					"name": "Execute an Action That Is Present in an Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'SalesOrder/SO/000001';\r",
									"var requestSalesOrder = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestSalesOrder,  (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  }\r",
									"\r",
									"  pm.test('Response for the sales order should be OK to process', () => {\r",
									"    pm.expect(error).to.equal(null);\r",
									"    pm.expect(response).to.have.property('code', 200);\r",
									"    pm.expect(response).to.have.property('status', 'OK');\r",
									"  });\r",
									"  pm.test(\"Sales order status is Back Order\", function (){\r",
									"    const jsonResponse = response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.be.eql('Back Order');\r",
									"    });\r",
									"    //Sign out and set the next request\r",
									"    var url = pm.collectionVariables.get('InstanceURL');\r",
									"    pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest('Execute an Action That Is Present in an Endpoint (Example 2)');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n \"entity\" :\n {\n  \"OrderType\" : {\"value\" : \"SO\"}, \n  \"OrderNbr\" : {\"value\" : \"000001\"} \n },\n \"parameters\" : \n {}\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/ReopenSalesOrder",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"ReopenSalesOrder"
							]
						},
						"description": "This example shows the re-opening of a sales order, which is described in [Execute an Action That Is Present in an Endpoint](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=91bf9106-062a-47a8-be1f-b48517a54324)."
					},
					"response": []
				},
				{
					"name": "Execute an Action That Is Present in an Endpoint (Example 2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'BusinessAccount/CANDYYY';\r",
									"var requestBAccount = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestBAccount, (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    }\r",
									"\r",
									"    pm.test('Response for the business account should be OK to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code', 200);\r",
									"        pm.expect(response).to.have.property('status', 'OK');\r",
									"    });\r",
									"\r",
									"    //Sign out and set the next request\r",
									"    var url = pm.collectionVariables.get('InstanceURL');\r",
									"    pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest('Execute a Custom Action');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entity\" : {\n    \"BusinessAccountID\": { \"value\": \"CANDYY\" }\n  },\n  \"parameters\" : {\n    \"BusinessAccountID\": { \"value\": \"CANDYYY\" }\n  }\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}BusinessAccount/ChangeBusinessAccountID",
							"host": [
								"{{EndpointURL}}BusinessAccount"
							],
							"path": [
								"ChangeBusinessAccountID"
							]
						},
						"description": "This example shows the changing of the ID of a business account, which is described in [Execute an Action That Is Present in an Endpoint](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=91bf9106-062a-47a8-be1f-b48517a54324)."
					},
					"response": []
				},
				{
					"name": "Execute a Custom Action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'Case/6781fe19-9aa6-eb11-b846-00155d408001';\r",
									"var requestCase = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestCase, (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    }\r",
									"\r",
									"    pm.test('Response for the case should be OK to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code', 200);\r",
									"        pm.expect(response).to.have.property('status', 'OK');\r",
									"    });\r",
									"    pm.test(\"Case status is Closed\", function () {\r",
									"        const jsonResponse = response.json();\r",
									"        pm.expect(jsonResponse.Status.value).to.be.eql('Closed');\r",
									"    });\r",
									"    //Sign out and set the next request\r",
									"    var url = pm.collectionVariables.get('InstanceURL');\r",
									"    pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest('Narrow the List of Records on a Processing Form');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": {\r\n        \"id\": \"6781fe19-9aa6-eb11-b846-00155d408001\"\r\n    },\r\n    \"parameters\": {\r\n        \"custom\": {\r\n            \"FilterPreview\": {\r\n                \"Reason\": {\r\n                    \"type\" : \"CustomStringField\", \r\n                    \"value\" : \"Abandoned\"\r\n                }\r\n            }\r\n        }\r\n    }    \r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Case/Close",
							"host": [
								"{{EndpointURL}}Case"
							],
							"path": [
								"Close"
							]
						},
						"description": "This example shows the closing of a case, which is described in [Execute a Custom Action](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f01f3b8b-56c4-48ab-a043-dcbb10e3bfb3)."
					},
					"response": []
				},
				{
					"name": "Narrow the List of Records on a Processing Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Result).length.to.be.gt(0);\r",
									"    //Select the first item in the result to be processed\r",
									"    jsonResponse.Result.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.rowNumber === 1) {\r",
									"        item.Selected.value = true;}\r",
									"        else {item.Selected.value = false}\r",
									"    }\r",
									"    pm.collectionVariables.set(\"recordFilter\", JSON.stringify(jsonResponse));\r",
									"});\r",
									"//Do not sign out before the next request \r",
									"//because these requests should be executed in one session\r",
									"pm.execution.setNextRequest(\"Execute a Processing Action for Selected Records\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"AssignedToMe\": {\"value\": true},\r\n    \"Type\": {\"value\": \"All\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmailProcessing?$expand=Result",
							"host": [
								"{{EndpointURL}}EmailProcessing"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Result"
								}
							]
						},
						"description": "This example shows the application of a filter on a processing form, which is described in [Filter Records on a Processing Form](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2a697d48-0adf-4fa6-b5e5-af1f9459ec59)."
					},
					"response": []
				},
				{
					"name": "Execute a Processing Action for Selected Records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//No need to sign in in this request because the sign-in has been done \r",
									"//in Narrow the List of Records on a Processing Form. \r",
									"//These two requests should be executed in one session."
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                //Sign out\r",
									"                var url = pm.collectionVariables.get('InstanceURL');\r",
									"                pm.acuFunc.singOutFunction(pm, url);\r",
									"            }\r",
									"        });\r",
									"    };\r",
									"}\r",
									"pm.execution.setNextRequest('Retrieve a File Attached to a Record');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Entity\": {{recordFilter}}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmailProcessing/ProcessEmailProcessing",
							"host": [
								"{{EndpointURL}}EmailProcessing"
							],
							"path": [
								"ProcessEmailProcessing"
							]
						},
						"description": "This example shows the execution of a processing action for selected records on a processing form, which is described in [Execute a Processing Action for Selected Records](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cf740fca-fc35-4d26-a7d2-6c84c50cc07e)."
					},
					"response": []
				},
				{
					"name": "Execute a Processing Action for All Filtered Records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Skip this request in collection run\r",
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Request to retrieve the records for processing\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'EmailProcessing?$expand=Result';\r",
									"    var requestFilter = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"AssignedToMe\": {\"value\": true},\"Type\": {\"value\": \"All\"}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestFilter,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for records for processing should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('filteredRecordID', jsonResponse.id);\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and obtained filtered records\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                //Sign out\r",
									"                var url = pm.collectionVariables.get('InstanceURL');\r",
									"                pm.acuFunc.singOutFunction(pm, url);\r",
									"            }\r",
									"        });\r",
									"    };\r",
									"}\r",
									"pm.execution.setNextRequest('');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Entity\": {\"id\": \"{{filteredRecordID}}\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmailProcessing/ProcessAllEmailProcessing",
							"host": [
								"{{EndpointURL}}EmailProcessing"
							],
							"path": [
								"ProcessAllEmailProcessing"
							]
						},
						"description": "This example shows the execution of a processing action for all filtered records on a processing form, which is described in [Execute a Processing Action for All Filtered Records](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=fd52633e-df34-4696-9df3-7d94c8c1b96a)."
					},
					"response": []
				},
				{
					"name": "Retrieve a File Attached to a Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Request to retrieve the list of attached files\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'StockItem/JUICER20C?$select=InventoryID,files&$expand=files';\r",
									"    var requestGetFileList = {\r",
									"        url: url2,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestGetFileList,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for retrieval of the file list should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('fileRef', jsonResponse.files[0].href);\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and retrieve the list of files\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The stock item contains a JPG file\", function (){\r",
									"    pm.expect(pm.response.text()).to.include(\"JFIF\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Schema of Custom Fields\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": ""
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{fileRef}}",
							"host": [
								"{{BaseURL}}{{fileRef}}"
							]
						},
						"description": "This example shows the retrieval of a particular file attached to a record, which is described in [Retrieval of a File Attached to a Record](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b1bc82ee-ae6b-442a-a369-863d98f14630).\n\nThe value of the fileRef variable is specified in the pre-request script."
					},
					"response": []
				},
				{
					"name": "Attach a File to a Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Excluded from collection run\r",
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Request to retrieve the path for attachment\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'StockItem/EJECTOR03?$select=InventoryID';\r",
									"    var requestPath = {\r",
									"        url: url2,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPath,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for the attachment path should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            const fileRef = jsonResponse._links['files:put'];\r",
									"            pm.collectionVariables.set('fileRef', fileRef.replace('{filename}','T2MCRO.jpg'));\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and retrieve the attachment path\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Location is present\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});\r",
									"//Check comment text\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'StockItem/EJECTOR03?$select=InventoryID,files&$expand=files';\r",
									"var requestPath = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(requestPath,  (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    }\r",
									"\r",
									"    pm.test('Response for the attachment path should be OK to process', () => {\r",
									"        pm.expect(error).to.equal(null);\r",
									"        pm.expect(response).to.have.property('code', 200);\r",
									"        pm.expect(response).to.have.property('status', 'OK');\r",
									"        const jsonResponse = response.json();\r",
									"        pm.expect(jsonResponse.files[0].comment).to.eql('Test comment');\r",
									"    });\r",
									"});\r",
									"//Sign out and set next request \r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Schema of Custom Fields\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "text"
							},
							{
								"key": "PX-CbFileComment",
								"value": "Test comment",
								"type": "text"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/C:/Work/Help-and-Training-Examples/IntegrationDevelopment/I330/SourceFiles/T2MCRO.jpg"
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{fileRef}}",
							"host": [
								"{{BaseURL}}{{fileRef}}"
							]
						},
						"description": "This example shows the attachment of a file to a record, which is described in [Attach a File to a Record](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=591def3d-5fe5-42c1-bb35-cfe5b4c77f6f)."
					},
					"response": []
				},
				{
					"name": "Retrieve Comments for Attached Files",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Excluded from collection run\r",
									"//Attach a File to a Record needs to be executed to have attachments\r",
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Sign in and retrieve the attachment path\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Stock item is EJECTOR03\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.InventoryID.value).to.eql('EJECTOR03');\r",
									"});\r",
									"pm.test(\"Comment is _Test comment_\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.files[0].comment).to.eql('Test comment');\r",
									"});\r",
									"//Sign out and set next request \r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Schema of Custom Fields\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem/EJECTOR03?$select=InventoryID,files&$expand=files",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"path": [
								"EJECTOR03"
							],
							"query": [
								{
									"key": "$select",
									"value": "InventoryID,files"
								},
								{
									"key": "$expand",
									"value": "files"
								}
							]
						},
						"description": "This example shows the retrieval of comments for attached files, which is described in [Retrieve Comments for Attached Files](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=dbed8f9a-da49-4d28-888d-437b5a74d41c)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Schema of Custom Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list includes custom fields\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ReplenishmentParameters[0].custom).to.be.not.empty;\r",
									"});\r",
									"\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Change the Business Date or Current Branch\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem/$adHocSchema",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"path": [
								"$adHocSchema"
							]
						},
						"description": "This example shows the retrieval of the schema of custom fields, which is described in [Retrieve the Schema of Custom Fields](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=64daacf1-75c4-4bfa-b57b-36222020e7c9)."
					},
					"response": []
				},
				{
					"name": "Retrieve a Record with Custom Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Order number is 000087\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderNbr.value).to.eql('000087');\r",
									"});\r",
									"pm.test(\"Product is Apple jam 8 oz.\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.custom.Document.AttributePRODUCT.value).to.eql('Apple jam 8 oz.');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/SO/000087?$custom=Document.AttributePRODUCT",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"SO",
								"000087"
							],
							"query": [
								{
									"key": "$custom",
									"value": "Document.AttributePRODUCT"
								}
							]
						},
						"description": "This example shows the retrieval of a user-defined field PRODUCT added to the Sales Order form, which is described in [Retrieve a Record with Custom Fields](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=01266cc0-6eb1-4e41-b049-246e5915496d)."
					},
					"response": []
				},
				{
					"name": "Create a Record with Custom Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product is Apple jam 8 oz.\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.custom.Document.AttributePRODUCT.value).to.eql('Apple jam 8 oz.');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\r\n        \"value\": \"GOODFOOD\"\r\n    },\r\n    \"Hold\": {\r\n        \"value\": false\r\n    },\r\n    \"LocationID\": {\r\n        \"value\": \"MAIN\"\r\n    },\r\n    \"OrderType\": {\r\n        \"value\": \"SO\"\r\n    },\r\n    \"PaymentMethod\": {\r\n        \"value\": \"CHECK\"\r\n    },\r\n    \"custom\": {\r\n        \"Document\": {\r\n            \"AttributePRODUCT\": {\r\n                \"type\": \"CustomStringField\",\r\n                \"value\": \"Apple jam 8 oz.\"\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$custom=Document.AttributePRODUCT",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$custom",
									"value": "Document.AttributePRODUCT"
								}
							]
						},
						"description": "This example shows the creation of a sales order with the user-defined field PRODUCT, which is described in [Createe a Record with Custom Fields](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6397c034-d191-4302-8f9d-0a0aec5b5ba8)."
					},
					"response": []
				},
				{
					"name": "Retrieve Localized Values of a Multi-Language Field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"English translation is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].custom.Item.DescrTranslations.value).contains('en');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem?$custom=Item.DescrTranslations&$select=custom.Item",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$custom",
									"value": "Item.DescrTranslations"
								},
								{
									"key": "$select",
									"value": "custom.Item"
								}
							]
						},
						"description": "This example shows the retrieval of localized values of a multi-language field, which is described in [Retrieve Localized Values of a Multi-Language Field](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=44710da9-8e91-4836-92eb-d20a32a5dca6)."
					},
					"response": []
				},
				{
					"name": "Retrieve Localized Values of All Multi-Language Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"English translation is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].Description.translations.en).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem?$expand=Translations",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Translations"
								}
							]
						},
						"description": "This example shows the retrieval of all localized values of all multi-language fields, which is described in [Retrieve Localized Values of a Multi-Language Field](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=44710da9-8e91-4836-92eb-d20a32a5dca6)."
					},
					"response": []
				},
				{
					"name": "Specify Any Number of Localized Values of a Multilingual Field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Translations include French\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Description.translations.fr).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"InventoryID\" : { \"value\" : \"LAPTOP15\" },\r\n  \"Description\" : {\r\n    \"value\": \"new description in English\",\r\n    \"Translations\": {\r\n      \"fr\": \"nouvelle description en français\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}StockItem?$select=InventoryID,Description,Translations&$expand=Translations",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$select",
									"value": "InventoryID,Description,Translations"
								},
								{
									"key": "$expand",
									"value": "Translations"
								}
							]
						},
						"description": "This example shows the specification of localized values of a multi-language field, which is described in [Specify Localized Values of a Multi-Language Field](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=33e74dc8-aad3-4fb0-b3ac-e8ecaf323578)."
					},
					"response": []
				},
				{
					"name": "Specify All Localized Values of a Multi-Language Field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Translations include French\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.custom.Item.DescrTranslations.value).contains('fr');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"InventoryID\" : {\"value\" : \"BASESERV\" },\r\n  \"ItemClass\" : {\"value\" : \"COMPUTERS\" },\r\n  \"Description\" : {\"value\" : \"[{en:Item},{fr:Pièce}]\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}StockItem?$custom=Item.DescrTranslations&$select=custom.Item",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$custom",
									"value": "Item.DescrTranslations"
								},
								{
									"key": "$select",
									"value": "custom.Item"
								}
							]
						},
						"description": "This example shows the specification of localized values of a multi-language field, which is described in [Specify Localized Values of a Multi-Language Field](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=33e74dc8-aad3-4fb0-b3ac-e8ecaf323578)."
					},
					"response": []
				},
				{
					"name": "Request a Report",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 200)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                pm.test('Response contains pdf', function () {\r",
									"                    pm.expect(response.headers.get('content-type')).to.include('application/pdf');\r",
									"                });\r",
									"                //Sign out\r",
									"                var url = pm.collectionVariables.get('InstanceURL');\r",
									"                pm.acuFunc.singOutFunction(pm, url);\r",
									"            }\r",
									"        });\r",
									"    };\r",
									"}\r",
									"pm.execution.setNextRequest('');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/pdf",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CompanyBranch\": {\"value\": \"SOFT\"},\r\n    \"IncludeNonClearedTransactions\": {\"value\": true}\r\n}"
						},
						"url": {
							"raw": "{{InstanceURL}}/entity/Report/0001/CashAccountSummary",
							"host": [
								"{{InstanceURL}}"
							],
							"path": [
								"entity",
								"Report",
								"0001",
								"CashAccountSummary"
							]
						},
						"description": "This example shows the specification of localized values of a multi-language field, which is described in [Specify Localized Values of a Multi-Language Field](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=33e74dc8-aad3-4fb0-b3ac-e8ecaf323578)."
					},
					"response": []
				},
				{
					"name": "Change the Business Date or Current Branch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Branch is RETAIL\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.BranchID.value).to.eql('RETAIL');\r",
									"});\r",
									"pm.test(\"Post period is 012022\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PostPeriod.value).to.eql('012024');\r",
									"});\r",
									"\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Acumatica ERP Version and the List of Endpoints\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PX-CbApiBusinessDate",
								"value": "2024/01/01",
								"type": "text"
							},
							{
								"key": "PX-CbApiBranch",
								"value": "SweetLife Store",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Description\": {\"value\": \"Test transaction description\"},\r\n    \"PostPeriod\": {\"value\": \"01-2024\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}JournalTransaction",
							"host": [
								"{{EndpointURL}}JournalTransaction"
							]
						},
						"description": "This example shows how to set the active branch and business date for a request. This process is described in [Change the Business Date or Current Branch](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9821cff9-4970-4153-a0f8-dbf5758133a7)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Acumatica ERP Version and the List of Endpoints",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list includes the latest system endpoint\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    let endpointExists = false;\r",
									"    jsonResponse.endpoints.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.name === 'Default' & item.version === '22.200.001') {\r",
									"        endpointExists = true;}\r",
									"    }\r",
									"    pm.expect(endpointExists).to.eql(true);\r",
									"});\r",
									"\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Account Group\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{InstanceURL}}/entity",
							"host": [
								"{{InstanceURL}}"
							],
							"path": [
								"entity"
							]
						},
						"description": "This example obtains the Acumatica ERP version and the list of contract-based endpoints available in this version by using the REST API. This example is described in [Retrieve the Acumatica ERP Version and the List of Endpoints](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=da0fe495-b2e5-4d34-ab5a-5829e408f684)."
					},
					"response": []
				}
			],
			"description": "This folder contains examples from the [Basic Requests](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1c767ad9-da6d-4047-bc93-6970ad469504) chapter of the Integration Development Guide.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Add an Account to an Account Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The 40000 account is in the ACCG02 group\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.AccountCD.value).to.eql('40000');\r",
									"    pm.expect(jsonResponse.AccountGroup.value).to.eql('ACCG02');\r",
									"});\r",
									"//Add another account to the group\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'Account';\r",
									"var request40010 = {\r",
									"    url: url,\r",
									"    method: 'PUT',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: '{\"AccountCD\" : {\"value\" : \"40010\"},\"AccountGroup\" : {\"value\" : \"ACCG02\"}}'\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(request40010,  (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  }\r",
									"\r",
									"  pm.test('Response for 40010 should be OK to process', () => {\r",
									"    pm.expect(error).to.equal(null);\r",
									"    pm.expect(response).to.have.property('code', 200);\r",
									"    pm.expect(response).to.have.property('status', 'OK');\r",
									"  });\r",
									"  \r",
									"  //Sign out and set the next request\r",
									"  var url = pm.collectionVariables.get('InstanceURL');\r",
									"  pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Specify the Default Account of an Account Group\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AccountCD\" : {\"value\" : \"40000\"},\r\n  \"AccountGroup\" : {\"value\" : \"ACCG02\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Account",
							"host": [
								"{{EndpointURL}}Account"
							]
						},
						"description": "This example shows how to add an account to an account group in Acumatica ERP. This process is described in [Add an Account to an Account Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c11c1255-8dc2-4f80-8aaf-b2cf073a9387)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Accounts in a Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The 40000 account is in the ACCG02 group\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    jsonResponse.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.AccountCD.value === \"40000\") {pm.expect(item.AccountGroup.value).to.eql('ACCG02');};\r",
									"    }\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Remove an Account from a Group\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Account?$filter=AccountGroup%20eq%20'ACCG02'&$select=AccountCD",
							"host": [
								"{{EndpointURL}}Account"
							],
							"query": [
								{
									"key": "$filter",
									"value": "AccountGroup%20eq%20'ACCG02'"
								},
								{
									"key": "$select",
									"value": "AccountCD"
								}
							]
						},
						"description": "This example shows how to retrieve the list of accounts that are in an account group in Acumatica ERP. This process is described in [Retrieve the List of Accounts in a Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=958a189e-8574-4d4a-9e92-87554773b51d)."
					},
					"response": []
				},
				{
					"name": "Remove an Account from a Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The 40010 account is not in any group\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.AccountCD.value).to.eql('40010');\r",
									"    pm.expect(jsonResponse.AccountGroup).to.be.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Get General Ledger Transactions for Some Period\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AccountCD\" : {\"value\" : \"40010\"},\r\n  \"AccountGroup\" : {\"value\" : null}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Account",
							"host": [
								"{{EndpointURL}}Account"
							]
						},
						"description": "This example shows how to remove an account from an account group in Acumatica ERP. This process is described in [Remove an Account from a Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=40bea35c-ca46-48d2-b7cb-00a1f80261d9)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Account](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=4dc38e0f-e7fe-41cf-8370-fe900753d7a4) entity."
		},
		{
			"name": "AccountDetailsForPeriodInquiry",
			"item": [
				{
					"name": "Get General Ledger Transactions for Some Period",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Results list is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Results).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Case\");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FromPeriod\": { \"value\": \"032022\" },\r\n    \"ToPeriod\": { \"value\": \"042022\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}AccountDetailsForPeriodInquiry?$expand=Results",
							"host": [
								"{{EndpointURL}}AccountDetailsForPeriodInquiry"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Results"
								}
							]
						},
						"description": "This example shows the retrieval of general ledger transactions for the specified period, which is described in [Get General Ledger Transactions for Some Period](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=249c70a0-0f08-4a02-a80c-6a9e4c4cc0fe)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [AccountDetailsForPeriodInquiry](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5459946e-edff-44e7-853a-3613cfcfcea3) entity."
		},
		{
			"name": "AccountGroup",
			"item": [
				{
					"name": "Create an Account Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The ACCG02 account group is created\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.AccountGroupID.value).to.eql('ACCG02');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Add an Account to an Account Group\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AccountGroupID\" : {\"value\" : \"ACCG02\"},\r\n  \"Description\" : {\"value\" : \"Test Account Group\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}AccountGroup",
							"host": [
								"{{EndpointURL}}AccountGroup"
							]
						},
						"description": "This example shows how to create an account group in Acumatica ERP. This process is described in [Create an Account Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d4ad7ce9-d197-404b-865a-26cd6073df1f)."
					},
					"response": []
				},
				{
					"name": "Specify the Default Account of an Account Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The 40000 account is the default account\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.AccountGroupID.value).to.eql('ACCG02');\r",
									"    pm.expect(jsonResponse.DefaultAccountID.value).to.eql('40000');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Accounts in a Group\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"DefaultAccountID\" : {\"value\" : \"40000\"},\r\n  \"AccountGroupID\" : {\"value\" : \"ACCG02\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}AccountGroup",
							"host": [
								"{{EndpointURL}}AccountGroup"
							]
						},
						"description": "This example shows how to set an account as the default account of an account group in Acumatica ERP. This process is described in [Specify the Default Account of an Account Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=98c96a8d-de93-4062-aeec-b3a991af3afc)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [AccountGroup](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=92e21de7-7cdc-4507-95d4-537361e6569b) entity."
		},
		{
			"name": "Activity",
			"item": [
				{
					"name": "Create an Activity that is Linked to a Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Related entity type is case\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.RelatedEntityType.value).to.eql('PX.Objects.CR.CRCase');\r",
									"});\r",
									"//Sign out and the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Link a Case to Another Case\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Summary\": {\"value\": \"Automated Test\"},\r\n    \"Type\": {\"value\": \"M\"},\r\n    \"RelatedEntityNoteID\": {\"value\": \"{{caseEntityID}}\"},\r\n    \"RelatedEntityType\": {\"value\": \"PX.Objects.CR.CRCase\"},\r\n    \"ActivityDetails\":{\"value\": \"Automated Test\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Activity",
							"host": [
								"{{EndpointURL}}Activity"
							]
						},
						"description": "This example shows the creation of an activity that is linked to a case, which is described in [Create an Activity that is Linked to a Case](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=281011f8-aaf5-440f-a558-ff83afd09e62).\n\nThis request requires the value of caseEntityID collection variable. You can set it manually or by executing the Create a Case request."
					},
					"response": []
				},
				{
					"name": "Create an Activity that is Linked to a Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Related entity type is customer\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.RelatedEntityType.value).to.eql('PX.Objects.AR.Customer');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Customers with Contacts\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Summary\": {\"value\": \"Automated Test 2\"},\r\n    \"Type\": {\"value\": \"M\"},\r\n    \"RelatedEntityNoteID\": {\"value\": \"{{customerEntityID}}\"},\r\n    \"RelatedEntityType\": {\"value\": \"PX.Objects.AR.Customer\"},\r\n    \"ActivityDetails\":{\"value\": \"Automated Test 2\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Activity",
							"host": [
								"{{EndpointURL}}Activity"
							]
						},
						"description": "This example shows the creation of an activity that is linked to a customer, which is described in [Create an Activity that is Linked to a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=19b027ab-a469-481c-94c7-567f9884bbab).\n\nThis request requires the value of customerEntityID collection variable. You can set it manually or by executing the Create a Customer request."
					},
					"response": []
				},
				{
					"name": "Create an Activity that is Linked to a Lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Related entity type is lead\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.RelatedEntityType.value).to.eql('PX.Objects.CR.CRLead');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Bill for Particular Lines of a Purchase Order\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Summary\": {\"value\": \"Automated Test 3\"},\r\n    \"Type\": {\"value\": \"M\"},\r\n    \"RelatedEntityNoteID\": {\"value\": \"{{leadEntityID}}\"},\r\n    \"RelatedEntityType\": {\"value\": \"PX.Objects.CR.CRLead\"},\r\n    \"ActivityDetails\":{\"value\": \"Automated Test 3\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Activity",
							"host": [
								"{{EndpointURL}}Activity"
							]
						},
						"description": "This example shows the creation of an activity that is linked to a lead, which is described in [Create an Activity that is Linked to a Lead](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=498dbbec-97a2-416b-a151-459ed07994dd).\n\nThis request requires the value of leadEntityID collection variable. You can set it manually or by executing the Create a Lead request."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Activity](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6856d876-f6fd-407d-a530-01b81fbeeb49) entity."
		},
		{
			"name": "Bill",
			"item": [
				{
					"name": "Create a Bill for Particular Lines of a Purchase Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Vendor is PRINTICO\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Vendor.value).to.eql('PRINTICO');\r",
									"});\r",
									"pm.test(\"Bill has one detail line\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Qty of detail line is 5\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Qty.value).to.eql(5);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Bill for Particular Lines of a Purchase Receipt');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"Vendor\": {\r\n        \"value\": \"PRINTICO\"\r\n    },\r\n    \"VendorRef\": {\r\n        \"value\": \"123\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Bill for particular lines of a purchase order\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"POOrderType\": {\r\n                \"value\": \"Normal\"\r\n            },\r\n            \"POOrderNbr\": {\r\n                \"value\": \"000001\"\r\n            },\r\n             \"POLine\": {\r\n                \"value\": 1\r\n            },\r\n            \"Qty\":\r\n            {\r\n            \t\"value\": 5\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Bill?$select=ReferenceNbr,Details/POOrderNbr,Details/POOrderNbr,Details/InventoryID,Details/Qty&$expand=Details",
							"host": [
								"{{EndpointURL}}Bill"
							],
							"query": [
								{
									"key": "$select",
									"value": "ReferenceNbr,Details/POOrderNbr,Details/POOrderNbr,Details/InventoryID,Details/Qty"
								},
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create an AP bill for a particular line of a purchase order in Acumatica ERP. This process is described in [Create a Bill for Particular Lines of a Purchase Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a1116acb-66aa-4415-8148-5bbab45b0a50)."
					},
					"response": []
				},
				{
					"name": "Create a Bill for Particular Lines of a Purchase Receipt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Vendor is OFFICEUP\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Vendor.value).to.eql('OFFICEUP');\r",
									"});\r",
									"pm.test(\"Bill has one detail line\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Qty of detail line is 5\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Qty.value).to.eql(15);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Bill with Tax Parameters Overridden\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"Vendor\": {\r\n        \"value\": \"OFFICEUP\"\r\n    },\r\n    \"VendorRef\": {\r\n        \"value\": \"123\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Bill for particular lines of a purchase receipt\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"POReceiptNbr\": {\r\n                \"value\": \"000001\"\r\n            },\r\n             \"POReceiptLine\": {\r\n                \"value\": 1\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Bill?$select=ReferenceNbr,Details/POReceiptNbr,Details/InventoryID,Details/Qty&$expand=Details",
							"host": [
								"{{EndpointURL}}Bill"
							],
							"query": [
								{
									"key": "$select",
									"value": "ReferenceNbr,Details/POReceiptNbr,Details/InventoryID,Details/Qty"
								},
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create an AP bill for a particular line of a purchase receipt in Acumatica ERP. This process is described in [Create a Bill for Particular Lines of a Purchase Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=dadf0b5e-6ff5-4fb3-b089-60be8c8514b2)."
					},
					"response": []
				},
				{
					"name": "Create a Bill with Tax Parameters Overridden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"//Requests to configure taxes\r",
									"var callback = (pm, error, response) => {\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'Tax/PST';\r",
									"    var requestGetTax = {\r",
									"        url: url1,\r",
									"        method: 'GET',\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestGetTax,  (error, response) => {\r",
									"        if(response.code != 200) {\r",
									"\r",
									"            var url2 = pm.collectionVariables.get('EndpointURL') + 'Tax';\r",
									"            var requestAddTax = {\r",
									"                url: url2,\r",
									"                method: 'PUT',\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: '{\"TaxID\": { \"value\": \"PST\"},\"Description\": {\"value\": \"Tax ID for testing\"},\"TaxType\": {\"value\": \"VAT\"},\"IncludeInVATTaxableTotal\": {\"value\": true},\"ExcludeFromTaxonTaxCalculation\": {\"value\": true},\"TaxAgency\": {\"value\": \"CANADABC\"},\"TaxSchedule\": [{\"TaxRate\": {\"value\": 5}, \"ReportingGroup\": {\"value\": \"Input Tax (purchases)\"}},{\"TaxRate\": {\"value\": 5}, \"ReportingGroup\": {\"value\": \"Output Tax (sales)\"}}]}'},\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json'\r",
									"                }\r",
									"            };\r",
									"\r",
									"            pm.sendRequest(requestAddTax,  (error, response) => {\r",
									"                if (error) {\r",
									"                    console.log(error);\r",
									"                }\r",
									"\r",
									"                pm.test('Response for adding tax should be OK to process', () => {\r",
									"                    pm.expect(error).to.equal(null);\r",
									"                    pm.expect(response).to.have.property('code', 200);\r",
									"                    pm.expect(response).to.have.property('status', 'OK');\r",
									"                });\r",
									"\r",
									"                var url3 = pm.collectionVariables.get('EndpointURL') + 'TaxCategory';\r",
									"                var requestAddTaxCategory = {\r",
									"                    url: url3,\r",
									"                    method: 'PUT',\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: '{\"TaxCategoryID\": { \"value\": \"TEST\"},\"Description\": {\"value\": \"Tax category for test\"},\"Details\": [{\"TaxID\": {\"value\": \"CAGST\"}},{\"TaxID\": {\"value\": \"PST\"}}]}'},\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"\r",
									"                pm.sendRequest(requestAddTaxCategory,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for adding tax category should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"\r",
									"                    var url4 = pm.collectionVariables.get('EndpointURL') + 'TaxZone';\r",
									"                    var requestAddTaxZone = {\r",
									"                        url: url4,\r",
									"                        method: 'PUT',\r",
									"                        body: {\r",
									"                            mode: 'raw',\r",
									"                            raw: '{\"TaxZoneID\": { \"value\": \"CANADABC\"},\"ApplicableTaxes\": [{\"TaxID\": {\"value\": \"PST\"}}]}'},\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json'\r",
									"                        }\r",
									"                    };\r",
									"\r",
									"                    pm.sendRequest(requestAddTaxZone,  (error, response) => {\r",
									"                        if (error) {\r",
									"                            console.log(error);\r",
									"                        }\r",
									"\r",
									"                        pm.test('Response for adding tax zone should be OK to process', () => {\r",
									"                            pm.expect(error).to.equal(null);\r",
									"                            pm.expect(response).to.have.property('code', 200);\r",
									"                            pm.expect(response).to.have.property('status', 'OK');\r",
									"                        });                \r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Tax amount for both details is 150\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxDetails[0].TaxAmount.value).to.eql(150);\r",
									"    pm.expect(jsonResponse.TaxDetails[1].TaxAmount.value).to.eql(150);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Release Retainage\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Amount\": {\r\n        \"value\": 1120.0\r\n    },\r\n    \"CashDiscountDate\": {\r\n        \"value\": \"11/18/2021\"\r\n    },\r\n    \"CurrencyID\": {\r\n        \"value\": \"USD\"\r\n    },\r\n    \"Date\": {\r\n        \"value\": \"10/18/2021\"\r\n    },\r\n    \"DueDate\": {\r\n        \"value\": \"11/18/2021\"\r\n    },\r\n    \"Hold\": {\r\n        \"value\": false\r\n    },\r\n    \"LocationID\": {\r\n        \"value\": \"MAIN\"\r\n    },\r\n    \"PostPeriod\": {\r\n        \"value\": \"102021\"\r\n    },\r\n    \"Status\": {\r\n        \"value\": \"Balanced\"\r\n    },\r\n    \"TaxAmount\": {\r\n        \"value\": 120.0\r\n    },\r\n    \"Terms\": {\r\n        \"value\": \"30D\"\r\n    },\r\n    \"Type\": {\r\n        \"value\": \"Bill\"\r\n    },\r\n    \"Vendor\": {\r\n        \"value\": \"AAVENDOR\"\r\n    },\r\n    \"VendorRef\": {\r\n        \"value\": \"test-API22\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"test-API\"\r\n    },\r\n    \"IsTaxValid\": {\r\n        \"value\": true\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"Account\": {\r\n                \"value\": \"50000\"\r\n            },\r\n            \"Branch\": {\r\n                \"value\": \"PRODWHOLE\"\r\n            },\r\n            \"CostCode\": {\r\n                \"value\": null\r\n            },\r\n            \"ExtendedCost\": {\r\n                \"value\": 1000.0\r\n            },\r\n            \"Project\": {\r\n                \"value\": \"X\"\r\n            },\r\n            \"Subaccount\": {\r\n                \"value\": \"000000\"\r\n            },\r\n            \"TaxCategory\": {\r\n                \"value\": \"TEST\"\r\n            }\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"TaxID\": {\r\n                \"value\": \"CAGST\"\r\n            },\r\n            \"TaxableAmount\": {\r\n                \"value\": 1000.0\r\n            },\r\n            \"TaxAmount\": {\r\n                \"value\": 150.0\r\n            },\r\n            \"ExpenseAmount\": {\r\n                \"value\": 0.0\r\n            }\r\n        },\r\n        {\r\n            \"TaxID\": {\r\n                \"value\": \"PST\"\r\n            },\r\n            \"TaxableAmount\": {\r\n                \"value\": 1000.0\r\n            },\r\n            \"TaxAmount\": {\r\n                \"value\": 150.0\r\n            },\r\n            \"custom\": {\r\n                \"Taxes\": {\r\n                    \"CuryExpenseAmt\": {\r\n                        \"type\": \"CustomDecimalField\",\r\n                        \"value\": 70\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"custom\": {\r\n        \"CurrentDocument\": {\r\n            \"TaxZoneID\": {\r\n                \"type\": \"CustomStringField\",\r\n                \"value\": \"CANADABC\"\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Bill?$expand=Details,TaxDetails",
							"host": [
								"{{EndpointURL}}Bill"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,TaxDetails"
								}
							]
						},
						"description": "This example shows how to create an AP bill for which system taxes are overridden. This process is described in [Create a Bill with Tax Parameters Overridden](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b5e17d52-f113-438c-a203-c5ce85f7f52f)."
					},
					"response": []
				},
				{
					"name": "Approve a Bill",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = \"johnson\";\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"if (pm.response.code === 204) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for the bill should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"            });\r",
									"            pm.test(\"Bill status is Balanced\", function (){\r",
									"                const jsonResponse = response.json();\r",
									"                pm.expect(jsonResponse.Status.value).to.be.eql('Balanced');\r",
									"            });\r",
									"            //Sign out and set the next request\r",
									"            var url = pm.collectionVariables.get('InstanceURL');\r",
									"            pm.acuFunc.singOutFunction(pm, url);\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": {\r\n        \"Type\": {\"value\": \"Bill\"},\r\n        \"ReferenceNbr\": {\"value\": \"000159\"}\r\n    },\r\n    \"parameters\": {}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Bill/Approve",
							"host": [
								"{{EndpointURL}}Bill"
							],
							"path": [
								"Approve"
							]
						},
						"description": "This example shows how to approve a bill in Acumatica ERP. This process is described in [Approve a Bill](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d2501c01-f3da-45be-b056-2143b31f98e0)."
					},
					"response": []
				},
				{
					"name": "Release Retainage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {   \r",
									"                var url = pm.collectionVariables.get('EndpointURL') + \"Bill?$expand=Details&$filter=cf.String(f='Document.OrigRefNbr') eq '000072'\";\r",
									"                var requestBill = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestBill,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the bill should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Bill detail description is correct\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse[0].Details[0].TransactionDescription.value).to.be.eql('Retainage for Bill 000072');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Business Accounts\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PX-CbApiBusinessDate",
								"value": "2025/04/01",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": {\r\n        \"Type\": {\r\n            \"value\": \"Bill\"\r\n        },\r\n        \"ReferenceNbr\": {\r\n            \"value\": \"000072\"\r\n        }\r\n    },\r\n    \"parameters\": {\r\n        \"Date\": {\r\n            \"value\": \"2025-03-01T11:00:00.000Z\"\r\n        },\r\n        \"PostPeriod\": {\r\n            \"value\": \"032025\"\r\n        },\r\n        \"AmtToRelease\": {\r\n            \"value\": 500\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Bill/ReleaseRetainage",
							"host": [
								"{{EndpointURL}}Bill"
							],
							"path": [
								"ReleaseRetainage"
							]
						},
						"description": "This example shows how to create a retainage document in Acumatica ERP. This process is described in [Release Retainage](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=08780d31-7ad7-4f6f-9c54-2e12a9533116)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Bill](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=74a426d9-d4f7-4005-ba45-d88817d62dff) entity."
		},
		{
			"name": "BillOfMaterial",
			"item": [
				{
					"name": "Create a Bill of Material",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Operations are not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Operations).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Retrieve the Bills of Material');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"BOMID\": { \r\n        \"value\": \"<NEW>\" \r\n    },\r\n    \"Description\": {\r\n\t    \"value\": \"Test BOM\"\r\n\t},\r\n    \"InventoryID\": {\r\n        \"value\": \"CABINET\"\r\n    },\r\n    \"Operations\": [\r\n        {\r\n            \"OperationNbr\": {\r\n                \"value\": \"0010\"\r\n            },\r\n            \"WorkCenter\": {\r\n                \"value\": \"WC10\"\r\n            },\r\n            \"Material\" :[\r\n                {\r\n                    \"InventoryID\": {\r\n                        \"value\": \"HINGE\"\r\n                    },\r\n                    \"UOM\":{\r\n                        \"value\": \"EA\"\r\n                    }  \r\n                }\r\n            ]\r\n        }\r\n\t\t],\r\n    \"Revision\": {\r\n        \"value\": \"A\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{ManufacturingEndpointURL}}BillOfMaterial?$expand=Operations,Operations/Material,Operations/Overheads,Operations/Steps,Operations/Tools",
							"host": [
								"{{ManufacturingEndpointURL}}BillOfMaterial"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Operations,Operations/Material,Operations/Overheads,Operations/Steps,Operations/Tools"
								}
							]
						},
						"description": "This example shows how to create a bill of material. This process is described in [Create a Bill of Material](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3132bec8-c1e3-48f9-b6c3-80662fe9fe27)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Bills of Material",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"First BOMID is BOM000001\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].BOMID.value).to.be.eql('BOM000001');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Details of Bill of Material's Operations\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ManufacturingEndpointURL}}BillOfMaterial?$expand=Operations",
							"host": [
								"{{ManufacturingEndpointURL}}BillOfMaterial"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Operations"
								}
							]
						},
						"description": "This example shows how to retrieve all available bills of material. This process is described in [Retrieve the Bills of Material](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=58a2b2bd-88fa-4d26-a55a-62fd8f3309c1)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Details of Bill of Material's Operations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Material is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Operations[0].Material).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ManufacturingEndpointURL}}BillOfMaterial/BOM000001/A?$expand=Operations,Operations/Material,Operations/Overheads,Operations/Steps,Operations/Tools",
							"host": [
								"{{ManufacturingEndpointURL}}BillOfMaterial"
							],
							"path": [
								"BOM000001",
								"A"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Operations,Operations/Material,Operations/Overheads,Operations/Steps,Operations/Tools"
								}
							]
						},
						"description": "This example shows how to retrieve the details of the operations of a bill of material. This process is described in [Retrieve the Details of Bill of Material's Operations](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=981a9fe7-82b9-4667-ae8f-b0ed72fe2ed6)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [BillOfMaterial](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a3d65aae-9011-4159-878b-a35872532083) entity."
		},
		{
			"name": "BusinessAccount",
			"item": [
				{
					"name": "Retrieve the List of Business Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One business account is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"The first account's activity list is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].Activities).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Companies' Structure\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}BusinessAccount?$expand=Activities,Campaigns,Cases,Orders&$filter=BusinessAccountID eq 'ABAKERY'",
							"host": [
								"{{EndpointURL}}BusinessAccount"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Activities,Campaigns,Cases,Orders"
								},
								{
									"key": "$filter",
									"value": "BusinessAccountID eq 'ABAKERY'"
								}
							]
						},
						"description": "This example shows the retrieval of business accounts, which is described in [Retrieve the List of Business Accounts](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=010531ea-dce0-4442-bce5-809e4e52afa8)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [BusinessAccount](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e097d567-249a-4ec2-8891-016578a15f50) entity."
		},
		{
			"name": "Case",
			"item": [
				{
					"name": "Create a Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Contact is Beverly Hail\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ContactDisplayName.value).to.eql('Beverly Hail');\r",
									"    pm.collectionVariables.set('caseEntityID', jsonResponse.id);\r",
									"});\r",
									"//Sign out and the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Activity that is Linked to a Case\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ClassID\": {\"value\": \"JREPAIR\"},\r\n    \"BusinessAccount\": {\"value\": \"ABAKERY\"},\r\n    \"ContactID\": {\"value\":  \"100211\"},\r\n    \"Subject\": {\"value\":  \"Some Subject\"},\r\n    \"custom\": {\r\n        \"Case\": {\r\n            \"AttributeMODEL\": {\r\n                \"value\": \"JUICER15:Commercial juicer with a prod rate of 1.5 l per min\"\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Case?$expand=Attributes",
							"host": [
								"{{EndpointURL}}Case"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes"
								}
							]
						},
						"description": "This example shows the creation of a case, which is described in [Create a Case](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9a35cac-f845-4d4b-a47d-107ec2cd4322)."
					},
					"response": []
				},
				{
					"name": "Link a Case to Another Case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Related case is 000004\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.RelatedCases[0].CaseID.value).to.eql('000004');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Customer\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"ClassID\": {\r\n        \"value\": \"SERVCONS\"\r\n    },\r\n    \"BusinessAccount\": {\r\n        \"value\": \"GOODFOOD\"\r\n    },\r\n    \"Subject\": {\r\n        \"value\": \"Billing plan\"\r\n    },\r\n    \"RelatedCases\": [\r\n        {\r\n            \"CaseID\": {\r\n                \"value\": \"000004\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Case?$expand=RelatedCases",
							"host": [
								"{{EndpointURL}}Case"
							],
							"query": [
								{
									"key": "$expand",
									"value": "RelatedCases"
								}
							]
						},
						"description": "This example shows how to create a case that relates to another case in Acumatica ERP. This process is described in [Linking of a Case to Another Case](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=adea49ab-d958-4dd2-95aa-70e078564b07)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Case](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3cb9b4b1-8c78-4b16-a026-c55a11953e00) entity."
		},
		{
			"name": "CompaniesStructure",
			"item": [
				{
					"name": "Retrieve the Companies' Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Six branches are returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Results).to.has.lengthOf(6);\r",
									"});\r",
									"pm.test(\"One of the branches is HEADOFFICE\", function (){\r",
									"    pm.expect(pm.response.text()).to.include(\"HEADOFFICE\");\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Contact with Attributes\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{EndpointURL}}CompaniesStructure?$expand=Results",
							"host": [
								"{{EndpointURL}}CompaniesStructure"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Results"
								}
							]
						},
						"description": "This example shows how to retrieve available companies and branches. This process is described in [Retrieve the Companies' Structure](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d8d9b99f-019c-410c-a49e-d90a5b813809)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [CompaniesStructure](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6e0f2b89-a66f-403a-af79-a87d2b31c735) entity."
		},
		{
			"name": "ConfigurationEntry",
			"item": [
				{
					"name": "Retrieve a Configuration Entry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{ManufacturingEndpointURL}}ConfigurationEntry/AMC000001?$expand=Attributes,Features/Options",
							"host": [
								"{{ManufacturingEndpointURL}}ConfigurationEntry"
							],
							"path": [
								"AMC000001"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes,Features/Options"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Configuration Entry",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ProdOrderNbr\": {\"value\": \"AM000022\"},\r\n    \"ProdOrderType\": {\"value\": \"RO\"},\r\n    \"ConfigResultsID\": {\"value\": \"5\"},\r\n    \"ConfigurationID\": {\"value\": \"AMC000003\"},\r\n    \"Features\": [\r\n        {\r\n            \"FeatureLineNbr\": { \"value\": 1 },\r\n            \"ConfigResultsID\": { \"value\": \"5\" },\r\n            \"Options\": [\r\n                {\r\n                    \"FeatureLineNbr\": { \"value\": 1 },\r\n                    \"OptionLineNbr\": { \"value\": 1 },\r\n                    \"ConfigResultsID\": { \"value\": \"5\" },\r\n                    \"Included\": { \"value\": true }\r\n                },\r\n                {\r\n                    \"FeatureLineNbr\": { \"value\": 1 },\r\n                    \"OptionLineNbr\": { \"value\": 2 },\r\n                    \"ConfigResultsID\": { \"value\": \"5\" },\r\n                    \"Included\": { \"value\": true }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{ManufacturingEndpointURL}}ConfigurationEntry?$expand=Attributes,Features/Options",
							"host": [
								"{{ManufacturingEndpointURL}}ConfigurationEntry"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes,Features/Options"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [CompaniesStructure](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6e0f2b89-a66f-403a-af79-a87d2b31c735) entity."
		},
		{
			"name": "Contact",
			"item": [
				{
					"name": "Create a Contact with Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Contact with Edds last name is created\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.LastName.value).to.be.eql('Edds');\r",
									"});\r",
									"pm.test(\"Contact is active\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.be.eql('Active');\r",
									"});\r",
									"pm.test(\"Attribute is added\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Attributes[0].AttributeDescription.value).to.be.eql('Interested in');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"Deactivate a Contact\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": {\"value\": \"Brent\"},\r\n    \"LastName\": {\"value\": \"Edds\"},\r\n    \"Email\": {\"value\": \"brent.edds.test27@avantehs.com\"},\r\n    \"ContactClass\": {\"value\": \"ENDCUST\"},\r\n    \"Attributes\": [\r\n        {\r\n            \"AttributeID\": {\"value\": \"INTEREST\"},\r\n            \"Value\": {\"value\": \"Jam,Maint\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Contact?$expand=Attributes",
							"host": [
								"{{EndpointURL}}Contact"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes"
								}
							]
						},
						"description": "This example shows the creation of a contact with attributes, which is described in [Create a Contact with Attributes](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=832734ca-ea2a-4ff8-8a91-c263927c8286)."
					},
					"response": []
				},
				{
					"name": "Deactivate a Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Contact with Edds last name is retrieved\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.LastName.value).to.be.eql('Edds');\r",
									"});\r",
									"pm.test(\"Contact is inactive\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.be.eql('Inactive');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Contacts\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"Active\": {\"value\": false}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Contact?$filter=FirstName eq 'Brent' and LastName eq 'Edds'",
							"host": [
								"{{EndpointURL}}Contact"
							],
							"query": [
								{
									"key": "$filter",
									"value": "FirstName eq 'Brent' and LastName eq 'Edds'"
								}
							]
						},
						"description": "This example shows the activation of a contact, which is described in [Activate a Contact](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=77e8d81b-5495-44d4-82fb-e9f2e3887aea)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One contact is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Contact with Kelly last name is retrieved\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].LastName.value).to.be.eql('Kelly');\r",
									"});\r",
									"pm.test(\"Opportunities list is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].Opportunities).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Link Multiple Contacts to a Customer\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Contact?$expand=Activities,Address,Attributes,Campaigns,Cases,Notifications,Opportunities&$filter=ContactID eq 100073",
							"host": [
								"{{EndpointURL}}Contact"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Activities,Address,Attributes,Campaigns,Cases,Notifications,Opportunities"
								},
								{
									"key": "$filter",
									"value": "ContactID eq 100073"
								}
							]
						},
						"description": "This example shows the retrieval of contacts, which is described in [Retrieve the List of Contacts](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cc4852c3-abc9-4619-a355-183647c94948)."
					},
					"response": []
				},
				{
					"name": "Link Multiple Contacts to a Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var url = pm.collectionVariables.get('EndpointURL') + 'Customer/ABAKERY?$expand=Contacts';\r",
									"var requestABAKERY = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestABAKERY,  (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  }\r",
									"\r",
									"  pm.test('Response for ABAKERY should be OK to process', () => {\r",
									"    pm.expect(error).to.equal(null);\r",
									"    pm.expect(response).to.have.property('code', 200);\r",
									"    pm.expect(response).to.have.property('status', 'OK');\r",
									"  });\r",
									"  pm.test(\"The customer has at least two contacts\", function (){\r",
									"    const jsonResponse = response.json();\r",
									"    pm.expect(jsonResponse.Contacts).length.gte(2);\r",
									"  });\r",
									"  //Sign out and set the next request\r",
									"  var url = pm.collectionVariables.get('InstanceURL');\r",
									"  pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Create an Employee\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"BusinessAccount\": {\"value\": \"ABAKERY\"},\r\n    \"ContactID\": {\"value\": 100196},\r\n    \"LastName\": {\"value\": \"Doe\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Contact",
							"host": [
								"{{EndpointURL}}Contact"
							]
						},
						"description": "This example shows how to links multiple contacts to a customer, which is described in [Link Multiple Contacts to a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=47f2d6fe-b9b8-44ca-961f-37b4935bad24)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Contact](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=90132644-1859-4e07-b35b-ad0575c2c6fc) entity."
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Create a Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Customer ID is CUST01\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerID.value).to.eql('CUST01');\r",
									"    pm.collectionVariables.set('customerEntityID', jsonResponse.id);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Activity that is Linked to a Customer\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"Cust01\"},\r\n    \"CustomerName\": {\"value\": \"Custumer 01\"},\r\n    \"CustomerClass\": {\"value\": \"DEFAULT\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Customer",
							"host": [
								"{{EndpointURL}}Customer"
							]
						},
						"description": "This example shows the creation of a customer, which is described in [Create a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=51059f24-01f8-4d78-a17b-cc255fe8b8e0)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Customers with Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The number of customers is more than 1\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).length.to.be.greaterThan(1);\r",
									"});\r",
									"pm.test(\"The first customer main contact and address are not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].MainContact).to.be.not.empty;\r",
									"    pm.expect(jsonResponse[0].MainContact.Address).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Update a Customer\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Customer?$expand=MainContact,MainContact/Address",
							"host": [
								"{{EndpointURL}}Customer"
							],
							"query": [
								{
									"key": "$expand",
									"value": "MainContact,MainContact/Address"
								}
							]
						},
						"description": "This example shows the retrieval of all customers along with their contacts in Acumatica ERP, which is described in [Retrieve the List of Customers with Contacts](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=322dc7ce-3e84-437c-a934-375f37ed2f70)."
					},
					"response": []
				},
				{
					"name": "Update a Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Customer ID is C000000003\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerID.value).to.eql('C000000003');\r",
									"});\r",
									"pm.test(\"Customer class is INTL\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerClass.value).to.eql('INTL');\r",
									"});\r",
									"pm.test(\"Billing contact email is green@jevy-comp.con\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.BillingContact.Email.value).to.eql('green@jevy-comp.con');\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the Shipping Contact of a Customer\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerClass\": {\"value\": \"INTL\"},\r\n    \"BillingContactOverride\": {\"value\": true},\r\n    \"BillingContact\": {\r\n        \"Email\": {\"value\": \"green@jevy-comp.con\"},\r\n        \"Attention\": {\"value\": \"Mr. Jack Green\"},\r\n        \"JobTitle\": {\"value\": \"\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Customer?$expand=MainContact,BillingContact&$filter=MainContact/Email eq 'info@jevy-comp.con'&$select=CustomerID,CustomerClass,BillingContact/Email",
							"host": [
								"{{EndpointURL}}Customer"
							],
							"query": [
								{
									"key": "$expand",
									"value": "MainContact,BillingContact"
								},
								{
									"key": "$filter",
									"value": "MainContact/Email eq 'info@jevy-comp.con'"
								},
								{
									"key": "$select",
									"value": "CustomerID,CustomerClass,BillingContact/Email"
								}
							]
						},
						"description": "This example shows the update of a customer in Acumatica ERP, which is described in [Update a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=87dd5c39-0a0b-4086-8aa5-791657073bbd)."
					},
					"response": []
				},
				{
					"name": "Enable Currency Overriding and Rate Overriding for a Customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Currency rate type is SPOT\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CustomerID.value).to.eql('FRUITICO');\r",
									"    pm.expect(jsonResponse.CurrencyRateType.value).to.eql('SPOT');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"EnableCurrencyOverride\": {\"value\": true},\r\n    \"EnableRateOverride\": {\"value\": true},\r\n    \"CurrencyRateType\": {\"value\": \"SPOT\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Customer",
							"host": [
								"{{EndpointURL}}Customer"
							]
						},
						"description": "This example shows how to enable the currency overriding and the rate overriding for a customer. This process is described in [Enable the Currency Overriding and the Rate Overriding for a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=34a79e12-3f6d-45a6-936b-654d806af487)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Shipping Contact of a Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One customers is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"The shipping contact of the ABAKERY customer is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].CustomerID.value).to.eql('ABAKERY');\r",
									"    pm.expect(jsonResponse[0].ShippingContact).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Lead\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Customer?$expand=ShippingContact&$filter=CustomerID eq 'ABAKERY'",
							"host": [
								"{{EndpointURL}}Customer"
							],
							"query": [
								{
									"key": "$expand",
									"value": "ShippingContact"
								},
								{
									"key": "$filter",
									"value": "CustomerID eq 'ABAKERY'"
								}
							]
						},
						"description": "This example shows the retrieval of the shipping contact of a customer, which is described in [Retrieve the Shipping Contact of a Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a4876ea2-da7f-460f-bb7a-d57a6da4bbb7)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Customer](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e3e19ea8-4b3e-40e6-954b-1d51e1426062) entity."
		},
		{
			"name": "CustomerPaymentMethod",
			"item": [
				{
					"name": "Register a Customer Credit Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"PaymentMethod\":{\"value\":\"VISA\"},\r\n\t\"CustomerID\":{\"value\":\"C000000003\"},\r\n\t\"CustomerProfileID\":{\"value\":\"37100472\"},\r\n\t\"CashAccount\":{\"value\":\"102050MYST\"},\r\n\t\"Details\":[\r\n\t\t{\r\n\t\t\t\"Name\":{\"value\":\"Payment Profile ID\"},\r\n\t\t\t\"Value\":{\"value\":\"911169122\"}\r\n\t\t}\r\n\t]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}/CustomerPaymentMethod?$select=CardAccountNbr,Details/Name&$expand=Details",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"CustomerPaymentMethod"
							],
							"query": [
								{
									"key": "$select",
									"value": "CardAccountNbr,Details/Name"
								},
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a customer payment method, which is described in [Register a Customer Credit Card](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5ffc6e6e-8068-47d9-99dd-6bca51a25be6)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [CustomerPaymentMethod](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=864a77ed-785d-43aa-b431-51a0e55bfeac) entity."
		},
		{
			"name": "DeductionBenefitCode",
			"item": [
				{
					"name": "Create a Deduction Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The deduction code is TST\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.DeductionBenefitCodeID.value).to.be.eql('TST');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"DeductionBenefitCodeID\": {\r\n        \"value\": \"TST\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test deduction\"\r\n    },\r\n    \"ContributionType\": {\r\n        \"value\": \"DED\"\r\n    },\r\n    \"Active\": {\r\n        \"value\": false\r\n    },\r\n    \"AssociatedWith\": {\r\n        \"value\": \"Employee Settings\"\r\n    },\r\n    \"EmployeeDeduction\": {\r\n        \"CalculationMethod\": {\r\n            \"value\": \"GRS\"\r\n        },\r\n        \"Percent\": {\r\n            \"value\": 20\r\n        },\r\n        \"ApplicableEarnings\": {\r\n            \"value\": \"TOT\"\r\n        }\r\n    },\r\n    \"GLAccounts\": {\r\n        \"DeductionLiabilityAccount\": {\r\n            \"value\": \"20000\"\r\n        },\r\n        \"DeductionLiabilitySub\": {\r\n            \"value\": \"000000\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}DeductionBenefitCode",
							"host": [
								"{{EndpointURL}}DeductionBenefitCode"
							]
						},
						"description": "This example shows how to create a deduction code in Acumatica ERP. This process is described in [Create a Deduction Code](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a459adbc-562f-421e-8d41-1445e9942452)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [DeductionBenefitCode](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=4fba7b94-1844-43ae-a257-ac10ee1cfaf4) entity."
		},
		{
			"name": "EarningTypeCode",
			"item": [
				{
					"name": "Create an Earning Type Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The earning type code is TST\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EarningTypeCodeID.value).to.be.eql('TST');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EarningTypeCodeID\": {\r\n        \"value\": \"TST\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test Code\"\r\n    },\r\n    \"Category\": {\r\n        \"value\": \"Wage\"\r\n    },\r\n    \"AccrueTimeOff\": {\r\n        \"value\": true\r\n    },\r\n    \"Active\": {\r\n        \"value\": false\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EarningTypeCode",
							"host": [
								"{{EndpointURL}}EarningTypeCode"
							]
						},
						"description": "This example shows how to create an earning type code in Acumatica ERP. This process is described in [Create an Earning Type Code](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0c0678c5-7b1e-4dcf-b1fd-64823e5ac96d)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [EarningTypeCode](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3638c1cf-1210-46f0-b488-7a9b2afdb4a9) entity."
		},
		{
			"name": "Employee",
			"item": [
				{
					"name": "Create an Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Employee is Jane Doe\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmployeeName.value).to.be.eql('Jane Doe');\r",
									"});\r",
									"pm.test(\"Employee is active\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.be.eql('Active');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Information about an Employee\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Status\": {\"value\": \"Active\"},\r\n    \"FinancialSettings\":\r\n    {\r\n        \"APAccount\": {\"value\": \"20000\"},\r\n        \"APSubaccount\": {\"value\": \"000000\"},\r\n        \"CashAccount\": {\"value\": \"10200WH\"},\r\n        \"ExpenseAccount\": {\"value\": \"63000\"},\r\n        \"ExpenseSubaccount\": {\"value\": \"000000\"},\r\n        \"PaymentMethod\": {\"value\": \"CHECK\"},\r\n        \"PrepaymentAccount\": {\"value\": \"20000\"},\r\n        \"PrepaymentSubaccount\": {\"value\": \"000000\"},\r\n        \"SalesAccount\": {\"value\": \"40000\"},\r\n        \"SalesSubaccount\": {\"value\": \"000000\"},\r\n        \"TaxZone\": {},\r\n        \"Terms\": {\"value\": \"7D\"}\r\n    },\r\n    \"EmployeeSettings\":\r\n    {\r\n        \"BranchID\": {\"value\": \"HEADOFFICE\"},\r\n        \"Calendar\": {\"value\": \"MAIN\"},\r\n        \"CurrencyID\": {\"value\": \"USD\"},\r\n        \"CurrencyRateTypeID\": {\"value\": \"SPOT\"},\r\n        \"DepartmentID\": {\"value\": \"AFTERSALES\"},\r\n        \"EmployeeClass\": {\"value\": \"EMPHOURLY\"}\r\n    },\r\n    \"ContactInfo\":\r\n    {\r\n        \"FirstName\": {\"value\": \"Jane\"},\r\n        \"LastName\": {\"value\": \"Doe\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Employee",
							"host": [
								"{{EndpointURL}}Employee"
							]
						},
						"description": "This example shows the creation of an employee, which is described in [Create an Employee](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f04ea88a-8edf-471b-a7d5-6effb76a5cb6)."
					},
					"response": []
				},
				{
					"name": "Retrieve Information about an Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One employee is retrieved\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).has.lengthOf(1);\r",
									"  });\r",
									"pm.test(\"Employee is Pam Brawner\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].EmployeeName.value).to.be.eql('Pam Brawner');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Inventory Issue\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Employee?$expand=ContactInfo,Delegates,EmployeeSettings,EmploymentHistory,FinancialSettings&$filter=EmployeeID eq 'EP00000001'",
							"host": [
								"{{EndpointURL}}Employee"
							],
							"query": [
								{
									"key": "$expand",
									"value": "ContactInfo,Delegates,EmployeeSettings,EmploymentHistory,FinancialSettings"
								},
								{
									"key": "$filter",
									"value": "EmployeeID eq 'EP00000001'"
								}
							]
						},
						"description": "This example shows the retrieval of an employee, which is described in [Retrieve Information about an Employee](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=24c23ce4-e0cf-4737-aa18-8286b562b81a)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Employee](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8745ada9-27bf-4d22-a6e9-aed11c5ca424) entity."
		},
		{
			"name": "EmployeePayrollClass",
			"item": [
				{
					"name": "Create an Employee Payroll Class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Requests to configure taxes\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'WorkLocation';\r",
									"    var requestPutWorkLocation = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"WorkLocationID\": { \"value\": \"BELLEVUE\"},\"Active\": {\"value\": true}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutWorkLocation,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for updating work location should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The employee payroll class is TESTCLASS\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmployeePayrollClassID.value).to.be.eql('TESTCLASS');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EmployeePayrollClassID\": {\r\n        \"value\": \"TESTCLASS\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test CLASS\"\r\n    },\r\n    \"PayrollDefaults\": {\r\n        \"EmployeeType\": {\r\n            \"value\": \"Hourly\"\r\n        },\r\n        \"PayGroup\": {\r\n            \"value\": \"WEEKLY\"\r\n        },\r\n        \"DefaultCalendar\": {\r\n            \"value\": \"MAIN\"\r\n        },\r\n        \"WorkingWeeksPerYear\": {\r\n            \"value\": 51\r\n        },\r\n        \"OverrideHoursPerYearforCertProject\": {\r\n            \"value\": true\r\n        },\r\n        \"CertifiedProjectHoursperYear\": {\r\n            \"value\": 2050\r\n        },\r\n        \"ExemptFromOvertimeRules\": {\r\n            \"value\": true\r\n        },\r\n        \"NetPayMinimum\": {\r\n            \"value\": 150\r\n        },\r\n        \"MaximumPercentofNetPayforallGarnishments\": {\r\n            \"value\": 45\r\n        },\r\n        \"DefaultWCCCode\": {\r\n            \"value\": \"5606\"\r\n        },\r\n        \"DefaultUnion\": {\r\n            \"value\": \"NYS\"\r\n        },\r\n        \"ExemptFromCertifiedReporting\": {\r\n            \"value\": false\r\n        },\r\n        \"WorkLocations\": [\r\n            {\r\n                \"LocationID\": {\r\n                    \"value\": \"BELLEVUE\"\r\n                },\r\n                \"DefaultWorkLocation\": {\r\n                    \"value\": true\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"PTODefaults\": [\r\n        {\r\n            \"PTOBank\": {\r\n                \"value\": \"PTO\"\r\n            },\r\n            \"EffectiveDate\": {\r\n                \"value\": \"01/01/2016\"\r\n            },\r\n            \"Active\": {\r\n                \"value\": \"true\"\r\n            },\r\n            \"AccrualPercent\": {\r\n                \"value\": \"7\"\r\n            },\r\n            \"AccrualLimit\": {\r\n                \"value\": \"150\"\r\n            },\r\n            \"CarryoverType\": {\r\n                \"value\": \"Partial\"\r\n            },\r\n            \"CarryoverAmount\": {\r\n                \"value\": \"200\"\r\n            },\r\n            \"FrontLoadingAmount\": {\r\n                \"value\": \"24\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmployeePayrollClass?$expand=PayrollDefaults/WorkLocations,PTODefaults",
							"host": [
								"{{EndpointURL}}EmployeePayrollClass"
							],
							"query": [
								{
									"key": "$expand",
									"value": "PayrollDefaults/WorkLocations,PTODefaults"
								}
							]
						},
						"description": "This example shows how to create an employee payroll class in Acumatica ERP. This process is described in [Create an Employee Payroll Class](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=93a0b773-b2c8-49f1-9860-609031c53575)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [EmployeePayrollClass](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=84476290-401a-4aec-a8eb-3ac771cbf196) entity."
		},
		{
			"name": "EmployeePayrollSettings",
			"item": [
				{
					"name": "Update the Employee Payroll Settings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The employee is EP00000004\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmployeeID.value).to.be.eql('EP00000004');\r",
									"});\r",
									"pm.test(\"The class ID is HOURLY\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ClassID.value).to.be.eql('HOURLY');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EmployeeID\": {\r\n        \"value\": \"EP00000004\"\r\n    },\r\n    \"ClassID\": {\r\n        \"value\": \"HOURLY\"\r\n    },\r\n    \"PaymentMethod\": {\r\n        \"value\": \"CHECK\"\r\n    },\r\n    \"CashAccount\": {\r\n        \"value\": \"10200WH\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmployeePayrollSettings",
							"host": [
								"{{EndpointURL}}EmployeePayrollSettings"
							]
						},
						"description": "This example shows how to update the employee payroll settings in Acumatica ERP. This process is described in [Update the Employee Payroll Settings](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a1fb0dc3-24a3-4cf8-90af-eff672998715)."
					},
					"response": []
				},
				{
					"name": "Update the Work Locations (Employee Payroll Settings)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Requests to configure taxes\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'WorkLocation';\r",
									"    var requestPutWorkLocation = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"WorkLocationID\": { \"value\": \"BELLEVUE\"},\"Active\": {\"value\": true}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutWorkLocation,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for updating work location should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The employee is EP00000004\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmployeeID.value).to.be.eql('EP00000004');\r",
									"});\r",
									"pm.test(\"The work location is BELLEVUE\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.WorkLocations.WorkLocationDetails[0].LocationID.value).to.be.eql('BELLEVUE');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EmployeeID\": {\r\n        \"value\": \"EP00000004\"\r\n    },\r\n    \"WorkLocations\": {\r\n        \"WorkLocationClassDefaults\": {\r\n            \"value\": false\r\n        },\r\n        \"WorkLocationDetails\": [\r\n            {\r\n                \"LocationID\": {\r\n                    \"value\": \"BELLEVUE\"\r\n                },\r\n                \"DefaultWorkLocation\": {\r\n                    \"value\": false\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmployeePayrollSettings?$expand=WorkLocations/WorkLocationDetails",
							"host": [
								"{{EndpointURL}}EmployeePayrollSettings"
							],
							"query": [
								{
									"key": "$expand",
									"value": "WorkLocations/WorkLocationDetails"
								}
							]
						},
						"description": "This example shows how to update work locations in employee payroll settings in Acumatica ERP. This process is described in [Employee Payroll Settings: Update Work Locations](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=32141c4a-d36c-439d-92ce-b25258455786)."
					},
					"response": []
				},
				{
					"name": "Specify Employment Records",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The employee is EP00000004\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmployeeID.value).to.be.eql('EP00000004');\r",
									"});\r",
									"pm.test(\"The position is ACCOUNTANT\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.EmploymentRecords[0].Position.value).to.be.eql('ACCOUNTANT');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"EmployeeID\": {\r\n        \"value\": \"EP00000004\"\r\n    },\r\n    \"EmploymentRecords\": [\r\n        {\r\n            \"StartDate\": {\r\n                \"value\": \"2021-05-13\"\r\n            },\r\n            \"StartReason\": {\r\n                \"value\": \"REH\"\r\n            },\r\n            \"Active\": {\r\n                \"value\": true\r\n            },\r\n            \"Position\": {\r\n                \"value\": \"ACCOUNTANT\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}EmployeePayrollSettings?$expand=EmploymentRecords",
							"host": [
								"{{EndpointURL}}EmployeePayrollSettings"
							],
							"query": [
								{
									"key": "$expand",
									"value": "EmploymentRecords"
								}
							]
						},
						"description": "This example shows how to specify employment records in employee payroll settings in Acumatica ERP. This process is described in [Employee Payroll Settings: Specify Employment Records](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=34bc77c0-44c3-4097-bd23-a191685dbd28)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [EmployeePayrollSettings](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ff4a9e96-9969-4a48-b244-1f5f7f408e1a) entity."
		},
		{
			"name": "InventoryIssue",
			"item": [
				{
					"name": "Create an Inventory Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Inventory issue contains one detail line\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).has.lengthOf(1);\r",
									"  });\r",
									"pm.test(\"Inventory issue total amount is 4.15\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TotalAmount.value).to.be.eql(4.15);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Release an Inventory Issue\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Date\": {\r\n        \"value\": \"2024-12-02T00:00:00+03:00\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Descr\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\r\n                \"value\": \"HEADOFFICE\"\r\n            },\r\n            \"ExtCost\": {\r\n                \"value\": 0\r\n            },\r\n            \"ExtPrice\": {\r\n                \"value\": 4.15\r\n            },\r\n            \"InventoryID\": {\r\n                \"value\": \"APJAM08\"\r\n            },\r\n            \"LineNumber\": {\r\n                \"value\": 1\r\n            },\r\n            \"Location\": {\r\n                \"value\": \"MAIN\"\r\n            },\r\n            \"Project\": {\r\n                \"value\": \"X\"\r\n            },\r\n            \"Qty\": {\r\n                \"value\": 1\r\n            },\r\n            \"TranType\": {\r\n                \"value\": \"Issue\"\r\n            },\r\n            \"UnitPrice\": {\r\n                \"value\": 0\r\n            },\r\n            \"UOM\": {\r\n                \"value\": \"PIECE\"\r\n            },\r\n            \"Warehouse\": {\r\n                \"value\": \"RETAIL\"\r\n            }\r\n        }\r\n    ],\r\n    \"PostPeriod\": {\r\n        \"value\": \"122024\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}InventoryIssue?$expand=Details",
							"host": [
								"{{EndpointURL}}InventoryIssue"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create an inventory issue in Acumatica ERP. This process is described in [Create an Inventory Issue](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3caa1091-6324-4b0d-ba5c-56b7ac480665)."
					},
					"response": []
				},
				{
					"name": "Release an Inventory Issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'InventoryIssue/000055?$select=Status';\r",
									"                var request000055 = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(request000055,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for 000055 should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Inventory issue should be released\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Released');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}\r",
									"pm.execution.setNextRequest(\"Retrieve the Available Quantity of an Inventory Item\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": {\r\n        \"ReferenceNbr\": {\r\n            \"value\": \"000055\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}InventoryIssue/ReleaseInventoryIssue",
							"host": [
								"{{EndpointURL}}InventoryIssue"
							],
							"path": [
								"ReleaseInventoryIssue"
							]
						},
						"description": "This example shows how to release an inventory issue in Acumatica ERP. This process is described in [Release an Inventory Issue](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9446583c-62d6-4760-a382-fb5f36aac52b)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [InventoryIssue](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=7a52c24d-f289-442b-919d-89652c581685) entity."
		},
		{
			"name": "InventoryQuantityAvailable",
			"item": [
				{
					"name": "Retrieve the Available Quantity of an Inventory Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Results).to.has.lengthOf(1);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Get an Inventory Summary\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InventoryID\": {\r\n        \"value\": \"APJAM08\"\r\n    },\r\n    \"LastModifiedDateTime\": {\r\n        \"value\": \"6/7/2024\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}InventoryQuantityAvailable?$expand=Results",
							"host": [
								"{{EndpointURL}}InventoryQuantityAvailable"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Results"
								}
							]
						},
						"description": "This example shows how to retrieve the available quantity of an inventory item from Acumatica ERP. This process is described in [Retrieve the Available Quantity of an Inventory Item](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3cb31af0-05a3-4d3c-8fda-bfffd65d61a2)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [InventoryQuantityAvailable](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5ad3515b-f975-4846-9599-a8d418bda1c7) entity."
		},
		{
			"name": "InventorySummaryInquiry",
			"item": [
				{
					"name": "Get an Inventory Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"More than one detail is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Results).length.to.be.greaterThan(1);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Invoice with Tax Parameters Overridden\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"InventoryID\": { \"value\": \"APJAM08\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}InventorySummaryInquiry?$expand=Results",
							"host": [
								"{{EndpointURL}}InventorySummaryInquiry"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Results"
								}
							]
						},
						"description": "This example shows the retrieval of the summary information of an inventory item, which is described in [Get an Inventory Summary](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f4e509c6-34cf-4c22-a149-34a25b5a2e30)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [InventorySummaryInquiry](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=41906c8c-d0b2-4c44-9495-58d15dbf10ae) entity."
		},
		{
			"name": "Invoice",
			"item": [
				{
					"name": "Create an Invoice with Tax Parameters Overridden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"//Requests to configure taxes\r",
									"var callback = (pm, error, response) => {\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'Tax/PST';\r",
									"    var requestGetTax = {\r",
									"        url: url1,\r",
									"        method: 'GET',\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestGetTax,  (error, response) => {\r",
									"        if(response.code != 200) {\r",
									"\r",
									"            var url2 = pm.collectionVariables.get('EndpointURL') + 'Tax';\r",
									"            var requestAddTax = {\r",
									"                url: url2,\r",
									"                method: 'PUT',\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: '{\"TaxID\": { \"value\": \"PST\"},\"Description\": {\"value\": \"Tax ID for testing\"},\"TaxType\": {\"value\": \"VAT\"},\"IncludeInVATTaxableTotal\": {\"value\": true},\"ExcludeFromTaxonTaxCalculation\": {\"value\": true},\"TaxAgency\": {\"value\": \"CANADABC\"},\"TaxSchedule\": [{\"TaxRate\": {\"value\": 5}, \"ReportingGroup\": {\"value\": \"Input Tax (purchases)\"}},{\"TaxRate\": {\"value\": 5}, \"ReportingGroup\": {\"value\": \"Output Tax (sales)\"}}]}'},\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json'\r",
									"                }\r",
									"            };\r",
									"\r",
									"            pm.sendRequest(requestAddTax,  (error, response) => {\r",
									"                if (error) {\r",
									"                    console.log(error);\r",
									"                }\r",
									"\r",
									"                pm.test('Response for adding tax should be OK to process', () => {\r",
									"                    pm.expect(error).to.equal(null);\r",
									"                    pm.expect(response).to.have.property('code', 200);\r",
									"                    pm.expect(response).to.have.property('status', 'OK');\r",
									"                });\r",
									"\r",
									"                var url3 = pm.collectionVariables.get('EndpointURL') + 'TaxCategory';\r",
									"                var requestAddTaxCategory = {\r",
									"                    url: url3,\r",
									"                    method: 'PUT',\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: '{\"TaxCategoryID\": { \"value\": \"TEST\"},\"Description\": {\"value\": \"Tax category for test\"},\"Details\": [{\"TaxID\": {\"value\": \"CAGST\"}},{\"TaxID\": {\"value\": \"PST\"}}]}'},\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"\r",
									"                pm.sendRequest(requestAddTaxCategory,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for adding tax category should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"\r",
									"                    var url4 = pm.collectionVariables.get('EndpointURL') + 'TaxZone';\r",
									"                    var requestAddTaxZone = {\r",
									"                        url: url4,\r",
									"                        method: 'PUT',\r",
									"                        body: {\r",
									"                            mode: 'raw',\r",
									"                            raw: '{\"TaxZoneID\": { \"value\": \"CANADABC\"},\"ApplicableTaxes\": [{\"TaxID\": {\"value\": \"PST\"}}]}'},\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json'\r",
									"                        }\r",
									"                    };\r",
									"\r",
									"                    pm.sendRequest(requestAddTaxZone,  (error, response) => {\r",
									"                        if (error) {\r",
									"                            console.log(error);\r",
									"                        }\r",
									"\r",
									"                        pm.test('Response for adding tax zone should be OK to process', () => {\r",
									"                            pm.expect(error).to.equal(null);\r",
									"                            pm.expect(response).to.have.property('code', 200);\r",
									"                            pm.expect(response).to.have.property('status', 'OK');\r",
									"                        });                \r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Tax amount for both details is 150\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxDetails[0].TaxAmount.value).to.eql(150);\r",
									"    pm.expect(jsonResponse.TaxDetails[1].TaxAmount.value).to.eql(150);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Invoices\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CreatedDateTime\": {\r\n        \"value\": \"1900-01-01T03:00:00+03:00\"\r\n    },\r\n    \"Customer\": {\r\n        \"value\": \"AACUSTOMER\"\r\n    },\r\n    \"Date\": {\r\n        \"value\": \"2022-01-23T00:00:00+03:00\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Invoice with Taxes\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"Account\": {\r\n                \"value\": \"40000\"\r\n            },\r\n            \"Amount\": {\r\n                \"value\": 1000\r\n            },\r\n            \"Branch\": {\r\n                \"value\": \"PRODWHOLE\"\r\n            },\r\n            \"ExtendedPrice\": {\r\n                \"value\": 1000\r\n            },\r\n            \"InventoryID\": {\r\n                \"value\": \"CONSULTING\"\r\n            },\r\n            \"LineNbr\": {\r\n                \"value\": 1\r\n            },\r\n            \"ProjectTask\": {},\r\n            \"Qty\": {\r\n                \"value\": 10\r\n            },\r\n            \"TransactionDescription\": {\r\n                \"value\": \"Project Consulting\"\r\n            },\r\n            \"UnitPrice\": {\r\n                \"value\": 100\r\n            },\r\n            \"UOM\": {\r\n                \"value\": \"HOUR\"\r\n            }\r\n        }\r\n    ],\r\n    \"Hold\": {\r\n        \"value\": false\r\n    },\r\n    \"IsTaxValid\": {\r\n        \"value\": true\r\n    },\r\n    \"LocationID\": {\r\n        \"value\": \"MAIN\"\r\n    },\r\n    \"PostPeriod\": {\r\n        \"value\": \"012022\"\r\n    },\r\n    \"TaxDetails\": [\r\n        {\r\n            \"TaxID\": {\r\n                \"value\": \"CAGST\"\r\n            },\r\n            \"TaxableAmount\": {\r\n                \"value\": 1000.0\r\n            },\r\n            \"TaxAmount\": {\r\n                \"value\": 150.0\r\n            },\r\n            \"ExpenseAmount\": {\r\n                \"value\": 0.0\r\n            }\r\n        },\r\n        {\r\n            \"TaxID\": {\r\n                \"value\": \"PST\"\r\n            },\r\n            \"TaxableAmount\": {\r\n                \"value\": 1000.0\r\n            },\r\n            \"TaxAmount\": {\r\n                \"value\": 150.0\r\n            }\r\n        }\r\n    ],\r\n    \"Type\": {\r\n        \"value\": \"Invoice\"\r\n    },\r\n    \"custom\": {\r\n        \"CurrentDocument\": {\r\n            \"TaxZoneID\": {\r\n                \"type\": \"CustomStringField\",\r\n                \"value\": \"CANADABC\"\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Invoice?$expand=Details,TaxDetails",
							"host": [
								"{{EndpointURL}}Invoice"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,TaxDetails"
								}
							]
						},
						"description": "This example shows how to create an invoice for which system taxes are overridden. This process is described in [Create an Invoice with Tax Parameters Overridden](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=606da1ba-0c1d-4d52-b15f-7a41ef0e2171)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"More than one invoice is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).length.to.be.greaterThan(1);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Release an AR Invoice\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Invoice",
							"host": [
								"{{EndpointURL}}Invoice"
							]
						},
						"description": "This example shows the retrieval of invoices, which is described in [Retrieve the List of Invoices](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8e0137c4-9828-4d02-91b4-b4599d2d61c8)."
					},
					"response": []
				},
				{
					"name": "Release an AR Invoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Request to create invoice\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'Invoice';\r",
									"    var requestAddInvoice = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"Customer\": { \"value\": \"ABAKERY\"},\"Hold\": {\"value\": false}, \"Details\": [{\"InventoryID\": {\"value\":\"CONSULT\"}, \"ExtPrice\": {\"value\": 10}}]}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestAddInvoice,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for creating invoice should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('invoiceEntityID', jsonResponse.id);\r",
									"        });\r",
									"\r",
									"\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {   \r",
									"                var url = pm.collectionVariables.get('EndpointURL') + \"Invoice/\" + pm.collectionVariables.get('invoiceEntityID');\r",
									"                var requestInvoice = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestInvoice,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the invoice should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Status is Closed\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Closed');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Specify the Tax Zone for an Invoice\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\":{\r\n        \"id\": \"{{invoiceEntityID}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Invoice/ReleaseInvoice",
							"host": [
								"{{EndpointURL}}Invoice"
							],
							"path": [
								"ReleaseInvoice"
							]
						},
						"description": "This example shows how to release an AR invoice, which is described in [Release an AR Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=532d3d10-00d3-479e-81a5-f11698357f7c)."
					},
					"response": []
				},
				{
					"name": "Specify the Tax Zone for an Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Reference number is 000097\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ReferenceNbr.value).to.be.eql('000097');\r",
									"});\r",
									"pm.test(\"Tax zone is AVALARA\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.custom.CurrentDocument.TaxZoneID.value).to.be.eql('AVALARA');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Override Values in the Item Warehouse Details\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"8deb6bf9-2072-eb11-b83e-00155d408001\",\r\n    \"custom\": {\r\n        \"CurrentDocument\": {\r\n            \"TaxZoneID\": {\r\n                 \"value\": \"AVALARA\"\r\n            },\r\n             \"DontPrint\": {\r\n                \"value\": false\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Invoice?$custom=CurrentDocument.TaxZoneID,CurrentDocument.DontPrint",
							"host": [
								"{{EndpointURL}}Invoice"
							],
							"query": [
								{
									"key": "$custom",
									"value": "CurrentDocument.TaxZoneID,CurrentDocument.DontPrint"
								}
							]
						},
						"description": "This example shows how to specify the tax zone for an invoice, which is described in [Specify the Tax Zone for an Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9b07e681-16ea-4b08-8145-7daee04ef10b)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=38bf9b1a-8424-46f3-b30c-164502a8ffd9) entity."
		},
		{
			"name": "ItemWarehouse",
			"item": [
				{
					"name": "Override Values in the Item Warehouse Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Inventory ID is 000097\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.InventoryID.value).to.be.eql('APPLES');\r",
									"});\r",
									"pm.test(\"MaxQty is 2222\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.MaxQty.value).to.be.eql(2222);\r",
									"});\r",
									"pm.test(\"ServiceLevel is not 87\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ServiceLevel.value).to.be.not.eql(87);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a General Ledger Transaction with a Project Code That Does Not Produce a Project Transaction\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InventoryID\": { \"value\": \"APPLES\" },\r\n    \"OverrideMaxQty\": { \"value\": true },\r\n    \"MaxQty\": { \"value\": 2222 },\r\n    \"OverridePrice\": { \"value\": false },\r\n    \"MSRP\": { \"value\": 600 },\r\n    \"OverrideReorderPoint\": { \"value\": true },\r\n    \"ReorderPoint\": { \"value\": 14 },\r\n    \"ReplenishmentClass\": { \"value\": \"PURCHASE\" },\r\n    \"OverrideReplenishmentSettings\": { \"value\": false },\r\n    \"ReplenishmentMethod\": { \"value\": \"Min./Max.\" },\r\n    \"ReplenishmentSource\": { \"value\": \"Purchase\" },\r\n    \"Seasonality\": { \"value\": \"NONE\" },\r\n    \"OverrideSafetyStock\": { \"value\": true },\r\n    \"SafetyStock\": { \"value\": 244 },\r\n    \"PreferredLocation\": { \"value\": \"MAIN\" },\r\n    \"PreferredVendor\": { \"value\": \"ALLFRUITS\" },\r\n    \"ServiceLevel\": { \"value\": 87 },\r\n    \"WarehouseID\": { \"value\": \"RETAIL\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}ItemWarehouse",
							"host": [
								"{{EndpointURL}}ItemWarehouse"
							]
						},
						"description": "This example shows how to specify item warehouse details, mark particular fields as overridden, and set new values of these fields. This process is described in [Override Values in the Item Warehouse Details](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0c8c324e-bc48-4390-a0dc-806cb830a537)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [ItemWarehouse](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=485c4f6c-2da8-4e5c-81ec-eff76709ad3a) entity."
		},
		{
			"name": "JournalTransaction",
			"item": [
				{
					"name": "Create a General Ledger Transaction with a Project Code That Does Not Produce a Project Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Transaction has IsNonPM set to true\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].IsNonPM.value).to.be.eql(true);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Ledgers\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Module\" : {\"value\" : \"GL\"},\r\n  \"TransactionDate\" : {\"value\" : \"2024-02-15T00:00:00\"},\r\n  \"Description\" : {\"value\" : \"Transaction description\"},\r\n  \"BranchID\" : {\"value\" : \"HEADOFFICE\"},\r\n  \"Details\" : [\r\n  \t{\r\n  \t\t\"BranchID\" : {\"value\" : \"HEADOFFICE\"},\r\n  \t\t\"Account\" : {\"value\" : \"10200\"},\r\n  \t\t\"CostCode\" : {\"value\" : \"00000\"},\r\n  \t\t\"IsNonPM\" : {\"value\" : true}\r\n  \t}\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}JournalTransaction?$expand=Details",
							"host": [
								"{{EndpointURL}}JournalTransaction"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create GL transactions with project codes that do not produce project transactions. This process is described in [Create a General Ledger Transaction with a Project Code That Does Not Produce a Project Transaction](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=682496e3-6498-4855-b33d-a40dbf501b82)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [JournalTransaction](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8a4db230-e31f-411b-b84e-661caf1f0315) entity."
		},
		{
			"name": "Lead",
			"item": [
				{
					"name": "Create a Lead",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Email is brent.edds.test27@avantehs.com\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Email.value).to.eql('brent.edds.test27@avantehs.com');\r",
									"    pm.collectionVariables.set('leadEntityID', jsonResponse.id);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create an Activity that is Linked to a Lead\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": {\"value\": \"Brent\"},\r\n    \"LastName\": {\"value\": \"Edds\"},\r\n    \"Email\": {\"value\": \"brent.edds.test27@avantehs.com\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Lead",
							"host": [
								"{{EndpointURL}}Lead"
							]
						},
						"description": "This example shows the creation of a lead, which is described in [Create a Lead](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0a505774-5a07-4d95-8d80-6945b8d94a13)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Lead](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2eb731db-7a6b-4667-a80d-de1fd9906b3b) entity."
		},
		{
			"name": "Ledger",
			"item": [
				{
					"name": "Retrieve the List of Ledgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Three ledgers are returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(5);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Sales Order from an Opportunity\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Ledger?$expand=Branches,Companies&$select=LedgerID,Branches/BranchID,Branches/BranchName,Branches/CompanyName,Companies/Company,Companies/CompanyName",
							"host": [
								"{{EndpointURL}}Ledger"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Branches,Companies"
								},
								{
									"key": "$select",
									"value": "LedgerID,Branches/BranchID,Branches/BranchName,Branches/CompanyName,Companies/Company,Companies/CompanyName"
								}
							]
						},
						"description": "This example shows how to retrieve available ledgers, companies, and branches. This process is described in [Retrieve the List of Ledgers](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=33888e9b-c23c-4c05-a87a-231dcf211f59)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Ledger](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ecb27adb-53da-42c9-ab22-e6ffa614a64b) entity."
		},
		{
			"name": "Opportunity",
			"item": [
				{
					"name": "Create a Sales Order from an Opportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'Opportunity/000011?$expand=Relations';\r",
									"                var request000009 = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(request000009,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for 000009 should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Opportunity relations include sales order\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Relations[1].Type.value).to.be.eql('Sales Order');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}\r",
									"pm.execution.setNextRequest(\"Create a Business Account from an Opportunity\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\":{\r\n        \"OpportunityID\": {\"value\":\"000011\"}\r\n    },\r\n    \"parameters\":{\r\n        \"OrdereType\": {\"value\":\"SO\"},\r\n        \"RecalculatePricesAndDiscounts\": {\"value\":\"false\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Opportunity/CreateOpportunitySalesOrder",
							"host": [
								"{{EndpointURL}}Opportunity"
							],
							"path": [
								"CreateOpportunitySalesOrder"
							]
						},
						"description": "This example shows the creation of a sales order from an opportunity, which is described in [Create a Sales Order from an Opportunity](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8954f3cf-bc54-4c27-b04b-713530ad1089)."
					},
					"response": []
				},
				{
					"name": "Create a Business Account from an Opportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'Opportunity/000002?$expand=Relations';\r",
									"                var request000002 = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(request000002,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for 000002 should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Opportunity relations include business account\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Relations[0].Type.value).to.be.eql('Business Account');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}\r",
									"pm.execution.setNextRequest(\"Create a Payment for an Invoice and a Sales Order\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": { \"OpportunityID\": {\"value\":\"000002\"},\r\n        \"custom\": {\r\n            \"AccountInfo\": {\r\n                \"BAccountID\": {  \"value\": \"11111\" },\r\n                \"AccountName\": { \"value\": \"asdqwe\" }\r\n            },\r\n            \"ContactInfo\": {\r\n                \"LastName\": { \"value\": \"test\" }\r\n            }\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Opportunity/CreateAccountFromOpportunity",
							"host": [
								"{{EndpointURL}}Opportunity"
							],
							"path": [
								"CreateAccountFromOpportunity"
							]
						},
						"description": "This example shows the creation of a business account from an opportunity, which is described in [Create a Business Account from an Opportunity](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f14b98ae-4557-4308-8a23-8f72fb6eadbb)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Opportunity](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=7a071ddc-e212-407a-9978-24bc65ba2068) entity."
		},
		{
			"name": "PayGroup",
			"item": [
				{
					"name": "Create a Pay Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The pay group is NEWGROUP\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PayGroupID.value).to.be.eql('NEWGROUP');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PayGroupID\": {\r\n        \"value\": \"NewGroup\"\r\n    },\r\n    \"PayGroupName\": {\r\n        \"value\": \"New Group Name\"\r\n    },\r\n    \"BenefitExpenseAccount\": {\r\n        \"value\": \"69600\"\r\n    },\r\n    \"BenefitExpenseSub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"BenefitLiabilityAccount\": {\r\n        \"value\": \"20300\"\r\n    },\r\n    \"BenefitLiabilitySub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"DeductionLiabilityAccount\": {\r\n        \"value\": \"20300\"\r\n    },\r\n    \"DeductionLiabilitySub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"EarningsAccount\": {\r\n        \"value\": \"51000\"\r\n    },\r\n    \"EarningsSub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"TaxExpenseAccount\": {\r\n        \"value\": \"65100\"\r\n    },\r\n    \"TaxExpenseSub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"TaxLiabilityAccount\": {\r\n        \"value\": \"20300\"\r\n    },\r\n    \"TaxLiabilitySub\": {\r\n        \"value\": \"000000\"\r\n    },\r\n    \"IsDefault\": {\r\n        \"value\": false\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PayGroup",
							"host": [
								"{{EndpointURL}}PayGroup"
							]
						},
						"description": "This example shows how to create a pay group in Acumatica ERP. This process is described in [Create a Pay Group](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1ca369ae-12e2-47d8-8a57-9245efe649a8)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PayGroup](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=431cd4f5-884d-415d-ab63-7ec8adb23df9) entity."
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Create a Payment for an Invoice and a Sales Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Payment is applied to one document and one order\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrdersToApply).to.has.lengthOf(1);\r",
									"    pm.expect(jsonResponse.DocumentsToApply).to.has.lengthOf(1);\r",
									"    pm.collectionVariables.set(\"paymentRefNbr\", jsonResponse.ReferenceNbr.value);\r",
									"    pm.collectionVariables.set(\"appliedToDocuments\", jsonResponse.AppliedToDocuments.value);\r",
									"    pm.collectionVariables.set(\"appliedToOrders\", jsonResponse.AppliedToOrders.value);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Payment with a Credit Card Transaction Imported from Another System\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Branch\": {\r\n        \"value\": \"HEADOFFICE\"\r\n    },\r\n    \"CashAccount\": {\r\n        \"value\": \"10200WH\"\r\n    },\r\n    \"CurrencyID\": {\r\n        \"value\": \"USD\"\r\n    },\r\n    \"CustomerID\": {\r\n        \"value\": \"GOODFOOD\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Creating Payment for different doc types\"\r\n    },\r\n    \"PaymentMethod\": {\r\n        \"value\": \"CHECK\"\r\n    },\r\n    \"Type\": {\r\n        \"value\": \"Payment\"\r\n    },\r\n    \"DocumentsToApply\": [\r\n        {\r\n            \"DocType\": {\r\n                \"value\": \"INV\"\r\n            },\r\n            \"DocLineNbr\": {\r\n                \"value\": \"1\"\r\n            },\r\n            \"ReferenceNbr\": {\r\n                \"value\": \"000002\"\r\n            }\r\n        }\r\n    ],\r\n    \"OrdersToApply\": [\r\n        {\r\n            \"OrderType\": {\r\n                \"value\": \"SO\"\r\n            },\r\n            \"OrderNbr\": {\r\n                \"value\": \"000036\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Payment?$expand=OrdersToApply,DocumentsToApply",
							"host": [
								"{{EndpointURL}}Payment"
							],
							"query": [
								{
									"key": "$expand",
									"value": "OrdersToApply,DocumentsToApply"
								}
							]
						},
						"description": "This example shows the creation of an AR payment for different document types, which is described in [Create an AR Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b25e527e-8187-485e-9c8e-93aa5c2e8931)."
					},
					"response": []
				},
				{
					"name": "Create a Payment with a Credit Card Transaction Imported from Another System",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Payment is Pending Processing\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.eql('Pending Processing');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Release a Payment\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\r\n        \"value\": \"HMBAKERY\"\r\n    },\r\n    \"PaymentAmount\": {\r\n        \"value\": 123.0000\r\n    },\r\n    \"PaymentMethod\": {\r\n        \"value\": \"VISA\"\r\n    },\r\n    \"CreditCardTransactionInfo\": [\r\n        {\r\n            \"TranNbr\": {\r\n                \"value\": \"112224543839510314532923\"\r\n            },\r\n            \"TranType\": {\r\n                \"value\": \"Authorize Only\"\r\n            },\r\n            \"NeedsValidation\": {\r\n                \"value\": true\r\n            },\r\n            \"AuthNbr\": {\r\n                \"value\": \"ebd4c8\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Payment",
							"host": [
								"{{EndpointURL}}Payment"
							]
						},
						"description": "This example shows the creation of an AR payment that includes a credit card transaction imported from another system. This example is described in [Create a Payment with a Credit Card Transaction Imported from Another System](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5c4e9c95-bb85-4bba-80ee-75f4d8dfe777)."
					},
					"response": []
				},
				{
					"name": "Release a Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Data for sign-in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Request to remove hold\r",
									"var callback = (pm, error, response) => {\r",
									"    var paymentRefNbr = pm.collectionVariables.get('paymentRefNbr');\r",
									"    var paymentAmount = pm.collectionVariables.get('appliedToDocuments')+pm.collectionVariables.get('appliedToOrders');\r",
									"    var url = pm.collectionVariables.get('EndpointURL') + 'Payment';\r",
									"    var requestRemoveHold = {\r",
									"        url: url,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"Type\": {\"value\": \"Payment\"},\"ReferenceNbr\": {\"value\": \"'+ paymentRefNbr +'\"},\"Hold\" : {\"value\" : \"false\"},\"PaymentAmount\": {\"value\": ' + paymentAmount + '}}'\r",
									"        },\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(requestRemoveHold,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for removing from hold should be OK to proceed', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"    });\r",
									"}\r",
									"//Sign in and remove hold\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'Payment/Payment/' + pm.collectionVariables.get('paymentRefNbr');\r",
									"                var requestPayment = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestPayment,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the payment should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Payment status is Open\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Open');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Retrieve Payments One by One\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\": {\r\n        \"Type\": {\r\n            \"value\": \"Payment\"\r\n        },\r\n        \"ReferenceNbr\": {\r\n            \"value\": \"{{paymentRefNbr}}\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Payment/Release",
							"host": [
								"{{EndpointURL}}Payment"
							],
							"path": [
								"Release"
							]
						},
						"description": "This example shows how to release an accounts receivable payment in Acumatica ERP. This process is described in [Release an AR Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=709b0321-c44a-4226-a627-3507a93ce1d8).\n\nThis request requires the value of paymentRefNbr, appliedToDocuments, and appliedToOrders collection variables. You can set them manually or by executing the Create an Accouts Receivable Payment for an Invoice and a Sales Order request."
					},
					"response": []
				},
				{
					"name": "Retrieve Payments One by One",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Payment is 000001\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ReferenceNbr.value).to.eql('000001');\r",
									"});\r",
									"pm.test(\"Document type is Payment\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Type.value).to.eql('Payment');\r",
									"});\r",
									"pm.test(\"Payment is applied to invoice\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ApplicationHistory[0].DisplayDocType.value).to.eql('Invoice');\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Payment Method\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Payment/Payment/000001?$select=ReferenceNbr,Type,Status,ApplicationDate,ApplicationHistory/DisplayDocType,ApplicationHistory/DisplayRefNbr&$expand=ApplicationHistory",
							"host": [
								"{{EndpointURL}}Payment"
							],
							"path": [
								"Payment",
								"000001"
							],
							"query": [
								{
									"key": "$select",
									"value": "ReferenceNbr,Type,Status,ApplicationDate,ApplicationHistory/DisplayDocType,ApplicationHistory/DisplayRefNbr"
								},
								{
									"key": "$expand",
									"value": "ApplicationHistory"
								}
							]
						},
						"description": "This example shows the retrieval of a payment, which is described in [Retrieve Payments One by One](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=02e2a96b-d432-463c-9131-303065dbfa4e)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1e75e399-acaa-4490-aa99-7005906d4ff2) entity."
		},
		{
			"name": "PaymentMethod",
			"item": [
				{
					"name": "Create a Payment Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"TST payment method has Cash/Check means of payment\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethodID.value).to.eql('TST');\r",
									"    pm.expect(jsonResponse.MeansOfPayment.value).to.eql('Cash/Check');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Project from a Project Template\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Active\": {\r\n        \"value\": false\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test Method\"\r\n    },\r\n    \"IntegratedProcessing\": {\r\n        \"value\": false\r\n    },\r\n    \"MeansOfPayment\": {\r\n        \"value\": \"Cash/Check\"\r\n    },\r\n    \"PaymentMethodID\": {\r\n        \"value\": \"TST\"\r\n    },\r\n    \"SettingsForPR\": {\r\n        \"PRProcessing\": {\r\n            \"value\": \"Print Checks\"\r\n        },\r\n        \"Report\": {\r\n            \"value\": \"PR641010\"\r\n        }\r\n    },\r\n    \"UseInPR\": {\r\n        \"value\": true\r\n    },\r\n    \"UseInAP\": {\r\n        \"value\": false\r\n    },\r\n    \"UseInAR\": {\r\n        \"value\": false\r\n    },\r\n    \"RequireRemittanceInformationforCashAccount\": {\r\n        \"value\": false\r\n    },\r\n    \"AllowedCashAccounts\": [\r\n        {\r\n            \"CashAccount\": {\r\n                \"value\": \"10200WH\"\r\n            },\r\n            \"Description\": {\r\n                \"value\": \"Company Checking Account\"\r\n            },\r\n            \"Branch\": {\r\n                \"value\": \"HEADOFFICE\"\r\n            },\r\n            \"APDefault\": {\r\n                \"value\": false\r\n            },\r\n            \"APLastRefNbr\": {\r\n                \"value\": \"3202\"\r\n            },\r\n            \"APSuggestNextNbr\": {\r\n                \"value\": false\r\n            },\r\n            \"UseInPR\": {\r\n                \"value\": true\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PaymentMethod?$expand=AllowedCashAccounts",
							"host": [
								"{{EndpointURL}}PaymentMethod"
							],
							"query": [
								{
									"key": "$expand",
									"value": "AllowedCashAccounts"
								}
							]
						},
						"description": "This example shows how to create a payment method in Acumatica ERP. This process is described in [Create a Payment Method](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=22e4e4f7-d3c6-4c81-8110-0d0120cb6a6c)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PaymentMethod](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=edc24a65-2e04-4af4-84ab-73ad4cfe1bce) entity."
		},
		{
			"name": "PayPeriod",
			"item": [
				{
					"name": "Create a Pay Period Schedule",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Number of periods is 53\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.NumberofPeriods.value).to.be.eql(53);\r",
									"});\r",
									"pm.test(\"Year is 2025\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Year.value).to.be.eql(\"2025\");\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"NumberOfPeriods\": {\r\n        \"value\": 53\r\n    },\r\n    \"Override\": {\r\n        \"value\": true\r\n    },\r\n    \"PayGroup\": {\r\n        \"value\": \"WEEKLY\"\r\n    },\r\n    \"Year\": {\r\n        \"value\": \"2025\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PayPeriod",
							"host": [
								"{{EndpointURL}}PayPeriod"
							]
						},
						"description": "This example shows how to create a pay period schedule in Acumatica ERP. This process is described in [Create a Pay Period Schedule](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cee93670-b4be-4b21-a473-beeb180a20c9)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PayPeriod](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9d154c76-804d-48f3-8f33-965aff6dd544) entity."
		},
		{
			"name": "PayrollBatch",
			"item": [
				{
					"name": "Create a Payroll Batch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status is Balanced\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.be.eql('Balanced');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PayrollType\": {\r\n        \"value\": \"Regular\"\r\n    },\r\n    \"PayGroup\": {\r\n        \"value\": \"MONTHLY\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test New Batch\"\r\n    },\r\n    \"Hold\": {\r\n        \"value\": false\r\n    },\r\n    \"PayPeriod\": {\r\n        \"value\": \"032024\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PayrollBatch",
							"host": [
								"{{EndpointURL}}PayrollBatch"
							]
						},
						"description": "This example shows how to create a payroll batch in Acumatica ERP. This process is described in [Create a Payroll Batch](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5ef0cd45-418d-496b-8d03-7f2d2a67a52b)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PayrollBatch](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2fcc83d9-fc0e-48c7-a79f-7d1f4557d9a0) entity."
		},
		{
			"name": "PayrollUnionLocal",
			"item": [
				{
					"name": "Create a Union",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Union is TST\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PayrollUnionLocalID.value).to.be.eql('TST');\r",
									"});\r",
									"pm.test(\"Vendor is ALLFRUITS\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Vendor.value).to.be.eql('ALLFRUITS');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Active\": { \"value\": false },\r\n    \"Description\": { \"value\": \"Test Union\" },\r\n    \"PayrollUnionLocalID\": { \"value\": \"TST\" },\r\n    \"Vendor\": { \"value\": \"ALLFRUITS\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PayrollUnionLocal",
							"host": [
								"{{EndpointURL}}PayrollUnionLocal"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PayrollUnionLocal](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=fe563246-6d9e-4ac0-a852-54be3a30e4dc) entity."
		},
		{
			"name": "PayrollWCCCode",
			"item": [
				{
					"name": "Create a Workers' Compensation Class Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"WCC codes include 2222\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.WCCCodes[0].WCCCode.value).to.be.eql('2222');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Country\": {\r\n        \"value\": \"US\"\r\n    },\r\n    \"WCCCodes\": [\r\n        {\r\n            \"Active\": {\r\n                \"value\": true\r\n            },\r\n            \"Description\": {\r\n                \"value\": \"Test Code\"\r\n            },\r\n            \"WCCCode\": {\r\n                \"value\": \"2222\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PayrollWCCCode?$expand=WCCCodes",
							"host": [
								"{{EndpointURL}}PayrollWCCCode"
							],
							"query": [
								{
									"key": "$expand",
									"value": "WCCCodes"
								}
							]
						},
						"description": "This example shows how to create a workers' compensation class code in Acumatica ERP. This process is described in [Create a Workers' Compensation Class Code](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=4c696993-711f-49a1-940a-08bb50bcb23e)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PayrollWCCCode](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1766e674-3a84-4167-ad23-e931d7f65967) entity."
		},
		{
			"name": "ProFormaInvoice",
			"item": [
				{
					"name": "Send a Pro Forma Invoice by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {   \r",
									"                //Sign out and set the next request\r",
									"                var url = pm.collectionVariables.get('InstanceURL');\r",
									"                pm.acuFunc.singOutFunction(pm, url);\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Create a Purchase Order\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entity\" : {\r\n    \"RefNbr\": {\r\n        \"value\": \"{{proFormaReferenceNbr}}\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}ProFormaInvoice/EmailProFormaInvoice",
							"host": [
								"{{EndpointURL}}ProFormaInvoice"
							],
							"path": [
								"EmailProFormaInvoice"
							]
						},
						"description": "This example shows how to send a pro forma invoice by email. This process is described in [Send a Pro Forma Invoice by Email](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a6a0d09a-e695-4b25-a639-2cea565613f8).\n\nThis request requires the value of proFormaReferenceNbr collection variable. You can set it manually or by executing the Retrieve the List of Pro Forma Invoices of a Project request."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [ProFormaInvoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=7993b042-713d-4d4e-806c-5840aa2d7dea) entity."
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "Create a Project from a Project Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Project has TESTPR3 ID\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ProjectID.value).to.eql('TESTPR3');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Make a Project Active\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"ProjectTemplateID\" : {\"value\" : \"PROGRESS\"},\r\n    \"Customer\" : {\"value\" : \"COFFEESHOP\"},\r\n    \"BillingAndAllocationSettings\" :\r\n    {\r\n        \"BillingRule\" : {\"value\" : \"PROGRESS\"},\r\n        \"BillingPeriod\" : {\"value\" : \"Month\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Project",
							"host": [
								"{{EndpointURL}}Project"
							]
						},
						"description": "This example shows how to create from a project template. This process is described in [Create a Project from a Project Template](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=13f5f5b8-33d1-40d9-83db-3f3dfc5dcba9)."
					},
					"response": []
				},
				{
					"name": "Make a Project Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Project is active\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.eql('Active');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Specify the Next Billing Date for a Project\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"Hold\" : {\"value\" : false}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Project",
							"host": [
								"{{EndpointURL}}Project"
							]
						},
						"description": "This example shows how to make a project active. This process is described in [Make a Project Active](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0d018113-1e33-49f7-be22-8e40db5475c3)."
					},
					"response": []
				},
				{
					"name": "Specify the Next Billing Date for a Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Next billing date is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.BillingAndAllocationSettings.NextBillingDate.value).to.be.not.empty;\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve a Project Task\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"BillingAndAllocationSettings\" : \r\n    {\r\n        \"NextBillingDate\" : {\"value\" : \"2024-06-15\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Project?$expand=BillingAndAllocationSettings",
							"host": [
								"{{EndpointURL}}Project"
							],
							"query": [
								{
									"key": "$expand",
									"value": "BillingAndAllocationSettings"
								}
							]
						},
						"description": "This example shows how to specify the next billing date for a project. This process is described in [Specify the Next Billing Date for a Project](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9b596bda-520a-4baf-ab93-687a67f3879e)."
					},
					"response": []
				},
				{
					"name": "Invoke Project Billing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {   \r",
									"                //Sign out and set the next request\r",
									"                var url = pm.collectionVariables.get('InstanceURL');\r",
									"                pm.acuFunc.singOutFunction(pm, url);\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Pro Forma Invoices of a Project\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entity\" : {\r\n    \"ProjectID\": {\r\n        \"value\": \"TESTPR3\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Project/RunProjectBilling",
							"host": [
								"{{EndpointURL}}Project"
							],
							"path": [
								"RunProjectBilling"
							]
						},
						"description": "This example shows the invocation of project billing. This process is described in [Invoke Project Billing](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=13f5f5b8-33d1-40d9-83db-3f3dfc5dcba9)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Pro Forma Invoices of a Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One pro forma invoice is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Invoices).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Invoice total is 725\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Invoices[0].InvoiceTotal.value).to.eql(725);\r",
									"    pm.collectionVariables.set('proFormaReferenceNbr', jsonResponse.Invoices[0].ProFormaReferenceNbr.value);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Send a Pro Forma Invoice by Email\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Project/TESTPR3?$expand=Invoices",
							"host": [
								"{{EndpointURL}}Project"
							],
							"path": [
								"TESTPR3"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Invoices"
								}
							]
						},
						"description": "This example shows how to retrieve the list of pro forma invoices of a project. This process is described in [Retrieve the List of Pro Forma Invoices of a Project](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b635dd5f-c787-49a2-a603-38a3371cbda5)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Project](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1d003380-9c62-4542-b01c-66db8bb09b71) entity."
		},
		{
			"name": "ProjectBudget",
			"item": [
				{
					"name": "Specify the Progress of a Project Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"PHASE1 project task is in planning\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Completed.value).to.eql(25);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Invoke Project Billing\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ProjectTaskID\" : {\"value\" : \"PHASE1\"},\r\n  \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n  \"InventoryID\" : {\"value\" : \"<N/A>\"},\r\n  \"Completed\" : {\"value\" : 25},\r\n  \"PendingInvoiceAmount\" : {\"value\" : 725}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}ProjectBudget",
							"host": [
								"{{EndpointURL}}ProjectBudget"
							]
						},
						"description": "This example shows how to specify the progress of a project task, which is described in [Specify the Progress of a Project Task](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=06e096c8-c83d-4392-9a90-b83a9acfbc8e)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [ProjectBudget](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8d596065-ab9a-49d7-b765-a02b30f8d9bd) entity."
		},
		{
			"name": "ProjectTask",
			"item": [
				{
					"name": "Retrieve a Project Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One project task is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"PHASE1 project task is in planning\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].ProjectTaskID.value).to.eql('PHASE1');\r",
									"    pm.expect(jsonResponse[0].Status.value).to.eql('In Planning');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Activate a Project Task\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}ProjectTask?$filter=ProjectID%20eq%20'TESTPR3'%20and%20ProjectTaskID%20eq%20'PHASE1'",
							"host": [
								"{{EndpointURL}}ProjectTask"
							],
							"query": [
								{
									"key": "$filter",
									"value": "ProjectID%20eq%20'TESTPR3'%20and%20ProjectTaskID%20eq%20'PHASE1'"
								}
							]
						},
						"description": "This example shows the retrieval of a project task, which is described in [Retrieve a Project Task](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=aa71a74c-9b66-4514-a96d-8530964af759)."
					},
					"response": []
				},
				{
					"name": "Activate a Project Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"    var url = pm.collectionVariables.get('EndpointURL') + \"ProjectTask?$filter=ProjectID%20eq%20'TESTPR3'%20and%20ProjectTaskID%20eq%20'PHASE1'\";\r",
									"var requestTask = {\r",
									"    url: url,\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(requestTask,  (error, response) => {\r",
									"  if (error) {\r",
									"    console.log(error);\r",
									"  }\r",
									"\r",
									"  pm.test('Response for task retrieval should be OK to proceed', () => {\r",
									"    pm.expect(error).to.equal(null);\r",
									"    pm.expect(response).to.have.property('code', 200);\r",
									"    pm.expect(response).to.have.property('status', 'OK');\r",
									"  });\r",
									"  pm.test(\"Project task status is Active\", function (){\r",
									"    const jsonResponse = response.json();\r",
									"    pm.expect(jsonResponse[0].Status.value).to.be.eql('Active');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Specify the Progress of a Project Task\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\":\r\n    {\r\n        \"ProjectID\": {\r\n            \"value\": \"TESTPR3\"\r\n        },\r\n        \"ProjectTaskID\": {\r\n            \"value\": \"PHASE1\"\r\n        }\r\n    },\r\n    \"parameters\": {}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}ProjectTask/Activate",
							"host": [
								"{{EndpointURL}}ProjectTask"
							],
							"path": [
								"Activate"
							]
						},
						"description": "This example shows how to activate a project task. This process is described in [Activate a Project Task](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=78d0e5d4-47f3-4c84-bb0a-adcbe0199593)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [ProjectTask](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=06221686-e569-47ce-982e-8cabdafd8a80) entity."
		},
		{
			"name": "PTOBank",
			"item": [
				{
					"name": "Create a PTO Bank",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Request to update earning type code\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'EarningTypeCode';\r",
									"    var requestPutCode = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"EarningTypeCodeID\": { \"value\": \"HL\"},\"EarningTypeCategory\": {\"value\": \"Time Off\"},\"RegularTimeTypeCode\": {\"value\": \"RG\"}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutCode,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for updating earning type code should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"PTO bank ID is TST\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PTOBankID.value).to.be.eql('TST');\r",
									"});\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PTOBankID\": {\r\n        \"value\": \"TST\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test PTO Bank\"\r\n    },\r\n    \"Active\": {\r\n        \"value\": \"false\"\r\n    },\r\n    \"BankStartDate\": {\r\n        \"value\": \"01/01/2019\"\r\n    },\r\n    \"DisbursingEarningCode\": {\r\n        \"value\": \"HL\"\r\n    },\r\n    \"CreateFinTransactions\": {\r\n        \"value\": \"true\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PTOBank",
							"host": [
								"{{EndpointURL}}PTOBank"
							]
						},
						"description": "This example shows how to create a paid time off (PTO) bank in Acumatica ERP. This process is described in [Create a PTO Bank](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3b1124b1-845c-4b5a-9359-030b67987ad8)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PTOBank](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=89510e7c-cc95-48d4-a6b2-79506a7b3c0d) entity."
		},
		{
			"name": "PurchaseOrder",
			"item": [
				{
					"name": "Create a Purchase Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Order total is 2.29\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(2.29);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Purchase Order with Tax Details Overridden\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"VendorID\": { \"value\": \"GOODFRUITS\" },\r\n    \"Location\": { \"value\": \"MAIN\" },\r\n    \"Details\": [\r\n        {\r\n            \"BranchID\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APPLES\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"UOM\": { \"value\": \"LB\" }\r\n        }\r\n    ],\r\n    \"Hold\": { \"value\": false }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseOrder?$expand=Details",
							"host": [
								"{{EndpointURL}}PurchaseOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a purchase order, which is described in [Create a Purchase Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=81e5ec25-09f7-421a-8f80-01b6b71d38c9)."
					},
					"response": []
				},
				{
					"name": "Create a Purchase Order with Tax Details Overridden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"One tax detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxDetails).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Tax rate is 8.875\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxDetails[0].TaxRate.value).to.eql(8.875);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Purchase Receipt\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n    \"Details\": [\r\n        {\r\n            \"BranchID\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APPLES\" },\r\n            \"LineType\": { \"value\": \"Goods for IN\" },\r\n            \"OrderQty\": { \"value\": 20 },\r\n            \"OrderType\": { \"value\": \"RO\" },\r\n            \"TaxCategory\": { \"value\": \"TAXABLE\" },\r\n            \"UnitCost\": { \"value\": 2.29 },\r\n            \"UOM\": { \"value\": \"LB\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ],\r\n    \"Hold\": { \"value\": true },\r\n    \"IsTaxValid\":  { \"value\": true },\r\n    \"Location\": { \"value\": \"MAIN\" },\r\n    \"TaxDetails\": [\r\n        {\r\n            \"TaxableAmount\": { \"value\": 45.8 },\r\n            \"TaxAmount\": { \"value\": 0 },\r\n            \"TaxID\": { \"value\": \"NYSTATETAX\" },\r\n            \"TaxRate\": { \"value\": 0 }\r\n        }\r\n    ],\r\n    \"Terms\": { \"value\": \"30D\" },\r\n    \"Type\": { \"value\": \"Normal\" },\r\n    \"VendorID\": { \"value\": \"ALLFRUITS\" },\r\n    \"VendorTaxZone\": { \"value\": \"NYZONE\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseOrder?$expand=Details,TaxDetails",
							"host": [
								"{{EndpointURL}}PurchaseOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,TaxDetails"
								}
							]
						},
						"description": "This example shows how to create a purchase order for which system taxes are used. This process is described in [Create a Purchase Order with Tax Parameters Overridden](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2f21e62f-ccff-41ea-b6be-434fa46448a0)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PurchaseOrder](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cbc0ce21-c2fe-4965-afed-622c4291b18f) entity."
		},
		{
			"name": "PurchaseReceipt",
			"item": [
				{
					"name": "Create a Purchase Receipt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Total cost is 492.40\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TotalCost.value).to.eql(492.40);\r",
									"    pm.collectionVariables.set('purchaseReceiptID',jsonResponse.id);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Release a Purchase Receipt\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"VendorID\": { \"value\": \"PRINTICO\" },\r\n    \"Location\": { \"value\": \"MAIN\" },\r\n    \"Details\": [\r\n        {\r\n            \"POOrderNbr\": { \"value\": \"000001\" },\r\n            \"POOrderType\": { \"value\": \"Normal\" }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a purchase receipt, which is described in [Create a Purchase Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a93b5926-d164-4a1b-97fe-a1c46af67ea6)."
					},
					"response": []
				},
				{
					"name": "Insert Lines with Allocations (with Location) to a PO Receipt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Two allocation lines in each detail are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Allocations).to.has.lengthOf(2);\r",
									"    pm.expect(jsonResponse.Details[1].Allocations).to.has.lengthOf(2);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Purchase Return from a Purchase Receipt Record\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Receipt\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"Description\": {\"value\": \"Test receipt with allocations\"},\r\n    \"Details\": [\r\n        {\r\n            \"InventoryID\": {\"value\": \"APJAM08\"},\r\n            \"ReceiptQty\": {\"value\": \"2\"},\r\n            \"Allocations\": [\r\n                {\r\n                    \"Location\": {\"value\": \"MAIN\"},\r\n                    \"Qty\": {\"value\": \"1\"}\r\n                },\r\n                {\r\n                    \"Location\": {\"value\": \"SORT\"},\r\n                    \"Qty\": {\"value\": \"1\"}\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"InventoryID\": {\"value\": \"APJAM32\"},\r\n            \"ReceiptQty\": {\"value\": \"2\"},\r\n            \"Allocations\": [\r\n                {\r\n                    \"Location\": {\"value\": \"MAIN\"},\r\n                    \"Qty\": {\"value\": \"1\"}\r\n                },\r\n                {\r\n                    \"Location\": {\"value\": \"SORT\"},\r\n                    \"Qty\": {\"value\": \"1\"}\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details,Details/Allocations",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Details/Allocations"
								}
							]
						},
						"description": "This example shows the adding of lines with allocations (with the location) to a purchase receipt, which is described in [Insert Lines with Allocations (with Location) to a PO Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1998826c-ae50-47cc-8c10-0fb05ddc42f2)."
					},
					"response": []
				},
				{
					"name": "Insert Lines with Allocations (with Expiration Date) to a PO Receipt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Two allocation lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Allocations).to.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Expiration date is 2024-04-25\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Allocations[0].LotSerialNbr.value).to.eql('a');\r",
									"    pm.expect(jsonResponse.Details[0].Allocations[0].ExpirationDate.value).to.eql('2024-04-25T00:00:00+00:00');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Receipt\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"Description\": {\"value\": \"Test receipt with Expiration Date in Allocations\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"ORANGES\"},\r\n            \"ReceiptQty\": {\"value\": 2},\r\n            \"Warehouse\": {\"value\": \"WHOLESALE\"},\r\n            \"LotSerialNbr\": {\"value\": \"\"},\r\n            \"ExpirationDate\": {\"value\": \"\"},\r\n            \"Allocations\": [\r\n                {\r\n                    \"Location\": {\"value\": \"MAIN\"},\r\n                    \"Qty\": {\"value\": 1},\r\n                    \"LotSerialNbr\": {\"value\": \"a\"},\r\n                    \"ExpirationDate\": {\"value\": \"2024-04-25\"}\r\n                },\r\n                {\r\n                    \"Location\": {\"value\": \"MAIN\"},\r\n                    \"Qty\": {\"value\": 1},\r\n                    \"LotSerialNbr\": {\"value\": \"b\"},\r\n                    \"ExpirationDate\": {\"value\": \"2024-04-27\"}\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details,Details/Allocations",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Details/Allocations"
								}
							]
						},
						"description": "This example shows the adding of lines with allocations (with the expiration date) to a purchase receipt, which is described in [Insert Lines with Allocations (with Expiration Date) to a PO Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=852c5c92-c763-4c0e-b3f5-be6663254611)."
					},
					"response": []
				},
				{
					"name": "Create a Purchase Return from a Purchase Receipt Record",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Total cost is 240.5\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TotalCost.value).to.eql(240.5);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Purchase Return from a Purchase Receipt\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Return\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"Description\": {\"value\": \"Test return (one PR line)\"},\r\n    \"ProcessReturnWithOriginalCost\": {\"value\": \"True\"},\r\n    \"Details\": [\r\n        {\r\n            \"POReceiptNbr\": {\"value\": \"000016\"},\r\n            \"POReceiptLineNbr\": {\"value\": \"1\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a purchase return from a purchase receipt record, which is described in [Create a Purchase Return from a Purchase Receipt Record](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9a4a2d4c-6a81-4b92-a123-e1cfd509f832)."
					},
					"response": []
				},
				{
					"name": "Create a Purchase Return from a Purchase Receipt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Total cost is 118.4\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TotalCost.value).to.eql(118.4);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Purchase Return for Particular Items\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Return\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"Description\": {\"value\": \"Test return (all PR lines)\"},\r\n    \"ProcessReturnWithOriginalCost\": {\"value\": \"True\"},\r\n    \"Details\": [\r\n        {\r\n            \"POReceiptNbr\": {\"value\": \"000013\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a purchase return from a purchase receipt, which is described in [Create a Purchase Return from a Purchase Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ded2af68-35ad-4b44-b9ee-5371a8790341)."
					},
					"response": []
				},
				{
					"name": "Create a Purchase Return for Particular Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Total cost is 3\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TotalCost.value).to.eql(3);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Remove a Sales Invoice from Hold\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Return\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"Description\": {\"value\": \"Test return\"},\r\n    \"ProcessReturnWithOriginalCost\": {\"value\": \"True\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APPLES\"},\r\n            \"Warehouse\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"MAIN\"},\r\n            \"ReceiptQty\": {\"value\": \"1\"},\r\n            \"ExtendedCost\": {\"value\": \"3\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a purchase return for particular items, which is described in [Create a Purchase Return for Particular Items](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c96f5760-dd88-4003-87eb-1cb68470875d)."
					},
					"response": []
				},
				{
					"name": "Create a Purchase Receipt in Non-Base Currency",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"//Request to update vendor\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'Vendor';\r",
									"    var requestPutVendor = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"VendorID\": { \"value\": \"GOODFRUITS\"},\"EnableCurrencyOverride\": {\"value\": true},\"EnableRateOverride\": {\"value\": true}, \"CurrencyRateType\": {\"value\": \"SPOT\"}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutVendor,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for creating invoice should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Currency is EUR\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.CurrencyID.value).to.eql(\"EUR\");\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Receipt\"},\r\n    \"VendorID\": {\"value\": \"GOODFRUITS\"},\r\n    \"CreateBill\": {\"value\": \"False\"},\r\n    \"CurrencyID\": {\"value\": \"EUR\"},\r\n    \"CurrencyRate\": {\"value\": \"1.2\"},\r\n    \"Description\": {\"value\": \"Test receipt in non-base currency and with new cost fields\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APPLES\"},\r\n            \"Warehouse\": {\"value\": \"WHOLESALE\"},\r\n            \"ReceiptQty\": {\"value\": 1.0},\r\n            \"ExpirationDate\": {\"value\": \"2021-04-25\"},\r\n            \"UnitCost\": {\"value\": \"111\"},\r\n            \"ExtendedCost\": {\"value\": \"333\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							]
						},
						"description": "This example shows how to create a purchase receipt in non-base currency. This process is described in [Create a Purchase Receipt in Non-Base Currency](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6177b57c-ed78-47c7-9994-d22dfe2d5507)."
					},
					"response": []
				},
				{
					"name": "Create a Transfer Receipt with Allocations for a Transfer Order",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\r\n        \"value\": \"Transfer Receipt\"\r\n    },\r\n    \"Warehouse\": {\r\n        \"value\": \"RETAIL\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"TransferOrderType\": {\r\n                \"value\": \"TR\"\r\n            },\r\n            \"TransferOrderNbr\": {\r\n                \"value\": \"000069\"\r\n            },\r\n            \"TransferOrderLineNbr\": {\r\n                \"value\": 1\r\n            },\r\n            \"TransferShipmentNbr\": {\r\n                \"value\": \"000063\"\r\n            },\r\n            \"ReceiptQty\": {\r\n                \"value\": 1\r\n            },\r\n            \"Allocations\": [\r\n                {\r\n                    \"Location\": {\r\n                        \"value\": \"JS1\"\r\n                    },\r\n                    \"Qty\": {\r\n                        \"value\": 0.5\r\n                    }\r\n                },\r\n                {\r\n                    \"Location\": {\r\n                        \"value\": \"JS2\"\r\n                    },\r\n                    \"Qty\": {\r\n                        \"value\": 0.5\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details,Details/Allocations",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Details/Allocations"
								}
							]
						},
						"description": "This example shows how to create a transfer receipt with allocations for a transfer order. This process is described in [Create a Transfer Receipt with Allocations for a Transfer Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=24c68cc6-6985-4421-86c9-e29156f3c150)."
					},
					"response": []
				},
				{
					"name": "Release a Purchase Receipt",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'PurchaseReceipt/' + pm.collectionVariables.get('purchaseReceiptID');\r",
									"                var requestPurchaseReceipt = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestPurchaseReceipt,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the purchase receipt should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Purchase receipt status is Released\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Released');\r",
									"                    });\r",
									"                    //Sign out and set the next request\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"pm.execution.setNextRequest(\"Insert Lines with Allocations (with Location) to a PO Receipt\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\":{ \"id\": \"{{purchaseReceiptID}}\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}PurchaseReceipt/ReleasePurchaseReceipt",
							"host": [
								"{{EndpointURL}}PurchaseReceipt"
							],
							"path": [
								"ReleasePurchaseReceipt"
							]
						},
						"description": "This example shows how to release a purchase receipt, which is described in [Release a Purchase Receipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f361b0f2-ef16-423b-83f5-1db4a31a5931).\n\nThis request requires the value of purchaseReceiptID collection variable. You can set it manually or by executing the Create a Purchase Receipt request."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [PurchaseReceipt](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=19972ae2-0d5d-45b6-8bec-fc0e2388a9ba) entity."
		},
		{
			"name": "SalesInvoice",
			"item": [
				{
					"name": "Remove a Sales Invoice from Hold",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The sales invoice has the Balanced status\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.equal(\"Balanced\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Invoke Release of an Invoice\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"ReferenceNbr\": {\"value\": \"INV000046\"},\r\n    \"Hold\": {\"value\":false}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesInvoice",
							"host": [
								"{{EndpointURL}}SalesInvoice"
							]
						},
						"description": "This example shows how to release a sales invoice from hold. This process is described in [Release a Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=059b3f37-ba97-4c37-8fdd-6e2e5c292b10)."
					},
					"response": []
				},
				{
					"name": "Invoke Release of an Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.collectionVariables.set(\"SalesInvoiceStatusUrl\", pm.response.headers.get(\"Location\"));\r",
									"//Do not sign out before the next request\r",
									"pm.execution.setNextRequest(\"Retrieve the Status of the Release Operation\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"entity\":{\r\n\t\t\"Type\":{\"value\":\"Invoice\"},\r\n\t\t\"ReferenceNbr\":{\"value\":\"INV000046\"}\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}/SalesInvoice/ReleaseSalesInvoice",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"SalesInvoice",
								"ReleaseSalesInvoice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the Status of the Release Operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code != 204)\r",
									"{\r",
									"    setTimeout(function(){},10000);\r",
									"    pm.execution.setNextRequest(\"Retrieve the Status of the Release Operation\");\r",
									"}\r",
									"else\r",
									"{\r",
									"    //Sign out and set next request\r",
									"    var url = pm.collectionVariables.get('InstanceURL');\r",
									"    pm.acuFunc.singOutFunction(pm, url);\r",
									"    pm.execution.setNextRequest(\"Check the Status of the Sales Invoice\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//No need to sign in in this request because the sign-in has been done \r",
									"//in Invoke Release of an Invoice. \r",
									"//These two requests should be executed in one session."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}{{SalesInvoiceStatusUrl}}",
							"host": [
								"{{BaseURL}}{{SalesInvoiceStatusUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the Status of the Sales Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The sales invoice has the Open status\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Status.value).to.equal(\"Open\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Credit Memo\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}/SalesInvoice/Invoice/INV000046?$select=ReferenceNbr,Type,Status",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"SalesInvoice",
								"Invoice",
								"INV000046"
							],
							"query": [
								{
									"key": "$select",
									"value": "ReferenceNbr,Type,Status"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Credit Memo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Four detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(4);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"Retrieve a List of Sales Orders with Details and Related Shipments\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000005\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" }\r\n        },\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000008\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" },\r\n            \"OrigInvLineNbr\": { \"value\": 1 }\r\n        },\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000012\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" },\r\n            \"OrigInvLineNbr\": { \"value\": 2 },\r\n            \"Qty\": { \"value\": 50 }\r\n        }\r\n    ],\r\n    \"LocationID\": { \"value\": \"MAIN\" },\r\n    \"Project\": { \"value\": \"X\" },\r\n    \"Type\": { \"value\": \"Credit Memo\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesInvoice"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create a credit memo. This process is described in [Create a Credit Memo](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c3ade0ab-d6d9-450c-b386-9a9aac911e82)."
					},
					"response": []
				},
				{
					"name": "Create a Direct Sales Invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Three detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(3);\r",
									"});\r",
									"pm.test(\"Adjusting doc is correct\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    var paymentNbr = pm.collectionVariables.get('paymentNbr');\r",
									"    pm.expect(jsonResponse.ApplicationsInvoice[0].AdjustingDocReferenceNbr.value).to.be.eql(paymentNbr);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Prerequisite requests\r",
									"var callback = (pm, error, response) => {\r",
									"    //Assign tax zone to a customer\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'Customer';\r",
									"    var requestPutCustomer = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"CustomerID\": {\"value\": \"FRUITICO\"},\"TaxZone\": {\"value\": \"NYSTATE\"}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutCustomer,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for updating customer should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"\r",
									"        //Create a payment\r",
									"        var url3 = pm.collectionVariables.get('EndpointURL') + 'Payment';\r",
									"        var requestPutPayment = {\r",
									"            url: url3,\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"CashAccount\": {\"value\": \"10250ST\"}, \"CustomerID\": {\"value\": \"FRUITICO\"},\"Hold\": {\"value\": false}, \"PaymentAmount\": {\"value\": 1235.27}, \"Type\": {\"value\": \"Payment\"}}'},\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(requestPutPayment,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for creating payment should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"                const jsonResponse = response.json();\r",
									"                pm.collectionVariables.set('paymentNbr', jsonResponse.ReferenceNbr.value);\r",
									"            });\r",
									"\r",
									"            //Release the payment\r",
									"            var url4 = pm.collectionVariables.get('EndpointURL') + 'Payment/ReleasePayment';\r",
									"            var paymentNbr = pm.collectionVariables.get('paymentNbr');\r",
									"            var requestReleasePayment = {\r",
									"                url: url4,\r",
									"                method: 'POST',\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: '{\"entity\" : {\"ReferenceNbr\": {\"value\": \"' + paymentNbr +'\"},\"Type\": {\"value\": \"Payment\"}}}'},\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json'\r",
									"                }\r",
									"            };\r",
									"\r",
									"            pm.sendRequest(requestReleasePayment,  (error, response) => {\r",
									"                if (error) {\r",
									"                    console.log(error);\r",
									"                }\r",
									"\r",
									"                //Check the status of the operation\r",
									"                if (response.code === 202) {\r",
									"                    var url = pm.collectionVariables.get('BaseURL') + response.headers.get(\"Location\");\r",
									"                    var requestStatus = {\r",
									"                        url: url,\r",
									"                        method: 'GET',\r",
									"                        header: {\r",
									"                            'Content-Type': 'application/json'\r",
									"                        }\r",
									"                    };\r",
									"                    myFunction();\r",
									"                    function myFunction(){\r",
									"                        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"                            if (error) {\r",
									"                                console.log(error);\r",
									"                            }\r",
									"\r",
									"                            if(response.code != 204)\r",
									"                            {\r",
									"                                setTimeout(function(){},100000);\r",
									"                                myFunction();\r",
									"                            }\r",
									"                        });\r",
									"                    } \r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"CHERJAM32\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UOM\": {\"value\": \"PIECE\"},\r\n            \"LotSerialNbr\": {\"value\": \"JM2301290000\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM32\"},\r\n            \"Qty\": {\"value\": 2},\r\n            \"UOM\": {\"value\": \"BOX\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"ADVERT\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UnitPrice\": {\"value\": 1000},\r\n            \"UOM\": {\"value\": \"DAY\"}\r\n        }\r\n    ],\r\n    \"BillingSettings\":\r\n    {\r\n        \"BillToAddressOverride\": {\"value\": true},\r\n        \"BillToAddress\":\r\n        {\r\n            \"AddressLine1\": {\"value\": \"Fillmore Str\"},\r\n            \"City\": {\"value\": \"San Francisco\"},\r\n            \"State\": {\"value\": \"CA\"}\r\n        }\r\n    },\r\n    \"ApplicationsInvoice\":\r\n    [\r\n        {\r\n            \"DocType\": {\"value\": \"Payment\"},\r\n            \"AdjustingDocReferenceNbr\": {\"value\": \"{{paymentNbr}}\"},\r\n            \"AmountPaid\": {\"value\": 1235.27}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesInvoice?$expand=ApplicationsInvoice,Details",
							"host": [
								"{{EndpointURL}}SalesInvoice"
							],
							"query": [
								{
									"key": "$expand",
									"value": "ApplicationsInvoice,Details"
								}
							]
						},
						"description": "This example shows how to create a sales invoice that will contain sold stock items and ordered service, for which the billing settings will be specified, and to which a payment will be applied. This process is described in [Create a Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6acfdb37-9770-4400-ad80-c229b467a649)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Invoice in a Non-Default Currency",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Three detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(3);\r",
									"});\r",
									"pm.test(\"Currency is EUR\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Currency.value).to.be.eql('EUR');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Currency\": {\"value\": \"EUR\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM96\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Qty\": {\"value\": 2},\r\n            \"UOM\": {\"value\": \"JBOX\"},\r\n            \"Location\": {\"value\": \"L3R1S2\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM08\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"L1R1S2\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"PIECE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"CLEANING\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"HOUR\"}\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesInvoice"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create a sales invoice in a non-default currency. This process is described in [Create a Sales Invoice in a Non-Default Currency](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d72dde27-f3bb-4a71-bc6c-fb9a277d3acb)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [SalesInvoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1ceca4db-c82d-40ee-9f9e-3cca976fd91c) entity."
		},
		{
			"name": "SalesOrder",
			"item": [
				{
					"name": "Retrieve a List of Sales Orders with Details and Related Shipments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"The first item includes all requested fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].OrderType.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].OrderNbr.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].CustomerID.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].CustomerOrder.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Date.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].OrderedQty.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].OrderTotal.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Details[0].InventoryID.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Details[0].OrderQty.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Details[0].UnitPrice.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Shipments[0].InvoiceNbr.value).to.be.not.null;\r",
									"    pm.expect(jsonData[0].Shipments[0].ShipmentNbr.value).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Response does not contain CurrencyID\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"CurrencyID\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve a List of Sales Orders in Batches\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details,Shipments&$filter=CustomerID eq 'C000000003'&$select=OrderNbr,OrderType,CustomerID,CustomerOrder,Details/InventoryID,Details/OrderQty,Details/UnitPrice,Date,OrderedQty,OrderTotal,Shipments/InvoiceNbr,Shipments/ShipmentNbr",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Shipments"
								},
								{
									"key": "$filter",
									"value": "CustomerID eq 'C000000003'"
								},
								{
									"key": "$select",
									"value": "OrderNbr,OrderType,CustomerID,CustomerOrder,Details/InventoryID,Details/OrderQty,Details/UnitPrice,Date,OrderedQty,OrderTotal,Shipments/InvoiceNbr,Shipments/ShipmentNbr"
								}
							]
						},
						"description": "This example shows the retrieval of a list of sales orders along with their details and related shipments, which is described in [Retrieve a List of Sales Orders with Details and Related Shipments](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2896cb78-c132-43d3-82fd-c9fc0ab0c3cb)."
					},
					"response": []
				},
				{
					"name": "Retrieve a List of Sales Orders in Batches",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The retrieved list has 4 items\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.lengthOf(4);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Sales Order with the Unit of Measure Specified\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$filter=CustomerID eq 'C000000003'&$select=OrderNbr,OrderType,CustomerID,OrderTotal&$top=5&$skip=5",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$filter",
									"value": "CustomerID eq 'C000000003'"
								},
								{
									"key": "$select",
									"value": "OrderNbr,OrderType,CustomerID,OrderTotal"
								},
								{
									"key": "$top",
									"value": "5"
								},
								{
									"key": "$skip",
									"value": "5"
								}
							]
						},
						"description": "This example shows the retrieval of a list of sales orders in batches, which is described in [Retrieve a List of Sales Orders in Batches](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=95b5c819-45b8-481f-b86e-4dafb96972a6)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with the Unit of Measure Specified",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Detail's UOM is PIECE\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].UOM.value).to.eql('PIECE');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Sales Order with a Credit Card Payment');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM08\" },\r\n            \"OrderQty\": { \"value\": 2 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of a sales order with a unit of measure specified, which is described in [Create a Sales Order with the Unit of Measure Specified](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2d5fae3b-463b-4262-bb44-1a9fb571b998)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with a Credit Card Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One payment line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Payment method is ACUPAYCC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethod.value).to.eql('ACUPAYCC');\r",
									"});\r",
									"pm.test(\"Order total is 980\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(980);\r",
									"});\r",
									"pm.test(\"Status is Pending Processing\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].Status.value).to.be.eql('Pending Processing');\r",
									"});\r",
									"pm.test(\"PaymentRef is empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].PaymentRef).to.be.empty;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Sales Order with a Captured Credit Card Payment');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"WIDGETCC\"},\r\n    \"Date\": {\"value\": \"2024-05-10T00:00:00\"},\r\n    \"Description\": {\"value\": \"Internal CC Payment\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AACOMPUT01\"},\r\n            \"OrderQty\": {\"value\": 1.00},\r\n            \"UnitPrice\": {\"value\": 500.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AALEGO500\"},\r\n            \"OrderQty\": {\"value\": 50.00},\r\n            \"UnitPrice\": {\"value\": 50.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        }\r\n    ],\r\n    \"Hold\": {\"value\": false},\r\n    \"LocationID\": {\"value\": \"MAIN\"},\r\n    \"OrderType\": {\"value\": \"SO\"},\r\n    \"Payments\": [\r\n        {\r\n            \"ApplicationDate\": {\"value\": \"2024-08-11T00:00:00+03:00\"},\r\n            \"AppliedToOrder\": {\"value\": 480.00},\r\n            \"CashAccount\": {\"value\": \"10600\"},\r\n            \"PaymentAmount\": {\"value\": 980.00},\r\n            \"PaymentMethod\": {\"value\": \"ACUPAYCC\"}\r\n        }\r\n    ],\r\n    \"RequestedOn\": {\"value\": \"2024-05-10T00:00:00\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details,Payments",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Payments"
								}
							]
						},
						"description": "This example shows the creation of a sales order with a credit card payment, which is described in [Create a Sales Order with a Credit Card Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e7d7b4a4-4609-4a68-ac74-5ab9006d80c5)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with a Captured Credit Card Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One payment line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Payment method is ACUPAYCC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethod.value).to.eql('ACUPAYCC');\r",
									"});\r",
									"pm.test(\"Order total is 980\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(980);\r",
									"});\r",
									"pm.test(\"Status is Open\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].Status.value).to.be.eql('Open');\r",
									"});\r",
									"pm.test(\"PaymentRef is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].PaymentRef.value).to.be.not.empty;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Sales Order with an Authorized Credit Card Payment');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"WIDGETCC\"},\r\n    \"Date\": {\"value\": \"2023-05-10T00:00:00\"},\r\n    \"Description\": {\"value\": \"Internal CC Payment (Capture)\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AACOMPUT01\"},\r\n            \"OrderQty\": {\"value\": 1.00},\r\n            \"UnitPrice\": {\"value\": 500.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AALEGO500\"},\r\n            \"OrderQty\": {\"value\": 50.00},\r\n            \"UnitPrice\": {\"value\": 50.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        }\r\n    ],\r\n    \"Hold\": {\"value\": false},\r\n    \"LocationID\": {\"value\": \"MAIN\"},\r\n    \"OrderType\": {\"value\": \"SO\"},\r\n    \"Payments\": [\r\n        {\r\n            \"ApplicationDate\": {\"value\": \"2023-08-11T00:00:00+03:00\"},\r\n            \"AppliedToOrder\": {\"value\": 480.00},\r\n            \"CashAccount\": {\"value\": \"10600\"},\r\n            \"PaymentAmount\": {\"value\": 980.00},\r\n            \"PaymentMethod\": {\"value\": \"ACUPAYCC\"},\r\n            \"Capture\": {\"value\": true}\r\n        }\r\n    ],\r\n    \"RequestedOn\": {\"value\": \"2023-05-10T00:00:00\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Payments",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Payments"
								}
							]
						},
						"description": "This example shows the creation of a sales order with a captured credit card payment, which is described in [Create a Sales Order with a Captured Credit Card Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d5fd790b-af98-40ae-a008-a92950400305)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with an Authorized Credit Card Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One payment line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Payment method is ACUPAYCC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethod.value).to.eql('ACUPAYCC');\r",
									"});\r",
									"pm.test(\"Order total is 980\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(980);\r",
									"});\r",
									"pm.test(\"Status is Pending Processing\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].Status.value).to.be.eql('Pending Processing');\r",
									"});\r",
									"pm.test(\"PaymentRef is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].PaymentRef.value).to.be.not.empty;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Sales Order with an External Credit Card Payment');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"WIDGETCC\"},\r\n    \"Date\": {\"value\": \"2023-05-10T00:00:00\"},\r\n    \"Description\": {\"value\": \"Internal CC Payment (Capture)\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AACOMPUT01\"},\r\n            \"OrderQty\": {\"value\": 1.00},\r\n            \"UnitPrice\": {\"value\": 500.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AALEGO500\"},\r\n            \"OrderQty\": {\"value\": 50.00},\r\n            \"UnitPrice\": {\"value\": 50.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        }\r\n    ],\r\n    \"Hold\": {\"value\": false},\r\n    \"LocationID\": {\"value\": \"MAIN\"},\r\n    \"OrderType\": {\"value\": \"SO\"},\r\n    \"Payments\": [\r\n        {\r\n            \"ApplicationDate\": {\"value\": \"2023-08-11T00:00:00+03:00\"},\r\n            \"AppliedToOrder\": {\"value\": 480.00},\r\n            \"CashAccount\": {\"value\": \"10600\"},\r\n            \"PaymentAmount\": {\"value\": 980.00},\r\n            \"PaymentMethod\": {\"value\": \"ACUPAYCC\"},\r\n            \"Authorize\": {\"value\": true}\r\n        }\r\n    ],\r\n    \"RequestedOn\": {\"value\": \"2023-05-10T00:00:00\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Payments",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Payments"
								}
							]
						},
						"description": "This example shows the creation of a sales order with an authorized credit card payment, which is described in [Create a Sales Order with an Authorized Credit Card Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=d76d89fe-4a65-4a40-98ad-d456edcf3e53)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with an External Credit Card Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One payment line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Payment method is ACUPAYCC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethod.value).to.eql('ACUPAYCC');\r",
									"});\r",
									"pm.test(\"Order total is 980\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(980);\r",
									"});\r",
									"pm.test(\"Status is Pending Processing\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].Status.value).to.be.eql('Pending Processing');\r",
									"});\r",
									"pm.test(\"PaymentRef is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].PaymentRef.value).to.be.not.empty;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Create a Return for Credit Without Validation of the Card Refund Against the Original Transaction')"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"WIDGETCC\"},\r\n    \"Date\": {\"value\": \"2023-05-10T00:00:00\"},\r\n    \"Description\": {\"value\": \"External CC payment\"},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AACOMPUT01\"},\r\n            \"OrderQty\": {\"value\": 1.00},\r\n            \"UnitPrice\": {\"value\": 500.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"PRODWHOLE\"},\r\n            \"DiscountAmount\": {\"value\": 10.00},\r\n            \"ExtendedPrice\": {\"value\": 500.00},\r\n            \"FreeItem\": {\"value\": false},\r\n            \"InventoryID\": {\"value\": \"AALEGO500\"},\r\n            \"OrderQty\": {\"value\": 50.00},\r\n            \"UnitPrice\": {\"value\": 50.00},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"}\r\n        }\r\n    ],\r\n    \"Hold\": {\"value\": false},\r\n    \"LocationID\": {\"value\": \"MAIN\"},\r\n    \"OrderType\": {\"value\": \"SO\"},\r\n    \"Payments\": [\r\n        {\r\n            \"ApplicationDate\": {\"value\": \"2023-08-11T00:00:00+03:00\"},\r\n            \"AppliedToOrder\": {\"value\": 480.00},\r\n            \"CashAccount\": {\"value\": \"10600\"},\r\n            \"CreditCardTransactionInfo\": [\r\n                {\r\n                    \"NeedValidation\": {\"value\": true},\r\n                    \"TranDate\": {\"value\": \"2023-08-11T00:00:00+03:00\"},\r\n                    \"TranNbr\": {\"value\": \"40050474170\"},\r\n                    \"TranType\": {\"value\": \"AUT\"}\r\n                }\r\n            ],\r\n            \"PaymentAmount\": {\"value\": 980.00},\r\n            \"PaymentMethod\": {\"value\": \"ACUPAYCC\"}\r\n        }\r\n    ],\r\n    \"RequestedOn\": {\"value\": \"2023-05-10T00:00:00\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Payments",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Payments"
								}
							]
						},
						"description": "This example shows the creation of a sales order with an external credit card payment, which is described in [Create a Sales Order with an External Credit Card Payment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=125d6a9c-c92b-4cb9-862b-424a60208edb)."
					},
					"response": []
				},
				{
					"name": "Apply Discounts to a Sales Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entity\" :\r\n    {\r\n        \"OrderType\" : {\"value\" : \"SO\"},\r\n        \"OrderNbr\" : {\"value\" : \"000070\"}\r\n    },\r\n    \"parameters\":\r\n    {\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/AutoRecalculateDiscounts",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"AutoRecalculateDiscounts"
							]
						},
						"description": "This example shows the application of discounts to a sales order, which is described in [Apply Discounts to a Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c6ad394e-9e1f-4dc4-ad50-bc4ab988fc1f)."
					},
					"response": []
				},
				{
					"name": "Create a Return for Credit Without Validation of the Card Refund Against the Original Transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with SalesDemo data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameSalesDemo');\r",
									"var password = pm.collectionVariables.get('PasswordSalesDemo');\r",
									"var tenant = pm.collectionVariables.get('TenantSalesDemo');\r",
									"var branch = pm.collectionVariables.get('BranchSalesDemo'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One payment line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Payment method is ACUPAYCC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.PaymentMethod.value).to.eql('ACUPAYCC');\r",
									"});\r",
									"pm.test(\"Order total is 2500\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(2500);\r",
									"});\r",
									"pm.test(\"Status is Pending Processing\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].Status.value).to.be.eql('Pending Processing');\r",
									"});\r",
									"pm.test(\"PaymentRef is not empty\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Payments[0].PaymentRef.value).to.be.not.empty;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest('Retrieve the Sales Order with Details');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CurrencyID\": {\r\n        \"value\": \"USD\"\r\n    },\r\n    \"CustomerID\": {\r\n        \"value\": \"WIDGETCC\"\r\n    },\r\n    \"Date\": {\r\n        \"value\": \"2023-08-19T00:00:00+03:00\"\r\n    },\r\n    \"Hold\": {\r\n                \"value\": false\r\n            },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\r\n                \"value\": \"PRODWHOLE\"\r\n            },\r\n            \"InventoryID\": {\r\n                \"value\": \"AACOMPUT01\"\r\n            },\r\n            \"OrderQty\": {\r\n                \"value\": 5.000000\r\n            },\r\n            \"UnitPrice\": {\r\n                \"value\": 500.000000\r\n            },\r\n            \"UOM\": {\r\n                \"value\": \"EA\"\r\n            },\r\n            \"WarehouseID\": {\r\n                \"value\": \"WHOLESALE\"\r\n            }\r\n         }\r\n    ],\r\n    \"OrderType\": {\r\n        \"value\": \"RC\"\r\n    },\r\n    \"PaymentMethod\": {\r\n        \"value\": \"ACUPAYCC\"\r\n    },\r\n    \"Payments\": [\r\n        {\r\n            \"ApplicationDate\": {\r\n                \"value\": \"2023-08-19T00:00:00+03:00\"\r\n            },\r\n            \"AppliedToOrder\": {\r\n                \"value\": 40.0000\r\n            },\r\n            \"CardAccountNbr\": {\r\n                \"value\": \"VISA:****-****-****-1111\"\r\n            },\r\n            \"CashAccount\": {\r\n                \"value\": \"10250\"\r\n            },\r\n            \"Currency\": {\r\n                \"value\": \"USD\"\r\n            },\r\n            \"DocType\": {\r\n                \"value\": \"Refund\"\r\n            },\r\n            \"Hold\": {\r\n                \"value\": false\r\n            },\r\n            \"OrigTransactionNbr\": {\r\n                \"value\": \"60165234282\"\r\n            },\r\n            \"PaymentAmount\": {\r\n                \"value\": 40.0000\r\n            },\r\n            \"PaymentMethod\": {\r\n                \"value\": \"ACUPAYCC\"\r\n            },\r\n            \"PaymentRef\": {\r\n                \"value\": \"601704533664\"\r\n            },\r\n            \"ProcessingCenterID\": {\r\n                \"value\": \"ACUPAYMENT\"\r\n            },\r\n            \"Refund\": {\r\n                \"value\": true\r\n            },\r\n            \"ValidateCCRefundOrigTransaction\": {\r\n                \"value\": false\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details,Payments",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Payments"
								}
							]
						},
						"description": "This example shows how to create a return for credit with and without validation of the card refund against the original transaction, which is described in [Create a Return for Credit Without Validation of the Card Refund Against the Original Transaction](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=11c419cf-78ae-41cd-abad-897c00a96a43)."
					},
					"response": []
				},
				{
					"name": "Retrieve the Sales Order with Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The sales order has three detail lines\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.lengthOf(1);\r",
									"    pm.expect(jsonResponse[0].Details).to.have.lengthOf(3);\r",
									"    jsonResponse[0].Details.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.InventoryID.value === \"CONGRILL\") {pm.collectionVariables.set(\"CONGRILL_detail_ID\",item.id);};\r",
									"        if (item.InventoryID.value === \"AALEGO500\") {pm.collectionVariables.set(\"AALEGO500_detail_ID\",item.id);}\r",
									"    }\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Update the Detail Lines of a Sales Order\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}/SalesOrder?$expand=Details&$filter=OrderType eq 'SO' and CustomerOrder eq 'SO248-563-06'&$select=OrderNbr,OrderType,Details/InventoryID,Details/WarehouseID",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								},
								{
									"key": "$filter",
									"value": "OrderType eq 'SO' and CustomerOrder eq 'SO248-563-06'"
								},
								{
									"key": "$select",
									"value": "OrderNbr,OrderType,Details/InventoryID,Details/WarehouseID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the Detail Lines of a Sales Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The sales order has two detail lines\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.have.lengthOf(2);\r",
									"});\r",
									"pm.test(\"The sales order does not include CONGRILL\", function (){\r",
									"    pm.expect(pm.response.text()).to.not.include(\"CONGRILL\");\r",
									"});\r",
									"pm.test(\"The sales order includes 5 AALEGO500 items\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    jsonResponse.Details.forEach(myFunction);\r",
									"    function myFunction(item){\r",
									"        if (item.InventoryID.value === 'AALEGO500') {\r",
									"            pm.expect(item.OrderQty.value).to.eq(5.0);};\r",
									"    }\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Shipment from a Sales Order\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"OrderType\":{\"value\":\"SO\"},\n\t\"OrderNbr\":{\"value\":\"000003\"},\n\t\"Hold\":{\"value\":false},\n\t\"Details\":[\n\t\t{\n\t\t\t\"id\":\"{{CONGRILL_detail_ID}}\",\n\t\t\t\"delete\":true\n\t\t},\n\t\t{\n\t\t\t\"id\":\"{{AALEGO500_detail_ID}}\",\n\t\t\t\"OrderQty\":{\"value\":5.0}\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}/SalesOrder?$select=OrderType,OrderNbr,OrderedQty,OrderTotal,Details/OrderQty,Details/InventoryID&$expand=Details",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"SalesOrder"
							],
							"query": [
								{
									"key": "$select",
									"value": "OrderType,OrderNbr,OrderedQty,OrderTotal,Details/OrderQty,Details/InventoryID"
								},
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Shipment from a Sales Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'SalesOrder/42bb9a17-a402-e911-b818-00155d408001?$expand=Shipments';\r",
									"                var requestSalesOrder = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestSalesOrder,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the sales order should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Sales order status is Shipping\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Shipping');\r",
									"                        });\r",
									"                    pm.test(\"One shipment is included\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Shipments).to.has.lengthOf(1);\r",
									"                    });\r",
									"                    //Sign out\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"Create a Return Order for Invoices\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entity\":{\r\n      \"id\":\"42bb9a17-a402-e911-b818-00155d408001\"\r\n  },\r\n  \"parameters\": {\r\n        \"ShipmentDate\": { \"value\": \"2025-08-20T00:00:00+03:00\" },\r\n        \"WarehouseID\": { \"value\": \"RETAIL\" }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateShipment",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"SalesOrderCreateShipment"
							]
						},
						"description": "This example shows the creation of a shipment from a sales order, which is described in [Create a Shipment from a Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=9a0b1037-c931-4eff-a974-15403d3227a7)."
					},
					"response": []
				},
				{
					"name": "Create a Return Order for Invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Order type is RC\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderType.value).to.eql('RC');\r",
									"});\r",
									"pm.test(\"Order total is 317.04\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(317.04);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"Create a Sales Order with Tax Parameters Overridden\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Description\": { \"value\": \"Return Order for Invoices\" },\r\n    \"Details\": [\r\n        {\r\n            \"InvoiceType\": { \"value\": \"Invoice\" },\r\n            \"InvoiceNbr\": { \"value\": \"000062\" },\r\n            \"InventoryID\": { \"value\": \"INSTALL\" }\r\n        },\r\n        {\r\n            \"InvoiceType\": { \"value\": \"Invoice\" },\r\n            \"InvoiceNbr\": { \"value\": \"000030\" },\r\n            \"InventoryID\": { \"value\": \"ORANGES\" },\r\n            \"OrderQty\": { \"value\": \"50\" }\r\n        }\r\n    ],\r\n    \"LocationID\": { \"value\": \"MAIN\" },\r\n    \"OrderType\": { \"value\": \"RC\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create a return order for invoices. This process is described in [Create a Return Order for Invoices](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ec34c7cf-6990-4bf2-9479-1c7a84ffc717)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with Tax Parameters Overridden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"One tax detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxDetails).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Tax total is 0.5\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxTotal.value).to.eql(0.5);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Read the Tracking Number from a Shipment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"IsTaxValid\": { \"value\": true },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM08\" },\r\n            \"OrderQty\": { \"value\": 2 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ],\r\n    \"TaxDetails\": [\r\n        {\r\n            \"TaxID\": { \"value\": \"NYSTATETAX\" },\r\n            \"TaxAmount\": { \"value\": 0.5 }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details,TaxDetails",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,TaxDetails"
								}
							]
						},
						"description": "This example shows how to create a sales order with tax parameters overridden. This process is described in [Create a Sales Order with Tax Parameters Overridden](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=92d74d1d-5571-4852-a12a-bb8d66dc6f73)."
					},
					"response": []
				},
				{
					"name": "Create a Sales Order with Allocations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"One allocation line is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details[0].Allocations).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Order total is 4.52\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(4.52);\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Read the Tracking Number from a Shipment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": {\"value\": \"COFFEESHOP\"},\r\n    \"Description\": {\"value\": \"Sales Order with Allocations\"},\r\n    \"Details\": [\r\n        {\r\n            \"InventoryID\": {\"value\": \"APJAM08\"},\r\n            \"Allocations\": [\r\n                {\r\n                    \"SplitLineNbr\": {\"value\": \"1\"},\r\n                    \"Allocated\": { \"value\": true },\r\n                    \"AllocWarehouseID\": { \"value\": \"WHOLESALE\" },\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LotSerialNbr\": { \"value\": \"116046\" },\r\n                    \"Qty\": { \"value\": 1 }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"Hold\": {\"value\": true},\r\n    \"LocationID\": {\"value\": \"MAIN\"},\r\n    \"OrderType\": {\"value\": \"SO\"}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details,Details/Allocations",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Details/Allocations"
								}
							]
						},
						"description": "This example shows how to create a sales order with allocations. This process is described in [Create a Sales Order with Allocations](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=256b7d10-b33e-8ad8-3d03-cd0009e91527)."
					},
					"response": []
				},
				{
					"name": "Create an RMA Order for a Return",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Requests to add sales order, shipment, invoice\r",
									"var callback = (pm, error, response) => {\r",
									"    //Add sales order\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder';\r",
									"    var requestAddSO1 = {\r",
									"        url: url1,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"OrderType\": { \"value\": \"SO\"},\"CustomerID\": {\"value\": \"FRUITICO\"},\"Details\": [{\"InventoryID\": {\"value\": \"SWB-32OZ-GBT\"}, \"OrderQty\": {\"value\": 1}, \"WarehouseID\": {\"value\": \"RETAIL\"}}]}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestAddSO1,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for adding order should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('orderID', jsonResponse.id);\r",
									"        });\r",
									"\r",
									"        //Create shipment for the sales order\r",
									"        var url2 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder/SalesOrderCreateShipment';\r",
									"        var orderID = pm.collectionVariables.get('orderID');\r",
									"        var requestCreateShipment = {\r",
									"            url: url2,\r",
									"            method: 'POST',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"entity\" : {\"id\": \"' + orderID + '\"}, \"parameters\" : { \"ShipmentDate\": { \"value\": \"2023-08-20T00:00:00+03:00\" },\"WarehouseID\": { \"value\": \"RETAIL\" }}}'},\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(requestCreateShipment,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test(\"Status code is 202\", function () {\r",
									"                response.to.have.status(202);\r",
									"            });\r",
									"            //Check the status of the operation\r",
									"            if (response.code === 202) {\r",
									"                var url = pm.collectionVariables.get('BaseURL') + response.headers.get(\"Location\");\r",
									"                var requestStatus = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                myFunction();\r",
									"                function myFunction(){\r",
									"                    pm.sendRequest(requestStatus,  (error, response) => {\r",
									"                        if (error) {\r",
									"                            console.log(error);\r",
									"                        }\r",
									"\r",
									"                        if(response.code != 204)\r",
									"                        {\r",
									"                            setTimeout(function(){},100000);\r",
									"                            myFunction();\r",
									"                        }\r",
									"                        else\r",
									"                        {\r",
									"                            //Get shipment number\r",
									"                            var url = pm.collectionVariables.get('EndpointURL') + 'SalesOrder/' + orderID + '?$expand=Shipments';\r",
									"                            var requestSalesOrder = {\r",
									"                                url: url,\r",
									"                                method: 'GET',\r",
									"                                header: {\r",
									"                                    'Content-Type': 'application/json'\r",
									"                                }\r",
									"                            };\r",
									"                            pm.sendRequest(requestSalesOrder,  (error, response) => {\r",
									"                                if (error) {\r",
									"                                    console.log(error);\r",
									"                                }\r",
									"\r",
									"                                pm.test('Response for the sales order should be OK to process', () => {\r",
									"                                    pm.expect(error).to.equal(null);\r",
									"                                    pm.expect(response).to.have.property('code', 200);\r",
									"                                    pm.expect(response).to.have.property('status', 'OK');\r",
									"                                    const jsonResponse = response.json();\r",
									"                                    pm.collectionVariables.set('shipmentNbr', jsonResponse.Shipments[0].ShipmentNbr.value);\r",
									"                                });\r",
									"\r",
									"                                //Confirm shipment\r",
									"                                var url2 = pm.collectionVariables.get('EndpointURL') + 'Shipment/ConfirmShipment';\r",
									"                                var shipmentNbr = pm.collectionVariables.get('shipmentNbr');\r",
									"                                var requestConfirmShipment = {\r",
									"                                    url: url2,\r",
									"                                    method: 'POST',\r",
									"                                    body: {\r",
									"                                        mode: 'raw',\r",
									"                                        raw: '{\"entity\" : {\"Type\" : {\"value\" : \"Shipment\"}, \"ShipmentNbr\": {\"value\" : \"' + shipmentNbr + '\"}}}'},\r",
									"                                    header: {\r",
									"                                        'Content-Type': 'application/json'\r",
									"                                    }\r",
									"                                };\r",
									"\r",
									"                                pm.sendRequest(requestConfirmShipment,  (error, response) => {\r",
									"                                    pm.test(\"Status code is 202\", function () {\r",
									"                                        response.to.have.status(202);\r",
									"                                    });\r",
									"                                    if (response.code === 202) {\r",
									"                                        var url = pm.collectionVariables.get('BaseURL') + response.headers.get(\"Location\");\r",
									"                                        var requestStatus = {\r",
									"                                            url: url,\r",
									"                                            method: 'GET',\r",
									"                                            header: {\r",
									"                                                'Content-Type': 'application/json'\r",
									"                                            }\r",
									"                                        };\r",
									"                                        myFunctionX();\r",
									"                                        function myFunctionX(){\r",
									"                                            pm.sendRequest(requestStatus,  (error, response) => {\r",
									"                                                if (error) {\r",
									"                                                    console.log(error);\r",
									"                                                }\r",
									"\r",
									"                                                if(response.code != 204)\r",
									"                                                {\r",
									"                                                    setTimeout(function(){},100000);\r",
									"                                                    myFunctionX();\r",
									"                                                }\r",
									"                                                else\r",
									"                                                {                                                       \r",
									"                                                    //Prepare invoice\r",
									"                                                    var url2 = pm.collectionVariables.get('EndpointURL') + 'Shipment/PrepareInvoice';\r",
									"                                                    var requestPrepareInvoice = {\r",
									"                                                        url: url2,\r",
									"                                                        method: 'POST',\r",
									"                                                        body: {\r",
									"                                                            mode: 'raw',\r",
									"                                                            raw: '{\"entity\" : {\"Type\" : {\"value\" : \"Shipment\"}, \"ShipmentNbr\": {\"value\" : \"' + shipmentNbr + '\"}}}'},\r",
									"                                                        header: {\r",
									"                                                            'Content-Type': 'application/json'\r",
									"                                                        }\r",
									"                                                    };\r",
									"\r",
									"                                                    pm.sendRequest(requestPrepareInvoice,  (error, response) => {\r",
									"                                                        if (error) {\r",
									"                                                            console.log(error);\r",
									"                                                        }\r",
									"\r",
									"                                                        pm.test(\"Status code is 202\", function () {\r",
									"                                                            response.to.have.status(202);\r",
									"                                                        });\r",
									"                                                        //Check the status of the operation\r",
									"                                                        if (response.code === 202) {\r",
									"                                                            var url = pm.collectionVariables.get('BaseURL') + response.headers.get(\"Location\");\r",
									"                                                            var requestStatus = {\r",
									"                                                                url: url,\r",
									"                                                                method: 'GET',\r",
									"                                                                header: {\r",
									"                                                                    'Content-Type': 'application/json'\r",
									"                                                                }\r",
									"                                                            };\r",
									"                                                            myFunction3();\r",
									"                                                            function myFunction3(){\r",
									"                                                                pm.sendRequest(requestStatus,  (error, response) => {\r",
									"                                                                    if (error) {\r",
									"                                                                        console.log(error);\r",
									"                                                                    }\r",
									"\r",
									"                                                                    if(response.code != 204)\r",
									"                                                                    {\r",
									"                                                                        setTimeout(function(){},100000);\r",
									"                                                                        myFunction3();\r",
									"                                                                    }\r",
									"                                                                    else\r",
									"                                                                    {\r",
									"                                                                        //Get invoice number for the shipment\r",
									"                                                                        var url = pm.collectionVariables.get('EndpointURL') + 'Shipment/' + shipmentNbr + '?$expand=Orders';\r",
									"                                                                        var requestShipment = {\r",
									"                                                                            url: url,\r",
									"                                                                            method: 'GET',\r",
									"                                                                            header: {\r",
									"                                                                                'Content-Type': 'application/json'\r",
									"                                                                            }\r",
									"                                                                        };\r",
									"                                                                        pm.sendRequest(requestShipment,  (error, response) => {\r",
									"                                                                            if (error) {\r",
									"                                                                                console.log(error);\r",
									"                                                                            }\r",
									"\r",
									"                                                                            pm.test('Response for the shipment should be OK to process', () => {\r",
									"                                                                                pm.expect(error).to.equal(null);\r",
									"                                                                                pm.expect(response).to.have.property('code', 200);\r",
									"                                                                                pm.expect(response).to.have.property('status', 'OK');\r",
									"                                                                                const jsonResponse = response.json();\r",
									"                                                                                pm.collectionVariables.set('invoiceNbr', jsonResponse.Orders[0].InvoiceNbr.value);\r",
									"                                                                            });\r",
									"\r",
									"                                                                            //Release invoice\r",
									"                                                                            var url2 = pm.collectionVariables.get('EndpointURL') + 'Invoice/ReleaseInvoice';\r",
									"                                                                            var invoiceNbr = pm.collectionVariables.get('invoiceNbr');\r",
									"                                                                            var requestReleaseInvoice = {\r",
									"                                                                                url: url2,\r",
									"                                                                                method: 'POST',\r",
									"                                                                                body: {\r",
									"                                                                                    mode: 'raw',\r",
									"                                                                                    raw: '{\"entity\" : {\"Type\" : {\"value\": \"Invoice\"}, \"ReferenceNbr\": {\"value\" : \"' + invoiceNbr + '\"}}}'},\r",
									"                                                                                header: {\r",
									"                                                                                    'Content-Type': 'application/json'\r",
									"                                                                                }\r",
									"                                                                            };\r",
									"\r",
									"                                                                            pm.sendRequest(requestReleaseInvoice,  (error, response) => {\r",
									"                                                                                if (error) {\r",
									"                                                                                    console.log(error);\r",
									"                                                                                }\r",
									"\r",
									"                                                                                pm.test(\"Status code is 202\", function () {\r",
									"                                                                                    response.to.have.status(202);\r",
									"                                                                                });\r",
									"                                                                                //Check the status of the operation\r",
									"                                                                                if (response.code === 202) {\r",
									"                                                                                    var url = pm.collectionVariables.get('BaseURL') + response.headers.get(\"Location\");\r",
									"                                                                                    var requestStatus = {\r",
									"                                                                                        url: url,\r",
									"                                                                                        method: 'GET',\r",
									"                                                                                        header: {\r",
									"                                                                                            'Content-Type': 'application/json'\r",
									"                                                                                        }\r",
									"                                                                                    };\r",
									"                                                                                    myFunction4();\r",
									"                                                                                    function myFunction4(){\r",
									"                                                                                        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"                                                                                            if (error) {\r",
									"                                                                                                console.log(error);\r",
									"                                                                                            }\r",
									"\r",
									"                                                                                            if(response.code != 204)\r",
									"                                                                                            {\r",
									"                                                                                                setTimeout(function(){},100000);\r",
									"                                                                                                myFunction();\r",
									"                                                                                            }\r",
									"                                                                                        });\r",
									"                                                                                    } \r",
									"                                                                                }\r",
									"                                                                            });\r",
									"                                                                        });\r",
									"                                                                    }\r",
									"                                                                });\r",
									"                                                            } \r",
									"                                                        }\r",
									"                                                    });\r",
									"                                                }                                                \r",
									"                                            });\r",
									"                                        } \r",
									"                                    }\r",
									"                                });\r",
									"                            });\r",
									"                        }\r",
									"                    });\r",
									"                } \r",
									"            }\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and do prerequesites\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two detail lines are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.has.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Order type is RM\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderType.value).to.eql('RM');\r",
									"});\r",
									"pm.test(\"Order total is 28.01\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.OrderTotal.value).to.eql(28.01);\r",
									"    pm.collectionVariables.set('RMorderNbr', jsonResponse.id);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"OrderType\": { \"value\": \"RM\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InvoiceNbr\": { \"value\": \"{{invoiceNbr}}\" },\r\n            \"Operation\": { \"value\": \"Receipt\" },\r\n            \"InventoryID\": { \"value\": \"SWB-32OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": -1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"Operation\": { \"value\": \"Issue\" },\r\n            \"InventoryID\": { \"value\": \"PEARJAM96\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"RETAIL\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows how to create a sales order of the RM type. This process is described in [Create a Sales Order of the RM Type](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=83c0e442-ce9e-4e57-8a52-b8b22f56fcbe)."
					},
					"response": []
				},
				{
					"name": "Create a Shipment with the Receipt Operation for an RMA Order for a Return",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"//Check the status of the operation\r",
									"if (pm.response.code === 202) {\r",
									"    var url = pm.collectionVariables.get('BaseURL') + pm.response.headers.get(\"Location\");\r",
									"    var requestStatus = {\r",
									"        url: url,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    myFunction();\r",
									"    function myFunction(){\r",
									"        pm.sendRequest(requestStatus,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            if(response.code != 204)\r",
									"            {\r",
									"                setTimeout(function(){},100000);\r",
									"                myFunction();\r",
									"            }\r",
									"            else\r",
									"            {\r",
									"                var url = pm.collectionVariables.get('EndpointURL') + 'SalesOrder/RM/000127?$expand=Shipments';\r",
									"                var requestSalesOrder = {\r",
									"                    url: url,\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    }\r",
									"                };\r",
									"                pm.sendRequest(requestSalesOrder,  (error, response) => {\r",
									"                    if (error) {\r",
									"                        console.log(error);\r",
									"                    }\r",
									"\r",
									"                    pm.test('Response for the sales order should be OK to process', () => {\r",
									"                        pm.expect(error).to.equal(null);\r",
									"                        pm.expect(response).to.have.property('code', 200);\r",
									"                        pm.expect(response).to.have.property('status', 'OK');\r",
									"                    });\r",
									"                    pm.test(\"Sales order status is Shipping\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Status.value).to.be.eql('Shipping');\r",
									"                    });\r",
									"                    pm.test(\"One shipment is included\", function (){\r",
									"                        const jsonResponse = response.json();\r",
									"                        pm.expect(jsonResponse.Shipments).to.has.lengthOf(1);\r",
									"                    });\r",
									"                    //Sign out\r",
									"                    var url = pm.collectionVariables.get('InstanceURL');\r",
									"                    pm.acuFunc.singOutFunction(pm, url);\r",
									"                });\r",
									"            }\r",
									"        });\r",
									"    } \r",
									"}\r",
									"//Set the next request\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"entity\":{\r\n    \"OrderNbr\": {\"value\": \"{{RMorderNbr}}\"},\r\n    \"OrderType\":  {\"value\": \"RM\"}\r\n  },\r\n  \"parameters\": {\r\n    \"ShipmentDate\":  {\"value\": \"2024-02-11T00:00:00+03:00\"},\r\n    \"WarehouseID\":  {\"value\": \"WHOLESALE\"}\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateReceipt",
							"host": [
								"{{EndpointURL}}SalesOrder"
							],
							"path": [
								"SalesOrderCreateReceipt"
							]
						},
						"description": "This example shows how to create a receipt for a sales order of the RM type. This process is described in [Create a Receipt for a Sales Order of the RM Type](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a0257153-3f15-4563-8cf0-5a269b0008db)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [SalesOrder](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=22f2d9a6-c0d8-4909-a430-415d21d50eb1) entity."
		},
		{
			"name": "ServiceOrder",
			"item": [
				{
					"name": "Retrieve a Service Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Excluded from collection running\r",
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One service order is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Service order number is 000019\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].ServiceOrderNbr.value).to.eql('000019');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Read the Tracking Number from a Shipment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}ServiceOrder?$filter=ServiceOrderNbr eq '000019'",
							"host": [
								"{{EndpointURL}}ServiceOrder"
							],
							"query": [
								{
									"key": "$filter",
									"value": "ServiceOrderNbr eq '000019'"
								}
							]
						},
						"description": "This example shows the retrieval of a service order, which is described in [Retrieve a Service Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=7673a33c-ebdc-44d4-a54b-8def79aafb6f)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [ServiceOrder](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e494443c-2506-4be0-9a54-a3b57cca4fb4) entity."
		},
		{
			"name": "Shipment",
			"item": [
				{
					"name": "Create a Shipment for Two Sales Orders with Allocations and Package Contents",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Requests to add sales orders\r",
									"var callback = (pm, error, response) => {\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder';\r",
									"    var requestAddSO1 = {\r",
									"        url: url1,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"OrderType\": { \"value\": \"SO\"},\"CustomerID\": {\"value\": \"GOODFOOD\"},\"Details\": [{\"InventoryID\": {\"value\": \"APJAM08\"}, \"OrderQty\": {\"value\": 2}, \"UOM\": {\"value\": \"PIECE\"}, \"WarehouseID\": {\"value\": \"WHOLESALE\"}}]}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestAddSO1,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for adding order should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('orderNbr1', jsonResponse.OrderNbr.value);\r",
									"        });\r",
									"\r",
									"        var url2 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder';\r",
									"        var requestAddSO2 = {\r",
									"            url: url2,\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"OrderType\": { \"value\": \"SO\"},\"CustomerID\": {\"value\": \"GOODFOOD\"},\"Details\": [{\"InventoryID\": {\"value\": \"APJAM32\"}, \"OrderQty\": {\"value\": 1}, \"UOM\": {\"value\": \"BOX\"}, \"WarehouseID\": {\"value\": \"WHOLESALE\"}}]}'},\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(requestAddSO2,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for adding order should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"                const jsonResponse = response.json();\r",
									"                pm.collectionVariables.set('orderNbr2', jsonResponse.OrderNbr.value);\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and do prerequesites\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two details are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.have.lengthOf(2);\r",
									"});\r",
									"pm.test(\"Package box is LARGE\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Packages[0].BoxID.value).to.eql(\"LARGE\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"OrderNbr\": { \"value\": \"{{orderNbr1}}\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Allocations\": [\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LocationID\": { \"value\": \"L2R3S1\" },\r\n                    \"Qty\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                },\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LocationID\": { \"value\": \"L3R2S1\" },\r\n                    \"Qty\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"OrderNbr\": { \"value\": \"{{orderNbr2}}\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Allocations\": [\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM32\" },\r\n                    \"LocationID\": { \"value\": \"L1R3S2\" },\r\n                    \"Qty\": { \"value\": 6 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"LocationID\": { \"value\": \"MAIN\" },\r\n    \"Operation\": { \"value\": \"Issue\" },\r\n    \"Packages\": [\r\n        {\r\n            \"BoxID\": { \"value\": \"LARGE\" },\r\n            \"UOM\": { \"value\": \"KG\" },\r\n            \"Weight\": { \"value\": 15 },\r\n            \"PackageContents\": [\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LotSerialNbr\": { \"value\": \"\" },\r\n                    \"Quantity\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" },\r\n                    \"OrigOrderType\": { \"value\": \"SO\" },\r\n                    \"OrigOrderNbr\": { \"value\": \"{{orderNbr1}}\" }\r\n                },\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LotSerialNbr\": { \"value\": \"\" },\r\n                    \"Quantity\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" },\r\n                    \"OrigOrderType\": { \"value\": \"SO\" },\r\n                    \"OrigOrderNbr\": { \"value\": \"{{orderNbr1}}\" }\r\n                },\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM32\" },\r\n                    \"LotSerialNbr\": { \"value\": \"\" },\r\n                    \"Quantity\": { \"value\": 6 },\r\n                    \"UOM\": { \"value\": \"PIECE\" },\r\n                    \"OrigOrderType\": { \"value\": \"SO\" },\r\n                    \"OrigOrderNbr\": { \"value\": \"{{orderNbr2}}\" }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Shipment?$expand=Details,Details/Allocations,Packages,Packages/PackageContents",
							"host": [
								"{{EndpointURL}}Shipment"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details,Details/Allocations,Packages,Packages/PackageContents"
								}
							]
						},
						"description": "This example shows the creation of a shipment with allocations and package specifications, which is described in [Create a Shipment for Two Sales Orders with Allocations and Package Specifications](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ab83de33-505c-476e-b8b8-99f2a98e142c)."
					},
					"response": []
				},
				{
					"name": "Read the Tracking Number from a Shipment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One shipment is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"One package is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].Packages).to.has.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Tracking number is 398305336614\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].Packages[0].TrackingNbr.value).to.eql('398305336614');\r",
									"});\r",
									"//Sign out and set the next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Write the Tracking Number to a Shipment\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Shipment?$expand=Packages&$select=Packages/TrackingNbr&$filter=ShipmentNbr eq '000001'",
							"host": [
								"{{EndpointURL}}Shipment"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Packages"
								},
								{
									"key": "$select",
									"value": "Packages/TrackingNbr"
								},
								{
									"key": "$filter",
									"value": "ShipmentNbr eq '000001'"
								}
							]
						},
						"description": "This example shows how to read the tracking number from a shipment, which is described in [Read the Tracking Number from a Shipment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b68ebcd5-89c9-4d81-9caa-613de0d03535)."
					},
					"response": []
				},
				{
					"name": "Write the Tracking Number to a Shipment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Request to add a package\r",
									"var callback = (pm, error, response) => {\r",
									"    var url2 = pm.collectionVariables.get('EndpointURL') + 'Shipment?$expand=Packages';\r",
									"    var requestAddPackage = {\r",
									"        url: url2,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"ShipmentNbr\": { \"value\": \"000058\"},\"Type\": {\"value\": \"Shipment\"},\"Packages\": [{\"BoxID\": {\"value\": \"SMALL\"}}]}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestAddPackage,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for adding package should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('shipmentID', jsonResponse.id);\r",
									"            pm.collectionVariables.set('packageID', jsonResponse.Packages[0].id);\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and add a package to the shipment\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One package is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Packages).to.have.lengthOf(1);\r",
									"});\r",
									"pm.test(\"Tracking number is 398305336619\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Packages[0].TrackingNbr.value).to.eql('398305336619');\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Update Freight Cost or Price\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{shipmentID}}\",\r\n    \"Packages\": [\r\n        {\r\n            \"id\": \"{{packageID}}\",\r\n            \"TrackingNbr\": { \"value\": \"398305336619\" }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Shipment?$expand=Packages&$select=Packages/TrackingNbr",
							"host": [
								"{{EndpointURL}}Shipment"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Packages"
								},
								{
									"key": "$select",
									"value": "Packages/TrackingNbr"
								}
							]
						},
						"description": "This example shows how to specify the tracking number in a shipment, which is described in [Write the Tracking Number to a Shipment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=670f7957-231a-472b-9afb-55783a876dd9)."
					},
					"response": []
				},
				{
					"name": "Update Freight Cost or Price",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Request to configure shipments\r",
									"var callback = (pm, error, response) => {\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'ShipVia';\r",
									"    var requestPutShipVia = {\r",
									"        url: url1,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"CarrierID\": { \"value\": \"LOCAL\"},\"CalculationMethod\": {\"value\": \"MANUAL\"}}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestPutShipVia,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for updating ship via code should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"\r",
									"        var url2 = pm.collectionVariables.get('EndpointURL') + 'Shipment';\r",
									"        var requestPutShipment = {\r",
									"            url: url2,\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"Type\": { \"value\": \"Shipment\"},\"ShipmentNbr\": {\"value\": \"000058\"},\"ShipVia\": {\"value\": \"LOCAL\"}}'},\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(requestPutShipment,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for updating shipment should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and do prerequesites\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Freight price is 2\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.FreightPrice.value).to.eql(2);\r",
									"});\r",
									"pm.test(\"Freight cost is 1\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.FreightCost.value).to.eql(1);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create Separate Shipments for Each Sales Order\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FreightPrice\": { \"value\": 2.0000 },\r\n    \"FreightCost\": { \"value\": 1.0000 },\r\n    \"OverrideFreightPrice\": { \"value\": true },\r\n    \"ShipmentNbr\": { \"value\": \"000058\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Shipment",
							"host": [
								"{{EndpointURL}}Shipment"
							]
						},
						"description": "This example shows the update of the freight cost or freight price of a shipment, which is described in [Update Freight Cost or Price](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=75c01ece-c80e-4a5e-a6e1-c4205ffa8263)."
					},
					"response": []
				},
				{
					"name": "Create Separate Shipments for Each Sales Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//U100 sign-in data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100');\r",
									"//Requests to add sales orders\r",
									"var callback = (pm, error, response) => {\r",
									"    var url1 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder';\r",
									"    var requestAddSO1 = {\r",
									"        url: url1,\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"OrderType\": { \"value\": \"SO\"},\"CustomerID\": {\"value\": \"GOODFOOD\"},\"Details\": [{\"InventoryID\": {\"value\": \"APJAM08\"}, \"OrderQty\": {\"value\": 20}, \"UOM\": {\"value\": \"PIECE\"}, \"WarehouseID\": {\"value\": \"WHOLESALE\"}}]}'},\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.sendRequest(requestAddSO1,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for adding order should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"            const jsonResponse = response.json();\r",
									"            pm.collectionVariables.set('orderNbr1', jsonResponse.OrderNbr.value);\r",
									"        });\r",
									"\r",
									"        var url2 = pm.collectionVariables.get('EndpointURL') + 'SalesOrder';\r",
									"        var requestAddSO2 = {\r",
									"            url: url2,\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"OrderType\": { \"value\": \"SO\"},\"CustomerID\": {\"value\": \"GOODFOOD\"},\"Details\": [{\"InventoryID\": {\"value\": \"APJAM32\"}, \"OrderQty\": {\"value\": 3}, \"UOM\": {\"value\": \"BOX\"}, \"WarehouseID\": {\"value\": \"WHOLESALE\"}}]}'},\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(requestAddSO2,  (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for adding order should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"                const jsonResponse = response.json();\r",
									"                pm.collectionVariables.set('orderNbr2', jsonResponse.OrderNbr.value);\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"};\r",
									"//Sign in and do prerequesites\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"One detail is included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Details).to.have.lengthOf(1);\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Modified Stock Items\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"OrderNbr\": { \"value\": \"{{orderNbr1}}\" },\r\n            \"OrderType\": { \"value\": \"SO\" }\r\n        },\r\n        {\r\n            \"OrderNbr\": { \"value\": \"{{orderNbr2}}\" },\r\n            \"OrderType\": { \"value\": \"SO\" }\r\n        }\r\n    ],\r\n    \"LocationID\": { \"value\": \"MAIN\" },\r\n    \"Operation\": { \"value\": \"Issue\" },\r\n    \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n    \"CreateNewShipmentForEveryOrder\": { \"value\": true}\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Shipment?$expand=Details",
							"host": [
								"{{EndpointURL}}Shipment"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Details"
								}
							]
						},
						"description": "This example shows the creation of separate shipments for each of the two sales orders, which is described in [Create Separate Shipments for Each Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=03c70fe4-c9e5-4539-b156-352bef734b2a)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Shipment](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=b6caac53-f98e-48aa-8571-eb0656100f5a) entity."
		},
		{
			"name": "StockItem",
			"item": [
				{
					"name": "Retrieve the List of Modified Stock Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response contains AALEGO500\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"AALEGO500\");\r",
									"});\r",
									"pm.test(\"Response does not contain AACOMPUT01\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"AACOMPUT01\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Stock Items with Attributes\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Data for sign-in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"//Modification of stock items before request\r",
									"var callback = (pm, error, response) => {\r",
									"    var endpointurl = pm.collectionVariables.get('EndpointURL');\r",
									"    var requestAACOMPUT01 = {\r",
									"        url: endpointurl+'StockItem?$select=InventoryID,ItemStatus',\r",
									"        method: 'PUT',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: '{\"InventoryID\": {\"value\": \"AACOMPUT01\"},\"ItemStatus\": {\"value\": \"Inactive\"}}'\r",
									"        },\r",
									"        header: {\r",
									"            'Content-Type': 'application/json'\r",
									"        }\r",
									"    };\r",
									"    pm.sendRequest(requestAACOMPUT01,  (error, response) => {\r",
									"        if (error) {\r",
									"            console.log(error);\r",
									"        }\r",
									"\r",
									"        pm.test('Response for AACOMPUT01 should be OK to process', () => {\r",
									"            pm.expect(error).to.equal(null);\r",
									"            pm.expect(response).to.have.property('code', 200);\r",
									"            pm.expect(response).to.have.property('status', 'OK');\r",
									"        });\r",
									"\r",
									"        var requestAALEGO500 = {\r",
									"            url: endpointurl+'StockItem?$select=InventoryID,Description',\r",
									"            method: 'PUT',\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: '{\"InventoryID\": {\"value\": \"AALEGO500\"},\"Description\": {\"value\": \"Lego, 500 piece set\"}}'\r",
									"            },\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        };\r",
									"        pm.sendRequest(requestAALEGO500, (error, response) => {\r",
									"            if (error) {\r",
									"                console.log(error);\r",
									"            }\r",
									"\r",
									"            pm.test('Response for AALEGO500 should be OK to process', () => {\r",
									"                pm.expect(error).to.equal(null);\r",
									"                pm.expect(response).to.have.property('code', 200);\r",
									"                pm.expect(response).to.have.property('status', 'OK');\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									"//Sign in and modify stock items\r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password, callback)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}/StockItem?$filter=ItemStatus eq 'Active' and LastModified gt datetimeoffset'2022-09-24T00:00:00.000'&$expand=WarehouseDetails&$select=InventoryID,Description,WarehouseDetails/WarehouseID,WarehouseDetails/QtyOnHand,ItemClass,BaseUOM",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"StockItem"
							],
							"query": [
								{
									"key": "$filter",
									"value": "ItemStatus eq 'Active' and LastModified gt datetimeoffset'2022-09-24T00:00:00.000'"
								},
								{
									"key": "$expand",
									"value": "WarehouseDetails"
								},
								{
									"key": "$select",
									"value": "InventoryID,Description,WarehouseDetails/WarehouseID,WarehouseDetails/QtyOnHand,ItemClass,BaseUOM"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Stock Items with Attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Three attributes are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Attributes).to.have.lengthOf(3);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Unit Conversion Rules from a Stock Item\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem/APL-16OZ-GBT?$expand=Attributes",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"path": [
								"APL-16OZ-GBT"
							],
							"query": [
								{
									"key": "$expand",
									"value": "Attributes"
								}
							]
						},
						"description": "This example shows the retrieval of stock items with attributes, which is described in [Retrieve Stock Items with Attributes](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=48756ad4-c99e-42e3-9cff-14e9e199b310)."
					},
					"response": []
				},
				{
					"name": "Retrieve Unit Conversion Rules from a Stock Item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Two UOM conventions are included\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.UOMConversions).to.have.lengthOf(2);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve Stock Items with Prices and Quantities by Warehouse\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem/PLUMJAM96?$expand=UOMConversions",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"path": [
								"PLUMJAM96"
							],
							"query": [
								{
									"key": "$expand",
									"value": "UOMConversions"
								}
							]
						},
						"description": "This example shows the retrieval of unit conversion rules from a stock item, which is described in [Retrieve Unit Conversion Rules from a Stock Item](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=aaeef8da-0636-4f17-af9d-56abf445b5c8)."
					},
					"response": []
				},
				{
					"name": "Retrieve Stock Items with Prices and Quantities by Warehouse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Not empty list is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Default price is not null\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].DefaultPrice.value).to.be.not.null;\r",
									"});\r",
									"pm.test(\"QtyOnHand is not null\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].WarehouseDetails[0].QtyOnHand.value).to.be.not.null;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Attachments of a Stock Item\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}StockItem?$filter=DefaultWarehouseID eq 'WHOLESALE'&$expand=WarehouseDetails&$select=DefaultPrice,WarehouseDetails/QtyOnHand,WarehouseDetails/WarehouseID",
							"host": [
								"{{EndpointURL}}StockItem"
							],
							"query": [
								{
									"key": "$filter",
									"value": "DefaultWarehouseID eq 'WHOLESALE'"
								},
								{
									"key": "$expand",
									"value": "WarehouseDetails"
								},
								{
									"key": "$select",
									"value": "DefaultPrice,WarehouseDetails/QtyOnHand,WarehouseDetails/WarehouseID"
								}
							]
						},
						"description": "This example shows the retrieval of stock items with prices and quantities by warehouse, which is described in [Retrieve Stock Items with Prices and Quantities by Warehouse](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ef431206-da3a-4e30-b724-0071f82fb25c)."
					},
					"response": []
				},
				{
					"name": "Retrieve the List of Attachments of a Stock Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The stock item has files\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.files).to.be.not.empty;\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"fileRef\", jsonData.files[0].href);\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the File Attached to a Stock Item\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}/StockItem/AAMACHINE1?$select=InventoryID,files&$expand=files",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"StockItem",
								"AAMACHINE1"
							],
							"query": [
								{
									"key": "$select",
									"value": "InventoryID,files"
								},
								{
									"key": "$expand",
									"value": "files"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve the File Attached to a Stock Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"The stock item contains a JPG file\", function (){\r",
									"    pm.expect(pm.response.text()).to.include(\"Exif\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Add a Note to a Stock Item\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BaseURL}}{{fileRef}}",
							"host": [
								"{{BaseURL}}{{fileRef}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a Note to a Stock Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"A note is attached\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.note.value).to.equal(\"My note\");\r",
									"});\r",
									"//Sign out and set next request\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Update a Tax Category\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with T100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameT100');\r",
									"var password = pm.collectionVariables.get('PasswordT100');\r",
									"var tenant = pm.collectionVariables.get('TenantT100');\r",
									"var branch = pm.collectionVariables.get('BranchT100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"InventoryID\":{\"value\":\"AALEGO500\"},\n\t\"note\": {\"value\": \"My note\"}\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}/StockItem?$select=InventoryID",
							"host": [
								"{{EndpointURL}}"
							],
							"path": [
								"StockItem"
							],
							"query": [
								{
									"key": "$select",
									"value": "InventoryID"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [StockItem](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8def7ed-b7d2-4bd6-bec7-edea763f7741) entity."
		},
		{
			"name": "TaxCategory",
			"item": [
				{
					"name": "Update a Tax Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Tax category is TAXABLE\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TaxCategoryID.value).to.be.eql('TAXABLE');\r",
									"});\r",
									"pm.test(\"ExcludeListedTaxes is true\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.ExcludeListedTaxes.value).to.be.eql(true);\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Read Employee Time Activities\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Active\": { \"value\": true },\r\n    \"Description\": { \"value\": \"Taxable Goods and Services v2\" },\r\n    \"ExcludeListedTaxes\": { \"value\": true },\r\n    \"TaxCategoryID\": { \"value\": \"TAXABLE\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}TaxCategory",
							"host": [
								"{{EndpointURL}}TaxCategory"
							]
						},
						"description": "This example shows the update of a tax category, which is described in [Update a Tax Category](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=5d41edd8-90d2-40bd-bda7-91d617ac9427)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [TaxCategory](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c5ee575c-fd7e-445e-bb97-f66df3fbb7f7) entity."
		},
		{
			"name": "TimeEntry",
			"item": [
				{
					"name": "Read Employee Time Activities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Not empty list is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"TimeSpent is not null\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].TimeSpent.value).to.be.not.null;\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Write Employee Time Activities\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}TimeEntry",
							"host": [
								"{{EndpointURL}}TimeEntry"
							]
						},
						"description": "This example shows how to read the time spent on the tasks of projects. This process is described in [Read Employee Time Activities](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=6826de52-8447-4149-aa42-957cbe30e452)."
					},
					"response": []
				},
				{
					"name": "Write Employee Time Activities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = 'gibbs';\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Employee is EP00000026\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.Employee.value).to.be.eql('EP00000026');\r",
									"});\r",
									"pm.test(\"TimeSpent is 01:30\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TimeSpent.value).to.be.eql('01:30');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Search for Time Entries by Date\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Summary\" : {\"value\" : \"Time entry summary\"},\r\n  \"Date\" : {\"value\" : \"2022-08-17T05:50:43.233\" },\r\n  \"Employee\" : {\"value\" : \"EP00000026\" },\r\n  \"ProjectID\" : {\"value\" : \"TOMYUM1\" },\r\n  \"ProjectTaskID\" : {\"value\" : \"PHASE1\" },\r\n  \"CostCode\" : {\"value\" : \"00-000\" },\r\n  \"EarningType\" : {\"value\" : \"RG\" },\r\n  \"TimeSpent\" : {\"value\" : \"01:30\" },\r\n  \"BillableTime\" : {\"value\" : \"00:30\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}TimeEntry",
							"host": [
								"{{EndpointURL}}TimeEntry"
							]
						},
						"description": "This example shows how to specify the time spent on the tasks of projects. This process is described in [Write Employee Time Activities](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=26ffd94a-ac96-4684-a03c-9676a5446211)."
					},
					"response": []
				},
				{
					"name": "Search for Time Entries by Date",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = 'gibbs';\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Not empty list is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"TimeSpent is 01:30\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].TimeSpent.value).to.be.eql('01:30');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Retrieve the List of Vendors\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{EndpointURL}}TimeEntry?$filter=cf.DateTime(f='Items.Date') ge datetimeoffset'2022-08-17' and cf.DateTime(f='Items.Date') le datetimeoffset'2022-08-18T23%3A59%3A59.999%2B04%3A00'&$select=Date,ProjectID,TimeSpent,BillableTime",
							"host": [
								"{{EndpointURL}}TimeEntry"
							],
							"query": [
								{
									"key": "$filter",
									"value": "cf.DateTime(f='Items.Date') ge datetimeoffset'2022-08-17' and cf.DateTime(f='Items.Date') le datetimeoffset'2022-08-18T23%3A59%3A59.999%2B04%3A00'"
								},
								{
									"key": "$select",
									"value": "Date,ProjectID,TimeSpent,BillableTime"
								}
							]
						},
						"description": "This example shows how to search for the time entries entered on particular date. This process is described in [Search for Time Entries by Date](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3127b81c-8f59-4051-9f1a-db0896e3b5af)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [TimeEntry](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=223986c1-b5a5-4506-b0d7-f426bc89d1b7) entity."
		},
		{
			"name": "Vendor",
			"item": [
				{
					"name": "Retrieve the List of Vendors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Not empty list is returned\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"CashAccount is 10200TG\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse[0].CashAccount.value).to.eql('10200TG');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Vendor\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{EndpointURL}}Vendor?$filter=CashAccount eq '10200TG'",
							"host": [
								"{{EndpointURL}}Vendor"
							],
							"query": [
								{
									"key": "$filter",
									"value": "CashAccount eq '10200TG'"
								}
							]
						},
						"description": "This example shows the retrieval of vendors, which is described in [Retrieve the List of Vendors](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0a6af8a9-5055-4f8d-8a61-0dc32f49e1d6)."
					},
					"response": []
				},
				{
					"name": "Create a Vendor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"VendorID is TESTVENDOR\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.VendorID.value).to.eql('TESTVENDOR');\r",
									"});\r",
									"pm.test(\"Vendor class is SUBCON\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.VendorClass.value).to.eql('SUBCON');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"Create a Work Calendar\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"AccountRef\": {},\r\n    \"APAccount\": { \"value\": \"20000\" },\r\n    \"APSubaccount\": { \"value\": \"000000\" },\r\n    \"CashAccount\": { \"value\": \"10200WH\" },\r\n    \"CurrencyID\": { \"value\": \"USD\" },\r\n    \"CurrencyRateType\": { \"value\": \"SPOT\" },\r\n    \"EnableCurrencyOverride\": { \"value\": true },\r\n    \"EnableRateOverride\": { \"value\": false },\r\n    \"F1099Box\": {},\r\n    \"F1099Vendor\": { \"value\": false },\r\n    \"FATCA\": {},\r\n    \"FOBPoint\": {},\r\n    \"ForeignEntity\": { \"value\": false },\r\n    \"LandedCostVendor\": { \"value\": false },\r\n    \"LastModifiedDateTime\": { \"value\": \"2020-08-11T10:47:41.17-04:00\" },\r\n    \"LeadTimedays\": {},\r\n    \"LocationName\": { \"value\": \"Primary Location\" },\r\n    \"MaxReceipt\": { \"value\": 100.000000 },\r\n    \"MinReceipt\": { \"value\": 0.000000 },\r\n    \"ParentAccount\": {},\r\n    \"PaymentBy\": { \"value\": \"Due Date\" },\r\n    \"PaymentLeadTimedays\": { \"value\": 0 },\r\n    \"PaymentMethod\": { \"value\": \"CHECK\" },\r\n    \"PaySeparately\": { \"value\": false },\r\n    \"PrintOrders\": { \"value\": false },\r\n    \"ReceiptAction\": { \"value\": \"Accept but Warn\" },\r\n    \"ReceivingBranch\": {},\r\n    \"RemittanceAddressOverride\": { \"value\": false },\r\n    \"RemittanceContactOverride\": { \"value\": false },\r\n    \"SendOrdersbyEmail\": { \"value\": false },\r\n    \"ShippingAddressOverride\": { \"value\": false },\r\n    \"ShippingContactOverride\": { \"value\": false },\r\n    \"ShippingTerms\": {},\r\n    \"ShipVia\": {},\r\n    \"Status\": { \"value\": \"Active\" },\r\n    \"TaxCalculationMode\": { \"value\": \"Tax Settings\" },\r\n    \"TaxRegistrationID\": {},\r\n    \"TaxZone\": {},\r\n    \"Terms\": { \"value\": \"30D\" },\r\n    \"ThresholdReceipt\": { \"value\": 100.000000 },\r\n    \"VendorClass\": { \"value\": \"SUBCON\" },\r\n    \"VendorID\": { \"value\": \"TESTVENDOR\" },\r\n    \"VendorIsLaborUnion\": { \"value\": false },\r\n    \"VendorIsTaxAgency\": { \"value\": false  },\r\n    \"VendorName\": { \"value\": \"TESTVENDOR\" }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}Vendor",
							"host": [
								"{{EndpointURL}}Vendor"
							]
						},
						"description": "This example shows the creation of a vendor, which is described in [Create a Vendor](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=8c83fbc5-1598-4312-9594-f9a40d7c6201)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [Vendor](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=0469b6dd-5f6d-4813-afc3-2c42dbb9cacf) entity."
		},
		{
			"name": "WorkCalendar",
			"item": [
				{
					"name": "Create a Work Calendar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"WorkCalendarID is TST\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.WorkCalendarID.value).to.eql('TST');\r",
									"});\r",
									"pm.test(\"TimeZone is (GMT-08:00) Pacific Time (US & Canada)\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.TimeZone.value).to.eql('(GMT-08:00) Pacific Time (US & Canada)');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url);\r",
									"pm.execution.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"WorkCalendarID\": {\r\n        \"value\": \"TST\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Test Calendar\"\r\n    },\r\n    \"TimeZone\": {\r\n        \"value\": \"GMTM0800A\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}WorkCalendar",
							"host": [
								"{{EndpointURL}}WorkCalendar"
							]
						},
						"description": "This example shows how to create a work calendar. This process is described in [Create a Work Calendar](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=be815df9-d191-4d4d-a6af-50af4ac9b6cf)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [WorkCalendar](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2fbc7663-b9c5-40b6-839d-40cd7d0e3d12) entity."
		},
		{
			"name": "WorkLocation",
			"item": [
				{
					"name": "Create a Work Location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Sign in to the tenant with U100 data\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"var username = pm.collectionVariables.get('UsernameU100');\r",
									"var password = pm.collectionVariables.get('PasswordU100');\r",
									"var tenant = pm.collectionVariables.get('TenantU100');\r",
									"var branch = pm.collectionVariables.get('BranchU100'); \r",
									"pm.acuFunc.singInFunction(pm, url, tenant, branch, username, password)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test the result\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"WorkLocationID is DELLEVUE\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.WorkLocationID.value).to.eql('DELLEVUE');\r",
									"});\r",
									"pm.test(\"City is Bellevue\", function (){\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.AddressInfo.City.value).to.eql('Bellevue');\r",
									"});\r",
									"//Sign out\r",
									"var url = pm.collectionVariables.get('InstanceURL');\r",
									"pm.acuFunc.singOutFunction(pm, url, \"\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Active\": {\r\n        \"value\": true\r\n    },\r\n    \"WorkLocationID\": {\r\n        \"value\": \"DELLEVUE\"\r\n    },\r\n    \"WorkLocationName\": {\r\n        \"value\": \"New address location\"\r\n    },\r\n    \"AddressInfo\": {\r\n        \"AddressLine1\": {\r\n            \"value\": \"1st Browny St.\"\r\n        },\r\n        \"AddressLine2\": {\r\n            \"value\": \"Suite 200\"\r\n        },\r\n        \"City\": {\r\n            \"value\": \"Bellevue\"\r\n        },\r\n        \"Country\": {\r\n            \"value\": \"US\"\r\n        },\r\n        \"PostalCode\": {\r\n            \"value\": \"98004\"\r\n        },\r\n        \"State\": {\r\n            \"value\": \"WA\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{EndpointURL}}WorkLocation?$expand=AddressInfo",
							"host": [
								"{{EndpointURL}}WorkLocation"
							],
							"query": [
								{
									"key": "$expand",
									"value": "AddressInfo"
								}
							]
						},
						"description": "This example shows how to create a work location. This process is described in [Create a Work Location](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=3afa8a81-839e-403e-85b3-d19a60a02328)."
					},
					"response": []
				}
			],
			"description": "This folder contains requests that use the [WorkLocation](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2650e002-fccd-4128-a187-0c1467766f9d) entity."
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Inventory and Order Management",
					"item": [
						{
							"name": "Creation of a Purchase Receipt from a Purchase Order: 1 Create a Purchase Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"VendorID\": { \"value\": \"GOODFRUITS\" },\r\n    \"Location\": { \"value\": \"MAIN\" },\r\n    \"Details\": [\r\n        {\r\n            \"BranchID\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APPLES\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"UOM\": { \"value\": \"LB\" }\r\n        }\r\n    ],\r\n    \"Hold\": { \"value\": false }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}PurchaseOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}PurchaseOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows the creation of a purchase order, which is described in [Creation of a Purchase Receipt from a Purchase Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=18dedf1e-794d-495e-af0d-878a21e41c12)."
							},
							"response": []
						},
						{
							"name": "Creation of a Purchase Receipt from a Purchase Order: 2 Create a Purchase Receipt from the Purchase Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"VendorID\": { \"value\": \"GOODFRUITS\" },\r\n    \"Location\": { \"value\": \"MAIN\" },\r\n    \"Details\": [\r\n        {\r\n            \"POOrderNbr\": { \"value\": \"000050\" },\r\n            \"POOrderType\": { \"value\": \"Normal\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details",
									"host": [
										"{{EndpointURL}}PurchaseReceipt"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows the creation of a purchase receipt from a purchase order, which is described in [Creation of a Purchase Receipt from a Purchase Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=18dedf1e-794d-495e-af0d-878a21e41c12)."
							},
							"response": []
						},
						{
							"name": "Creation of a Shipment with Allocations and a Package: 1a Create Sales Orders That Will Be Added to a Shipment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM08\" },\r\n            \"OrderQty\": { \"value\": 2 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details&$select=CustomerID,Details/Branch,Details/InventoryID,Details/OrderQty,OrderNbr",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										},
										{
											"key": "$select",
											"value": "CustomerID,Details/Branch,Details/InventoryID,Details/OrderQty,OrderNbr"
										}
									]
								},
								"description": "This example shows the creation of a sales order, which is described in [Creation of a Shipment with Allocations and Package Specifications](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=63774fc7-22fd-42bf-a9db-ed91e2790450)."
							},
							"response": []
						},
						{
							"name": "Creation of a Shipment with Allocations and a Package: 1b Create Sales Orders That Will Be Added to a Shipment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM32\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"BOX\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details&$select=CustomerID,Details/Branch,Details/InventoryID,Details/OrderQty,OrderNbr",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										},
										{
											"key": "$select",
											"value": "CustomerID,Details/Branch,Details/InventoryID,Details/OrderQty,OrderNbr"
										}
									]
								},
								"description": "This example shows the creation of a sales order, which is described in [Creation of a Shipment with Allocations and Package Specifications](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=63774fc7-22fd-42bf-a9db-ed91e2790450)."
							},
							"response": []
						},
						{
							"name": "Creation of a Shipment with Allocations and a Package: 2 Create a Shipment for the Two Sales Orders with Allocations and a Package",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"GOODFOOD\" },\r\n    \"Details\": [\r\n        {\r\n            \"OrderNbr\": { \"value\": \"000066\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Allocations\": [\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LocationID\": { \"value\": \"L2R3S1\" },\r\n                    \"Qty\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                },\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM08\" },\r\n                    \"LocationID\": { \"value\": \"L3R2S1\" },\r\n                    \"Qty\": { \"value\": 1 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"OrderNbr\": { \"value\": \"000067\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Allocations\": [\r\n                {\r\n                    \"InventoryID\": { \"value\": \"APJAM32\" },\r\n                    \"LocationID\": { \"value\": \"L1R3S2\" },\r\n                    \"Qty\": { \"value\": 6 },\r\n                    \"UOM\": { \"value\": \"PIECE\" }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"LocationID\": { \"value\": \"MAIN\" },\r\n    \"Operation\": { \"value\": \"Issue\" },\r\n    \"Packages\": [\r\n        {\r\n            \"BoxID\": { \"value\": \"LARGE\" },\r\n            \"UOM\": { \"value\": \"KG\" },\r\n            \"Weight\": { \"value\": 15 }\r\n        }\r\n    ],\r\n    \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Details,Details/Allocations,Packages,Packages/PackageContents",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details,Details/Allocations,Packages,Packages/PackageContents"
										}
									]
								},
								"description": "This example shows the creation of a shipment with allocations and package specifications, which is described in [Creation of a Shipment with Allocations and Package Specifications](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=63774fc7-22fd-42bf-a9db-ed91e2790450)."
							},
							"response": []
						},
						{
							"name": "Creation of a Purchase Receipt with Allocations: 1 Create a Purchase Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"VendorID\": {\r\n        \"value\": \"GLORYFRUIT\"\r\n    },\r\n    \"Type\": {\r\n        \"value\": \"Normal\"\r\n    },\r\n    \"Date\": {\r\n        \"value\": \"2018-01-30\"\r\n    },\r\n    \"Description\": {\r\n        \"value\": \"Purchase of apples, 20 lb\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": {\r\n                \"value\": \"HEADOFFICE\"\r\n                },\r\n            \"InventoryID\": {\r\n                \"value\": \"APPLES\"\r\n            },\r\n            \"WarehouseID\": {\r\n                \"value\": \"WHOLESALE\"\r\n            },\r\n            \"OrderQty\": {\r\n                \"value\": 20\r\n            },\r\n            \"UnitCost\": {\r\n                \"value\": 2.29\r\n            }\r\n        }\r\n    ],\r\n    \"Hold\": {\r\n        \"value\": false\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}PurchaseOrder",
									"host": [
										"{{EndpointURL}}PurchaseOrder"
									]
								},
								"description": "This example shows the creation of a purchase order, which is described in [Creation of a Purchase Receipt with Allocations](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ce149378-867b-4ec2-a5b2-a4d80fae43bf)."
							},
							"response": []
						},
						{
							"name": "Creation of a Purchase Receipt with Allocations: 2 Create a Purchase Receipt with Allocations",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Type\": {\r\n        \"value\": \"Receipt\"\r\n    },\r\n    \"VendorID\": {\r\n        \"value\": \"GLORYFRUIT\"\r\n    },\r\n    \"Details\": [\r\n        {\r\n            \"InventoryID\": {\r\n                \"value\": \"APPLES\"\r\n            },\r\n            \"Warehouse\": {\r\n                \"value\": \"WHOLESALE\"\r\n            },\r\n            \"Allocations\": [\r\n                {\r\n                    \"ExpirationDate\": {\r\n                        \"value\": \"2021-05-29T00:00:00+03:00\"\r\n                    },\r\n                    \"Qty\": {\r\n                        \"value\": 10\r\n                    },\r\n                    \"LotSerialNbr\": {\r\n                        \"value\": \"FRT000862\"\r\n                    }\r\n                },\r\n                {\r\n                    \"ExpirationDate\": {\r\n                        \"value\": \"2021-05-29T00:00:00+03:00\"\r\n                    },\r\n                    \"Qty\": {\r\n                        \"value\": 10\r\n                    },\r\n                    \"LotSerialNbr\": {\r\n                        \"value\": \"FRT000877\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}PurchaseReceipt?$expand=Details,Details/Allocations",
									"host": [
										"{{EndpointURL}}PurchaseReceipt"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details,Details/Allocations"
										}
									]
								},
								"description": "This example shows the creation of a purchase receipt with allocations, which is described in [Creation of a Purchase Receipt with Allocations](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ce149378-867b-4ec2-a5b2-a4d80fae43bf)."
							},
							"response": []
						}
					],
					"description": "This folder contains examples from the [Inventory and Order Management](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=52ac6b5c-dff3-42b0-afc1-c77d60200007) chapter of the Integration Development Guide."
				},
				{
					"name": "Project Accounting",
					"item": [
						{
							"name": "Management of Account Groups 1: Create an Account Group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountGroupID\" : {\"value\" : \"ACCG02\"},\r\n  \"Description\" : {\"value\": \"Test Account Group\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}AccountGroup",
									"host": [
										"{{EndpointURL}}AccountGroup"
									]
								},
								"description": "This example shows how to create an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Management of Account Groups 2: Add Account 1 to the Group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountCD\" : {\"value\" : \"40000\"},\r\n  \"AccountGroup\" : {\"value\": \"ACCG02\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Account",
									"host": [
										"{{EndpointURL}}Account"
									]
								},
								"description": "This example shows how to add an account to an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Management of Account Groups 3: Add Account 2 to the Group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountCD\" : {\"value\" : \"40010\"},\r\n  \"AccountGroup\" : {\"value\": \"ACCG02\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Account",
									"host": [
										"{{EndpointURL}}Account"
									]
								},
								"description": "This example shows how to add an account to an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Management of Account Groups 4: Specify the Default Account",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultAccountID\" : {\"value\" : \"40000\"},\r\n  \"AccountGroupID\" : {\"value\": \"ACCG02\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}AccountGroup",
									"host": [
										"{{EndpointURL}}AccountGroup"
									]
								},
								"description": "This example shows how to specify the default account in an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Management of Account Groups 5: Obtain the List of Accounts",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{EndpointURL}}Account?$filter=AccountGroup%20eq%20'ACCG02'&$select=AccountCD",
									"host": [
										"{{EndpointURL}}Account"
									],
									"query": [
										{
											"key": "$filter",
											"value": "AccountGroup%20eq%20'ACCG02'"
										},
										{
											"key": "$select",
											"value": "AccountCD"
										}
									]
								},
								"description": "This example shows how to retrieve the list of accounts that belong to an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Management of Account Groups 6: Remove an Account from the Group",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AccountCD\" : {\"value\" : \"40010\"},\r\n  \"AccountGroup\" : {\"value\": null}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Account",
									"host": [
										"{{EndpointURL}}Account"
									]
								},
								"description": "This example shows how to remove an account from an account group. This process is described in [Management of Account Groups](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=2c26840b-56b5-4da3-b881-b47757e9b589)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 1 Create a Project",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"ProjectTemplateID\" : {\"value\" : \"PROGRESS\"},\r\n    \"Customer\" : {\"value\" : \"COFFEESHOP\"},\r\n    \"BillingAndAllocationSettings\" :\r\n    {\r\n        \"BillingRule\" : {\"value\" : \"PROGRESS\"},\r\n        \"BillingPeriod\" : {\"value\" : \"Month\"},\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Project",
									"host": [
										"{{EndpointURL}}Project"
									]
								},
								"description": "This example shows the creation of a project, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 2 Make the Project Active",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"Hold\" : {\"value\" : false}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Project",
									"host": [
										"{{EndpointURL}}Project"
									]
								},
								"description": "This example shows how to make a project active, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 3 Specify the Next Billing Date for the Project",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n    \"BillingAndAllocationSettings\" : \r\n    {\r\n        \"NextBillingDate\" : {\"value\" : \"2022-09-15\"}\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Project?$expand=BillingAndAllocationSettings",
									"host": [
										"{{EndpointURL}}Project"
									],
									"query": [
										{
											"key": "$expand",
											"value": "BillingAndAllocationSettings"
										}
									]
								},
								"description": "This example shows how to specify the next billing date for a project, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 4 Retrieve a Project Task",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}ProjectTask?$filter=ProjectID%20eq%20'TESTPR3'%20and%20ProjectTaskID%20eq%20'PHASE1'",
									"host": [
										"{{EndpointURL}}ProjectTask"
									],
									"query": [
										{
											"key": "$filter",
											"value": "ProjectID%20eq%20'TESTPR3'%20and%20ProjectTaskID%20eq%20'PHASE1'"
										}
									]
								},
								"description": "This example shows the retrieval of a project task, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 5 Activate a Project Task",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"entity\":\r\n    {\r\n        \"id\": \"f69569b5-9221-ed11-9e63-9828a61840c3\"\r\n    },\r\n    \"parameters\": {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}ProjectTask/Activate",
									"host": [
										"{{EndpointURL}}ProjectTask"
									],
									"path": [
										"Activate"
									]
								},
								"description": "This example shows the activation of a project task, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 6 Specify the Progress of the Project Task",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ProjectTaskID\" : {\"value\" : \"PHASE1\"},\r\n  \"ProjectID\" : {\"value\" : \"TESTPR3\"},\r\n  \"InventoryID\" : {\"value\" : \"<N/A>\"},\r\n  \"Completed\" : {\"value\" : 25},\r\n  \"PendingInvoiceAmount\" : {\"value\" : 725}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}ProjectBudget",
									"host": [
										"{{EndpointURL}}ProjectBudget"
									]
								},
								"description": "This example shows how to specify the progress of a project task, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 7 Invoke Project Billing",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n    \"ProjectID\": {\r\n        \"value\": \"TESTPR3\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Project/RunProjectBilling",
									"host": [
										"{{EndpointURL}}Project"
									],
									"path": [
										"RunProjectBilling"
									]
								},
								"description": "This example shows the invocation of project billing, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 8 Monitor the Operation Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Project/RunProjectBilling/status/9489b591-e011-436c-9859-8ad19f8e9f07",
									"host": [
										"{{EndpointURL}}Project"
									],
									"path": [
										"RunProjectBilling",
										"status",
										"9489b591-e011-436c-9859-8ad19f8e9f07"
									]
								},
								"description": "This example shows how to monitor the status of a project billing operation, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 9 Retrieve the List of Pro Forma Invoices",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Project/TESTPR3?$expand=Invoices",
									"host": [
										"{{EndpointURL}}Project"
									],
									"path": [
										"TESTPR3"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Invoices"
										}
									]
								},
								"description": "This example shows the retrieval of pro forma invoices for a project, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 10 Send the Pro Forma Invoice by Email",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n    \"RefNbr\": {\r\n        \"value\": \"000018\"\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}ProFormaInvoice/EmailProFormaInvoice",
									"host": [
										"{{EndpointURL}}ProFormaInvoice"
									],
									"path": [
										"EmailProFormaInvoice"
									]
								},
								"description": "This example shows the invocation of the process of sending a pro forma invoice by email, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						},
						{
							"name": "Creation of a Pro Forma Invoice: 11 Monitor the Sending Operation Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}ProFormaInvoice/EmailProFormaInvoice/status/4080b45b-2f91-4358-940e-d42c804fe3d1",
									"host": [
										"{{EndpointURL}}ProFormaInvoice"
									],
									"path": [
										"EmailProFormaInvoice",
										"status",
										"4080b45b-2f91-4358-940e-d42c804fe3d1"
									]
								},
								"description": "This example shows the monitoring of the operation of sending a pro forma invoice by email, which is described in [Creation of a Pro Forma Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=c95b64df-eb41-44c5-9c9c-96f664e35335)."
							},
							"response": []
						}
					],
					"description": "This folder contains examples from the [Project Accounting](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=78967236-3bc1-48c6-8dc2-d01812ed2326) chapter of the Integration Development Guide.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.execution.setNextRequest(\"Create an Account Group\");",
									"pm.execution.setNextRequest(\"Add an Account to an Account Group\");",
									"pm.execution.setNextRequest(\"Specify the Default Account of an Account Group\");",
									"pm.execution.setNextRequest(\"Retrieve the List of Accounts in a Group\");",
									"pm.execution.setNextRequest(\"Remove an Account from a Group\");",
									"pm.execution.setNextRequest(\"\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "POS Systems",
					"item": [
						{
							"name": "Entry of a Direct Sales Invoice: Assign a Tax Zone to a Customer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"TaxZone\": {\"value\": \"NYSTATE\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Customer",
									"host": [
										"{{EndpointURL}}Customer"
									]
								},
								"description": "This example shows how to assign a tax zone to a customer. This process is described in [Entry of a Direct Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9c0483c-c416-435b-8f63-3371e5764247)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice: Create a Payment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CashAccount\": {\"value\": \"10250ST\"},\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"PaymentAmount\": {\"value\": 1235.27},\r\n    \"Type\": {\"value\": \"Payment\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment",
									"host": [
										"{{EndpointURL}}Payment"
									]
								},
								"description": "This example shows how to create and release from hold a payment. This process is described in [Entry of a Direct Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9c0483c-c416-435b-8f63-3371e5764247)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice: Release a Payment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000075\"},\r\n      \"Type\": {\"value\": \"Payment\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment/ReleasePayment",
									"host": [
										"{{EndpointURL}}Payment"
									],
									"path": [
										"ReleasePayment"
									]
								},
								"description": "This example shows how to release a payment. This process is described in [Entry of a Direct Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9c0483c-c416-435b-8f63-3371e5764247)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice: Create an Invoice",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"CHERJAM32\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UOM\": {\"value\": \"PIECE\"},\r\n            \"LotSerialNbr\": {\"value\": \"JM2301290000\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM32\"},\r\n            \"Qty\": {\"value\": 2},\r\n            \"UOM\": {\"value\": \"BOX\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"ADVERT\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UnitPrice\": {\"value\": 1000},\r\n            \"UOM\": {\"value\": \"DAY\"}\r\n        }\r\n    ],\r\n    \"BillingSettings\":\r\n    {\r\n        \"BillToAddressOverride\": {\"value\": true},\r\n        \"BillToAddress\":\r\n        {\r\n            \"AddressLine1\": {\"value\": \"Fillmore Str\"},\r\n            \"City\": {\"value\": \"San Francisco\"},\r\n            \"State\": {\"value\": \"CA\"}\r\n        }\r\n    },\r\n    \"ApplicationsInvoice\":\r\n    [\r\n        {\r\n            \"DocType\": {\"value\": \"Payment\"},\r\n            \"AdjustingDocReferenceNbr\": {\"value\": \"000075\"},\r\n            \"AmountPaid\": {\"value\": 1235.27}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=ApplicationsInvoice,Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "ApplicationsInvoice,Details"
										}
									]
								},
								"description": "This example shows how to create an invoice, specify the billing settings, apply to the invoice a payment, and release the invoice from hold. This process is described in [Entry of a Direct Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9c0483c-c416-435b-8f63-3371e5764247)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice: Release an Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000113\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Direct Sales Invoice](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=a9c0483c-c416-435b-8f63-3371e5764247)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice Along with a Return: Create an Invoice",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"CHERJAM32\"},\r\n            \"Qty\": {\"value\": 10},\r\n            \"UOM\": {\"value\": \"PIECE\"},\r\n            \"LotSerialNbr\": {\"value\": \"JM2302010003\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"BANANAS\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"F2S2\"},\r\n            \"Qty\": {\"value\": 5},\r\n            \"UOM\": {\"value\": \"LB\"},\r\n            \"UnitPrice\": {\"value\": 1},\r\n            \"LotSerialNbr\": {\"value\": \"FR200384\"}\r\n        },\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000113\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" },\r\n            \"OrigInvLineNbr\": { \"value\": 2 },\r\n            \"Qty\": { \"value\": -1 }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create an invoice containing picked items and those to return, and release the invoice from hold. This process is described in [Entry of a Direct Sales Invoice Along with a Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=54f8aa92-f8ea-4ea9-b13c-1412590abeba)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice Along with a Return: Release an Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000114\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								}
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo with Positive and Negative Lines: Create a Credit Memo",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Credit Memo\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000114\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" },\r\n            \"OrigInvLineNbr\": { \"value\": 1 },\r\n            \"Qty\": { \"value\": 10 }\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM08\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"MAIN\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"PIECE\"}\r\n        }\r\n    ],\r\n    \"ApplicationsCreditMemo\":\r\n    [\r\n        {\r\n            \"Customer\": {\"value\": \"FRUITICO\"},\r\n            \"DocType\": {\"value\": \"Invoice\"},\r\n            \"ReferenceNbr\": {\"value\": \"000114\"},\r\n            \"AmountPaid\": {\"value\": 80}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=Details,ApplicationsCreditMemo",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details,ApplicationsCreditMemo"
										}
									]
								},
								"description": "This example shows how to create a credit memo and release it from hold. This process is described in [Entry of a Credit Memo with Positive and Negative Lines](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cccfe406-9e97-42b9-af4e-5eb3d2b6d7c9)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo with Positive and Negative Lines: Release a Credit Memo",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000116\"},\r\n      \"Type\": {\"value\": \"Credit Memo\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release a credit memo. This process is described in [Entry of a Credit Memo with Positive and Negative Lines](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=cccfe406-9e97-42b9-af4e-5eb3d2b6d7c9)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice in a Non-Default Currency: Configure the Customer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"EnableCurrencyOverride\": {\"value\": true},\r\n    \"EnableRateOverride\": {\"value\": true},\r\n    \"CurrencyRateType\": {\"value\": \"SPOT\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Customer",
									"host": [
										"{{EndpointURL}}Customer"
									]
								},
								"description": "This example shows how to enable the currency overriding and the rate overriding for a customer and to assign a currency rate type to the customer. This process is described in [Entry of a Direct Sales Invoice in a Non-Default Currency](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e4ae1270-a2d7-4871-bcb3-21c36a3e177c)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice in a Non-Default Currency: Create an Invoice",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Currency\": {\"value\": \"EUR\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM96\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Qty\": {\"value\": 2},\r\n            \"UOM\": {\"value\": \"JBOX\"},\r\n            \"Location\": {\"value\": \"L3R1S2\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM08\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"L1R1S2\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"PIECE\"}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"CLEANING\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"HOUR\"}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create an invoice containing picked items and those to return, and release the invoice from hold. This process is described in [Entry of a Direct Sales Invoice in a Non-Default Currency](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e4ae1270-a2d7-4871-bcb3-21c36a3e177c)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice in a Non-Default Currency: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000118\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release the invoice. This process is described in [Entry of a Direct Sales Invoice in a Non-Default Currency](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=e4ae1270-a2d7-4871-bcb3-21c36a3e177c)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Create a Sales Order with One Item",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"SWB-32OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order with one item. This process is mentioned in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Create a Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"id\": \"3d43678c-c6a8-ed11-9e84-9828a61840c3\"\r\n  },\r\n  \"parameters\": {\r\n      \"ShipmentDate\": { \"value\": \"2023-02-10T00:00:00+03:00\" },\r\n      \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateShipment",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SalesOrderCreateShipment"
									]
								},
								"description": "This example shows how to create a shipment for a sales order. This process is mentioned in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Retrieve the Sales Order Shipment Number",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SO/000070?$expand=Shipments&$select=OrderNbr,Shipments/ShipmentNbr",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SO",
										"000070"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Shipments"
										},
										{
											"key": "$select",
											"value": "OrderNbr,Shipments/ShipmentNbr"
										}
									]
								},
								"description": "This example shows how to retrieve the sales order's number (see [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796))."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Confirm the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000068\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/ConfirmShipment",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"ConfirmShipment"
									]
								},
								"description": "This example shows how to confirm a shipment. This process is mentioned in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Prepare an Invoice for the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000068\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/PrepareInvoice",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"PrepareInvoice"
									]
								},
								"description": "This example shows how to prepare an invoice for a shipment. This process is mentioned in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Retrieve the Invoice Number",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Orders&$select=ShipmentNbr,Orders/InvoiceNbr&$filter=ShipmentNbr eq '000068'",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Orders"
										},
										{
											"key": "$select",
											"value": "ShipmentNbr,Orders/InvoiceNbr"
										},
										{
											"key": "$filter",
											"value": "ShipmentNbr eq '000068'"
										}
									]
								},
								"description": "This example shows how to retrieve the invoice number (see [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796))."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000126\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is mentioned in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Create an RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"OrderType\": { \"value\": \"RM\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InvoiceNbr\": { \"value\": \"000126\" },\r\n            \"Operation\": { \"value\": \"Receipt\" },\r\n            \"InventoryID\": { \"value\": \"SWB-32OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": -1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"Operation\": { \"value\": \"Issue\" },\r\n            \"InventoryID\": { \"value\": \"PEARJAM96\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"RETAIL\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Correct the RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"4593e6b2-8ba9-ed11-9e84-9828a61840c3\",\r\n    \"Details\": [\r\n        {\r\n            \"id\": \"4b93e6b2-8ba9-ed11-9e84-9828a61840c3\",\r\n            \"AutoCreateIssue\": {\"value\": false}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to edit a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Create a Receipt for the RM Sales Order",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"OrderNbr\": {\"value\": \"000127\"},\r\n    \"OrderType\":  {\"value\": \"RM\"}\r\n  },\r\n  \"parameters\": {\r\n    \"ShipmentDate\":  {\"value\": \"2023-02-11T00:00:00+03:00\"},\r\n    \"WarehouseID\":  {\"value\": \"WHOLESALE\"}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateReceipt",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SalesOrderCreateReceipt"
									]
								},
								"description": "This example shows how to create a receipt for a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Create a Shipment for the RM Sales Order",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"OrderNbr\": {\"value\": \"000127\"},\r\n    \"OrderType\":  {\"value\": \"RM\"}\r\n  },\r\n  \"parameters\": {\r\n    \"ShipmentDate\":  {\"value\": \"2023-02-11T00:00:00+03:00\"},\r\n    \"WarehouseID\":  {\"value\": \"RETAIL\"}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateShipment",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SalesOrderCreateShipment"
									]
								},
								"description": "This example shows how to create a shipment for a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Retrieve the Shipments' Numbers of the RM Sales Order",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/RM/000127?$expand=Shipments&$select=OrderNbr,OrderType,Shipments/ShipmentNbr",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"RM",
										"000127"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Shipments"
										},
										{
											"key": "$select",
											"value": "OrderNbr,OrderType,Shipments/ShipmentNbr"
										}
									]
								},
								"description": "This example shows how to retrieve the numbers of the receipt and shipment of a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Confirm the Receipt",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000069\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/ConfirmShipment",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"ConfirmShipment"
									]
								},
								"description": "This example shows how to confirm a receipt. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Prepare a Credit Memo",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000069\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/PrepareInvoice",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"PrepareInvoice"
									]
								},
								"description": "This example shows how to prepare a credit memo for a receipt. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Retrieve the Number of the Credit Memo",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Orders&$filter=ShipmentNbr eq '000069'&$select=ShipmentNbr,Orders/InvoiceNbr,Orders/InvoiceType",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Orders"
										},
										{
											"key": "$filter",
											"value": "ShipmentNbr eq '000069'"
										},
										{
											"key": "$select",
											"value": "ShipmentNbr,Orders/InvoiceNbr,Orders/InvoiceType"
										}
									]
								},
								"description": "This example shows how to retrieve the number of a credit memo. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Release the Credit Memo",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000128\"},\r\n      \"Type\": {\"value\": \"Credit Memo\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release a credit memo. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Confirm the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000070\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/ConfirmShipment",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"ConfirmShipment"
									]
								},
								"description": "This example shows how to confirm a shipment. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Prepare an Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000070\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/PrepareInvoice",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"PrepareInvoice"
									]
								},
								"description": "This example shows how to prepare an invoice for a shipment. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Retrieve the Number of the Invoice",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Orders&$filter=ShipmentNbr eq '000070'&$select=ShipmentNbr,Orders/InvoiceNbr,Orders/InvoiceType",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Orders"
										},
										{
											"key": "$filter",
											"value": "ShipmentNbr eq '000070'"
										},
										{
											"key": "$select",
											"value": "ShipmentNbr,Orders/InvoiceNbr,Orders/InvoiceType"
										}
									]
								},
								"description": "This example shows how to retrieve the number of an invoice. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Shipped Order and Return: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000129\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Direct Sales Invoice for a Shipped Order and Return](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=1f573130-ff55-41c7-8504-8f2268305796)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Create a Sales Order for the Initially Bought Item",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"ORG-16OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"RETAIL\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order for an item. This process is mentioned in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Create an Invoice for the First Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"OrderNbr\": { \"value\": \"000071\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Location\": { \"value\": \"MAIN\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create an invoice for a sales order. This process is mentioned in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000130\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is mentioned in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Create an RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"OrderType\": { \"value\": \"RM\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InvoiceNbr\": { \"value\": \"000130\" },\r\n            \"Operation\": { \"value\": \"Receipt\" },\r\n            \"InventoryID\": { \"value\": \"ORG-16OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": -1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"RETAIL\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"Operation\": { \"value\": \"Issue\" },\r\n            \"InventoryID\": { \"value\": \"ORG-32OZ-GBT\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"EA\" },\r\n            \"WarehouseID\": { \"value\": \"RETAIL\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Correct the RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"bbbc7c53-e8ab-ed11-9e85-9828a61840c3\",\r\n    \"Details\": [\r\n        {\r\n            \"id\": \"c1bc7c53-e8ab-ed11-9e85-9828a61840c3\",\r\n            \"AutoCreateIssue\": {\"value\": false}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to edit a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Create a Payment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CashAccount\": {\"value\": \"10250ST\"},\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"PaymentAmount\": {\"value\": 8.32},\r\n    \"Type\": {\"value\": \"Payment\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment",
									"host": [
										"{{EndpointURL}}Payment"
									]
								},
								"description": "This example shows how to create a payment. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Release the Payment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000076\"},\r\n      \"Type\": {\"value\": \"Payment\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment/ReleasePayment",
									"host": [
										"{{EndpointURL}}Payment"
									],
									"path": [
										"ReleasePayment"
									]
								},
								"description": "This example shows how to release a payment. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Create an Invoice for the RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"ORG-16OZ-GBT\"},\r\n            \"Location\": {\"value\": \"MAIN\"},\r\n            \"Qty\": {\"value\": -1},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"OrderType\": {\"value\": \"RM\"},\r\n            \"OrderNbr\": {\"value\": \"000131\"},\r\n            \"OrderLineNbr\": {\"value\": 1}\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"ORG-32OZ-GBT\"},\r\n            \"Location\": {\"value\": \"MAIN\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UOM\": {\"value\": \"EA\"},\r\n            \"OrderType\": {\"value\": \"RM\"},\r\n            \"OrderNbr\": {\"value\": \"000131\"},\r\n            \"OrderLineNbr\": {\"value\": 3}\r\n        }\r\n    ],\r\n    \"ApplicationsInvoice\":\r\n    [\r\n        {\r\n            \"DocType\": {\"value\": \"Payment\"},\r\n            \"AdjustingDocReferenceNbr\": {\"value\": \"000076\"},\r\n            \"AmountPaid\": {\"value\": 8.32}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=ApplicationsInvoice,Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "ApplicationsInvoice,Details"
										}
									]
								},
								"description": "This example shows how to create an invoice for a sales order of the RM type. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for an Unshipped Sales Order: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000132\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Direct Sales Invoice for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=68ececc1-18b1-4741-8eca-018c162dfc87)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Create a Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM08\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM32\" },\r\n            \"OrderQty\": { \"value\": 10 },\r\n            \"UOM\": { \"value\": \"BOX\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Create a Payment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CashAccount\": {\"value\": \"10250ST\"},\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"PaymentAmount\": {\"value\": 22.91},\r\n    \"Type\": {\"value\": \"Payment\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment",
									"host": [
										"{{EndpointURL}}Payment"
									]
								},
								"description": "This example shows how to create a payment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Release the Payment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000078\"},\r\n      \"Type\": {\"value\": \"Payment\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment/ReleasePayment",
									"host": [
										"{{EndpointURL}}Payment"
									],
									"path": [
										"ReleasePayment"
									]
								},
								"description": "This example shows how to release an payment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Create an Invoice",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Type\": {\"value\": \"Invoice\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"OrderNbr\": { \"value\": \"000073\" },\r\n            \"OrderType\": { \"value\": \"SO\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Location\": { \"value\": \"MAIN\" }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"CHERJAM32\" },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"Qty\": { \"value\": 1 },\r\n            \"LotSerialNbr\": { \"value\": \"JM2302150000\" },\r\n            \"Location\": { \"value\": \"MAIN\" }\r\n        }\r\n    ],\r\n    \"ApplicationsInvoice\":\r\n    [\r\n        {\r\n            \"DocType\": {\"value\": \"Payment\"},\r\n            \"AdjustingDocReferenceNbr\": {\"value\": \"000078\"},\r\n            \"AmountPaid\": {\"value\": 22.91}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=ApplicationsInvoice,Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "ApplicationsInvoice,Details"
										}
									]
								},
								"description": "This example shows how to create an invoice and apply a payment to the invoice. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000133\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Create Another Payment",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CashAccount\": {\"value\": \"10250ST\"},\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"PaymentAmount\": {\"value\": 1084.4},\r\n    \"Type\": {\"value\": \"Payment\"}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment",
									"host": [
										"{{EndpointURL}}Payment"
									]
								},
								"description": "This example shows how to create a payment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Release the Second Payment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000079\"},\r\n      \"Type\": {\"value\": \"Payment\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Payment/ReleasePayment",
									"host": [
										"{{EndpointURL}}Payment"
									],
									"path": [
										"ReleasePayment"
									]
								},
								"description": "This example shows how to release a payment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Apply the Second Payment to the Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"OrderNbr\": { \"value\": \"000073\" },\r\n    \"OrderType\": { \"value\": \"SO\" },\r\n    \"Payments\": [\r\n        {\r\n            \"DocType\": { \"value\": \"Payment\" },\r\n            \"ReferenceNbr\": { \"value\": \"000079\" },\r\n            \"AppliedToOrder\": { \"value\": 1084.4 }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Payments",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Payments"
										}
									]
								},
								"description": "This example shows how to apply a payment to a sales order. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Create a Shipment for the Sales Order",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"OrderNbr\": {\"value\": \"000073\"},\r\n    \"OrderType\":  {\"value\": \"SO\"}\r\n  },\r\n  \"parameters\": {\r\n    \"ShipmentDate\":  {\"value\": \"2023-02-15T00:00:00+03:00\"},\r\n    \"WarehouseID\":  {\"value\": \"WHOLESALE\"}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateShipment",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SalesOrderCreateShipment"
									]
								},
								"description": "This example shows how to create a shipment for a sales order. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Retrieve the Number of the Shipment Created for the Sales Order",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SO/000073?$expand=Shipments&$select=OrderNbr,OrderType,Shipments/ShipmentNbr,Shipments/ShipmentType",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SO",
										"000073"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Shipments"
										},
										{
											"key": "$select",
											"value": "OrderNbr,OrderType,Shipments/ShipmentNbr,Shipments/ShipmentType"
										}
									]
								},
								"description": "This example shows how to retrieve the shipment number. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Confirm the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000071\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/ConfirmShipment",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"ConfirmShipment"
									]
								},
								"description": "This example shows how to confirm a shipment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Prepare an Invoice for the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000071\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": {  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/PrepareInvoice",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"PrepareInvoice"
									]
								},
								"description": "This example shows how to prepare an invoice for a shipment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Retrieve the Invoice Number of the Shipment",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Orders&$select=ShipmentNbr,Orders/InvoiceNbr&$filter=ShipmentNbr eq '000071'",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Orders"
										},
										{
											"key": "$select",
											"value": "ShipmentNbr,Orders/InvoiceNbr"
										},
										{
											"key": "$filter",
											"value": "ShipmentNbr eq '000071'"
										}
									]
								},
								"description": "This example shows how to retrieve the invoice number referenced in a shipment. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Direct Sales Invoice for a Partially Shipped Sales Order: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000134\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Direct Sales Invoice for a Partially Shipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f1f51f4d-1602-45e5-92b0-a630ec4ad663)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Create a Sales Order for the Initially Bought Item",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM32\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"BOX\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Create a Shipment for the First Sales Order",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"OrderType\": {\"value\": \"SO\"},\r\n    \"OrderNbr\": {\"value\": \"000074\"}\r\n  },\r\n  \"parameters\": {\r\n      \"ShipmentDate\": { \"value\": \"2023-02-16T00:00:00+03:00\" },\r\n      \"WarehouseID\": { \"value\": \"WHOLESALE\" }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SalesOrderCreateShipment",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SalesOrderCreateShipment"
									]
								},
								"description": "This example shows how to create a shipment for a sales order. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Retrieve the Sales Order Shipment Number",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}SalesOrder/SO/000074?$expand=Shipments&$select=OrderNbr,Shipments/ShipmentNbr",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"path": [
										"SO",
										"000074"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Shipments"
										},
										{
											"key": "$select",
											"value": "OrderNbr,Shipments/ShipmentNbr"
										}
									]
								},
								"description": "This example shows how to retrueve the number of the shipment that is created for a sales order. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Confirm the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000072\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": { }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/ConfirmShipment",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"ConfirmShipment"
									]
								},
								"description": "This example shows how to confirm a shipment. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Prepare an Invoice for the Shipment",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\":{\r\n    \"ShipmentNbr\": {\"value\": \"000072\"},\r\n    \"ShipmentType\":  {\"value\": \"Shipment\"}\r\n  },\r\n  \"parameters\": { }\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}Shipment/PrepareInvoice",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"path": [
										"PrepareInvoice"
									]
								},
								"description": "This example shows how to prepare an invoice for a shipment. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Retrieve the Invoice Number",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{EndpointURL}}Shipment?$expand=Orders&$select=ShipmentNbr,Orders/InvoiceNbr&$filter=ShipmentNbr eq '000072'",
									"host": [
										"{{EndpointURL}}Shipment"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Orders"
										},
										{
											"key": "$select",
											"value": "ShipmentNbr,Orders/InvoiceNbr"
										},
										{
											"key": "$filter",
											"value": "ShipmentNbr eq '000072'"
										}
									]
								},
								"description": "This example shows how to retrieve the number of the invoice that is prepared for a shipment. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Release the Invoice",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000137\"},\r\n      \"Type\": {\"value\": \"Invoice\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release an invoice. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Create an RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": { \"value\": \"FRUITICO\" },\r\n    \"OrderType\": { \"value\": \"RM\" },\r\n    \"Details\": [\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM08\" },\r\n            \"OrderQty\": { \"value\": 1 },\r\n            \"UOM\": { \"value\": \"PIECE\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        },\r\n        {\r\n            \"Branch\": { \"value\": \"HEADOFFICE\" },\r\n            \"InventoryID\": { \"value\": \"APJAM32\" },\r\n            \"OrderQty\": { \"value\": -1 },\r\n            \"UOM\": { \"value\": \"BOX\" },\r\n            \"WarehouseID\": { \"value\": \"WHOLESALE\" },\r\n            \"AutoCreateIssue\": { \"value\": false }\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a sales order of the RM type. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Correct the RM Sales Order",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"4cd96bb9-41ae-ed11-9e86-9828a61840c3\",\r\n    \"Details\": [\r\n        {\r\n            \"id\": \"53d96bb9-41ae-ed11-9e86-9828a61840c3\",\r\n            \"AutoCreateIssue\": {\"value\": false}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesOrder?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesOrder"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to edit a sales order of the RM type. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Create a Credit Memo",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomerID\": {\"value\": \"FRUITICO\"},\r\n    \"Type\": {\"value\": \"Credit Memo\"},\r\n    \"Hold\": {\"value\": false},\r\n    \"Details\":\r\n    [\r\n        {\r\n            \"OrigInvNbr\": { \"value\": \"000137\" },\r\n            \"OrigInvType\": { \"value\": \"Invoice\" },\r\n            \"OrigInvLineNbr\": { \"value\": 1 },\r\n            \"Qty\": { \"value\": 1 }\r\n        },\r\n        {\r\n            \"OrderNbr\": { \"value\": \"000139\" },\r\n            \"OrderType\": { \"value\": \"RM\" },\r\n            \"OrderLineNbr\": { \"value\": 1 },\r\n            \"Qty\": { \"value\": -1 }\r\n        },\r\n        {\r\n            \"Branch\": {\"value\": \"HEADOFFICE\"},\r\n            \"InventoryID\": {\"value\": \"APJAM96\"},\r\n            \"WarehouseID\": {\"value\": \"WHOLESALE\"},\r\n            \"Location\": {\"value\": \"MAIN\"},\r\n            \"Qty\": {\"value\": 1},\r\n            \"UOM\": {\"value\": \"PIECE\"}\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice?$expand=Details",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"query": [
										{
											"key": "$expand",
											"value": "Details"
										}
									]
								},
								"description": "This example shows how to create a credit memo. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						},
						{
							"name": "Entry of a Credit Memo for an Unshipped Sales Order: Release the Credit Memo",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"entity\" : {\r\n      \"ReferenceNbr\": {\"value\": \"000140\"},\r\n      \"Type\": {\"value\": \"Credit Memo\"}\r\n      },\r\n  \"parameters\" : {}\r\n}"
								},
								"url": {
									"raw": "{{EndpointURL}}SalesInvoice/ReleaseSalesInvoice",
									"host": [
										"{{EndpointURL}}SalesInvoice"
									],
									"path": [
										"ReleaseSalesInvoice"
									]
								},
								"description": "This example shows how to release a credit memo. This process is described in [Entry of a Credit Memo for an Unshipped Sales Order](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=f8978aad-18ae-40d2-9fe6-cc42c3715026)."
							},
							"response": []
						}
					],
					"description": "This folder contains examples from the [POS Systems](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=ad299100-f61d-4aaf-b232-a10581173288) chapter of the Integration Development Guide."
				}
			],
			"description": "This folder contains requests that implement various [Scenarios](https://help.acumatica.com/Help?ScreenId=ShowWiki&pageid=eb256305-e1f9-45e8-8eb1-82bd51068937)."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let singInFunction = (pm, url, tenant, branch, username, password, callback) => { ",
					"var requestSignIn = {",
					"    url: url + 'entity/auth/login',",
					"    method: 'POST',",
					"    body: {",
					"        mode: 'raw',",
					"        raw: '{ \"name\":\"'+username+'\", \"password\":\"'+password+'\", \"tenant\":\"'+tenant+'\", \"branch\": \"'+branch+'\"}'",
					"    },",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    }",
					"};",
					"console.log(pm.info.requestName);",
					"pm.sendRequest(requestSignIn,  (error, response) => {",
					"  if (error) {",
					"    console.log(error);",
					"  }",
					"",
					"  pm.test('Response for sing in should be 204 to process', () => {",
					"    pm.expect(error).to.equal(null);",
					"    pm.expect(response).to.have.property('code', 204);",
					"    pm.expect(response).to.have.property('status', 'No Content');",
					"  });",
					"",
					"  if (callback) {",
					"      callback(pm, error, response);",
					"  }",
					"",
					"});",
					"",
					" };",
					"",
					"let pmProto = Object.getPrototypeOf(pm);",
					"",
					"pmProto.acuFunc = { singInFunction };"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let singOutFunction = (pm, url) => { ",
					"    var requestSignOut = {",
					"        url: url + 'entity/auth/logout',",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json'",
					"        }",
					"    };",
					"",
					"    pm.sendRequest(requestSignOut,  (error, response) => {",
					"        if (error) {",
					"            console.log(error);",
					"        }",
					"",
					"        pm.test('Response for sing out should be 204 to process', () => {",
					"            pm.expect(error).to.equal(null);",
					"            pm.expect(response).to.have.property('code', 204);",
					"            pm.expect(response).to.have.property('status', 'No Content');",
					"        });",
					"    });",
					"};",
					"",
					"let pmProto = Object.getPrototypeOf(pm);",
					"pmProto.acuFunc = { singOutFunction };"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://localhost/",
			"type": "string"
		},
		{
			"key": "InstanceURL",
			"value": "{{BaseURL}}AcumaticaERP/"
		},
		{
			"key": "EndpointURL",
			"value": "{{InstanceURL}}entity/Default/24.200.001/"
		},
		{
			"key": "ManufacturingEndpointURL",
			"value": "{{ManufacturingInstanceURL}}entity/MANUFACTURING/24.200.001/",
			"type": "string"
		},
		{
			"key": "TenantU100",
			"value": "U100",
			"type": "string"
		},
		{
			"key": "BranchU100",
			"value": "HEADOFFICE",
			"type": "string"
		},
		{
			"key": "UsernameU100",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "PasswordU100",
			"value": "123",
			"type": "string"
		},
		{
			"key": "TenantT100",
			"value": "T100",
			"type": "string"
		},
		{
			"key": "BranchT100",
			"value": "MYSTORE",
			"type": "string"
		},
		{
			"key": "UsernameT100",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "PasswordT100",
			"value": "123",
			"type": "string"
		},
		{
			"key": "TenantSalesDemo",
			"value": "SalesDemo",
			"type": "string"
		},
		{
			"key": "BranchSalesDemo",
			"value": "PRODWHOLE",
			"type": "string"
		},
		{
			"key": "UsernameSalesDemo",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "PasswordSalesDemo",
			"value": "123",
			"type": "string"
		},
		{
			"key": "caseEntityID",
			"value": ""
		},
		{
			"key": "customerEntityID",
			"value": ""
		},
		{
			"key": "leadEntityID",
			"value": ""
		},
		{
			"key": "paymentRefNbr",
			"value": ""
		},
		{
			"key": "appliedToDocuments",
			"value": ""
		},
		{
			"key": "appliedToOrders",
			"value": ""
		},
		{
			"key": "proFormaReferenceNbr",
			"value": ""
		},
		{
			"key": "purchaseReceiptID",
			"value": ""
		},
		{
			"key": "shipmentID",
			"value": ""
		},
		{
			"key": "packageID",
			"value": ""
		},
		{
			"key": "SalesInvoiceStatusUrl",
			"value": ""
		},
		{
			"key": "CONGRILL_detail_ID",
			"value": ""
		},
		{
			"key": "AALEGO500_detail_ID",
			"value": ""
		},
		{
			"key": "fileRef",
			"value": ""
		},
		{
			"key": "recordFilter",
			"value": ""
		},
		{
			"key": "filteredRecordID",
			"value": ""
		},
		{
			"key": "orderNbr1",
			"value": ""
		},
		{
			"key": "orderNbr2",
			"value": ""
		},
		{
			"key": "orderID",
			"value": ""
		},
		{
			"key": "shipmentNbr",
			"value": ""
		},
		{
			"key": "invoiceEntityID",
			"value": ""
		},
		{
			"key": "paymentNbr",
			"value": ""
		}
	]
}