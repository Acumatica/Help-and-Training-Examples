<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.PushNotifications</name>
    </assembly>
    <members>
        <member name="M:PX.PushNotifications.NotificationSenders.SerialDisposable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SerialDisposable"/> class.
            </summary>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.SerialDisposable`1.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.SerialDisposable`1.Disposable">
            <summary>
            Gets or sets the underlying disposable.
            </summary>
            <remarks>If the SerialDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object. Assigning this property disposes the previous disposable object.</remarks>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.SerialDisposable`1.Dispose">
            <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.RefCountDisposable"/> class with the specified disposable.
            </summary>
            <param name="disposable">Underlying disposable.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is null.</exception>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.RefCountDisposable"/> class with the specified disposable.
            </summary>
            <param name="disposable">Underlying disposable.</param>
            <param name="throwWhenDisposed">Indicates whether subsequent calls to <see cref="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.GetDisposable"/> should throw when this instance is disposed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="disposable"/> is null.</exception>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.GetDisposable">
            <summary>
            Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
            <returns>A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.</returns>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed and is configured to throw in this case by <see cref="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.#ctor(`0,System.Boolean)"/>.</exception>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.RefCountDisposable`1.Dispose">
            <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
        </member>
        <member name="T:PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory">
            <summary>
            A factory interface that is used to create a sender for the push notification.
            </summary>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory.Create(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a sender and uses as the parameters the destination address, the name of the notification destination, and the additional parameters (such as a header for an HTTP address). 
            </summary>
            <param name="address">Address to send.</param>
            <param name="name">Push notification hook name.</param>
            <param name="additionalParameters">Dictionary that contains additional parameters (it may contain a header for the http web hook for example).</param>
            <returns></returns>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory.Type">
            <summary>
            A string identifier of the destination type that is four characters long. The value of this property is stored in the database.
            </summary>
            <value>
            The identifier must be exactly four characters long. If the identifier is not four characters long, the notification destination cannot be selected in the Destination Type box on the Push Notifications form.
            </value>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory.TypeDescription">
            <summary>
            A string label of the destination type. A user selects the value of this property in the Destination Type box on the Push Notifications form.
            </summary>
        </member>
        <member name="T:PX.PushNotifications.NotificationSenders.IPushNotificationSender">
            <summary>An interface that is used to create a push notification destination of a custom type.</summary>
            <remarks>The notification destination of a custom type can be implemented in a project of your Acumatica 
            ERP extension library, in a Code item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application. </remarks>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.IPushNotificationSender.Address">
            <summary>
            The address to which the system should send notifications.
            </summary>
        </member>
        <member name="P:PX.PushNotifications.NotificationSenders.IPushNotificationSender.Name">
            <summary>
            Push notification hook name.
            </summary>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.IPushNotificationSender.SendAndForget(PX.PushNotifications.NotificationResultWrapper,System.Threading.CancellationToken,System.Action{System.String},System.Action)">
            <summary>
            	<para>Sends a notification result without blocking the current thread.</para>
            	<para></para>
            </summary>
            <param name="results">Notification to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="onSendingFailed">Delegate that should be called if notification was not send. It persists notification result to database to resend it later.</param>
            <param name="finalizer">Delegate that should be called in the end of method in any cases (should be called in finally)</param>
            <example>
            	<code title="Example" description="The following code shows a sample implementation of the method." lang="CS">
            using System;
            using System.Threading;
            using PX.PushNotifications;
            using PX.PushNotifications.NotificationSenders;
             
            public void SendAndForget(  
                NotificationResultWrapper result,   
                CancellationToken cancellationToken,   
                Action onSendingFailed,   
                Action finalizer)
                {
                     try  
                     {    
                         Send(result, cancellationToken);  
                    }  
                    catch (Exception e)  
                    {            
                        onSendingFailed($"Send to target {Name} failed: ({e.Message})");  
                    }  
                    finally  
                    {    
                        finalizer();  
                    }
                }</code>
            </example>
        </member>
        <member name="M:PX.PushNotifications.NotificationSenders.IPushNotificationSender.Send(PX.PushNotifications.NotificationResultWrapper,System.Threading.CancellationToken)">
            <summary>
            Sends a notification synchronously and uses as the parameters the notification to be sent and a cancellation token.
            </summary>
            <param name="results">Notification to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:PX.PushNotifications.NotificationSenders.IHiddenPushNotificationsSenderFactory">
            <summary>
            Marker interface that signal that this sender type should not be showed on Push Notifications Screen 
            </summary>
        </member>
        <member name="F:PX.PushNotifications.TransactionHandler.IsPhantomMessage">
            <summary>
            We do not know is this message was commited
            </summary>
        </member>
    </members>
</doc>
