<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.Common.Std</name>
    </assembly>
    <members>
        <member name="T:PX.Common.AsyncOP">
            <summary>
            This is base class for asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.AsyncOP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
        </member>
        <member name="T:PX.Common.AsyncOP_State">
            <summary>
            Specifies asynchronous operation state.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.WaitingForStart">
            <summary>
            Operation waits for start.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Active">
            <summary>
            Operation processing is in progress.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Completed">
            <summary>
            Operations is completed.
            </summary>
        </member>
        <member name="F:PX.Common.AsyncOP_State.Disposed">
            <summary>
            Operation is disposed.
            </summary>
        </member>
        <member name="T:PX.Common.AsyncResultState">
            <summary>
            (For internal use only). This class provides holder for IAsyncResult interface and extends it's features.
            </summary>
        </member>
        <member name="M:PX.Common.AsyncResultState.#ctor(System.Object,System.Delegate,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="asyncObject">Caller's async object.</param>
            <param name="asyncDelegate">Delegate which is called asynchronously.</param>
            <param name="callback">Callback to call when the connect operation is complete.</param>
            <param name="state">User data.</param>
        </member>
        <member name="M:PX.Common.AsyncResultState.SetAsyncResult(System.IAsyncResult)">
            <summary>
            Sets AsyncResult value.
            </summary>
            <param name="asyncResult">Asycnhronous result to wrap.</param>
        </member>
        <member name="M:PX.Common.AsyncResultState.CompletedCallback(System.IAsyncResult)">
            <summary>
            This method is called by AsyncDelegate when asynchronous operation completes. 
            </summary>
            <param name="ar">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncObject">
            <summary>
            Gets or sets caller's async object.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncDelegate">
            <summary>
            Gets delegate which is called asynchronously.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncResult">
            <summary>
            Gets source asynchronous result what we wrap.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.IsEndCalled">
            <summary>
            Gets if the user called the End*() method.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.AsyncResultState.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:PX.Common.Authentication.HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Server/Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.#ctor(System.String,System.String,System.String)">
            <summary>
            Server constructor. This is used to build valid Authenticate response to client.
            </summary>
            <param name="realm">Realm(domain).</param>
            <param name="nonce">Nonce value.</param>
            <param name="opaque">Opaque value.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CalculateRspAuth(System.String,System.String)">
            <summary>
            Calculates 'rspauth' value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns 'rspauth' value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToChallange">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToChallange(System.Boolean)">
            <summary>
            Creates 'Challange' data using this class info. 
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Returns Challange data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToAuthorization">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.ToAuthorization(System.Boolean)">
            <summary>
            Creates 'Authorization' data using this class info.
            </summary>
            <param name="addAuthMethod">Specifies if 'digest ' authe method string constant is added.</param>
            <returns>Return Authorization data.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CreateNonce">
            <summary>
            Creates valid nonce value.
            </summary>
            <returns>Returns nonce value.</returns>
        </member>
        <member name="M:PX.Common.Authentication.HttpDigest.CreateOpaque">
            <summary>
            Creates valid opaque value.
            </summary>
            <returns>Renturn opaque value.</returns>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.RequestMethod">
            <summary>
            Gets or sets request method.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Realm">
            <summary>
            Gets or sets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Nonce">
            <summary>
            Gets or sets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Opaque">
            <summary>
            Gets or sets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid value is specified.</exception>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Algorithm">
            <summary>
            Gets or sets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.UserName">
            <summary>
            Gets or sets user name.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Password">
            <summary>
            Gets or sets password.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.Qop">
            <summary>
            Gets or sets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.CNonce">
            <summary>
            Gets or sets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:PX.Common.Authentication.HttpDigest.NonceCount">
            <summary>
            Gets or stets nonce count. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:PX.Common.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:PX.Common.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:PX.Common.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:PX.Common.Collection.DList`2">
            <summary>
            Dynamicaly dictionary container.
            </summary>
            <typeparam name="Key">Key type.</typeparam>
            <typeparam name="Value">Item type.</typeparam>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnInitBySource(PX.Common.Collection.KList{`0,`1})">
            <summary>
            Initialize containder by parent source
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnAddItem(`0,`1)">
            <summary>
            Add element.
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnRemoveItem(`0,`1)">
            <summary>
            Remove element.
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item</param>
        </member>
        <member name="M:PX.Common.Collection.DList`2.OnClear">
            <summary>
            Remove all items in container
            </summary>
        </member>
        <member name="M:PX.Common.Collection.DList`2.GetItem(`0)">
            <summary>
            Get element by key value
            </summary>
            <param name="key">Key value.</param>
            <returns>null - if element not found.</returns>
        </member>
        <member name="P:PX.Common.Collection.DList`2.Item(`0)">
            <summary>
            Get element by key value
            </summary>
            <param name="key">Key value</param>        
        </member>
        <member name="T:PX.Common.Collection.KList`2">
            <summary>
            List of elemets with keys.
            </summary>
            <remarks>Dictionary not used</remarks>
            <typeparam name="Key">Key type.</typeparam>
            <typeparam name="Item">Item type.</typeparam>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnInitBySource(PX.Common.Collection.KList{`0,`1})">
            <summary>
            Initialize container by source.
            </summary>
            <param name="source">Source container.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.GetKeyForItem(`1)">
            <summary>
            Define the Key value by item.
            </summary>
            <param name="item">Item.</param>
            <returns>Key value.</returns>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Comparer">
            <summary>
            Comparer for key.
            </summary>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Item(System.Int32)">
            <summary>
            Get element by index.
            </summary>
            <param name="index">Index item.</param>		
        </member>
        <member name="P:PX.Common.Collection.KList`2.Item(`0)">
            <summary>
            Get element by key
            </summary>
            <param name="key">Key value.</param>        		
        </member>
        <member name="M:PX.Common.Collection.KList`2.TryGetValue(`0,`1@)">
            <summary>
            Try Get element by key
            </summary>
            <param name="key">Key value.</param> 
            <param name="value">Result value</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Add(`1)">
            <summary>
            Add an item to container
            </summary>
            <param name="item">item</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Remove(`0)">
            <summary>
            Remove the element by key
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Remove(`0[])">
            <summary>
            Remove selected element by keys
            </summary>
            <param name="keys">Key values</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.RemoveAll(`0[])">
            <summary>
            Remove all items from container excluse selected
            </summary>
            <param name="excludeKeys">Keys for excluded items</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Clear">
            <summary>
            Remove all items from container.
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Insert(System.Int32,`1)">
            <summary>
            Insert elemtn in specified position
            </summary>
            <param name="index">Position/</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copy elements to array
            </summary>
            <param name="array">Array to copy</param>
            <param name="arrayIndex">Start index.</param>
        </member>
        <member name="P:PX.Common.Collection.KList`2.Count">
            <summary>
            Get the count of element in container.
            </summary>
        </member>
        <member name="P:PX.Common.Collection.KList`2.IsReadOnly">
            <summary>
            Get the read only state of container.
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Contains(`0)">
            <summary>
            Get state of contain for key
            </summary>
            <param name="key">Key value</param>	
        </member>
        <member name="M:PX.Common.Collection.KList`2.GetItem(`0)">
            <summary>
            Get element by key
            </summary>
            <param name="key">Key value.</param>
            <returns>null - if element not found.</returns>
        </member>
        <member name="M:PX.Common.Collection.KList`2.IndexOf(`1)">
            <summary>
            Define the index of element by the item.
            </summary>
            <param name="item">Item.</param>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.IndexOf(`0)">
            <summary>
            Define the index of element by the key.
            </summary>
            <param name="key">Key value.</param>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.SetItem(System.Int32,`1)">
            <summary>
            Set element to specified position.
            </summary>
            <param name="index">Position.</param>
            <param name="item">New element.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnAddItem(`0,`1)">
            <summary>
            Process add item
            </summary>
            <param name="key">Key</param>
            <param name="item">Item</param>
        </member>
        <member name="P:PX.Common.Collection.KList`2.IsIgnoreDuplicateKey">
            <summary>
            Define state of duplicate key reaction.
            </summary>
            <remarks>
            false - throw the <see>System.ArgumentException</see>
            true  - ignore duplicate key items.
            </remarks>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Move(System.Int32,System.Int32)">
            <summary>
            Move the element to position
            </summary>
            <param name="index">Old Position</param>
            <param name="newIndex">New Position</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.Move(`0,System.Int32)">
            <summary>
            Move the element to position
            </summary>
            <param name="key">Key value</param>
            <param name="index">new position</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.MoveBefore(`0,`0)">
            <summary>
            Move the element to position
            </summary>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.MoveAfter(`0,`0)">
            <summary>
            Move the element to position
            </summary>		
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnClear">
            <summary>
            Process clear conteiner
            </summary>
        </member>
        <member name="M:PX.Common.Collection.KList`2.OnRemoveItem(`0,`1)">
            <summary>
            Process remove item
            </summary>
            <param name="key">Key value.</param>
            <param name="item">Item.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.ChaneItemKey(`1,`0)">
            <summary>
            Change key item
            </summary>
            <remarks>Key in item must be changed after the call.</remarks>
            <param name="item">Item</param>
            <param name="newKey">New key.</param>
        </member>
        <member name="M:PX.Common.Collection.KList`2.RemoveItem(`1)">
            <summary>
            Remove item
            </summary>
            <param name="item">Item.</param>
            <returns>true - if item removed successfuly.</returns>
        </member>
        <member name="M:PX.Common.Collection.KList`2.ContainsItem(`1)">
            <summary>
            Define the item is present in container
            </summary>
            <param name="item">Item.</param>		
        </member>
        <member name="T:PX.Common.Collection.WeakSet`1">
            <summary>
            Represents a typed weak set, which references objects while still allowing them to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PX.Common.IMap`2">
            <summary>
            Represents a generic collection of key1/key2 pairs (one-to-one relation).
            </summary>
            <typeparam name="TKey">First key type.</typeparam>
            <typeparam name="TValue">Second key type.</typeparam>
        </member>
        <member name="P:PX.Common.IMap`2.Reversed">
            <summary>
            Returns current implementation with reversed generic interface but with the same data.
            </summary>
        </member>
        <member name="T:PX.Common.Map`2">
            <summary>
            Implements a generic collection of key1/key2 pairs (one-to-one relation) with O(1) search, insert and delete on both key types.
            </summary>
            <typeparam name="TKey">First key type.</typeparam>
            <typeparam name="TValue">Second key type.</typeparam>
        </member>
        <member name="M:PX.Common.Map`2.#ctor(PX.Common.IMap{`1,`0},PX.Common.NullableDictionary{`1,`0},PX.Common.NullableDictionary{`0,`1})">
            <summary>
            Constructor for reversed Map.
            </summary>
        </member>
        <member name="T:PX.Common.MultiValueDictionary`2.InnerCollectionView">
            <summary>
            An inner class that functions as a view of an ICollection within a MultiValueDictionary
            </summary>
        </member>
        <member name="T:PX.Common.MultiValueDictionary`2.Enumerator">
            <summary>
            The Enumerator class for a <see cref="T:PX.Common.MultiValueDictionary`2"/> 
            that iterates over <typeparamref name="TKey"/>-<see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> pairs.
            </summary>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.#ctor(PX.Common.MultiValueDictionary{`0,`1})">
            <summary>
            Constructor for the enumerator
            </summary>
            <param name="multiValueDictionary">A MultiValueDictionary to iterate over</param>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="F:PX.Common.MultiValueDictionary`2.NewCollectionFactory">
            <summary>
            The function to construct a new <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="F:PX.Common.MultiValueDictionary`2._version">
            <summary>
            The current version of this MultiValueDictionary used to determine MultiValueDictionary modification during enumeration.
            </summary>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified <typeparamref name="TKey"/> and <typeparamref name="TValue"/> to the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to add.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
            <remarks>
            Unlike the Add for <see cref="T:System.Collections.IDictionary"/>, the <see cref="T:PX.Common.MultiValueDictionary`2"/> Add will not throw any exceptions.
            If the given <typeparamref name="TKey"/> is already in the <see cref="T:PX.Common.MultiValueDictionary`2"/>, 
            then <typeparamref name="TValue"/> will be added to <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> associated with <paramref name="key"/>
            </remarks>
            <remarks>
            A call to this Add method will always invalidate any currently running enumeration regardless of
            whether the Add method actually modified the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a number of key-value pairs to this <see cref="T:PX.Common.MultiValueDictionary`2"/>, where the key for each value is <paramref name="key"/>,
            and the value for a pair is an element from <paramref name="values"/>
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of all entries to add</param>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of values to add</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> and <paramref name="values"/> must be non-null</exception>
            <remarks>
            A call to this AddRange method will always invalidate any currently running enumeration regardless of
            whether the AddRange method actually modified the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Remove(`0)">
            <summary>
            Removes every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/> from the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to remove</param>
            <returns>
            <c>true</c> if the removal was successful; otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <c>null</c>.</exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Remove(`0,`1)">
            <summary>
            Removes the first instance (if any) of the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> pair from this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element to remove</param>
            <param name="value">The <typeparamref name="TValue"/> of the element to remove</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <returns>
            <c>true</c> if the removal was successful; otherwise <c>false</c>
            </returns>
            <remarks>
            If the <typeparamref name="TValue"/> being removed is the last one associated with its <typeparamref name="TKey"/>,
            then that <typeparamref name="TKey"/> will be removed from the <see cref="T:PX.Common.MultiValueDictionary`2"/>
            and its associated <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> will be freed as if 
            a call to <see cref="M:System.Collections.Generic.MultiValueDictionary`2.Remove(`0)"/> had been made.
            </remarks>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Contains(`0,`1)">
            <summary>
            Determines if the given <typeparamref name="TKey"/>-<typeparamref name="TValue"/> pair exists within this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the element.</param>
            <param name="value">The <typeparamref name="TValue"/> of the element.</param>
            <returns>
            <c>true</c> if found; otherwise <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.ContainsValue(`1)">
            <summary>
            Determines if the given <typeparamref name="TValue"/> exists within this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <param name="value">A <typeparamref name="TValue"/> to search the <see cref="T:PX.Common.MultiValueDictionary`2"/> for</param>
            <returns>
            <c>true</c> if the <see cref="T:PX.Common.MultiValueDictionary`2"/> contains the <paramref name="value"/>; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:PX.Common.MultiValueDictionary`2.Clear">
            <summary>
            Removes every <typeparamref name="TKey"/> and <typeparamref name="TValue"/> from this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Values">
            <summary>
            Gets an enumerable of <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> from this <see cref="T:PX.Common.MultiValueDictionary`2"/>,
            where each <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> is the collection of every <typeparamref name="TValue"/> associated
            with a <typeparamref name="TKey"/> present in the <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <value>
            An IEnumerable of each <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> in this <see cref="T:PX.Common.MultiValueDictionary`2"/>
            </value>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Item(`0)">
            <summary>
            Get every <typeparamref name="TValue"/> associated with the given <typeparamref name="TKey"/>.
            If <paramref name="key"/> is not found in this <see cref="T:PX.Common.MultiValueDictionary`2"/>,
            will throw a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </summary>
            <param name="key">The <typeparamref name="TKey"/> of the elements to retrieve.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> must be non-null</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not have any associated <typeparamref name="TValue"/>s in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.</exception>
            <value>
            An <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> containing every <typeparamref name="TValue"/> associated with <paramref name="key"/>.
            </value>
            <remarks>
            Note that the <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> returned will change alongside any changes to the <see cref="T:PX.Common.MultiValueDictionary`2"/>
            </remarks>
        </member>
        <member name="P:PX.Common.MultiValueDictionary`2.Count">
            <summary>
            Returns the number of <typeparamref name="TKey"/>s with one or more associated <typeparamref name="TValue"/> 
            in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </summary>
            <value>
            The number of <typeparamref name="TKey"/>s in this <see cref="T:PX.Common.MultiValueDictionary`2"/>.
            </value>
        </member>
        <member name="T:PX.Common.NullableDictionary`2">
            <summary>
            Dictionary that allows null key value.
            </summary>
        </member>
        <member name="T:PX.Common.PreEnumeratedEnumerable`1">
            <summary>
            Pre-enumerates the first item in the sequence to initialize the source provider.
            </summary>
        </member>
        <member name="T:PX.Common.PXKeyedCollection`2">
            <summary>
            Represents a collection of values stored by key that can be computed for each value from the value itself.
            </summary>
        </member>
        <member name="M:PX.Common.PXKeyedCollection`2.#ctor(System.Func{`1,`0})">
            <param name="keyFunc">Function that computes corresponding key from a value.</param>
        </member>
        <member name="T:PX.Common.Trie">
            <summary>
            Double-array implementation of a trie (prefix tree).
            </summary>
            <remarks>
            Look-up is O(1) on average and O(k) in the worst case, 
            and insertion is about O(k^2) in the worst case, where k is the number of input symbols.
            
            References:
            1. Karoonboonyanan, T. An Implementation of Double-Array Trie
            2. Aoe, J. An Efficient Digital Search Algorithm by Using a Double-Array Structure
            3. Kanda, S., Morita K., Fuketa M., Aoe J. Experimental Observations of Construction Methods for Double Array Structures Using Linear Functions.
            </remarks>
        </member>
        <member name="M:PX.Common.Trie.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the capacity of internal array is at least the given minimum value.
            If the currect capacity of the list is less than min, 
            the capacity is increased to twice the current capacity or to min,
            whichever is larger.
            </summary>
            <param name="min"></param>
        </member>
        <member name="M:PX.Common.Trie.Relocate(System.Int32,System.Int32)">
            <summary>
            Move base for state <paramref name="s"/> to a new place beginning at <paramref name="b"/>.
            </summary>
        </member>
        <member name="M:PX.Common.Drawing.GetColorNames">
            <summary>
            Gets the default color names.
            </summary>
        </member>
        <member name="M:PX.Common.Drawing.ScaleImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Scales an image.
            </summary>
            <param name="image">An image to scale.</param>
            <param name="width">Destination image width.</param>
            <param name="height">Destination image height.</param>
            <returns>Scaled image.</returns>
        </member>
        <member name="M:PX.Common.Drawing.ScaleImageFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Scales an image represented as an array of bytes.
            </summary>
            <param name="binData">An array of bytes representing an image to scale.</param>
            <param name="width">Destination image width.</param>
            <param name="height">Destination image height.</param>
            <returns>Scaled image as an array of bytes.</returns>
        </member>
        <member name="T:PX.Common.EnumerableExtensions">
            <summary>
            This class contains extension methods for enumerable objects.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasFirst``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether the collection has at least the specified number of elements.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="count">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasAtLeast(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Determines whether the collection has at least the specified number of elements.
            </summary>
            <param name="sequence">An <see cref="T:System.Collections.IEnumerable"/> to iterate over.</param>
            <param name="elementsCount">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.HasAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the collection has the specified number of elements, counting from the beginning.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="elementsCount">Number of elements.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a collection of pairs <see cref="T:System.Tuple`2"/> joining
            the first element of the first collection with the first element
            of the second collection and so on, until either of the collections ends.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Unzips input collection of <see cref="T:System.Tuple`2"/> pairs into pair of collections: one contains <see cref="P:System.Tuple`2.Item1"/> 
            and the other contains <see cref="P:System.Tuple`2.Item2"/>.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="zippedCol">The zipped collection to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Unzips input collection of <see cref="T:System.Tuple`2"/> pairs into <typeparamref name="TOut"/> item by applying selector delegate.
            The result selector takes the sequences of <see cref="P:System.Tuple`2.Item1"/> and <see cref="P:System.Tuple`2.Item2"/> and returns <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the out.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="resultSelector">A function to transform the sequences of <see cref="P:System.Tuple`2.Item1"/> and <see cref="P:System.Tuple`2.Item2"/> into the result value.</param>
            <returns>
            A TOut.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Unzips input collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs into pair of collections: one contains keys and the other contains values. 
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``2})">
            <summary>
            Unzips input collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs into <typeparamref name="TOut"/> item by applying selector delegate. 
            The result selector takes the sequences of keys and values and returns <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the out.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="resultSelector">A function to transform the sequences of keys and values into the result value.</param>
            <returns/>>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Unzips input collection of <typeparamref name="TIn"/> items into pair of collections: one contains items of <typeparamref name="T1"/> type 
            and the other contains items of <typeparamref name="T2"/> type. Method applies <paramref name="leftSelector"/> and <paramref name="rightSelector"/>
            to each <typeparamref name="TIn"/> item of collection. The resulting two new sequences are returned as a tuple: (left sequence, right sequence).
            </summary>
            <typeparam name="TIn">Type of the elements in input collection.</typeparam>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="leftSelector">The left selector.</param>
            <param name="rightSelector">The right selector.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.UnZip``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Unzips the input collection of <typeparamref name="TIn"/> items to a <typeparamref name="TOut"/> item
            by applying three selector delegates.
            Left and right selectors are applied to each <typeparamref name="TIn"/> item of the collection resulting in two new sequences.
            Then the result selector is applied to these sequences and returns a <typeparamref name="TOut"/> item.
            </summary>
            <typeparam name="TIn">Type of the elements in input collection.</typeparam>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="TOut">Type of the result.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="leftSelector">The left selector.</param>
            <param name="rightSelector">The right selector.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item of the collection.
            </summary>
            <remarks>The method is a fluent analog of the foreach cycle.</remarks>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ForEachSelect``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            An iterator method that performs the specified action on each item of the collection and then returns that item.
            </summary>
            <remarks>Similar to ForEach.</remarks>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets distinct items of the collection based on the values retrieved by the <paramref name="distinctMember"/> selector.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="distinctMember">The distinct member selector.</param>
            <returns/>
            <completionlist cref="!:"/>
            <example>
            Example of usage:
            <code>
            source.Distinct(x => x.Property);
            </code>
            </example>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.CheckedAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>false</c> if the collection is <c>null</c> or empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if collection is null or empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AppendObsolete``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds a single <paramref name="element"/> to the end of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of enumerable to return.</typeparam>
            <returns>
            IEnumerable containing all the input elements, followed by the specified additional element.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.PrependObsolete``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds a single element to the start of an IEnumerable.
            </summary>
            <typeparam name="T">Type of enumerable to return.</typeparam>
            <returns>
            IEnumerable containing the specified additional element, followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Append``1(``0[],``0)">
            <summary>
            Adds a single <paramref name="element"/> to the end of the <paramref name="source"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An array.</param>
            <param name="element">The element.</param>
            <returns>
            Array containing all the input elements, followed by the specified additional element.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Prepend``1(``0[],``0)">
            <summary>
            Adds a single element to the beginning of the <paramref name="tail"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="tail">An array.</param>
            <param name="head">The element to insert.</param>
            <returns>
            Array containing the specified additional element followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Append``1(``0[],``0[])">
            <summary>
            Adds an array of <paramref name="elements"/> to the end of <paramref name="source"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An array.</param>
            <param name="elements">An array of elements.</param>
            <returns>
            Array containing all the input elements, followed by the specified additional elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Prepend``1(``0[],``0[])">
            <summary>
            Adds an array of <paramref name="head"/> elements to the start of <paramref name="tail"/> array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="tail">An array.</param>
            <param name="head">The elements to insert at start.</param>
            <returns>
            Array containing the specified additional elements, followed by all the input elements.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the collection without <c>null</c> elements.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
             Adds a collection of pairs <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to add items to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.SetRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Sets new values for the <see cref="T:System.Collections.Generic.IDictionary`2"/> <paramref name="dictionary"/> keys 
            from the given collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> pairs.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary in which to replace values.</param>
            <param name="items">The pairs collection.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a collection of <paramref name="items"/> to <paramref name="set"/>.
            </summary>
            <typeparam name="TKey">Type of the set elements.</typeparam>
            <param name="set">The set to add items to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a collection of <paramref name="items"/> to <paramref name="collection"/>.
            </summary>
            <typeparam name="TKey">Type of the set elements.</typeparam>
            <param name="collection">The set to add items to.</param>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.RemoveRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the entries corresponding to the given collection of keys from the dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dictionary">The dictionary to act on.</param>
            <param name="items">The keys to remove.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Select``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Projects each element of a dictionary into a new form.</summary>
            <param name="source">A dictionary to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each key/value pair.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <see langword="null" /> to use existing <see cref="T:System.Collections.Generic.EqualityComparer`1" /> from the <paramref name="source" /> for the type of the key.</param>
            <typeparam name="TKey">The type of the key of <paramref name="source" />.</typeparam>
            <typeparam name="TValue">The type of the value of <paramref name="source" />.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Select``2(System.Collections.Generic.Dictionary{``0,``1},System.Func{``0,``1,``1})">
            <summary>Projects each element of a dictionary into a new form.</summary>
            <param name="source">A dictionary to invoke a transform function on.</param>
            <param name="selector">A transform function to apply to each key/value pair.</param>
            <typeparam name="TKey">The type of the key of <paramref name="source" />.</typeparam>
            <typeparam name="TValue">The type of the value of <paramref name="source" />.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.Dictionary`2" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.NextOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the next element of the sequence <paramref name="source"/>
            after the element that satisfies the condition <paramref name="predicate"/>
            or the default value if no such element is found or there
            is no next element.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="predicate">The predicate (the condition).</param>
            <param name="defaultValue">(Optional) The default value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.FirstOrAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Returns the first element of the sequence <paramref name="source"/> that satisfies the condition <paramref name="predicate"/>,
            the last item of the sequence if no such element is found, or the default
            value if the sequence is empty.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="predicate">The predicate (the condition).</param>
            <param name="defaultValue">(Optional) The default value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the sequence of elements from the original collection not equal to the given <paramref name="value"/>.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="value">The value to exclude from <paramref name="source"/>.</param>
            <returns/>
            <remarks>
            The equality comparison is done by the .Net <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> comparer.
            </remarks>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AsSingleEnumerable``1(``0)">
            <summary>
            Transforms <paramref name="item"/> into <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            If <paramref name="item"/> is <c>null</c>, the method returns an empty collection;
            otherwise, it returns one-element collection containing the item.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="item">The item to use.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Modify``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies an action to each element of the collection and returns the original collection with modified elements.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="action">The action to perform on each element.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``1,System.Boolean})">
            <summary>
            Applies an accumulator function to a sequence.
            The <paramref name="seed"/> parameter is used as the initial accumulator value,
            the <paramref name="func"/> aggregation function is applied to the <paramref name="source"/> sequence,
            and the <paramref name="resultSelector"/> function is applied to the intermediate result;
            the <paramref name="exitPredicate"/> condition determines whether the aggregation process should be stopped.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="exitPredicate">A function to determine the exit condition based on the accumulator state.</param>
            <returns>The transformed accumulator value.</returns>
            <remarks>
            This is an extended version of the LINQ <tt>Aggregate</tt> method with the additional
            <tt>exitPredicate</tt> parameter that allows to stop calculations before the end of the sequence is reached.
            </remarks>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1[])">
            <summary>
            Ordering with priorities. The method extends the LINQ <tt>OrderBy</tt> method with an array of priorities
            (values of the same type as the selector output).
            <paramref name="keySelector"/> is applied to each item of the <paramref name="source"/> collection,
            then the index in the <paramref name="priority"/> array is found.
            The collection is sorted according to these indexes:
            the item with the lower index in the priority array goes first,
            the item not present in the priority array goes last.
            After that the LINQ <tt>ThenBy(keySelector)</tt> method is applied.
            </summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
            <typeparam name="TField">Type of the key.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="keySelector">The key selector.</param>
            <param name="priority">A variable-length parameters list containing keys in priority order.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.GetHashCodeOfSequence(System.Collections.IEnumerable)">
            <summary>
            Calculates the hash of all elements of a sequence and combines them to a single one.
            </summary>
            <param name="sequence">An <see cref="T:System.Collections.IEnumerable"/> to iterate over.</param>
            <returns>
            The hash of a sequence.
            </returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of unique elements in the <paramref name="first"/> sequence
            that are not present in the <paramref name="second"/> sequence,
            according to the <paramref name="keySelector"/> key selector.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="first">The first sequence to act on.</param>
            <param name="second">The second sequence to act on.</param>
            <param name="keySelector">The key selector.</param>
            <param name="keyComparer">(Optional) The key comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of unique elements in the <paramref name="first"/> sequence
            that are present in the <paramref name="second"/> sequence, according to the <paramref name="keySelector"/> key selector.
            </summary>
            <typeparam name="TSource">Type of the source.</typeparam>
            <typeparam name="TKey">Type of the key.</typeparam>
            <param name="first">The first sequence to act on.</param>
            <param name="second">The second sequence to act on.</param>
            <param name="keySelector">The key selector.</param>
            <param name="keyComparer">(Optional) The key comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.SelectIndexesWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Selects the indexes of those elements of <paramref name="enumerable"/>
            for which <paramref name="condition"/> is <c>true</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <param name="condition">The condition.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.AsReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> wrapper for the dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="dict">The dictionary to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="enumerable">The collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a stack.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a queue.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToHashSetAcu``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts a collection to a hash set.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable to act on.</param>
            <param name="comparer">(Optional) The comparer.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a collection to a linked list.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable object to act on.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Find``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="list"/> from the beginning
            searching for the first item that satisfies <paramref name="predicate"/>. 
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The linked list to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.FindLast``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterates over <paramref name="list"/> starting from its end
            searching for the item that satisfies the predicate. 
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="list">The linked list to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToEmptyList``1(``0)">
            <summary>
            Creates an empty <see cref="T:System.Collections.Generic.List`1"/> of objects of the same type as <paramref name="instanceOfTargetedType"/>.
            </summary>
            <typeparam name="T">Type of a <paramref name="instanceOfTargetedType"/></typeparam>
            <param name="instanceOfTargetedType">An object whose type is used to create a list.</param>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> extension method that converts collection to a list with initially specified size internal array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to iterate over.</param>
            <param name="capacity">The initial capacity.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Denormalize``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Denormalize``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Iterates through the <paramref name="enumerable"/> collection without saving its elements.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Consume(System.Collections.IEnumerable)">
            <summary>
            Iterates through the <paramref name="enumerable"/> collection without saving its elements.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Dequeue``1(System.Collections.Generic.Queue{``0},System.Int32)">
            <summary>
            Removes and returns the <paramref name="dequeueCount"/> of objects at the beginning of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Pop``1(System.Collections.Generic.Stack{``0},System.Int32)">
            <summary>
            Removes and returns the <paramref name="popCount"/> of objects at the top of the <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <exclude/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.DisuniteBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Disunites a collection into two collections, where the first one contains elements for which the <paramref name="predicate"/> is met, and where the second collection contains the other ones.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="enumerable">The enumerable to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among <paramref name="values"/>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="values">The values collection.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified two values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified four values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(``0,``0,``0,``0,``0,``0,``0[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsIn``1(System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0}[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among <paramref name="values"/>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="values">The collection of values.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the two values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0,``0)">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the three values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The fourth value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(``0,``0,``0,``0,``0,``0,``0[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.EnumerableExtensions.IsNotIn``1(System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0},System.Nullable{``0}[])">
            <summary>
            Returns <c>true</c> if the <paramref name="value"/> argument is not among the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">The value to check.</param>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <param name="thirdValue">The third value.</param>
            <param name="forthValue">The forth value.</param>
            <param name="fifthValue">The fifth value.</param>
            <param name="otherValues">The rest of values.</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.EventArgs`1">
            <summary>
            This class universal event arguments for transporting single value.
            </summary>
            <typeparam name="T">Event data.</typeparam>
        </member>
        <member name="M:PX.Common.EventArgs`1.#ctor(`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Event data.</param>
        </member>
        <member name="P:PX.Common.EventArgs`1.Value">
            <summary>
            Gets event data.
            </summary>
        </member>
        <member name="T:PX.Common.ExceptionEventArgs">
            <summary>
            This class provides data for error events and methods.
            </summary>
        </member>
        <member name="M:PX.Common.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>exception</b> is null reference value.</exception>
        </member>
        <member name="P:PX.Common.ExceptionEventArgs.Exception">
            <summary>
            Gets exception.
            </summary>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.CheckIfNull``1(``0,System.String,System.String)">
            <summary>
            Checks the <paramref name="obj"/> for <c>null</c> and throws <see cref="T:System.ArgumentNullException"/> if object is <c>null</c>. Otherwise returns object. 
            Allows combination of assignment of usage of object with check for <c>null</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The object to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.ThrowOnNull``1(``0,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if object is <c>null</c>.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The object to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.CheckIfNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            An extension method for fluent patterns that throws <see cref="T:System.ArgumentNullException"/> if <paramref name="str"/> is null and
            throws <see cref="T:System.ArgumentException"/> if <paramref name="str"/> contains only whitespaces or is empty.
            Otherwise returns the <paramref name="str"/>.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="paramName">(Optional) Name of the parameter for <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/>.</param>
            <param name="message">(Optional) The error message.</param>
            <returns/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.ThrowOnNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if string is null or contains only whitespaces.
            </summary>
            <param name="str">The string to act on.</param>
            <param name="paramName">(Optional) Name of the parameter.</param>
            <param name="message">(Optional) The exception message.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            Only the first method that matches the exception type <typeparamref name="T"/> is executed.
            </summary>
            <returns><see cref="T:PX.Common.ExceptionExtensions.RethrowResult`1"/> to use in the fluent call chain. Always interpreted as <see langword="false" /> by the exception filter.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.RethrowResult`1.Default(System.Action{`0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            It is executed only when none of <see cref="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})"/> methods have been executed previously.
            </summary>
            <returns>Always <see langword="false" /> to fail the condition in the exception filter and thus skip the <see langword="catch" /> block.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError).Default(e => PXTrace.WriteDebug("Failed"))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.Rethrow``1(``0)">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            <br/>
            Only the first <see cref="M:PX.Common.ExceptionExtensions.RethrowResult`1.Case``1(System.Action{``0})"/> method that matches the exception type is executed.
            </summary>
            <returns><see cref="T:PX.Common.ExceptionExtensions.RethrowResult`1"/> to use in the fluent call chain. Always interpreted as <see langword="false" /> by the exception filter.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow().Case&lt;PXSetPropertyException&gt;(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.ExceptionExtensions.Rethrow``1(``0,System.Action{``0})">
            <summary>
            This method is intended to use inside exception filters <b>only</b>.
            </summary>
            <returns>Always <see langword="false" /> to fail the condition in the exception filter and thus skip the <see langword="catch" /> block.</returns>
            <example><code>catch (Exception ex) when(ex.Rethrow(PXTrace.WriteError))</code></example>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.FirstSegment(System.String,System.Char)">
            <summary>Returns substring which contains all characters before first occurence of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.FirstSegment(System.String,System.Char[])">
            <summary>Returns substring which contains all characters before first occurence of one of the specified characters.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode characters to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.LastSegment(System.String,System.Char)">
            <summary>Returns substring which contains all characters after last occurence of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.LastSegment(System.String,System.Char[])">
            <summary>Returns substring which contains all characters after last occurence of one of the specified characters.</summary>
            <param name="str">The string to act on.</param>
            <param name="separators">The Unicode characters to seek.</param>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.RestSegment(System.String,System.Char,System.UInt16)">
            <summary>Returns substring which contains all characters after some number of occurences of a specified character.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
            <param name="count">The number of character's occurences.</param>
            <exception cref="T:System.IndexOutOfRangeException">The number of character's occurences is less than specified count.</exception>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.Segment(System.String,System.Char,System.UInt16)">
            <summary>Splits a string into substrings that are based on the specified character and returns an element with the specified number.</summary>
            <param name="str">The string to act on.</param>
            <param name="separator">The Unicode character to seek.</param>
            <param name="number">The zero-based index of the segment.</param>
            <exception cref="T:System.IndexOutOfRangeException">There is no element with the specified number.</exception>
        </member>
        <member name="M:PX.Common.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Returns the string, truncated at the specified length. Returns the original string if its length is not
            greater than the specified length.
            </summary>
            <param name="input">String to truncate.</param>
            <param name="len">Maximum length of the string to return.</param>
        </member>
        <member name="M:PX.Common.DictionaryExtensions.DictionaryExtensions.ExchangeKeys``2(System.Collections.Generic.IDictionary{``0,``1},``0,``0,System.Func{``1})">
            <summary>
            Exchanges values between two keys and return true if values exchanged.
            If a value with the specified key doesn't exist, takes default values if <paramref name="getDefaultValue"/> is specified. 
            </summary>
        </member>
        <member name="M:PX.Common.ServiceLocatorExtensions.TryGetInstance``1(CommonServiceLocator.IServiceLocator,``0@)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="serviceLocator"></param>
            <param name="service">The requested service instance.</param>
            <returns><see langword="true"/>, if the service has been successfully resolved; <see langword="false"/>, if the service is not registered or there are errors resolving the service instance.</returns>
        </member>
        <member name="M:PX.Common.ServiceLocatorExtensions.TryGetInstance``1(CommonServiceLocator.IServiceLocator,System.String,``0@)">
            <summary>
            Tries to get an instance of the given <typeparamref name="TService" />.
            </summary>
            <typeparam name="TService">Type of object requested.</typeparam>
            <param name="serviceLocator"></param>
            <param name="key">Name the object was registered with.</param>
            <param name="service">The requested service instance.</param>
            <returns><see langword="true"/>, if the service has been successfully resolved; <see langword="false"/>, if the service is not registered, or there are errors resolving the service instance.</returns>
        </member>
        <member name="T:PX.Common.FormatHelper`1">
            <summary>
            Implements ability to parse custom format strings (C# format) and apply formatting according to described rules.
            </summary>
        </member>
        <member name="T:PX.Common.GCHelper">
            <summary>
            Contains optimized methods for the .NET Garbage Collector (GC).
            </summary>
        </member>
        <member name="M:PX.Common.GCHelper.ForcedCollect(System.Boolean)">
            <summary>
            Runs garbage collector for all generations two times: one as usual and one with maximum memory pressure (by default).
            </summary>
            <param name="alwaysAddPresure">If true, GC always collects garbage with memory pressure (both times).</param>
        </member>
        <member name="T:PX.Common.GenericCall">
            <summary>
            Provides the ability to call generic methods from non-generic context. 
            </summary>
        </member>
        <member name="M:PX.Common.GenericCall.Of``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Captures a generic method call, which further will be called with replaced generic arguments.
            </summary>
            <param name="genericCallExpression">Expression that calls the method</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWith(System.Type,System.Type[])">
            <summary>
            Calls the captured generic method with generic arguments sequentially replaced with corresponding types.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </summary>
            <param name="firstArgument">Type to replace first generic argument of the captured generic method.</param>
            <param name="furtherArguments">Types to replace sequentially second and further generic arguments of the captured generic method.</param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWithPositionalRemap(System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Type})">
            <summary>
            Calls the captured generic method with generic arguments replaced in specific positions with corresponding types.
            </summary>
            <param name="argumentsPositionalMap">
            Types to replace generic arguments in specific positions of the captured generic method.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.OfFunction`1.ButWithTypeRemap(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Type})">
            <summary>
            Calls the captured generic method with specific generic arguments replaced with corresponding types.
            </summary>
            <param name="argumentsTypeMap">
            Types to replace specific generic arguments of the captured generic method.
            Each type substitutes specific generic argument corresponding to its target type.
            All types which target type is not presented in generic arguments of the captured method will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
            <returns>Value that the captured method returns</returns>
        </member>
        <member name="M:PX.Common.GenericCall.Of(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Captures a generic method call, which further will be called with replaced generic arguments.
            </summary>
            <param name="genericCallExpression">Expression that calls the method</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWith(System.Type,System.Type[])">
            <summary>
            Calls the captured generic method with generic arguments sequentially replaced with corresponding types.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </summary>
            <param name="firstArgument">Type to replace first generic argument of the captured generic method.</param>
            <param name="furtherArguments">Types to replace sequentially second and further generic arguments of the captured generic method.</param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWithPositionalRemap(System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Type})">
            <summary>
            Calls the captured generic method with generic arguments replaced in specific positions with corresponding types.
            </summary>
            <param name="argumentsPositionalMap">
            Types to replace generic arguments in specific positions of the captured generic method.
            Each type substitutes generic argument corresponding to its index.
            All types which index is out of range will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
        </member>
        <member name="M:PX.Common.GenericCall.OfAction.ButWithTypeRemap(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Type})">
            <summary>
            Calls the captured generic method with specific generic arguments replaced with corresponding types.
            </summary>
            <param name="argumentsTypeMap">
            Types to replace specific generic arguments of the captured generic method.
            Each type substitutes specific generic argument corresponding to its target type.
            All types which target type is not presented in generic arguments of the captured method will be ignored.
            Arguments without a substitute or with a null-substitute will not be replaced.
            </param>
        </member>
        <member name="T:PX.Common.GetComparer">
            <summary>
            Provides <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> or <see cref="T:System.Collections.Generic.IComparer`1"/> by recieved field selector function
            </summary>
        </member>
        <member name="M:PX.Common.GetComparer.OfEqualityBy``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which performs object equality comparison by selected field
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="M:PX.Common.GetComparer.By``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IComparer`1"/> which performs object comparison by selected field that implementing the <see cref="T:System.IComparable`1"/> interface
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects. Must implement the <see cref="T:System.IComparable`1"/> interface</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="M:PX.Common.GetComparer.ByNonGeneric``2(System.Func{``0,``1})">
            <summary>
            Provides an <see cref="T:System.Collections.Generic.IComparer`1"/> which performs object comparison by selected field that implementing the <see cref="T:System.IComparable"/> interface
            </summary>
            <typeparam name="T">Type of the comparing objects</typeparam>
            <typeparam name="TValue">Type of selected field of comparing objects. Must implement the <see cref="T:System.IComparable"/> interface</typeparam>
            <param name="fieldSelector">Function that select a field by which comparison is performed</param>
        </member>
        <member name="T:PX.Common.GS1.AI">
            <summary>
            Information Class for an Application Identifier (AI)
            </summary>
        </member>
        <member name="T:PX.Common.GS1.StringData">
            <summary>
            Data that is of any <see cref="T:PX.Common.GS1.DataType"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.DecimalData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.Decimal"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.CurrencyData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.Currency"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.DateTimeData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.DateTime"/>.
            </summary>
        </member>
        <member name="T:PX.Common.GS1.ListData">
            <summary>
            Data that corresponds to <see cref="F:PX.Common.GS1.DataType.List"/>.
            </summary>
        </member>
        <member name="M:PX.Common.GS1.Parser.Parse(System.String,System.Boolean)">
            <summary>
            Parse the ean128 code
            </summary>
            <param name="data">The raw scanner data</param>
            <param name="throwException">If an exception will be thrown if an AI cannot be found</param>
            <returns>The different parts of the ean128 code</returns>
        </member>
        <member name="T:PX.Common.IAsyncOP">
            <summary>
            Represents asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.IAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
        </member>
        <member name="T:PX.Common.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:PX.Common.IO.Base64Stream">
            <summary>
            This class implements base64 encoder/decoder. Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.#ctor(System.IO.Stream,System.Boolean,System.Boolean,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream which to encode/decode.</param>
            <param name="owner">Specifies if Base64Stream is owner of <b>stream</b>.</param>
            <param name="addLineBreaks">Specifies if encoder inserts CRLF after each 76 bytes.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Dispose">
            <summary>
            Celans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="M:PX.Common.IO.Base64Stream.Seek(System.Int64,System.IO.SeekOrigin)">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this.Finish has been called and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.Base64Stream.Finish">
            <summary>
            Completes encoding. Call this method if all data has written and no more data. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.Base64Stream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:PX.Common.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:PX.Common.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:PX.Common.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:PX.Common.IO.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.IO.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:PX.Common.IO.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:PX.Common.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:PX.Common.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:PX.Common.IO.QuotedPrintableStream">
            <summary>
            Implements RFC 2045 6.7. Quoted-Printable stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.#ctor(PX.Common.IO.SmartStream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">Specifies stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.QuotedPrintableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes, writes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.QuotedPrintableStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.ReadWriteControlledStream">
            <summary>
            This class implements read,write or read-write access stream.
            </summary>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.#ctor(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="access">This stream access mode.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="M:PX.Common.IO.ReadWriteControlledStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.NotSupportedException">Is raised when reading not supported.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.Length">
            <summary>
            Gets the length in bytes of the stream.  This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.ReadWriteControlledStream.Position">
            <summary>
            Gets or sets the position within the current stream. This method is not supported and always throws a NotSupportedException.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:PX.Common.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:PX.Common.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream">
            <summary>
            This class is wrapper to normal stream, provides most needed stream methods which are missing from normal stream.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadLineAsyncOperation">
            <summary>
            This class implements asynchronous line reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.DoLineReading">
            <summary>
            Does line reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.BytesReaded">
            <summary>
            Gets number of bytes readed from source stream.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation">
            <summary>
            This class implements asynchronous line-based terminated data reader, where terminator is on line itself.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.String,System.IO.Stream,System.Int64,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="terminator">Data terminator.</param>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b>,<b>terminator</b> or <b>storeStream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.ReadLine_Completed(System.IAsyncResult)">
            <summary>
            This method is called when asyynchronous line reading has completed.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Terminator">
            <summary>
            Gets terminator.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToTerminatorAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation">
            <summary>
            This class implements asynchronous read to stream data reader.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> or <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.DoDataReading">
            <summary>
            Does data reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>storeStream</b>.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadToStreamAsyncOperation.Exception">
            <summary>
            Gets exception happened on asynchronous operation. Returns null if operation was successfull.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadAsyncOperation">
            <summary>
            This class implements asynchronous data reader.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.#ctor(PX.Common.IO.SmartStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <param name="buffer">Buffer where to store data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.DoRead">
            <summary>
            Does asynchronous data reading.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAsyncOperation.Completed">
            <summary>
            This method must be called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.IsEndCalled">
            <summary>
            Gets or sets if <b>EndReadLine</b> method is called for this asynchronous operation.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.Buffer">
            <summary>
            Gets store buffer.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadAsyncOperation.BytesStored">
            <summary>
            Gets number of bytes stored in to <b>Buffer</b>.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadLineAsyncOP">
            <summary>
            This class implements read line operation.
            </summary>
            <remarks>This class can be reused on multiple calls of <see cref="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">SmartStream.ReadLine</see> method.</remarks>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.#ctor(System.Byte[],PX.Common.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="buffer">Line buffer.</param>
            <param name="exceededAction">Specifies how line-reader behaves when maximum line size exceeded.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Start(System.Boolean,PX.Common.IO.SmartStream)">
            <summary>
            Starts reading line.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.Buffering_Completed(System.Exception)">
            <summary>
            Is called when asynchronous read buffer buffering has completed.
            </summary>
            <param name="x">Exception that occured during async operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.DoLineReading(System.Boolean)">
            <summary>
            Starts/continues line reading.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if line reading completed.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.SetInfo(System.Int32,System.Exception)">
            <summary>
            Sets specified field values.
            </summary>
            <param name="bytesInBuffer">Number of bytes in buffer.</param>
            <param name="exception">Exception.</param>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.SizeExceededAction">
            <summary>
            Gets line size exceeded action.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.Buffer">
            <summary>
            Gets line buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in the buffer. Ending line-feed characters included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineBytesInBuffer">
            <summary>
            Gets number of line data bytes stored in the buffer. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineAscii">
            <summary>
            Gets line as ASCII string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineUtf8">
            <summary>
            Gets line as UTF-8 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.LineUtf32">
            <summary>
            Gets line as UTF-32 string. Returns null if EOS(end of stream) reached. Ending line-feed characters not included.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadLineAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.ReadLineAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLineAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP">
            <summary>
            This class implements read period-terminated operation.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.#ctor(System.IO.Stream,System.Int64,System.Int32,PX.Common.IO.SizeExceededAction)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream wehre to sore readed data.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies how period-terminated reader behaves when <b>maxCount</b> exceeded.</param>
            <param name="bufferSize">Define size of buffer for command result.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Start(PX.Common.IO.SmartStream)">
            <summary>
            Starts period-terminated data reading.
            </summary>
            <param name="stream">Owner SmartStream.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.m_pReadLineOP_Completed(System.Object,PX.Common.EventArgs{PX.Common.IO.SmartStream.ReadLineAsyncOP})">
            <summary>
            Is called when asynchronous line reading has completed.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.DoRead">
            <summary>
            Continues period-terminated reading.
            </summary>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.ProcessReadedLine">
            <summary>
            Processes readed line.
            </summary>
            <returns>Returns true if read period-terminated operation has completed.</returns>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">
            <summary>
            Gets stream where period terminated data has stored.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.BytesStored">
            <summary>
            Gets number of bytes stored to <see cref="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.LinesStored">
            <summary>
            Gets number of lines stored to <see cref="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Stream">Stream</see> stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="T:PX.Common.IO.SmartStream.BufferReadAsyncOP">
            <summary>
            This class implements asynchronous read buffering.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.#ctor(PX.Common.IO.SmartStream)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner stream.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.Start(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Starts asynchronous operation.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="buffer">Buffer where to store readed data.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <returns>Returns true if operation completed synchronously, false if asynchronous operation pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.ReleaseEvents">
            <summary>
            Releases all events attached to this class.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsDisposed">
            <summary>
            Gets if this object is disposed.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsCompleted">
            <summary>
            Gets if asynchronous operation has completed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.IsCompletedSynchronously">
            <summary>
            Gets if operation completed synchronously.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.Buffer">
            <summary>
            Gets read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.BytesInBuffer">
            <summary>
            Gets number of bytes stored in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BufferReadAsyncOP.Error">
            <summary>
            Gets error occured during asynchronous operation. Value null means no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.BufferReadAsyncOP.Completed">
            <summary>
            Is raised when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferReadAsyncOP.OnCompleted">
            <summary>
            Raises <b>Completed</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Stream to wrap.</param>
            <param name="owner">Specifies if SmartStream is owner of <b>stream</b>.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadLine(System.Byte[],System.Int32,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous line reading from the source stream.
            </summary>
            <param name="buffer">Buffer where to store readed line data.</param>
            <param name="offset">The location in <b>buffer</b> to begin storing the data.</param>
            <param name="maxCount">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadLine(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous line reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>. Returns -1 if no more data, end of stream reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when <b>maxCount</b> value is exceeded.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadLine(PX.Common.IO.SmartStream.ReadLineAsyncOP,System.Boolean)">
            <summary>
            Begins line reading.
            </summary>
            <param name="op">Read line opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadHeader(System.IO.Stream,System.Int32,PX.Common.IO.SizeExceededAction,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous header reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadHeader(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous header reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <returns>Returns number of bytes stored to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadLine</b> has already been called for specified <b>asyncResult</b>.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:PX.Common.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:PX.Common.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadHeader(System.IO.Stream,System.Int32,PX.Common.IO.SizeExceededAction)">
            <summary>
            Reads header from stream and stores to the specified <b>storeStream</b>.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="maxCount">Maximum number of bytes to read. Value 0 means not limited.</param>
            <param name="exceededAction">Specifies action what is done if <b>maxCount</b> number of bytes has exceeded.</param>
            <returns>Returns how many bytes readed from source stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when source stream has too big line.</exception>
            <exception cref="T:PX.Common.IO.DataSizeExceededException">Is raised when reading exceeds <b>maxCount</b> specified value.</exception>
            <exception cref="T:PX.Common.IO.IncompleteDataException">Is raised when source stream closed before header-terminator reached.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadPeriodTerminated(PX.Common.IO.SmartStream.ReadPeriodTerminatedAsyncOP,System.Boolean)">
            <summary>
            Begins period-terminated data reading.
            </summary>
            <param name="op">Read period terminated opeartion.</param>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <returns>Returns true if read line completed synchronously, false if asynchronous operation pending.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginReadFixedCount(System.IO.Stream,System.Int64,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous data reading from the source stream.
            </summary>
            <param name="storeStream">Stream where to store readed header.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate that is executed when asynchronous operation completes.</param>
            <param name="state">An object that contains any additional user-defined data.</param>
            <returns>An IAsyncResult that represents the asynchronous call.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndReadFixedCount(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">An IAsyncResult that represents an asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid <b>asyncResult</b> passed to this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when <b>EndReadToStream</b> has already been called for specified <b>asyncResult</b>.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadFixedCount(System.IO.Stream,System.Int64)">
            <summary>
            Reads specified number of bytes from source stream and writes to the specified stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>storeStream</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadFixedCountString(System.Int32)">
            <summary>
            Reads specified number of bytes from source stream and converts it to string with current encoding.
            </summary>
            <param name="count">Number of bytes to read.</param>
            <returns>Returns readed data as string.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.ReadAll(System.IO.Stream)">
            <summary>
            Reads all data from source stream and stores to the specified stream.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Write(System.String)">
            <summary>
            Writes specified string data to stream.
            </summary>
            <param name="data">Data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteLine(System.String)">
            <summary>
            Writes specified line to stream. If CRLF is missing, it will be added automatically to line data.
            </summary>
            <param name="line">Line to send.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>line</b> is null.</exception>
            <returns>Returns number of raw bytes written.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteStream(System.IO.Stream)">
            <summary>
            Writes all source <b>stream</b> data to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteStream(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified number of bytes from source <b>stream</b> to stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="count">Number of bytes to write.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when <b>count</b> argument has invalid value.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period handled and terminated data to this stream.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <returns>Returns number of bytes written to stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
            <exception cref="T:PX.Common.IO.LineSizeExceededException">Is raised when <b>stream</b> has too big line.</exception>        
        </member>
        <member name="T:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP">
            <summary>
            This class represents <see cref="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsync(PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP)"/> asynchronous operation.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream. Reading starts from stream current location.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Start(PX.Common.IO.SmartStream)">
            <summary>
            Starts operation processing.
            </summary>
            <param name="owner">Owner SmartStream.</param>
            <returns>Returns true if asynchronous operation in progress or false if operation completed synchronously.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>owner</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SetState(PX.Common.AsyncOP_State)">
            <summary>
            Sets operation state.
            </summary>
            <param name="state">New state.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.ReadLineCompleted(PX.Common.IO.SmartStream.ReadLineAsyncOP)">
            <summary>
            Is called when source stream read line reading has completed.
            </summary>
            <param name="op">Asynchronous operation.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendLineCompleted(System.IAsyncResult)">
            <summary>
            Is called when line sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.SendTerminatorCompleted(System.IAsyncResult)">
            <summary>
            Is called when ".CRLF" or "CRLF.CRLF" terminator sending has completed.
            </summary>
            <param name="ar">Asynchronous result.</param>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.State">
            <summary>
            Gets asynchronous operation state.
            </summary>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.Error">
            <summary>
            Gets error happened during operation. Returns null if no error.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.BytesWritten">
            <summary>
            Gets number of bytes written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this property is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when this property is accessed other than <b>AsyncOP_State.Completed</b> state.</exception>
        </member>
        <member name="E:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync">
            <summary>
            Is called when asynchronous operation has completed.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.OnCompletedAsync">
            <summary>
            Raises <b>CompletedAsync</b> event.
            </summary>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WritePeriodTerminatedAsync(PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP)">
            <summary>
            Starts writing period handled and terminated data to this stream.
            </summary>
            <param name="op">Asynchronous operation.</param>
            <returns>Returns true if aynchronous operation is pending (The <see cref="E:PX.Common.IO.SmartStream.WritePeriodTerminatedAsyncOP.CompletedAsync"/> event is raised upon completion of the operation).
            Returns false if operation completed synchronously.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and and this method is accessed.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised when SMTP client is not connected.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>op</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.WriteHeader(System.IO.Stream)">
            <summary>
            Reads header from source <b>stream</b> and writes it to stream.
            </summary>
            <param name="stream">Stream from where to read header.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stream</b> is null.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <b>origin</b> parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation.
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous data reading.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>The total number of bytes read into the <b>buffer</b>. This can be less than the number of bytes requested 
            if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>asyncResult</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>buffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation.
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in buffer from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending.</returns>
        </member>
        <member name="M:PX.Common.IO.SmartStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
        </member>
        <member name="M:PX.Common.IO.SmartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this method is accessed.</exception>
        </member>
        <member name="M:PX.Common.IO.SmartStream.BufferRead(System.Boolean,PX.Common.IO.SmartStream.BufferCallback)">
            <summary>
            Begins buffering read-buffer.
            </summary>
            <param name="async">If true then this method can complete asynchronously. If false, this method completed always syncronously.</param>
            <param name="asyncCallback">The callback that is executed when asynchronous operation completes. 
            If operation completes synchronously, no callback called.</param>
            <returns>
            Returns true if the I/O operation is pending. The BufferReadAsyncEventArgs.Completed event on the context parameter will be raised upon completion of the operation. 
            Returns false if the I/O operation completed synchronously. The BufferReadAsyncEventArgs.Completed event on the context parameter will not be raised and the context object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. 
            </returns>
            <exception cref="T:System.InvalidOperationException">Is raised when there is data in read buffer and this method is called.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.SourceStream">
            <summary>
            Gets this stream underlying stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.IsOwner">
            <summary>
            Gets if SmartStream is owner of source stream. This property affects like closing this stream will close SourceStream if IsOwner true.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.LastActivity">
            <summary>
            Gets the last time when data was read or written.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesReaded">
            <summary>
            Gets how many bytes are readed through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesWritten">
            <summary>
            Gets how many bytes are written through this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.BytesInReadBuffer">
            <summary>
            Gets number of bytes in read buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Encoding">
            <summary>
            Gets or sets string related methods default encoding.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="P:PX.Common.IO.SmartStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this object is disposed and this property is accessed.</exception>
        </member>
        <member name="T:PX.Common.KeyValueCollection`2">
            <summary>
            Represents a collection that can be accessed either with the key or with the index. 
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the collection.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the collection.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns if key found and removed, otherwise false.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.ContainsKey(`0)">
            <summary>
            Gets if the collection contains the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns true if the collection contains specified key.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.TryGetValueAt(System.Int32,`1@)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">Zero based item index.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found.</param>
            <returns>Returns true if the collection contains specified key and value stored to <b>value</b> argument.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.ToArray">
            <summary>
            Copies all elements to new array, all elements will be in order they added. This method is thread-safe.
            </summary>
            <returns>Returns elements in a new array.</returns>
        </member>
        <member name="M:PX.Common.KeyValueCollection`2.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns>Returns IEnumerator interface.</returns>
        </member>
        <member name="P:PX.Common.KeyValueCollection`2.Count">
            <summary>
            Gets number of items int he collection.
            </summary>
        </member>
        <member name="P:PX.Common.KeyValueCollection`2.Item(`0)">
            <summary>
            Gets item with the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Returns item with the specified key. If the specified key is not found, a get operation throws a KeyNotFoundException.</returns>
        </member>
        <member name="P:PX.Common.Array`1.Empty">
            <summary>
            Cached array instance of <typeparamref name="T"/> type.
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Format(System.String,System.String)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Format(System.String,System.String,System.Char)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Split(System.String,System.String@)">
            <summary>
            Split the specified mask string
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Format(System.Text.StringBuilder,System.String,System.Char)">
            <summary>
            Format text using the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.EncodeMask(System.String)">
            <summary>
            Encode the specified mask string. 
            </summary>
        </member>
        <member name="M:PX.Common.Mask.Flag(System.Int32,System.Int32)">
            <summary>
            Returns the encoded mask flag from specified char.
            </summary>
        </member>
        <member name="M:PX.Common.Mask.FilterChar(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Filter str[i] character by specified mask flag.
            </summary>
        </member>
        <member name="M:PX.Common.Mask.IsMasked(System.String,System.String,System.Boolean)">
            <summary>
            Checks, whether text is masked by specified mask.
            </summary>
        </member>
        <member name="T:PX.Common.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:PX.Common.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:PX.Common.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.Net_Utils.RemoveTrailingZerosInIPAddress(System.String)">
            <summary>
            Removes trailing zeros because C# interprets them as octal number indicator.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.ParseIPAddress(System.String)">
            <summary>
            Parses IP address. This method should be used instead of IPAddress.Parse because it includes input preprocessing.
            </summary>
        </member>
        <member name="M:PX.Common.Net_Utils.TryParseIPAddress(System.String,System.Net.IPAddress@)">
            <summary>
            Parses IP address. This method should be used instead of IPAddress.TryParse because it includes input preprocessing.
            </summary>
        </member>
        <member name="T:PX.Common.NonGenericIEnumerableExtensions">
            <summary>
            Helper class that contains LINQ methods for non-generic IEnumerable.
            </summary>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Concat_(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">The first sequence to concatenate.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
            <returns>An IEnumerable that contains the concatenated elements of the two input sequences.</returns>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Any_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:PX.Common.NonGenericIEnumerableExtensions.Empty_(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains is empty.
            </summary>
            <returns>
            true if the source sequence doesn't contain any elements; otherwise, false.
            </returns>
        </member>
        <member name="T:PX.Common.ParseException">
            <summary>
            This exception is thrown when parse errors are encountered.
            </summary>
        </member>
        <member name="M:PX.Common.ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:PX.Common.PXInternalUseOnlyAttribute">
             <summary>
             This attribute marks code objects as internal, i.e. not intended for use in third-party code.
             <b>No guarantee is provided for such code. There could be breaking changes in behavior or signature,
             or this code can be completely removed in any minor update.</b>
             </summary>
             <remarks>
             <para>Some code objects are <c>public</c> and yet they are not intended for use in third-party code;
             they can be changed without any warning. We mark such objects with the
             <c>PXInternalUseOnlyAttribute</c> attribute and consider them internal.</para>
             <para>The following code objects that are not marked with this attribute are considered internal, too:
             <list type="bullet">
             <item>Types that inherit an internal type</item>
             <item>Nested types that are declared in an internal type</item>
             <item>Members of an internal type</item>
             <item>Methods that override an internal method</item>
             <item>Properties that override an internal property</item>
             <item>Events that override an internal event</item>
             </list></para>
             <para>However, if a virtual type member is marked with the <c>PXInternalUseOnlyAttribute</c> attribute
             and in a derived class it is shadowed with the <c>new</c> keyword, this member in the
             derived class is not considered as internal.</para>
             </remarks>
             <example>
             <code title="Example" description="MyGraphBase, MyGraph, MyGraphExtBase, MyGraphExt, PublicDAC2.InternalString, InternalDAC, InternalDAC.Base, DerivedDAC (due to the recursiveness of declaring an object code internal) are considered internal." lang="CS">
             [PXInternalUseOnly]
             public class MyGraphBase {}
            
             public class MyGraph : MyGraphBase
             { public class MyGraphExtBase; }
            
             public class MyGraphExt : MyGraphExtBase {}
            
             public class PublicDAC
             {
                 [PXInternalUseOnly]
                 public string InternalString;
             }
            
             public class PublicDAC2 : PublicDAC {}
            
             [PXInternalUseOnlyAttribute]
             public class InternalDAC
             {
                 public class Base {}
             }
            
             public class DerivedDAC : InternalDAC.Base {}
             </code>
             </example>
        </member>
        <member name="T:PX.Common.PXLocalizableAttribute">
            <summary>
            Defines attribute which marks a class as messages container and 
            adds a user-defined prefix to exception message (such as "System error", "Data error", etc.)
            If this attribute is applied to a class all const string data members of that class will be considered
            as messages and PXMessages class will be able to localize them by searching an appropriate
            translation in resources files.
            </summary>
        </member>
        <member name="T:PX.Common.Range_long">
            <summary>
            This class represent 2-point <b>long</b> value range.
            </summary>
        </member>
        <member name="M:PX.Common.Range_long.#ctor(System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Start/End value.</param>
        </member>
        <member name="M:PX.Common.Range_long.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Range start value.</param>
            <param name="end">Range end value.</param>
        </member>
        <member name="M:PX.Common.Range_long.Contains(System.Int64)">
            <summary>
            Gets if the specified value is within range.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is within range, otherwise false.</returns>
        </member>
        <member name="P:PX.Common.Range_long.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:PX.Common.Range_long.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="T:PX.Common.SparseMemoryStream">
            <summary>
            SparseMemoryStream is a re-implementation of MemoryStream that uses a dynamic list of byte arrays as a backing store, instead of a single byte array, the allocation
            of which will fail for relatively small streams as it requires contiguous memory.
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.block">
            <summary>
            The block of memory currently addressed by Position
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.blockId">
            <summary>
            The id of the block currently addressed by Position
            </summary>
        </member>
        <member name="P:PX.Common.SparseMemoryStream.blockOffset">
            <summary>
            The offset of the byte currently addressed by Position, into the block that contains it
            </summary>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="source">The stream containing the data to copy</param>
            <param name="length">The number of bytes to copy</param>
        </member>
        <member name="M:PX.Common.SparseMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="destination">The stream to write the content of this stream to</param>
        </member>
        <member name="T:PX.Common.PXReaderWriterScope">
            this class should not be used with recursive lock
        </member>
        <member name="T:PX.Common.Sign">
            <summary>
            Represents a sign, i.e. +, -, or 0
            </summary>
        </member>
        <member name="P:PX.Common.Sign.Plus">
            <summary>
            Represents the + sign
            </summary>
        </member>
        <member name="P:PX.Common.Sign.Minus">
            <summary>
            Represents the - sign
            </summary>
        </member>
        <member name="P:PX.Common.Sign.Zero">
            <summary>
            Represents the 0 sign
            </summary>
        </member>
        <member name="T:PX.Common.Str">
            <summary>
            Utility class for working with strings.
            </summary>
        </member>
        <member name="M:PX.Common.Str.NullIfWhitespace(System.String)">
            <summary>
            A string extension method that returns <c>null</c> if <paramref name="str"/> is null, empty or contains only whitespace characters.
            </summary>
            <param name="str">A string to act on.</param>
            <returns>
            Null or input string.
            </returns>
        </member>
        <member name="M:PX.Common.Str.Null(System.String)">
            <summary>
            Convert empty strings and strings with all whitespaces to null.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Empty(System.Object)">
            <summary>
            Convert null-strings to the strings.Empty.
            </summary>
        </member>
        <member name="M:PX.Common.Str.IsEmpty(System.String)">
            <summary>
            Return true if string null or Empty.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Join(System.String,System.Object[])">
            <summary>
            Join non-empty values and return result string.
            </summary>
        </member>
        <member name="M:PX.Common.Str.Coalesce(System.Object[])">
            <summary>
            Return first not-null value from array;
            </summary>
        </member>
        <member name="M:PX.Common.Str.GetFormatPlaceholderIndexes(System.String)">
            <summary>
            Gets the format placeholder indexes from the format string. For example, the format string "{0} - {2}" should return 0 and 2.
            </summary>
            <param name="formatString">The format string.</param>
            <returns>
            The pair - a flag if the format string is correct and format placeholder indexes.
            </returns>
        </member>
        <member name="M:PX.Common.Str.SplitByWords(System.String)">
            <summary>
            Splits given string by words.
            </summary>
            <param name="str">A string to split.</param>
            <returns>An array of strings containing words of this string.</returns>
        </member>
        <member name="T:PX.Common.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:PX.Common.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:PX.Common.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:PX.Common.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="T:PX.Common.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:PX.Common.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>source</b> is null.</exception>
        </member>
        <member name="M:PX.Common.StringReader.AppenString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="str">String value to append.</param>
        </member>
        <member name="M:PX.Common.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips white-space(SP,VTAB,HTAB,CR,LF) from the beginning of source string.
            </summary>
            <returns>Returns white-space chars which was readed.</returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string starts with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.EndsWith(System.String)">
            <summary>
            Gets if source string ends with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.EndsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string ends with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns>Returns true if source string ends with specified value.</returns>
        </member>
        <member name="M:PX.Common.StringReader.StartsWithWord">
            <summary>
            Gets if current source string starts with word. For example if source string starts with
            whiter space or parenthesize, this method returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.Common.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:PX.Common.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:PX.Common.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:PX.Common.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes string and escapes fishy('\',"') chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char,System.Char)">
            <summary>
            Escapes specified chars in the specified string. Escaped chars get replaced with separator + one symbol index, which means that escaped characters no longer can be found
            in the string and can be used as separators when combinig such strings.
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charToEscape">character that gets replaced with escape character</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String,System.Char,System.Char)">
            <summary>
            Unescape string. Escaped sequences get replaced with the original symbols
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charToEscape">character that was replaced</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char,System.Char[])">
            <summary>
            Escapes specified chars in the specified string. Escaped chars get replaced with separator + one symbol index, which means that escaped characters no longer can be found
            in the string and can be used as separators when combinig such strings.
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charsToEscape">characters that get replaced with escape character</param>
            <returns>escaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String,System.Char,System.Char[])">
            <summary>
            Unescape string. Escaped sequences get replaced with the original symbols
            </summary>
            <param name="text">string to escape</param>
            <param name="separator">escape character</param>
            <param name="charsToEscape">characters that were replaced</param>
            <returns>unescaped string</returns>
        </member>
        <member name="M:PX.Common.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:PX.Common.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <param name="count">Maximum number of substrings to return.</param>
            <returns>Returns splitted string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:PX.Common.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="M:PX.Common.TextUtils.Emphasize(System.String,System.String)">
            <summary>
            Finds the substrings in text and emphasizes it with BOLD tag. 
            </summary>
            <param name="text"></param>
            <param name="substring"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TextUtils.ConvertQueryToRegexPatern(System.String)">
            <summary>
            Converts phrase into regex pattern for matching. 
            </summary>
            <param name="phrase"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.ITypeArrayOf`1">
            <summary>
            Save alternative of <see cref="T:System.Type"/>[].<para/>
            Gives ability to restrict the types which an array should consist of.<para/>
            To extract the underlying array, that is guaranteed to contain only types that are <typeparamref name="TBase"/> descendants, 
            use <see cref="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)"/> routine.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts the underlying <see cref="T:System.Type"/>[].
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArray.CheckAndExtractInstances``1(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts instances corresponding to the underlying <see cref="T:System.Type"/>[].
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArray.Construct``1(System.Type[])">
            <summary>
            Construct a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with passed <paramref name="elements"/>.
            Throws an <see cref="T:System.ArgumentException"/> if any element is not a <typeparamref name="TBase"/> descendant.
            Returns empty type array if elements array is null or empty.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.EmptyOrSingleOrSelf``1(System.Type)">
            <summary>
            Returns an empty <see cref="T:PX.Common.TypeArrayOf`1"/> if passed argument is null,
            constructs a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with argument
            if <typeparamref name="TBase"/> is assignable from passed argument,
            or returns passed argument if it is already a <see cref="T:PX.Common.TypeArrayOf`1"/>.<para/>
            Throws an <see cref="T:System.ArgumentException"/> if passed argument neither a corresponding array nor a corresponding array element.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArray.IsTypeArrayOf``1(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants).
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
        </member>
        <member name="M:PX.Common.TypeArray.IsCompatibleElement``1(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. <see cref="T:PX.Common.TypeArrayOf`1"/> descendant can contain that  <paramref name="type"/>).
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.TypeArray.IsNotEmpty">
            <summary>
            Indicates that array must have at least one element
            </summary>
            <remarks>
            Use this interface in generic type parameter restrictions to ensure that passed <see cref="T:PX.Common.TypeArrayOf`1"/> is not emtpy
            </remarks>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1">
            <summary>
            Save alternative of <see cref="T:System.Type"/>[].<para/>
            Gives ability to restrict the types which an array should consist of.<para/>
            Each type that is mentioned in <see cref="T:PX.Common.TypeArrayOf`1.FilledWith`1"/>-clause should be a <typeparamref name="TBase"/> descendants.<para/>
            To extract the underlying array, that is guaranteed to contain only types that are <typeparamref name="TBase"/> descendants, 
            use <see cref="M:PX.Common.TypeArray.CheckAndExtract``1(System.Type,System.String)"/> routine.
            </summary>
            <typeparam name="TBase">Elements restricting base class</typeparam>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.CheckAndExtract(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts the underlying <see cref="T:System.Type"/>[].
            </summary>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.CheckAndExtractInstances(System.Type,System.String)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants)
            and extracts instances corresponding to the underlying <see cref="T:System.Type"/>[].
            </summary>
            <param name="type">inspectingType</param>
            <param name="argName">Original argument name (is used for debug simplifying)</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.Construct(System.Type[])">
            <summary>
            Construct a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with passed <paramref name="elements"/>.
            Throws an <see cref="T:System.ArgumentException"/> if any element is not a <typeparamref name="TBase"/> descendant.
            Returns empty type array if elements array is null or empty.
            </summary>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.EmptyOrSingleOrSelf(System.Type)">
            <summary>
            Returns an empty <see cref="T:PX.Common.TypeArrayOf`1"/> if passed argument is null,
            constructs a <see cref="T:PX.Common.TypeArrayOf`1"/> that is filled with argument
            if <typeparamref name="TBase"/> is assignable from passed argument,
            or returns passed argument if it is already a <see cref="T:PX.Common.TypeArrayOf`1"/>.<para/>
            Throws an <see cref="T:System.ArgumentException"/> if passed argument neither a corresponding array nor a corresponding array element.
            </summary>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsTypeArray(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. contains only types that are <typeparamref name="TBase"/> descendants).
            </summary>
            <param name="type">inspectingType</param>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsCompatibleElement(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            (e.g. <see cref="T:PX.Common.TypeArrayOf`1"/> descendant can contain that  <paramref name="type"/>).
            </summary>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="M:PX.Common.TypeArrayOf`1.IsTypeArrayOrElement(System.Type)">
            <summary>
            Checks that <paramref name="type"/> is a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant
            or an element compatible with a <see cref="T:PX.Common.TypeArrayOf`1"/> descendant.
            </summary>
            <param name="type">inspectingType</param>
            <returns></returns>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.Empty">
            <summary>
            An empty array.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`1">
            <summary>
            Array filled with a single element.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`1">
            <summary>
            Array filled with a single element.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`2">
            <summary>
            Array filled with 2 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`2">
            <summary>
            Array filled with 2 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`3">
            <summary>
            Array filled with 3 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`3">
            <summary>
            Array filled with 3 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`4">
            <summary>
            Array filled with 4 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`4">
            <summary>
            Array filled with 4 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`5">
            <summary>
            Array filled with 5 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`5">
            <summary>
            Array filled with 5 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`6">
            <summary>
            Array filled with 6 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`6">
            <summary>
            Array filled with 6 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`7">
            <summary>
            Array filled with 7 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`7">
            <summary>
            Array filled with 7 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`8">
            <summary>
            Array filled with 8 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`8">
            <summary>
            Array filled with 8 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`9">
            <summary>
            Array filled with 9 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`9">
            <summary>
            Array filled with 9 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`10">
            <summary>
            Array filled with 10 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`10">
            <summary>
            Array filled with 10 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`11">
            <summary>
            Array filled with 11 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`11">
            <summary>
            Array filled with 11 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`12">
            <summary>
            Array filled with 12 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`12">
            <summary>
            Array filled with 12 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`13">
            <summary>
            Array filled with 13 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`13">
            <summary>
            Array filled with 13 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`14">
            <summary>
            Array filled with 14 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`14">
            <summary>
            Array filled with 14 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`15">
            <summary>
            Array filled with 15 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`15">
            <summary>
            Array filled with 15 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`16">
            <summary>
            Array filled with 16 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`16">
            <summary>
            Array filled with 16 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`17">
            <summary>
            Array filled with 17 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`17">
            <summary>
            Array filled with 17 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`18">
            <summary>
            Array filled with 18 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`18">
            <summary>
            Array filled with 18 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`19">
            <summary>
            Array filled with 19 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`19">
            <summary>
            Array filled with 19 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`20">
            <summary>
            Array filled with 20 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`20">
            <summary>
            Array filled with 20 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`21">
            <summary>
            Array filled with 21 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`21">
            <summary>
            Array filled with 21 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`22">
            <summary>
            Array filled with 22 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`22">
            <summary>
            Array filled with 22 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`23">
            <summary>
            Array filled with 23 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`23">
            <summary>
            Array filled with 23 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`24">
            <summary>
            Array filled with 24 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`24">
            <summary>
            Array filled with 24 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`25">
            <summary>
            Array filled with 25 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`25">
            <summary>
            Array filled with 25 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`26">
            <summary>
            Array filled with 26 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`26">
            <summary>
            Array filled with 26 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`27">
            <summary>
            Array filled with 27 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`27">
            <summary>
            Array filled with 27 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`28">
            <summary>
            Array filled with 28 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`28">
            <summary>
            Array filled with 28 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`29">
            <summary>
            Array filled with 29 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`29">
            <summary>
            Array filled with 29 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`30">
            <summary>
            Array filled with 30 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`30">
            <summary>
            Array filled with 30 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`31">
            <summary>
            Array filled with 31 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`31">
            <summary>
            Array filled with 31 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`32">
            <summary>
            Array filled with 32 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`32">
            <summary>
            Array filled with 32 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`33">
            <summary>
            Array filled with 33 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`33">
            <summary>
            Array filled with 33 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`34">
            <summary>
            Array filled with 34 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`34">
            <summary>
            Array filled with 34 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`35">
            <summary>
            Array filled with 35 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`35">
            <summary>
            Array filled with 35 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`36">
            <summary>
            Array filled with 36 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`36">
            <summary>
            Array filled with 36 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`37">
            <summary>
            Array filled with 37 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`37">
            <summary>
            Array filled with 37 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`38">
            <summary>
            Array filled with 38 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`38">
            <summary>
            Array filled with 38 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`39">
            <summary>
            Array filled with 39 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`39">
            <summary>
            Array filled with 39 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`40">
            <summary>
            Array filled with 40 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`40">
            <summary>
            Array filled with 40 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`41">
            <summary>
            Array filled with 41 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`41">
            <summary>
            Array filled with 41 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`42">
            <summary>
            Array filled with 42 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`42">
            <summary>
            Array filled with 42 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`43">
            <summary>
            Array filled with 43 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`43">
            <summary>
            Array filled with 43 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`44">
            <summary>
            Array filled with 44 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`44">
            <summary>
            Array filled with 44 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`45">
            <summary>
            Array filled with 45 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`45">
            <summary>
            Array filled with 45 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`46">
            <summary>
            Array filled with 46 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`46">
            <summary>
            Array filled with 46 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`47">
            <summary>
            Array filled with 47 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`47">
            <summary>
            Array filled with 47 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`48">
            <summary>
            Array filled with 48 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`48">
            <summary>
            Array filled with 48 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`49">
            <summary>
            Array filled with 49 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`49">
            <summary>
            Array filled with 49 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`50">
            <summary>
            Array filled with 50 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`50">
            <summary>
            Array filled with 50 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`51">
            <summary>
            Array filled with 51 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`51">
            <summary>
            Array filled with 51 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`52">
            <summary>
            Array filled with 52 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`52">
            <summary>
            Array filled with 52 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`53">
            <summary>
            Array filled with 53 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`53">
            <summary>
            Array filled with 53 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`54">
            <summary>
            Array filled with 54 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`54">
            <summary>
            Array filled with 54 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`55">
            <summary>
            Array filled with 55 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`55">
            <summary>
            Array filled with 55 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`56">
            <summary>
            Array filled with 56 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`56">
            <summary>
            Array filled with 56 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`57">
            <summary>
            Array filled with 57 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`57">
            <summary>
            Array filled with 57 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`58">
            <summary>
            Array filled with 58 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`58">
            <summary>
            Array filled with 58 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`59">
            <summary>
            Array filled with 59 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`59">
            <summary>
            Array filled with 59 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`60">
            <summary>
            Array filled with 60 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`60">
            <summary>
            Array filled with 60 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`61">
            <summary>
            Array filled with 61 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`61">
            <summary>
            Array filled with 61 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`62">
            <summary>
            Array filled with 62 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`62">
            <summary>
            Array filled with 62 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`63">
            <summary>
            Array filled with 63 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`63">
            <summary>
            Array filled with 63 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`64">
            <summary>
            Array filled with 64 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`64">
            <summary>
            Array filled with 64 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`65">
            <summary>
            Array filled with 65 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`65">
            <summary>
            Array filled with 65 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`66">
            <summary>
            Array filled with 66 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`66">
            <summary>
            Array filled with 66 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`67">
            <summary>
            Array filled with 67 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`67">
            <summary>
            Array filled with 67 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`68">
            <summary>
            Array filled with 68 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`68">
            <summary>
            Array filled with 68 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`69">
            <summary>
            Array filled with 69 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`69">
            <summary>
            Array filled with 69 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`70">
            <summary>
            Array filled with 70 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`70">
            <summary>
            Array filled with 70 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`71">
            <summary>
            Array filled with 71 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`71">
            <summary>
            Array filled with 71 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`72">
            <summary>
            Array filled with 72 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`72">
            <summary>
            Array filled with 72 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`73">
            <summary>
            Array filled with 73 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`73">
            <summary>
            Array filled with 73 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`74">
            <summary>
            Array filled with 74 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`74">
            <summary>
            Array filled with 74 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`75">
            <summary>
            Array filled with 75 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`75">
            <summary>
            Array filled with 75 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`76">
            <summary>
            Array filled with 76 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`76">
            <summary>
            Array filled with 76 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`77">
            <summary>
            Array filled with 77 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`77">
            <summary>
            Array filled with 77 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`78">
            <summary>
            Array filled with 78 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`78">
            <summary>
            Array filled with 78 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`79">
            <summary>
            Array filled with 79 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`79">
            <summary>
            Array filled with 79 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`80">
            <summary>
            Array filled with 80 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`80">
            <summary>
            Array filled with 80 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`81">
            <summary>
            Array filled with 81 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`81">
            <summary>
            Array filled with 81 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`82">
            <summary>
            Array filled with 82 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`82">
            <summary>
            Array filled with 82 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`83">
            <summary>
            Array filled with 83 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`83">
            <summary>
            Array filled with 83 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`84">
            <summary>
            Array filled with 84 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`84">
            <summary>
            Array filled with 84 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`85">
            <summary>
            Array filled with 85 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`85">
            <summary>
            Array filled with 85 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`86">
            <summary>
            Array filled with 86 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`86">
            <summary>
            Array filled with 86 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`87">
            <summary>
            Array filled with 87 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`87">
            <summary>
            Array filled with 87 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`88">
            <summary>
            Array filled with 88 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`88">
            <summary>
            Array filled with 88 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`89">
            <summary>
            Array filled with 89 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`89">
            <summary>
            Array filled with 89 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`90">
            <summary>
            Array filled with 90 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`90">
            <summary>
            Array filled with 90 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`91">
            <summary>
            Array filled with 91 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`91">
            <summary>
            Array filled with 91 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`92">
            <summary>
            Array filled with 92 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`92">
            <summary>
            Array filled with 92 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`93">
            <summary>
            Array filled with 93 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`93">
            <summary>
            Array filled with 93 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`94">
            <summary>
            Array filled with 94 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`94">
            <summary>
            Array filled with 94 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`95">
            <summary>
            Array filled with 95 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`95">
            <summary>
            Array filled with 95 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`96">
            <summary>
            Array filled with 96 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`96">
            <summary>
            Array filled with 96 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`97">
            <summary>
            Array filled with 97 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`97">
            <summary>
            Array filled with 97 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`98">
            <summary>
            Array filled with 98 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`98">
            <summary>
            Array filled with 98 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`99">
            <summary>
            Array filled with 99 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`99">
            <summary>
            Array filled with 99 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.IFilledWith`100">
            <summary>
            Array filled with 100 elements.
            Allows descendant to inherit from another class,
            but doesn't give it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeArrayOf`1.FilledWith`100">
            <summary>
            Array filled with 100 elements.
            Doesn't allow descendant to inherit from another class,
            but gives it ability to directly use methods of TypeArray API.
            </summary>
        </member>
        <member name="T:PX.Common.TypeHelper">
            <summary>
            Utility class for working with system types.
            </summary>
        </member>
        <member name="M:PX.Common.TypeHelper.DefaultValue(System.TypeCode)">
            <summary>
            Convert empty-strings to null.
            </summary>
        </member>
        <member name="M:PX.Common.TypeHelper.IsNumeric(System.TypeCode)">
            <summary>
            Chech if type is numeric type.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Logging.LoggerExtensions.BeginPropertyScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Object)">
            <summary>
            This is intended to mimic Serilog's <c>LogContext.PushProperty</c> behavior
            by introducing a scope which state is a single property holder.
            </summary>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to create the scope in.</param>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>An <see cref="T:System.IDisposable" /> that ends the logical operation scope on dispose.</returns>
            <seealso cref="M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)">ILogger.BeginScope&lt;TState&gt;(TState state)</seealso>
            <remarks>
            This is how Serilog default implementation for Microsoft.Extensions.Logging behaves:
            scopes are converted into a single <c>LogEvent</c> property called <c>Scope</c>,
            which contains a sequence of the logical scopes, in order of their adding:
            <code>
            "Scope": [
              {
                "OutermostScopeProperty1": "SomeValue"
              },
              {
                "InnermostScopeProperty1": "SomeValue",
                "InnermostScopeProperty2": "SomeValue"
              }
            ]
            </code>
            which is decent for all-around use, but still too complicated.
            <code>logger.BeginPropertyScope("property", "value")</code>
            will simply produce
            <code>
            "property": "value"
            </code>
            which is much nicer for our cases.
            </remarks>
        </member>
    </members>
</doc>
