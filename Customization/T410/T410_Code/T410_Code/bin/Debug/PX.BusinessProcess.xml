<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.BusinessProcess</name>
    </assembly>
    <members>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.notificationID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.name">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.nto">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.subject">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.screenID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.body">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.localeName">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.noteID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.destinationScreenID">
            <exclude/>
        </member>
        <member name="T:PX.BusinessProcess.DAC.MobileNotification.destinationEntityID">
            <exclude/>
        </member>
        <member name="P:PX.BusinessProcess.DAC.MobileNotification.ShowSendByEventsTabExpr">
            <summary>
            A service field. It is used to hide "Send by Events" tab on SM204004 page.
            </summary>
        </member>
        <member name="T:PX.BusinessProcess.Subscribers.ActionHandlers.IEventAction">
            <summary>The interface for a subscriber that the system executes once the business event has occurred.</summary>
            <example>
              <code title="Example" description="The following example shows sample implementation of a custom subscriber that writes notification data to a text file." lang="CS">
            //The custom subscriber that the system executes once the business event has occurred
            public class CustomEventAction : IEventAction
            {
                //The GUID that identifies a subscriber
                public Guid Id { get; set; }
             
                //The name of the subscriber of the custom type
                public string Name { get; protected set; }
             
                //The notification template
                private readonly Notification _notificationTemplate;
             
                //The method that writes the body of the notification to a text file once the business event has occurred
                public void Process(MatchedRow[] eventRows, CancellationToken cancellation)
                {
                    using (StreamWriter file = new StreamWriter(@"C:\tmp\EventRows.txt"))
                    {
                        var graph = PXGenericInqGrph.CreateInstance(_notificationTemplate.ScreenID);
                        var parameters = @eventRows.Select(r =&gt; Tuple.Create&lt;IDictionary&lt;string, object&gt;, IDictionary&lt;string, object&gt;&gt;(
                        r.NewRow?.ToDictionary(c =&gt; c.Key.FieldName, c =&gt; c.Value),
                        r.OldRow?.ToDictionary(c =&gt; c.Key.FieldName, c =&gt; (c.Value as ValueWithInternal)?.ExternalValue ?? c.Value))).ToArray();
                        var body = PXTemplateContentParser.ScriptInstance.Process(_notificationTemplate.Body, parameters, graph, null);
                        file.WriteLine(body);
                    }
                }
             
                //The CustomEventAction constructor
                public CustomEventAction(Guid id, Notification notification)
                {
                    Id = id;
                    Name = notification.Name;
                    _notificationTemplate = notification;
                }
            }</code>
            </example>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.ActionHandlers.IEventAction.Id">
            <summary>The GUID that identifies a subscriber.</summary>
            <remarks>For the predefined subscriber types, the system assigns the value of this property to a new subscriber created by a user.</remarks>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.ActionHandlers.IEventAction.Name">
            <summary>The name of the subscriber.</summary>
            <remarks>For the predefined subscriber types, a user specifies the value of this property on the form that corresponds to the subscriber. For example, for email
            notifications, the user specifies the value of this property in the <strong>Description</strong> box on the Email Templates (SM204003) form.</remarks>
        </member>
        <member name="M:PX.BusinessProcess.Subscribers.ActionHandlers.IEventAction.Process(PX.Data.BusinessProcess.MatchedRow[],System.Threading.CancellationToken)">
            <summary>Implements the actions that the system should perform once the business event has occurred.</summary>
            <param name="eventRows">The old row and the new row for which the business event has occurred.</param>
            <param name="cancellation">The cancellation token.</param>
            <remarks>For example, for predefined email notifications, the method inserts values in the email template and sends the notification.</remarks>
        </member>
        <member name="T:PX.BusinessProcess.Subscribers.ActionHandlers.EventActionBase">
            <exclude />
        </member>
        <member name="T:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory">
            <summary>The interface for creation and execution of the subscriber.</summary>
        </member>
        <member name="M:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory.CreateActionHandler(System.Guid,System.Boolean,PX.BusinessProcess.Event.IEventDefinitionsProvider)">
            <summary>Creates a subscriber with the specified ID.</summary>
            <param name="handlerId">The ID of a subscriber.</param>
            <param name="stopOnError">The Boolean value that specifies (if set to true) that the processing of the subscriber should be stopped if an error occurs during processing.</param>
            <param name="eventDefinitionsProvider">A class that implements the IEventDefinitionsProvider interface.</param>
        </member>
        <member name="M:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory.GetHandlers(PX.Data.PXGraph)">
            <summary>Retrieves the list of subscribers.</summary>
            <param name="graph">The PXGraph type that works with the subscribers of this type.</param>
            <remarks>This list is displayed in the lookup dialog box in the <strong>Subscriber ID</strong> column on the <strong>Subscribers</strong> tab of the Business
            Events (SM302050) form.</remarks>
            <returns>The list of subscribers.</returns>
        </member>
        <member name="M:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory.RedirectToHandler(System.Nullable{System.Guid})">
            <summary>Redirects to the subscriber.</summary>
            <param name="handlerId">The ID of the subscriber.</param>
            <remarks>For example, for email notifications, the method opens the Email Templates (SM204003) form that displays the subscriber (which is a
            email template) with the specified ID.</remarks>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory.Type">
            <summary>A string identifier of the subscriber type.</summary>
            <remarks>The value of this property is stored in the database.</remarks>
            <value>The value is exactly four characters long.</value>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory.TypeName">
            <summary>A string label of the subscriber type.</summary>
            <remarks>A user views this value in the <strong>Type</strong> column on the <strong>Subscribers</strong> tab of the Business Events (SM302050) form.</remarks>
        </member>
        <member name="T:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactoryWithCreateAction">
            <summary>The interface for creation and execution of the subscriber, which additionally provides methods and properties that define the creation action.</summary>
            <remarks>If you want an action to be displayed in the <strong>Create Subscriber</strong> menu on the toolbar of the <strong>Subscribers</strong> tab of
            the Business Events (SM302050) form, you need to implement this interface instead of
            the <see cref="T:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactory">IBPSubscriberActionHandlerFactory</see> interface.</remarks>
            <example>
              <code title="Example" description="The following example shows sample implementation of the class that creates and executes the custom subscriber." lang="CS">
            //The class that creates and executes the custom subscriber
            class CustomSubscriberHandlerFactory : IBPSubscriberActionHandlerFactoryWithCreateAction
            {
                //The method that creates a subscriber with the specified ID
                public IEventAction CreateActionHandler(Guid handlerId, bool stopOnError, IEventDefinitionsProvider eventDefinitionsProvider)
                {
                    var graph = PXGraph.CreateInstance&lt;PXGraph&gt;();
                    Notification notification = PXSelect&lt;Notification, Where&lt;Notification.noteID, Equal&lt;Required&lt;Notification.noteID&gt;&gt;&gt;&gt;
                        .Select(graph, handlerId).AsEnumerable().SingleOrDefault();
             
                    return new CustomEventAction(handlerId, notification);
                }
             
                //The method that retrieves the list of subscribers of the custom type
                public IEnumerable&lt;BPHandler&gt; GetHandlers(PXGraph graph)
                {
                    return PXSelect&lt;Notification, Where&lt;Notification.screenID, Equal&lt;Current&lt;BPEvent.screenID&gt;&gt;, Or&lt;Current&lt;BPEvent.screenID&gt;, IsNull&gt;&gt;&gt;
                        .Select(graph).FirstTableItems.Where(c =&gt; c != null)
                        .Select(c =&gt; new BPHandler { Id = c.NoteID, Name = c.Name, Type = LocalizableMessages.CustomNotification });
                }
             
                //The method that redirects to the subscriber
                public void RedirectToHandler(Guid? handlerId)
                {
                    var notificationMaint = PXGraph.CreateInstance&lt;SMNotificationMaint&gt;();
                    notificationMaint.Message.Current = notificationMaint.Notifications.Search&lt;Notification.noteID&gt;(handlerId);
                    PXRedirectHelper.TryRedirect(notificationMaint, PXRedirectHelper.WindowMode.New);
                }
             
                //A string identifier of the subscriber type that is exactly four characters long
                public string Type
                {
                    get { return "CTTP"; }
                }
             
                //A string label of the subscriber type
                public string TypeName
                {
                    get { return LocalizableMessages.CustomNotification; }
                }
             
                //A string identifier of the action that creates a subscriber of the custom type
                public string CreateActionName
                {
                    get { return "NewCustomNotification"; }
                }
             
                //A string label of the button that creates a subscriber of the custom type
                public string CreateActionLabel
                {
                    get { return LocalizableMessages.CreateCustomNotification; }
                }
             
                //The delegate for the action that creates a subscriber of the custom type
                public Tuple&lt;PXButtonDelegate, PXEventSubscriberAttribute[]&gt; getCreateActionDelegate(BusinessProcessEventMaint maintGraph)
                {
                    PXButtonDelegate handler = (PXAdapter adapter) =&gt;
                    {
                        if (maintGraph.Events?.Current?.ScreenID == null)
                            return adapter.Get();
             
                        var graph = PXGraph.CreateInstance&lt;SMNotificationMaint&gt;();
                        var cache = graph.Caches&lt;Notification&gt;();
                        var notification = (Notification)cache.CreateInstance();
                        var row = cache.InitNewRow(notification);
                        row.ScreenID = maintGraph.Events.Current.ScreenID;
                        cache.Insert(row);
             
                        var subscriber = new BPEventSubscriber();
                        var subscriberRow = maintGraph.Subscribers.Cache.InitNewRow(subscriber);
                        subscriberRow.Type = Type;
                        subscriberRow.HandlerID = row.NoteID;
                        graph.Caches[typeof(BPEventSubscriber)].Insert(subscriberRow);
             
                        PXRedirectHelper.TryRedirect(graph, PXRedirectHelper.WindowMode.NewWindow);
                        return adapter.Get();
                    };
                    return Tuple.Create(handler,
                        new PXEventSubscriberAttribute[]
                            {new PXButtonAttribute {OnClosingPopup = PXSpecialButtonType.Refresh}});
                }
            }</code>
            </example>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactoryWithCreateAction.CreateActionName">
            <summary>A string identifier of the action that creates a subscriber.</summary>
        </member>
        <member name="P:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactoryWithCreateAction.CreateActionLabel">
            <summary>A string label of the button that creates a subscriber.</summary>
            <remarks>This label is displayed in the <strong>Create Subscriber</strong> menu on the toolbar of the <strong>Subscribers</strong> tab of the Business Events (SM302050)
            form.</remarks>
        </member>
        <member name="M:PX.BusinessProcess.Subscribers.Factories.IBPSubscriberActionHandlerFactoryWithCreateAction.getCreateActionDelegate(PX.BusinessProcess.UI.BusinessProcessEventMaint)">
            <summary>The delegate for the action that creates a subscriber.</summary>
            <param name="graph">The BusinessProcessEventMaint graph.<i><see /></i></param>
        </member>
        <member name="T:PX.BusinessProcess.UI.GraphExtensions.SendByEventsNotificationMaintExtension`2">
            <summary>The generic graph extension that defines the Send By Events tab functionality for Notifications.</summary>
            <typeparam name="TGraph">A <see cref="T:PX.Data.PXGraph" /> type.</typeparam>
            <typeparam name="TPrimary">A DAC (a <see cref="T:PX.Data.IBqlTable" /> type).</typeparam>
        </member>
    </members>
</doc>
