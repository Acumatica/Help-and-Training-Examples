<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.Data</name>
    </assembly>
    <members>
        <member name="T:PX.Data.PXAccessDummyProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider.Roles">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider.RolesInGraph">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider.RolesInCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider.RolesInMember">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseAccessProvider.Definition">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDatabaseAccessProvider.Definition._EstimatedRolesInGraphRowsCount">
            <summary>
            Estimated number of rows in the <see cref="T:PX.Data.PXDatabaseAccessProvider.RolesInGraph"/> DB table.
            </summary>
            <remarks>
            The median amount of rows in the RolesInGraph DB table calced over 200 DBs from support cases is about <c>30 400</c> rows, the average amount is about <c>64 096</c> rows
            The median amount of rows  in the RolesInGraph DB table calced over several versions of SalesDemo is about <c>12 400</c> rows.
            The estimated capacity is <c>2^14</c>, a power of two (since the size of dynamic lists starts with <c>4</c> and is doubled on resize, so it will reach this number after some resizes anyway)
            It is not too big but can store data for a median Sales Demo and after one resize for the median amount calced from the actual user data.
            </remarks>
        </member>
        <member name="T:PX.Data.PXDBFeatureAccessProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBFeatureAccessProvider.FeatureDefinition">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBFeatureAccessProvider.FeatureDefinition.Restrict">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRoleList">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXMultiDatabaseUser">
            <summary>
            This interface should be implemented for multi-database users for PXAccessProvider.
            </summary>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccessProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccessProvider.GraphAccess">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccessProvider.CacheAccess">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccessProvider.MemberAccess">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccessProvider.GetRights(System.String,System.String,System.Type,System.Boolean,PX.Data.PXCacheRights@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Boolean)">
            <param name="skipGraphRights">If true, returns cache rights even if access to the screen is denied.</param>
        </member>
        <member name="M:PX.Data.PXAccessProvider.GetMultiDatabaseUsers">
            <summary>
            This method should be overridden in a derived classes if multi-database environment is needed.
            </summary>
        </member>
        <member name="M:PX.Data.PXAccessProvider.GetLocalizationCodeForFeature(System.String)">
            <summary>
            Returns the localization that corresponds to the requested feature.
            See <see cref="T:PX.Data.Localization.ILocalizationFeaturesService">ILocalizationFeaturesService</see> for additional information.
            </summary>
            <param name="feature">The name of the feature according to <see cref="P:PX.Data.PXAccessProvider.AllFeatures">PXAccessProvider</see></param>
            <returns>The unique ID of the localization that consists of capital letters</returns>
        </member>
        <member name="M:PX.Data.PXAccessProvider.GetEnabledLocalizations">
            <summary>
            Returns localizations available on the website.
            See <see cref="T:PX.Data.Localization.ILocalizationFeaturesService">ILocalizationFeaturesService</see> for additional information.
            </summary>
            <returns>A list of localizations represented by unique IDs that consist of capital letters.</returns>
        </member>
        <member name="M:PX.Data.PXAccess.ForEachTenantAsAdmin(System.Action)">
            <summary>
            <para>Executes an <paramref name="action"/> for each tenant in the system.</para>
            <para>The action will be executed for each tenant even if it threw an exception in some of the tenants.</para>
            </summary>
            <param name="action">An action to be executed for each tenant.</param>
            <exception cref="T:System.AggregateException">Thrown if the <paramref name="action"/> threw an exception in at least one tenant.</exception>
        </member>
        <member name="T:PX.Data.PXCancellationToken">
            <exclude/>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.IActiveDirectoryProvider.IsUserDisabled(System.String)">
            <summary>
            Checks whether user is disabled in the Active Directory
            </summary>
            <param name="login">The login of the user</param>
            <returns>Returns true only if user is found in the AD and disabled by some implementation specific rule, otherwise false.</returns>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.AzureActiveDirectoryProviderBase.GetGroupsWithoutCaching">
            <summary>
            Returns list of all available groups without caching and with RootGroup restriction
            </summary>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.AzureActiveDirectoryProviderBase.GetUserWithoutCaching(System.String)">
            <summary>
            Returns user without caching and with RootGroup restriction
            </summary>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.AzureActiveDirectoryProviderBase.GetUserGroupIdentifiersWithoutCaching(System.String)">
            <summary>
            Returns user group identifiers without caching
            </summary>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.GraphApiActiveDirectoryProvider.#ctor(PX.Data.Access.ActiveDirectory.IGraphServiceClientFactory,Microsoft.Extensions.Options.IOptions{PX.Data.Access.ActiveDirectory.Options},Microsoft.Extensions.Logging.ILoggerFactory,PX.Data.Access.ActiveDirectory.IExpirationStorage)">
            <summary>
            Constructor
            </summary>
            <param name="clientFactory">Client factory</param>
            <param name="options">
            Configuration options.
            To be backward compatible with ADAL provider configuration, path may contain either only Tenant Id ("xxxxx") or Graph API base url with Tenant Id ("https://graph.microsoft.com/v1.0/xxxxx")
            User options parameter should contain Application (client) ID
            Password parameter should contain client secret
            </param>
        </member>
        <member name="T:PX.Data.Access.ActiveDirectory.IGraphServiceClientFactory">
            <summary>
            Provides ability to create <see cref="T:Microsoft.Graph.IGraphServiceClient"/>
            </summary>
        </member>
        <member name="M:PX.Data.Access.ActiveDirectory.IGraphServiceClientFactory.CreateClient(System.String,System.String,System.String,System.String)">
            <summary>
            Creates <see cref="T:Microsoft.Graph.IGraphServiceClient"/> based on the client credentials flow
            </summary>
            <param name="tenantId">Directory (tenant) ID</param>
            <param name="clientId">Application (client) ID</param>
            <param name="clientSecret">Client secret (password)</param>
            <param name="apiEndpoint">Microsoft Graph API endpoint to be used. If not specified, https://graph.microsoft.com/v1.0 endpoint will be used.</param>
            <returns><see cref="T:Microsoft.Graph.IGraphServiceClient"/> instance based on provided credentials</returns>
        </member>
        <member name="T:PX.Data.PXAuditJournal.OperationListAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.ICurrentUserInformationProvider.GetUserId">
            <returns>User ID, or <see langword="null"/> if there is no current user, or the user is not found.</returns>
        </member>
        <member name="M:PX.Data.ICurrentUserInformationProvider.GetUserIdOrDefault">
            <returns>User ID, or <c>new Guid()</c> if there is no current user, or the user is not found, or the application is in design mode.</returns>
            <remarks>The default behavior is implemented in the legacy code copied from <see cref="M:PX.Data.PXAccess.GetUserID">PXAccess.GetUserID()</see>.</remarks>
        </member>
        <member name="M:PX.Data.ICurrentUserInformationProvider.GetUserIdAccountingForImpersonationOrDefault">
            <returns>The ID of the current user, or the ID of the user being impersonated, or <c>new Guid()</c> if there is no current user, or the user is not found, or the application is in design mode.</returns>
            <remarks>The default behavior is implemented in the legacy code copied from <see cref="M:PX.Data.PXAccess.GetUserID">PXAccess.GetUserID()</see>.</remarks>
        </member>
        <member name="P:PX.Data.CurrentUserInformationProvider.Instance">
            <remarks>
            DO NOT use this until you know exactly what you're doing. This is intended for very,
            VERY special use cases, and yours probably isn't one of those.
            </remarks>
        </member>
        <member name="T:PX.Data.ILegacyCompanyService">
            <summary>
            This service follows the same single/multi-tenant handling logic that <see cref="T:PX.Data.PXAccess"/> used to have since ~2013:
            when we are in <b>single-tenant mode</b>, tenant list is empty, so parsing any login in <c>login@tenant</c> form
            will always treat any tenant as non-existing, returning the whole thing as username (and <see langword="null"/> in tenant)
            </summary>
        </member>
        <member name="M:PX.Data.ILegacyCompanyService.ParseLogin(System.String,System.String@,System.String@,System.String@)">
            <remarks>
            <paramref name="company"/> will always be <see langword="null"/> in single-tenant deployments
            </remarks>
        </member>
        <member name="M:PX.Data.LegacyCompanyServiceExtensions.ExtractCompany(PX.Data.ILegacyCompanyService,System.String)">
            <remarks>
            Will always return <see langword="null"/> in single-tenant deployments
            </remarks>
        </member>
        <member name="M:PX.Data.PXLogin.PX#Data#IPXLogin#LoginUser(System.String@,System.String)">
            <returns><c>true</c> when login is successful, <c>false</c> when password change is required.</returns>
            <exception cref="T:PX.Data.PXException">User validation failed (including password validation)</exception>
        </member>
        <member name="M:PX.Data.PXLogin.IsPasswordChangeRequired(System.String)">
            <summary>
            Checks whether admin forced this user to change password on login.
            </summary>
            <returns>True if password has to be changed, otherwise false.</returns>
        </member>
        <member name="T:PX.Data.PXBaseMembershipProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXBaseMembershipProvider.UsersCache">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBaseMembershipProvider.ValidateUser(System.Web.HttpRequestBase,System.String,System.String,System.String@)">
            <summary>
            Verifies that the specified user name and password exist in the data source, and returns login for this username in current provider.
            </summary>
        </member>
        <member name="M:PX.Data.PXBaseMembershipProvider.ValidateUserPassword(System.String,System.String,System.Boolean)">
            <param name="onlyAllowed">True to check if user is active/approved/locked out. False, if just password checking is needed.</param>
        </member>
        <member name="M:PX.Data.PXBaseMembershipProvider.UpdateUserPassword(System.String,System.String)">
            <summary>
            Updates user password directly without any checks and validation.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseMembershipProvider.FindUserByHash(System.String)">
            <summary>
            Finds user with 'GuidForPasswordRecovery' field equal to 'hash'.
            </summary>
            <param name="hash">Hash to find.</param>
            <returns>Login of the user with matching 'GuidForPasswordRecovery' field in case of success. String.Empty in case of failure.</returns>
        </member>
        <member name="M:PX.Data.PXDatabaseMembershipProvider.CompatibilityHashPassword(System.String)">
            <summary>
            Old hash function for migration purposes.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseMembershipProvider.HashPassword(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Hashes password with salt, converts it to Base64 and adds migrates password prefix to it.
            </summary>
        </member>
        <member name="T:PX.Data.PXActiveDirectorySyncMembershipProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.MembershipUserExt">
            <exclude/>
        </member>
        <member name="F:PX.Data.PasswordHashing.MigratedPasswordPrefix">
            <summary>
            Prefix for password migration to hashed-only password format.
            </summary>
        </member>
        <member name="M:PX.Data.PasswordHashing.IsPasswordMigrated(System.String)">
            <summary>
            Checks if password is already migrated to hashed-only password type.
            </summary>
        </member>
        <member name="M:PX.Data.PXSessionStateStore.CheckPrevItem(System.Web.SessionState.SessionStateStoreProviderBase,System.String,System.Web.HttpContext,System.Web.SessionState.SessionStateStoreData,System.String,System.String)">
            <summary>
            If current session is result of redirect 
            load parent session and copy redirect specific data
            </summary>
        </member>
        <member name="M:PX.Data.PXSessionStateStore.StoreCurrentUser(System.Web.HttpContext)">
            <summary>
            Stores the current user ID in session.
            </summary>
        </member>
        <member name="P:PX.Data.PXSessionStateStore.IsSharedSessionEnabled">
            <summary>
            <b>NOT a shared session flag.</b> Returns <see cref="F:PX.Common.WebConfig.IsClusterEnabled"/> instead.
            </summary>
        </member>
        <member name="T:PX.Data.PXSharedUserSession">
            <summary>
            Share collection of items between splitted user sessions( in case, when multiple windows opened )
            </summary>
        </member>
        <member name="M:PX.Data.PXSharedUserSession.SetInheritedItem(System.String,System.String)">
            <summary>
            creates a value that will be copied to child sessions
            created as result of redirect from current window
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="P:PX.Data.PXSiteMapNode.OriginalUrl">
            <summary>
            Represents URL in original case (for case-sensitive usages).
            </summary>
        </member>
        <member name="F:PX.Data.PXSiteMap.ScreenInfo.Actions">
            <summary>
            Actions for primary view
            </summary>
        </member>
        <member name="F:PX.Data.PXSiteMap.ScreenInfo.AllActions">
            <summary>
            Actions for all views
            </summary>
        </member>
        <member name="M:PX.Data.PXSiteMap.TraverseSiteMap(PX.Data.PXSiteMapNode,System.Action{PX.Data.PXSiteMapNode})">
            <summary>
            Traverses site map tree recursively from the defined node and applies action for each node.
            </summary>
        </member>
        <member name="T:PX.Data.IPXSiteMapModifier">
            <summary>
            Site Map Modifier is an object that implements some algorithm for modifing a current node or even all site map tree.
            </summary>
        </member>
        <member name="F:PX.Data.PXDatabaseSiteMapProvider.AddingNew">
            <summary>
            Occurs when a new site map node is being added.
            </summary>
        </member>
        <member name="M:PX.Data.AddingNewSiteMapNodeEventArgs.#ctor(PX.Data.PXSiteMapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Data.AddingNewSiteMapNodeEventArgs"/> class with its <tt>Cancel</tt> property set to <tt>false</tt>. 
            </summary>
        </member>
        <member name="M:PX.Data.AddingNewSiteMapNodeEventArgs.#ctor(PX.Data.PXSiteMapNode,System.Boolean)">
            <summary>
            </summary>
            <param name="node"></param>
            Initializes a new instance of the <see cref="T:PX.Data.AddingNewSiteMapNodeEventArgs"/> class with the Cancel property set to the specified value.
            <param name="cancel"></param>
        </member>
        <member name="P:PX.Data.AddingNewSiteMapNodeEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the event should be canceled.
            </summary>
        </member>
        <member name="P:PX.Data.AddingNewSiteMapNodeEventArgs.Node">
            <summary>Gets the node that is being added.</summary>
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordDayAge">
            <summary>
            Determines the period of time (in days) that a password can be used before the system requires the user to change it
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordMinLength">
            <summary>
            Determines the least number of characters that a password for a user account may contain
            </summary>		
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordComplexity">
            <summary>
            Determines whether passwords must meet complexity requirements
            </summary>
            <remarks>
            If this policy is enabled, passwords must meet the following minimum requirements:		
            Contain characters from three of the following four categories: 
            - uppercase characters (A through Z) 
            - lowercase characters (a through z) 
            - base 10 digits (0 through 9) 
            - nonalphanumeric characters
            </remarks>
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordRegex">
            <summary>
            Additional password check
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordRegexMessage">
            <summary>
            Message for additional password check
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.PasswordSecurityType">
            <summary>
            Password security type storage
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AccountLockoutThreshold">
            <summary>
            Determines the number of failed logon attempts that causes a user account to be locked out
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AccountLockoutDuration">
            <summary>
            Determines the number of minutes a locked-out account remains locked out before automatically becoming unlocked
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AccountLockoutTime">
            <summary>
            Determines the time a locked-out account remains locked out before automatically becoming unlocked
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AccountLockoutReset">
            <summary>
            Determines the number of minutes that must elapse after a failed logon attempt before the failed logon attempt counter is reset to 0 bad logon attempts
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AuditOperationMask">
            <summary>
            Determines the operation mask to audit user activity
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.AuditMonthsKeep">
            <summary>
            Determines months amount to keep audit history when journal cleared
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.MaxRequestSize">
            <summary>
            Gets maximum allowed request size (return null if request size is not specified).
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.GridActionsText">
            <summary>
            Gets a value indicating whether text whould be visible for action buttons in grids.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Branch.BranchID">
            <summary>
            Database identity.
            Unique identifier of the Branch.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Branch.BranchCD">
            <summary>
            Key field.
            User-friendly unique identifier of the Branch.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Branch.OrganizationID">
            <summary>
            Reference to <see cref="T:PX.Data.SitePolicy.CompanyLogoDefinition.Organization"/> record to which the Branch belongs.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Branch.LogoName">
            <summary>
            The name of the logo image file.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Branch.LogoNameReport">
            <summary>
            The name of the report logo image file.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Organization.LogoName">
            <summary>
            The name of the logo image file.
            </summary>
        </member>
        <member name="P:PX.Data.SitePolicy.CompanyLogoDefinition.Organization.LogoNameReport">
            <summary>
            The name of the report logo image file.
            </summary>
        </member>
        <member name="F:PX.Data.Description.PXViewDescription.IsCollectionWithFullFieldStates">
            <summary>
            Marks that current container in new UI is bound to the collection of DACs,
            where PXFieldState of fields of each DAC in collection is transferred
            from the server to the client. It allows developer to create custom container controls,
            and display collection of DACs in any possible way.
            </summary>
            <remarks>
            The difference with <see cref="F:PX.Data.Description.PXViewDescription.IsGrid"/> property is that in Grid mode only Value, Enabled and Visible
            properties of th field's state are transferred on the client.
            To activate this mode, view-model for graph's view in TypeScript code
            must be created with the createFullCollection() function.</remarks>
            <returns></returns>
        </member>
        <member name="T:PX.Data.Description.FieldInfo">
            <summary>
            Describes fields in any single View.
            </summary>
        </member>
        <member name="T:PX.Data.Description.ParsInfo">
            <summary>
            Describes single parameter defined in Searches or Parameters section
            of any data container control.
            </summary>
        </member>
        <member name="T:PX.Data.Description.CallbackDescr">
            <summary>
            Represents information about autocallback for the field.
            </summary>
        </member>
        <member name="T:PX.Data.Description.GI.RelationType">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.Condition">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.Operation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.SortOrder">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.AggregateFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.ParameterKind">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXQueryDescription">
            <exclude/>
        </member>
        <member name="P:PX.Data.Description.GI.PXQueryDescription.UsedTables">
            <summary>
            Contains all tables that are used in the result set or in the relations.
            </summary>
        </member>
        <member name="T:PX.Data.Description.GI.GIConsts">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.IGenericQueryProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.IPXValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXInValue`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXFieldValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXCalcedValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXParameterValue">
            <exclude/>
        </member>
        <member name="M:PX.Data.Description.GI.PXParameterValue.#ctor(PX.Data.Description.GI.PXParameter,PX.Data.PXGraph,System.Func{System.Object,System.Object})">
            <param name="paramValueHandler">For handling special parameters like segmented keys.</param>
        </member>
        <member name="T:PX.Data.Description.GI.PXTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXRelation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXOnCond">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXSort">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXGroupBy">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXExtField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXFormulaField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Description.GI.PXAggregateField">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXWikiFilesLoader">
            <summary>
            Performs loading of files from wiki articles to web site folder on file system.
            </summary>
        </member>
        <member name="T:PX.Data.Api.Mobile.SignManager.DAC.SignResult.index">
            <exclude/>
        </member>
        <member name="T:PX.Data.Api.Mobile.SignManager.DAC.SignResult.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Api.Mobile.SignManager.DAC.SignResult.result">
            <exclude/>
        </member>
        <member name="P:PX.Data.Api.Mobile.SignManager.PXSignatureRequiredException.FileId">
            <summary>
            Identificator of the document that should be signed
            </summary>
        </member>
        <member name="P:PX.Data.Api.Mobile.SignManager.PXSignatureRequiredException.ViewName">
            <summary>
            View name from which sign action is called
            </summary>
        </member>
        <member name="P:PX.Data.Api.Mobile.SignManager.PXSignatureRequiredException.Graph">
            <summary>
            Connected graph
            </summary>
        </member>
        <member name="M:PX.Data.Api.Mobile.SignManager.PXViewExtension.Sign(PX.Data.PXView,System.Guid,System.Nullable{System.Guid}@)">
            <summary>
            Call the Sign dialog for mobile
            </summary>
            <param name="fileId">Identificator of the document, that should be signed</param>
            <param name="signedFileId">Identificator of the signed copy of the document (if any)</param>
            <returns>Complete - in case when user accepted to sign the document
            		 Rejected - in case when user rejected to sign the document</returns>
        </member>
        <member name="M:PX.Data.Api.Mobile.SignManager.PXViewExtension.GetSignature(PX.Data.PXView,System.Nullable{System.Guid}@)">
            <summary>Gets the value indicating user's choice in the dialog window displayed through one of the <tt>Sign()</tt> methods.</summary>
        </member>
        <member name="M:PX.Data.Api.Mobile.SignManager.PXViewExtension.SetSignature(PX.Data.PXView,PX.Data.Api.Mobile.SignManager.SignDialogResult,System.Nullable{System.Guid})">
            <summary>Sets the value indicating user's choice in the dialog window displayed through one of the <tt>Sign()</tt> methods.</summary>
        </member>
        <member name="T:PX.Data.Api.Mobile.SignManager.SignDialogResult">
            <summary>
            Defines values that indicate which button the user clicked in
            the dialog opened by the <tt>Sign()</tt> method.
            </summary>
        </member>
        <member name="F:PX.Data.Api.Mobile.SignManager.SignDialogResult.None">
            <summary>None of the actions were done.</summary>
        </member>
        <member name="F:PX.Data.Api.Mobile.SignManager.SignDialogResult.Complete">
            <summary>The user signed the document.</summary>
        </member>
        <member name="F:PX.Data.Api.Mobile.SignManager.SignDialogResult.Rejected">
            <summary>The user rejected to sign the document.</summary>
        </member>
        <member name="T:PX.Data.ListOperand">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSiteMapNodeSelectorAttribute">
            <summary>The attribute that is added to the field that stores the screen ID and is used to display the site map location.</summary>
            <remarks>
              <tt>PXSiteMapNodeSelector</tt> shows the list of screens, but does not contain <strong>Workspace</strong> and <strong>Category</strong> columns in the
            selector.
              If you need to display these columns, add a reference to the <tt>PX.Web.UI.Frameset</tt> namespace and use the <tt>SiteMapSelectorAttribute</tt>
            attribute.
            </remarks>
            <example>
              <code title="Example" description="The following example shows the use of the attribute." lang="CS">
            #region ScreenID
            public abstract class screenID : PX.Data.BQL.BqlString.Field&lt;screenID&gt; { }
             
            [PXDBString(8, IsFixed = true, InputMask = "CC.CC.CC.CC")]
            [PXDefault]
            [PXUIField(DisplayName = "Screen Name", Visibility = PXUIVisibility.SelectorVisible)]
            [PXSiteMapNodeSelector]
            public virtual string ScreenID { get; set; }
            #endregion</code>
              <code title="Example2" description="You should use the PXSelector control in the corresponding ASPX page, as shown in the following code example." lang="XML">
            &lt;px:PXSelector ID="edScreen" runat="server" DataField="ScreenID"  
                DisplayMode="Text" FilterByAllFields="true" CommitChanges="True" /&gt;</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSiteMapNodeSelectorAttribute.#ctor">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSiteMapNodeSelectorAttribute.#ctor(System.Type,System.Type,System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSiteMapNodeSelectorAttribute.#ctor(System.Type,System.Type[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSiteMapNodeSelectorAttribute.SetRestriction(PX.Data.PXCache,System.Object,System.String,System.Func{PX.SM.SiteMap,System.Boolean})">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSiteMapNodeSelectorAttribute.SetRestriction``1(PX.Data.PXCache,System.Object,System.Func{PX.SM.SiteMap,System.Boolean})">
            <exclude />
        </member>
        <member name="M:PX.Data.AutomapperExtensions.ForCtorParamMatching``3(AutoMapper.IMappingExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Action{AutoMapper.ICtorParamConfigurationExpression{``0}})">
            <summary>
            Works similar to <see cref="!:IMappingExpression&lt;TSource,TDestination&gt;.ForCtorParam"/>, but allows
            you to define parameter name using expression instead of hardcoded string.
            </summary>
        </member>
        <member name="T:PX.Data.Aggregate`1">
            <summary>
            A wrapper clause for the <tt>GroupBy</tt> clauses and aggregation functions.
            </summary>
            <typeparam name="TFunctions">The <tt>GroupBy</tt> class or aggregation function.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups the records of the Table table by the Table.field1 field and calculates the sums of the Table.field2 field in each group." lang="CS">
            PXSelectGroupBy&lt;Table,
                Aggregate&lt;GroupBy&lt;Table.field1, Sum&lt;Table.field2&gt;&gt;&gt;&gt;</code>
            	<code title="Example2" description="This is translated into the following SQL code." groupname="Example" lang="SQL">
            SELECT Table.Field1, SUM(Table.Field2),
                   [MAX(Table.Field) or NULL for other fields]
            FROM Table
            GROUP BY Table.Field1</code>
            </example>
        </member>
        <member name="T:PX.Data.Aggregate`2">
            <summary>
            A wrapper clause for the <tt>GroupBy</tt> clauses and aggregation functions.
            It also supports the result filtering by using the <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
            <typeparam name="TFunctions">The <tt>GroupBy</tt> class or aggregation function.</typeparam>
            <typeparam name="THaving">The filtering condition for the result.</typeparam>
            <example>
            <code lang="CS">PXSelectGroupBy&lt;Detail,
                Aggregate&lt;GroupBy&lt;Detail.docType, GroupBy&lt;Detail.documentID, Sum&lt;Detail.qty&gt;&gt;&gt;,
                    Having&lt;Detail.qty.Summarized.IsGreaterEqual&lt;Zero&gt;&gt;&gt;&gt;</code>
            The following BQL statement groups the records of the <tt>Detail</tt> table
            by the <tt>Detail.docType</tt> and <tt>Detail.documentID</tt> fields,
            calculates the sums of the <tt>Detail.qty</tt> field in each group,
            and displays only those groups for which these sums are positive.
            Note that the <tt>Having</tt> clause requires parameters in FBQL format.</example>
        </member>
        <member name="T:PX.Data.AggregateBase`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.AggregateBase`2.GetAggregates">
            <exclude/>
        </member>
        <member name="P:PX.Data.AggregateBase`2.Having">
            <exclude/>
        </member>
        <member name="M:PX.Data.AggregateBase`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.AggregateBase`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Having`1">
            <summary>
            The class that is used to filter the results of an aggregated query.
            The class corresponds to the <tt>HAVING</tt> SQL clause.
            </summary>
            <typeparam name="TCondition">The filtering condition for the aggregated result.</typeparam>
            <example>
            <code lang="CS">PXSelectGroupBy&lt;Detail,
                Aggregate&lt;GroupBy&lt;Detail.docType, GroupBy&lt;Detail.documentID, Sum&lt;Detail.qty&gt;&gt;&gt;,
                    Having&lt;Detail.qty.Summarized.IsGreaterEqual&lt;Zero&gt;&gt;&gt;&gt;</code>
            This BQL statement groups records of the <tt>Detail</tt> table
            by the <tt>Detail.docType</tt> and <tt>Detail.documentID</tt> fields,
            calculates the sums of the <tt>Detail.qty</tt> field in each group,
            and displays only those groups that have these sums positive.
            Note that the <tt>Having</tt> clause requires parameters in FBQL format.</example>
        </member>
        <member name="M:PX.Data.Having`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Having`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude/>
        </member>
        <member name="T:PX.Data.AggregatedFnBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.AggregatedOperandBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Sum`1">
            <summary>
            Returns the sum of all <tt>Field</tt> values in a group.
            Equivalent to SQL function SUM.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates sums of the Table1.field2 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Sum&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, SUM(Table1.Field2),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Sum`1.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Sum`2">
            <summary>
            Returns the sum of all <tt>Field</tt> values in a group and continues the aggregation
            clause with <tt>NextAggregate</tt>. Equivalent to SQL function SUM.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <typeparam name="NextAggregate">The next <tt>GroupBy</tt> clause or
            aggregate function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view that groups data records by one column." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;Sum&lt;Table1.field1,
                          Sum&lt;Table1.field2,
                          GroupBy&lt;Table1.field3&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="" description="" lang="SQL">
            SELECT SUM(Table1.Field1), SUM(Table1.Field2), Table.Field3,
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table.Field3</code>
            </example>
        </member>
        <member name="M:PX.Data.Sum`2.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Sum2`1">
            <summary>
            Returns the sum of all Expression values in a group.
            Equivalent to SQL function SUM.
            </summary>
            <typeparam name="Operand">The expression operand the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates sums of the expressions in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Sum&lt;Mult&lt;Table1.field2, Table1.field3&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1,
            		[MAX(Table1.Field) or NULL for other fields],
            		SUM(Table1.Field2 * Table1.Field3)
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Sum2`1.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Sum2`2">
            <summary>
            Returns the sum of all Expression values in a group.
            Equivalent to SQL function SUM.
            </summary>
            <typeparam name="Operand">The expression operand the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates sums of the expressions in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Sum&lt;Mult&lt;Table1.field2, Table1.field3&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1,
            		[MAX(Table1.Field) or NULL for other fields],
            		SUM(Table1.Field2 * Table1.Field3)
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Sum2`2.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Avg`1">
            <summary>
            Returns the average of the values of <tt>Field</tt> in a group.
            Equivalent to SQL function AVG.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates average values of the Table1.field2 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Avg&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, AVG(Table1.Field2),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Avg`1.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Avg`2">
            <summary>
            Returns the average of the values of <tt>Field</tt> in a group and
            continues the aggregation clause with <tt>NextAggregate</tt>.
            Equivalent to SQL function AVG.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <typeparam name="NextAggregate">The next <tt>GroupBy</tt> clause or
            aggregate function.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field2 field and calculates average values of the Table1.field1 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;Avg&lt;Table1.field1, GroupBy&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT AVG(Table1.Field1), Table1.Field2,
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field2</code>
            </example>
        </member>
        <member name="M:PX.Data.Avg`2.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Min`1">
            <summary>
            Returns the minimum value of <tt>Field</tt> in a group. Equivalent to SQL function MIN.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates minimum values of the Table1.field2 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Min&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, MIN(Table1.Field2),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Min`1.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Min`2">
            <summary>
            Returns the minimum value of <tt>Field</tt> in a group and continues the aggregation clause
            with <tt>NextAggregate</tt>. Equivalent to SQL function MIN.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <typeparam name="NextAggregate">The next <tt>GroupBy</tt> clause or
            aggregate function.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field2 field and calculates minimum values of the Table1.field1 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;Min&lt;Table1.field1, GroupBy&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT MIN(Table1.Field1), Table1.Field2,
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field2</code>
            </example>
        </member>
        <member name="M:PX.Data.Min`2.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Max`1">
            <summary>
            Returns the maximum value of <tt>Field</tt> in a group. Equivalent to SQL function MAX.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates maximum values of the Table1.field2 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Max&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, MAX(Table1.Field2),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Max`1.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Max`2">
            <summary>
            Returns the maximum value of <tt>Field</tt> in a group and continues the aggregation
            clause with <tt>NextAggregate</tt>. Equivalent to SQL function MAX.
            </summary>
            <typeparam name="Field">The field the function is applied to.</typeparam>
            <typeparam name="NextAggregate">The next <tt>GroupBy</tt> clause or
            aggregate function.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates maximum values of the Table1.field2 field and minimum values of the Table1.field3 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Max&lt;Table1.field2, Min&lt;Table1.field3&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, MAX(Table1.Field2), MIN(Table.Field3),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Max`2.GetFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.GroupBy`1">
            <summary>
            Adds grouping by the field specified in <tt>Field</tt>.
            Equivalent to SQL operator GROUP BY.
            </summary>
            <typeparam name="Field">The field by which the data records are grouped.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1, Aggregate&lt;GroupBy&lt;Table1.field1&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="T:PX.Data.GroupBy`2">
            <summary>
            Adds grouping by the field specified in <tt>Field</tt> and continues the aggregation clause.
            Equivalent to SQL operator GROUP BY.
            </summary>
            <typeparam name="Field">The field by which the data records are grouped.</typeparam>
            <typeparam name="NextAggregate">The next <tt>GroupBy</tt> clause or
            aggregate function.</typeparam>
            <example>
            	<code title="Example" description="The following BQL statement groups Table records by the Table1.field1 field and calculates sums of the Table1.field2 field in each group. The corresponding SQL query is given below." lang="CS">
            PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Sum&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT Table1.Field1, SUM(Table1.Field2),
                   [MAX(Table1.Field) or NULL for other fields]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="T:PX.Data.GroupByBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Count">
            <summary>
            Counts the number of items in a group if a <tt>GroupBy</tt> clause is specified, or the total number of records in the result set otherwise.
            Could also be used in the <see cref="T:PX.Data.Having`1"/> clause.</summary>
            <remarks>
            	<para>In the corresponding SQL representation, the class is represented by COUNT(*), which is  added to the list of selected columns. You access the
            calculated value through the <tt>RowCount</tt> property of the <tt>PXResult&lt;&gt;</tt> type.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code below shows how to use Count in BQL and the corresponding SQL query." lang="CS">
            PXResult&lt;Table&gt; res =
                new PXSelectGroupBy&lt;Table1, Aggregate&lt;Count&gt;&gt;.Select(this);
            // The calculated number of records is stored in the
            // PXResult.RowCount property.
            int tableRecordsNumber = res.RowCount;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT [MAX(Table1.Field) or NULL for all fields defined in the Table DAC],
                   COUNT(*)
            FROM Table1</code>
            </example>
        </member>
        <member name="M:PX.Data.Count.GetAggregates(System.Collections.Generic.List{PX.Data.IBqlFunction})">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Count.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count.GetFunction">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count.GetField">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count.IsGroupBy">
            <exclude/>
        </member>
        <member name="T:PX.Data.Count`1">
            <summary>
            Counts distinct values of the specified field in a group.
            Equivalent to SQL function <tt>COUNT DISTINCT</tt>.
            </summary>
            <typeparam name="Field">The field whose distinct values are counted.</typeparam>
            <remarks>
            You access the calculated value through the <tt>RowCount</tt> property of the
            <tt>PXResult&lt;&gt;</tt> type. Note that you should use only one
            <tt>Count&lt;&gt;</tt> function in a BQL query, because you won't be
            able to access other such counted values.
            </remarks>
            <example>
            	<code title="Example" description="The code below shows how to use Count in BQL and the corresponding SQL query." lang="CS">
            foreach(PXResult&lt;Table&gt; row in PXSelectGroupBy&lt;Table1,
                Aggregate&lt;GroupBy&lt;Table1.field1, Count&lt;Table1.field2&gt;&gt;&gt;&gt;.Select(this))
            {
                // The calculated number of distinct values of field2 in a group
                int field2CountInGroup = row.RowCount;
                ...
            }</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT COUNT(DISTINCT Table1.Field2),
                  [MAX(Table1.Field) or NULL for all other fields defined in the Table DAC]
            FROM Table1
            GROUP BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.Count`1.GetAggregates(System.Collections.Generic.List{PX.Data.IBqlFunction})">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Count`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count`1.GetFunction">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count`1.GetField">
            <exclude/>
        </member>
        <member name="M:PX.Data.Count`1.IsGroupBy">
            <exclude/>
        </member>
        <member name="T:PX.Data.AddCalc`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.AddCalc`1._GetValueDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.AddCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,PX.Data.IBqlCreator,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.AddCalc`1.Calculate(PX.Data.PXCache,System.Object,PX.Data.IBqlCreator,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.ICountCalc">
            <exclude/>
        </member>
        <member name="T:PX.Data.CountCalc`1">
            <summary>
            Calculates the number of the child data records and assigns
            it to the specified parent data record field.
            </summary>
            <typeparam name="Field">The field of the parent data record.</typeparam>
            <remarks>This class is used as aggregation formula in the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see> and <see cref="T:PX.Data.PXUnboundFormulaAttribute">PXUnboundFormula</see> attributes to compute the parent
            data record field from the child data record fields. The expression that is calculated for each child data record is set in the first constructor parameter in
            the attributes.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXFormula(null, typeof(CountCalc&lt;ARSalesPerTran.refCntr&gt;))]
            public virtual Decimal? CuryTranAmt { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.CountCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.CountCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Int32,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlAggregateCalculator">
            <summary>
            Bql aggregate calculator
            </summary>
        </member>
        <member name="M:PX.Data.IBqlAggregateCalculator.Calculate(PX.Data.PXCache,System.Object,System.Int32,System.Object[],System.Int32)">
            <summary>
            Calculates aggregate expression
            </summary>
            <param name="cache">Cache</param>
            <param name="fieldordinal">Position of the field for which this aggregate function is supplied</param>
            <param name="records">Set of records</param>
            <param name="digit">The number of significant digits (precision) in the return value, set to -1 if you don't want to perform Round operation</param>
            <returns>Result of calculation or null</returns>
        </member>
        <member name="T:PX.Data.IBqlZeroValueChecker">
            <summary>
            Interface which allows to check if the value is zero.
            </summary>
        </member>
        <member name="M:PX.Data.IBqlZeroValueChecker.GetZeroValue(System.Object)">
            <summary>
            Get zero value of the same type as the passed parameter
            </summary>
        </member>
        <member name="M:PX.Data.IBqlZeroValueChecker.IsZeroValue(System.Object)">
            <summary>
            Check if the passed parameter is zero
            </summary>
        </member>
        <member name="T:PX.Data.MaxCalc`1">
            <summary>
            Calculates the maximum expression over all child data records
            and assigns it to the specified parent data record field.
            </summary>
            <typeparam name="Field">The field of the parent data record.</typeparam>
            <remarks>This class is used as aggregation formula in the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see> and <see cref="T:PX.Data.PXUnboundFormulaAttribute">PXUnboundFormula</see> attributes to compute the parent
            data record field from the child data record fields. The expression that is calculated for each child data record is set in the first constructor parameter in
            the attributes.</remarks>
            <seealso cref="T:PX.Data.PXFormulaAttribute"></seealso>
            <example>
              <code title="" description="" lang="CS">
            [PXFormula(null,typeof(MaxCalc&lt;CABankTranHeader.tranMaxDate&gt;))]    
            public virtual DateTime? TranDate { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.MaxCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MaxCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Int32,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MaxCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,PX.Data.IBqlCreator,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MaxCalc`1.Calculate(PX.Data.PXCache,System.Object,PX.Data.IBqlCreator,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.MaxCalc`1._GetValueDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.MinCalc`1">
            <summary>
            Calculates the minimum expression over all child data records
            and assigns it to the specified parent data record field.
            </summary>
            <typeparam name="Field">The field of the parent data record.</typeparam>
            <remarks>This class is used as aggregation formula in the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see> and <see cref="T:PX.Data.PXUnboundFormulaAttribute">PXUnboundFormula</see> attributes to compute the parent
            data record field from the child data record fields. The expression that is calculated for each child data record is set in the first constructor parameter in
            the attributes.</remarks>
            <seealso cref="T:PX.Data.PXFormulaAttribute"></seealso>
            <example>
              <code title="" description="" lang="CS">
            [PXFormula(null, typeof(MinCalc&lt;ParentTable1.field1&gt;))]    
            public virtual decimal? ChildField { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.MinCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MinCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Int32,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Rounder">
            <exclude/>
        </member>
        <member name="T:PX.Data.SubCalc`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.SubCalc`1._GetValueDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.SubCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,PX.Data.IBqlCreator,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.SubCalc`1.Calculate(PX.Data.PXCache,System.Object,PX.Data.IBqlCreator,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.SumCalc">
            <summary>Calculates the aggregated sum of expressions over all child data records and assigns it to the specified parent data record field.</summary>
            <typeparam name="Field">The field of the parent data record.</typeparam>
            <remarks>This class is used as aggregation formula in the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see> and <see cref="T:PX.Data.PXUnboundFormulaAttribute">PXUnboundFormula</see> attributes to compute the parent
            data record field from the child data record fields. The expression that is calculated for each child data record is set in the first constructor parameter in
            the attributes.</remarks>
            <seealso cref="T:PX.Data.PXFormulaAttribute"></seealso>
            <example>
              <code title="" description="" lang="CS">
            [PXFormula(typeof(Mult&lt;INTran.qty, INTran.unitPrice&gt;),
                       typeof(SumCalc&lt;INRegister.totalAmount&gt;))]
            public virtual Decimal? TranAmt { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.SumCalc._GetValueDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.SumCalc.Calculate(PX.Data.PXCache,System.Object,System.Object,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.SumCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Object,PX.Data.IBqlCreator,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.SumCalc`1.Calculate(PX.Data.PXCache,System.Object,PX.Data.IBqlCreator,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.SumCalc`1.Calculate(PX.Data.PXCache,System.Object,System.Int32,System.Object[],System.Int32)">
            <exclude/>
        </member>
        <member name="T:PX.Data.ZeroNumberChecker">
            <exclude/>
        </member>
        <member name="M:PX.Data.ZeroNumberChecker.GetZeroValue(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.ZeroNumberChecker.IsZeroValue(System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
            <typeparam name="Operator">The unary conditional expression, <tt>Not</tt>,
            <tt>Where</tt>, <tt>Where2</tt>, or <tt>Match</tt></typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull,
                    And&lt;Not&lt;Table1.field2, Equal&lt;Zero&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NOT NULL
                AND NOT ( Table1.Field2 = 0 ) )</code>
            </example>
        </member>
        <member name="M:PX.Data.And`1.#ctor(PX.Data.IBqlUnary)">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.And2`2">
            <summary>Appends a unary operator to a conditional expression via logical "and" and continues the chain of conditions.</summary>
            <typeparam name="Operator">The unary conditional expression, <tt>Not</tt>,
            <tt>Where</tt>, <tt>Where2</tt>, or <tt>Match</tt></typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
            <example>
            	<code title="Example" description="The code below iterates over Tax data records selected by a read-only data view. The second code sample shows the SQL query corresponding to the data view." lang="CS">
            foreach (PXResult&lt;Tax, TaxRev&gt; record in PXSelectReadonly2&lt;Tax,
                LeftJoin&lt;TaxRev, On&lt;TaxRev.taxID, Equal&lt;Tax.taxID&gt;,
                    And&lt;TaxRev.outdated, Equal&lt;False&gt;,
                    And2&lt;Where&lt;TaxRev.taxType, Equal&lt;TaxType.purchase&gt;, And&lt;Tax.reverseTax, Equal&lt;False&gt;,
                        Or&lt;TaxRev.taxType, Equal&lt;TaxType.sales&gt;&gt;&gt;&gt;&gt;,
                    And&lt;Current&lt;APRegister.docDate&gt;, Between&lt;TaxRev.startDate, TaxRev.endDate&gt;&gt;&gt;&gt;&gt;&gt;.Select(this))
            {
                ...
            }</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Tax
            LEFT JOIN TaxRev ON ( TaxRev.TaxID = Tax.TaxID
                AND TaxRev.Outdated = CONVERT(bit, 0)
                AND ( TaxRev.TaxType = "P" AND Tax.ReverseTax = CONVERT(bit, 0) OR TaxRev.TaxType =  "S")
                AND [current APRegister.DocDate value] BETWEEN TaxRev.StartDate AND TaxRev.EndDate )</code>
            </example>
        </member>
        <member name="T:PX.Data.And`2">
            <summary>
            Appends a single condition to a conditional expression via logical "and".
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <example>
            	<code title="Example" description="The following expression selects all records that are not equal to NULL from Table1 -&gt; Filed1 along with the records from Table -&gt; Field2 that are greater than those fetched from the Field1. The following expression will be translated into a SQL query, an example of which is given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull,
                    And&lt;Table1.field2, Greater&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NOT NULL
                AND Table1.Field2 &gt; Table1.Field1)</code>
            </example>
        </member>
        <member name="T:PX.Data.And`3">
            <summary>
            Appends a single condition to a conditional expression via logical "and"
            and continues the chain of conditions.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull,
                    And&lt;Table1.field2, Greater&lt;Table1.field1&gt;,
                    Or&lt;Table1.field1, IsNull&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NOT NULL
                AND Table1.Field2 &gt; Table1.Field1
                OR Table1.Field1 IS NULL )</code>
            </example>
        </member>
        <member name="M:PX.Data.And`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.And`3.GetUnary">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.GetContainedPredicate">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.UseParenthesis">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.IsConjunction">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.GetNextPredicate">
            <exclude/>
        </member>
        <member name="M:PX.Data.And`3.ContainsOperandWithComparison">
            <exclude/>
        </member>
        <member name="T:PX.Data.Or`1">
            <summary>Appends a unary operator to a conditional expression via logical "or".</summary>
            <typeparam name="Operator">The unary conditional expression <tt>Not</tt>,
            <tt>Where</tt>, <tt>Where2</tt>, or <tt>Match</tt></typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNull,
                    Or&lt;Not&lt;Table1.field1, Equal&lt;Zero&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NULL
                OR NOT ( Table1.Field1 = 0 ) )</code>
            </example>
        </member>
        <member name="M:PX.Data.Or`1.#ctor(PX.Data.IBqlUnary)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.Or2`2">
            <summary>Appends a unary operator to a conditional expression via logical "or" and continues the chain of conditions.</summary>
            <typeparam name="Operator">The unary conditional expression <tt>Not</tt>,
            <tt>Where</tt>, <tt>Where2</tt>, or <tt>Match</tt></typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNull,
                    Or2&lt;Where&lt;Table1.field1, Equal&lt;Zero&gt;,
                        And&lt;Table1.field2, IsNotNull&gt;&gt;,
                    Or&lt;Table1.field1, Greater&lt;Zero&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="" description="" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NULL
                OR ( Table1.Field1 = 0 AND Table1.Field2 IS NOT NULL )
                OR Table1.Field1 &gt; 0 )</code>
            </example>
        </member>
        <member name="T:PX.Data.Or`2">
            <summary>
            Appends a single condition to a conditional expression via logical "or".
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNull,
                    Or&lt;Table1.field1, Equal&lt;Zero&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NULL OR Table1.Field1 = 0 )</code>
            </example>
        </member>
        <member name="T:PX.Data.Or`3">
            <summary>
            Appends a single condition to a conditional expression via logical "or"
            and continues the chain of conditions.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNull,
                    Or&lt;Table1.field1, Equal&lt;Zero&gt;,
                    Or&lt;Table1.field1, Greater&lt;Table1.field2&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NULL
                OR Table1.Field1 = 0
                OR Table1.Field1 &gt; Table1.Field2 )</code>
            </example>
        </member>
        <member name="M:PX.Data.Or`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Or`3.GetUnary">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.GetContainedPredicate">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.UseParenthesis">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.IsConjunction">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.GetNextPredicate">
            <exclude/>
        </member>
        <member name="M:PX.Data.Or`3.ContainsOperandWithComparison">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlPredicateBinaryBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.IBqlAggregatedOperand">
            <summary>
            Defines an operand that could be used in <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.IBqlSimpleAggregator">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.Is`1">
            <summary>
            Checks if the preceding operand satisfies a custom <typeparamref name="TComparison"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsEqual`1">
            <summary>
            Compares the preceding operand with <typeparamref name="TAggregatedOperand"/> for equality.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotEqual`1">
            <summary>
            Checks if the preceding operand is not equal to <typeparamref name="TAggregatedOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsGreaterEqual`1">
            <summary>
            Checks if the preceding operand is greater or equal to <typeparamref name="TAggregatedOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsGreater`1">
            <summary>
            Checks if the preceding operand is greater than <typeparamref name="TAggregatedOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsLessEqual`1">
            <summary>
            Checks if the preceding operand is less or equal to <typeparamref name="TAggregatedOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsLess`1">
            <summary>
            Checks if the preceding operand is less than <typeparamref name="TAggregatedOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsLike`1">
            <summary>
            Compares the preceding string operand with the pattern string specified in <typeparamref name="TAggregatedOperand"/>.
            Equivalent to the SQL operator LIKE.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotLike`1">
            <summary>
            Checks if the preceding string operand does not match the pattern string specified in <typeparamref name="TAggregatedOperand"/>.
            Equivalent to SQL operator NOT LIKE.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsBetween`2">
            <summary>
            Checks if the value of the preceding operand falls between the values of
            <typeparamref name="TAggregatedOperand1"/> and <typeparamref name="TAggregatedOperand2"/>.
            Equivalent to SQL operator BETWEEN.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotBetween`2">
            <summary>
            Checks if the value of the preceding operand does not fall between the
            values of <typeparamref name="TAggregatedOperand1"/> and <typeparamref name="TAggregatedOperand2"/>.
            Equivalent to SQL operator NOT BETWEEN.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNull">
            <summary>
            Checks if the preceding field is null. Equivalent to SQL operator IS NULL.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotNull">
            <summary>
            Checks if the preceding field is not null. Results in true for data records
            with this field containing a value. Equivalent to SQL operator IS NOT NULL.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`1">
            <summary>
            Checks if the preceding operand matches any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name. 
            The condition is true if the preceding operand is equal to a value from the array.
            Equivalent to the SQL operator IN.
            The In operator is used to replace multiple OR conditions in a BQL statement.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`1">
            <summary>
            Checks if the preceding operand does not match any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name.
            The condition is true if the array does not contain a value that is equal to the preceding operand.
            Equivalent to SQL operator NOT IN.</summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`2">
            <summary>
            Checks if the specified field value matches any value in the list of constants defined by the operand.
            The condition is true if the field value is equal to a value from the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`2">
            <summary>
            Checks if the specified field value does not match a value in the list of constants defined by the operand.
            The condition is true if the field value is not present in the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsIn`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotIn`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsInSequence`1">
            <summary>
            Checks if the specified field value matches any value in the list of constants defined by the operand.
            The condition is true if the field value is equal to a value from the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlAggregatedOperand`2.IsNotInSequence`1">
            <summary>
            Checks if the specified field value does not match a value in the list of constants defined by the operand.
            The condition is true if the field value is not present in the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.FunctionWrapper`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.BQL.FunctionWrapper`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BQL.FunctionWrapper`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlCast`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.Use`1">
            <summary>
            Wrapper that allows to use fluent comparisons with operands that are not inherited from <see cref="T:PX.Data.BQL.BqlOperand`2"/>
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.As`1">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of custom <typeparamref name="TBqlType"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsBool">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlBool"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsGuid">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlGuid"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsDateTime">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlDateTime"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsString">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlString"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsByte">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlByte"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsShort">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlShort"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsInt">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlInt"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsLong">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlLong"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsFloat">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlFloat"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsDouble">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlDouble"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsDecimal">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlDecimal"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Use`1.AsByteArray">
            <summary>
            Pretends that the <typeparamref name="TLegacyOperand"/> is of <see cref="T:PX.Data.BQL.IBqlByteArray"/> type.
            Changes the operand's type only in terms of BQL - it does not generate SQL CAST.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.ConditionConvertor" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.BQL.ConditionConvertor.TryConvert(System.Type,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableConditionBase`1" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.BQL.BqlChainableConditionBase`1.#ctor" -->
        <member name="T:PX.Data.BQL.BqlChainableConditionBase`1.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionBase`1.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableConditionMirror`1" -->
        <member name="T:PX.Data.BQL.BqlChainableConditionMirror`1.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionMirror`1.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableCondition`1" -->
        <member name="T:PX.Data.BQL.BqlChainableConditionLite`1">
            <summary>
            Allows to use chainable conditions with classes that already implement <see cref="T:PX.Data.IBqlUnary"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionLite`1.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionLite`1.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Brackets`1">
            <summary>
            Brackets that allow to use chainable conditions in the <see cref="T:PX.Data.Where`1"/> and in the <see cref="T:PX.Data.On`1"/> clauses.
            Use <see cref="T:PX.Data.BQL.Brackets2`1"/> to embrace conditions in the <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.IBqlHavingCondition">
            <summary>
            Defines a condition that could be used only in <see cref="T:PX.Data.Having`1"/> clause,
            but not in <see cref="T:PX.Data.Where`1"/>, nor in <see cref="T:PX.Data.On`1"/> clauses.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableConditionHavingBase`1" -->
        <member name="T:PX.Data.BQL.BqlChainableConditionHavingBase`1.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionHavingBase`1.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableConditionHavingMirror`1" -->
        <member name="T:PX.Data.BQL.BqlChainableConditionHavingMirror`1.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlChainableConditionHavingMirror`1.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlChainableConditionHaving`1" -->
        <member name="T:PX.Data.BQL.Brackets2`1">
            <summary>
            Brackets that allow to use chainable conditions in the <see cref="T:PX.Data.Having`1"/> clause.
            Use <see cref="T:PX.Data.BQL.Brackets`1"/> to embrace conditions in the <see cref="T:PX.Data.Where`1"/> and in the <see cref="T:PX.Data.On`1"/> clauses.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.HavingConditionWrapper`1" -->
        <member name="M:PX.Data.BQL.HavingConditionWrapper`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BQL.HavingConditionWrapper`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlConstant`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Of`1">
            <summary>
            Indicates that the field is contained in a specific <typeparamref name="TTable"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.FromCurrent">
            <summary>
            Inserts the field value from the <tt>Current</tt> property of the cache. If the <tt>Current</tt> property is null or the field value is null, the parameter will be replaced by the default value.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.FromCurrent.NoDefault">
            <summary>
            The default value will not be inserted if NULL was passed to the parameter.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.FromCurrent.Value">
            <summary>
            Allows to properly use Current parameters in the <tt>PXProjection</tt> attribute.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.AsOptional">
            <summary>
            Inserts the <tt>Current</tt> property value of the cache or the value explicitly passed to the <tt>Select()</tt> method. In the latter case, the
            parameter causes raising of the <tt>FieldUpdating</tt> event for the specified field (which can modify or substitute the value). If the null value is passed or
            the <tt>Current</tt> property is null, the default value of the field is inserted.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.AsOptional.NoDefault">
            <summary>
            The default value will not be inserted if NULL was passed to the parameter.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.AsContext">
            <summary>
            Inserts a <tt>Navigation Context</tt> value. When you use this parameter, the <tt>FieldUpdating</tt> event will be triggered for the specified field. This event can modify or substitute the value.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Grouped">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.GroupBy`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Summarized">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.Sum`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Maximized">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.Max`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Minimized">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.Min`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Averaged">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.Avg`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.Counted">
            <summary>
            Allows to refer to the field, that is created by applying the <see cref="T:PX.Data.Count`1"/> aggregation function to the preceding field, in a <see cref="T:PX.Data.Having`1"/> clause.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlField`2.EqualTo`1">
            <summary>
            Sets the preceding field equal to <typeparamref name="TOperand"/>.
            Should be used within the <tt>Set</tt> section of the <tt>Update</tt> command.
            Use <tt>IsEqual</tt> for comparison.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.IfNullThen`1">
            <summary>
            Returns the preceding operand if it is not null, or a <typeparamref name="TOperand"/> otherwise.
            Equivalent to SQL function ISNULL.
            Is a strongly typed version of <see cref="T:PX.Data.IsNull`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.NullIf`1">
            <summary>
            Returns null if the preceding operand equals <typeparamref name="TOperand"/> and
            returns the preceding operand if the two expression are not equal.
            Equivalent to SQL function NULLIF.
            Is a strongly typed version of <see cref="T:PX.Data.NullIf`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.Add`1">
            <summary>
            Returns the sum of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Add`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.Subtract`1">
            <summary>
            Returns the subtraction of a <typeparamref name="TOperand"/> from the preceding operand.
            Is a strongly typed version of <see cref="T:PX.Data.Sub`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.Multiply`1">
            <summary>
            Returns the multiplication of the preceding operand by a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Mult`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunction`2.Divide`1">
            <summary>
            Returns the division of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Div`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.IfNullThen`1">
            <summary>
            Returns the preceding operand if it is not null, or a <typeparamref name="TOperand"/> otherwise.
            Equivalent to SQL function ISNULL.
            Is a strongly typed version of <see cref="T:PX.Data.IsNull`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.NullIf`1">
            <summary>
            Returns null if the preceding operand equals <typeparamref name="TOperand"/> and
            returns the preceding operand if the two expression are not equal.
            Equivalent to SQL function NULLIF.
            Is a strongly typed version of <see cref="T:PX.Data.NullIf`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.Add`1">
            <summary>
            Returns the sum of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Add`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.Subtract`1">
            <summary>
            Returns the subtraction of a <typeparamref name="TOperand"/> from the preceding operand.
            Is a strongly typed version of <see cref="T:PX.Data.Sub`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.Multiply`1">
            <summary>
            Returns the multiplication of the preceding operand by a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Mult`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFunctionMirror`2.Divide`1">
            <summary>
            Returns the division of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Div`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Minus`1">
            <summary> 
            Returns -<typeparamref name="TOperand"/> (multiplies by -1).
            Is a strongly typed version of <see cref="T:PX.Data.Minus`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Abs`1">
            <summary> 
            Returns module number.
            Is a strongly typed version of <see cref="T:PX.Data.Abs`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Round`2">
            <summary> 
            Returns a numeric value rounded to the specified precision.
            Equivalent to SQL function ROUND.
            Is a strongly typed version of <see cref="T:PX.Data.Round`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Length`1">
            <summary>
            Returns the number of characters in the <typeparamref name="TSource"/> string.
            Equivalent to SQL function LEN.
            Is a strongly typed version of <see cref="T:PX.Data.StrLen`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Substring`3">
            <summary>
            Returns the <typeparamref name="TLength"/> characters from the <typeparamref name="TSource"/> string starting
            from the <typeparamref name="TStartIndex"/> index (the first character has index 1). 
            Equivalent to SQL function SUBSTRING.
            Is a strongly typed version of <see cref="T:PX.Data.Substring`3"/>. 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Replace`3">
            <summary>
            Replaces all occurrences of a string with another string in the source expression.
            Equivalent to SQL function REPLACE.
            Is a strongly typed version of <see cref="T:PX.Data.Replace`3"/>. 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.RTrim`1">
            <summary>
            Removes all trailing white-space characters from a <typeparamref name="TSource"/>.
            Is a strongly typed version of <see cref="T:PX.Data.RTrim`1"/>. 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.IsNumeric`1">
            <summary>
            Determines whether an expression is a valid numeric <typeparamref name="TSource"/> type.
            Equivalent to SQL function IsNumeric.
            Is a strongly typed version of <see cref="T:PX.Data.IsNumeric`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1">
            <summary>
            Provides access to the date components of a <typeparamref name="TOperand"/>.
            It's members are strongly typed versions of <see cref="T:PX.Data.DatePart`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Year">
            <summary>
            Returns the year component of the date.
            Equivalent to SQL function DATEPART('yyyy', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Quarter">
            <summary>
            Returns the quarter component of the date.
            Equivalent to SQL function DATEPART('qq', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Month">
            <summary>
            Returns the month component of the date.
            Equivalent to SQL function DATEPART('mm', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Week">
            <summary>
            Returns the week component of the date.
            Equivalent to SQL function DATEPART('ww', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.WeekDay">
            <summary>
            Returns the week day component of the date.
            Equivalent to SQL function DATEPART('dw', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Day">
            <summary>
            Returns the day component of the date.
            Equivalent to SQL function DATEPART('dd', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.DayOfYear">
            <summary>
            Returns the day of year component of the date.
            Equivalent to SQL function DATEPART('dy', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Hour">
            <summary>
            Returns the hour component of the date.
            Equivalent to SQL function DATEPART('hh', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Minute">
            <summary>
            Returns the minute component of the date.
            Equivalent to SQL function DATEPART('mi', DATE).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.DatePart`1.Second">
            <summary>
            Returns the second component of the date.
            Equivalent to SQL function DATEPART('ss', DATE).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.BqlSwitchFunction`2" -->
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.Switch`4" -->
        <member name="T:PX.Data.BQL.Switch`4.When`1">
            <summary>
            Defines a condition section of the N-ary operator expression.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Switch`4.When`1.Else`1">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Switch`4.When`1.ElseNull">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Switch`4.When`1.NoDefault">
            <summary>
            Indicates that the preceeding operand should not be defaulted. See <see cref="T:PX.Data.Case2`2"/>
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Switch`4.When`1.NoDefault.Else`1">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Switch`4.When`1.NoDefault.ElseNull">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.BQL.SwitchMirror`4" -->
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1">
            <summary>
            Defines a condition section of the N-ary operator expression.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1.Else`1">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1.ElseNull">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1.NoDefault">
            <summary>
            Indicates that the preceeding operand should not be defaulted. See <see cref="T:PX.Data.Case2`2"/>
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1.NoDefault.Else`1">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SwitchMirror`4.When`1.NoDefault.ElseNull">
            <summary>
            Finishes the N-ary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Compare`2">
            <summary>
            Turns a comparison into <see cref="T:PX.Data.IBqlUnary"/> without surrounding it with parenthesis.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2">
            <summary>
            A BQL scalar operand, that allows to use fluent comparisons.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Is`1">
            <summary>
            Checks if the preceding operand satisfies a custom <typeparamref name="TComparison"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsEqual`1">
            <summary>
            Compares the preceding operand with <typeparamref name="TOperand"/> for equality.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotEqual`1">
            <summary>
            Checks if the preceding operand is not equal to <typeparamref name="TOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsGreaterEqual`1">
            <summary>
            Checks if the preceding operand is greater or equal to <typeparamref name="TOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsGreater`1">
            <summary>
            Checks if the preceding operand is greater than <typeparamref name="TOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsLessEqual`1">
            <summary>
            Checks if the preceding operand is less or equal to <typeparamref name="TOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsLess`1">
            <summary>
            Checks if the preceding operand is less than <typeparamref name="TOperand"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsLike`1">
            <summary>
            Compares the preceding string operand with the pattern string specified in <typeparamref name="TOperand"/>.
            Equivalent to the SQL operator LIKE.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotLike`1">
            <summary>
            Checks if the preceding string operand does not match the pattern string specified in <typeparamref name="TOperand"/>.
            Equivalent to SQL operator NOT LIKE.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.StartsWith`1">
            <summary>
            Checks if the preceding string operand starts with the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE @P0 + '%'.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.EndsWith`1">
            <summary>
            Checks if the preceding string operand ends with the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE '%' + @P0.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Contains`1">
            <summary>
            Checks if the preceding string operand contains the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE '%' + @P0 + '%'.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsBetween`2">
            <summary>
            Checks if the value of the preceding operand falls between the values of
            <typeparamref name="TOperand1"/> and <typeparamref name="TOperand2"/>.
            Equivalent to SQL operator BETWEEN.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotBetween`2">
            <summary>
            Checks if the value of the preceding operand does not fall between the
            values of <typeparamref name="TOperand1"/> and <typeparamref name="TOperand2"/>.
            Equivalent to SQL operator NOT BETWEEN.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNull">
            <summary>
            Checks if the preceding field is null. Equivalent to SQL operator IS NULL.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotNull">
            <summary>
            Checks if the preceding field is not null. Results in true for data records
            with this field containing a value. Equivalent to SQL operator IS NOT NULL.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsInSubselect`1">
            <summary>
            Checks if the preceding operand matches any value in the results of the Search-based statement that is defined by the operand.
            The condition is true if the preceding operand is equal to a value from the result set.
            Equivalent to SQL statement <tt>IN(SELECT … FROM …)</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotInSubselect`1">
            <summary>
            Checks if the preceding operand does not match any value in the results of the Search-based statement that is defined by the operand.
            The condition is true if the <typeparamref name="TSubSelect"/> result set does not contain a value that is equal to the preceding operand.
            Equivalent to SQL statement <tt>NOT IN(SELECT … FROM …)</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`1">
            <summary>
            Checks if the preceding operand matches any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name. 
            The condition is true if the preceding operand is equal to a value from the array.
            Equivalent to the SQL operator IN.
            The In operator is used to replace multiple OR conditions in a BQL statement.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`1">
            <summary>
            Checks if the preceding operand does not match any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name.
            The condition is true if the array does not contain a value that is equal to the preceding operand.
            Equivalent to SQL operator NOT IN.</summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`2">
            <summary>
            Checks if the specified field value matches any value in the list of constants defined by the operand.
            The condition is true if the field value is equal to a value from the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`2">
            <summary>
            Checks if the specified field value does not match a value in the list of constants defined by the operand.
            The condition is true if the field value is not present in the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsIn`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotIn`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsInSequence`1">
            <summary>
            Checks if the specified field value matches any value in the list of constants defined by the operand.
            The condition is true if the field value is equal to a value from the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IsNotInSequence`1">
            <summary>
            Checks if the specified field value does not match a value in the list of constants defined by the operand.
            The condition is true if the field value is not present in the list.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.IfNullThen`1">
            <summary>
            Returns the preceding operand if it is not null, or a <typeparamref name="TOperand"/> otherwise.
            Equivalent to SQL function ISNULL.
            Is a strongly typed version of <see cref="T:PX.Data.IsNull`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.NullIf`1">
            <summary>
            Returns null if the preceding operand equals <typeparamref name="TOperand"/> and
            returns the preceding operand if the two expression are not equal.
            Equivalent to SQL function NULLIF.
            Is a strongly typed version of <see cref="T:PX.Data.NullIf`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Add`1">
            <summary>
            Returns the sum of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Add`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Subtract`1">
            <summary>
            Returns the subtraction of a <typeparamref name="TOperand"/> from the preceding operand.
            Is a strongly typed version of <see cref="T:PX.Data.Sub`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Multiply`1">
            <summary>
            Returns the multiplication of the preceding operand by a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Mult`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Divide`1">
            <summary>
            Returns the division of the preceding operand and a <typeparamref name="TOperand"/>.
            Is a strongly typed version of <see cref="T:PX.Data.Div`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Concat`1">
            <summary>
            Returns the concatenation of the preceding string operand a <typeparamref name="TOperand"/> string.
            Is a strongly typed version of <see cref="T:PX.Data.Concat`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1">
            <summary>
            Provides access to the date-diff components.
            It's members are strongly typed versions of <see cref="T:PX.Data.DateDiff`3"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Years">
            <summary>
            The years component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'yyyy'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Quarters">
            <summary>
            The quarter component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'qq'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Months">
            <summary>
            The months component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'mm'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Weeks">
            <summary>
            The weeks component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'ww'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Days">
            <summary>
            The days component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'dd'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Hours">
            <summary>
            The hours component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'hh'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Minutes">
            <summary>
            The minutes component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'mi'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Seconds">
            <summary>
            The seconds component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'ss'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.Diff`1.Milliseconds">
            <summary>
            The milliseconds component of the date-diff.
            Equivalent to SQL function DATEDIFF(DATE1, DATE2, 'ms'). 
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1">
            <summary>
            Defines a condition of the ternary operator expression.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1.Else`1">
            <summary>
            Finishes the ternary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1.ElseNull">
            <summary>
            Finishes the ternary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1.NoDefault">
            <summary>
            Indicates that the preceeding operand should not be defaulted. See <see cref="T:PX.Data.Case2`2"/>
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1.NoDefault.Else`1">
            <summary>
            Finishes the ternary operator expression.
            Equivalent to SQL CASE-WHEN-ELSE chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`2"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlOperand`2.When`1.NoDefault.ElseNull">
            <summary>
            Finishes the ternary operator expression.
            Equivalent to SQL CASE-WHEN chain.
            Is strongly typed version of <see cref="T:PX.Data.Switch`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlParameter`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.Parameter">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfBool">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfByte">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfShort">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfInt">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfLong">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfFloat">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfDouble">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfDecimal">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfDateTime">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfGuid">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfString">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfAsciiString">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfFixedString">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfFixedAsciiString">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.Parameter.OfByteArray">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.P">
            <summary>
            Allows to introduce a query parameter, that will be replaced by a value passed to the <see cref="M:PX.Data.PXSelectBase`1.Select(System.Object[])"/> method.
            Is a strongly typed version of the <see cref="T:PX.Data.Required`1"/> that uses references to the predefined fields of the <see cref="T:PX.Data.BQL.Parameter"/> virtual BQL table.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsBool">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlBool"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsByte">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlByte"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsShort">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlShort"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsInt">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlInt"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsLong">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlLong"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsFloat">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlFloat"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsDouble">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlDouble"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsDecimal">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlDecimal"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsDateTime">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlDateTime"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsGuid">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlGuid"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsString">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlString"/> type (NVARCHAR).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsString.ASCII">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlString"/> type (VARCHAR).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsString.ASCII.Fixed">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlString"/> type (CHAR).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsString.Fixed">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlString"/> type (NCHAR).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsString.Fixed.ASCII">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlString"/> type (CHAR).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.P.AsByteArray">
            <summary>
            Indicates that the parameter has the <see cref="T:PX.Data.BQL.IBqlByteArray"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument">
            <summary>
            Allows to introduce a query argument, that will be replaced by a value passed from the UI control.
            Is a strongly typed version of the <see cref="T:PX.Data.Argument`1"/>.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsBool">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlBool"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsByte">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlByte"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsShort">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlShort"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsInt">
            <summary>
            Indicates that the argument i of <see cref="T:PX.Data.BQL.IBqlInt"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsLong">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlLong"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsFloat">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlFloat"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsDouble">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlDouble"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsDecimal">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlDecimal"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsDateTime">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlDateTime"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsGuid">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlGuid"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.Argument.AsString">
            <summary>
            Indicates that the argument is of <see cref="T:PX.Data.BQL.IBqlString"/> type.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlType`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.BQL.BqlType`2.Constant`1">
            <summary>
            The base class for BQL constants.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlType`2.Operand`1">
            <summary>
            A BQL scalar operand: an expression involving multiple fields.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlType`2.Field`1">
            <summary>
            Represents a field declared in a DAC, that allows to use fluent comparisons.
            The field is either bound or not bound to a database column.
            </summary>
        </member>
        <member name="M:PX.Data.BQL.BqlType`2.MatchType(System.Type)">
            <summary>
            Indicates whether the <paramref name="operandType"/> corresponds to a specific BQL type (e.g. <see cref="T:PX.Data.BQL.IBqlString"/>, or <see cref="T:PX.Data.BQL.IBqlDecimal"/>).
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlBool">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlBool"/> type, that corresponds to SQL BIT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlGuid">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlGuid"/> type, that corresponds to SQL UNIQUEIDENTIFIER.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlDateTime">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlDateTime"/> type, that corresponds to SQL DATETIME.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlString">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlString"/> type, that corresponds to SQL CHAR, NCHAR, VARCHAR, or NVARCHAR.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlByte">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlByte"/> type, that corresponds to SQL TINYINT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlShort">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlShort"/> type, that corresponds to SQL SMALLINT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlInt">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlInt"/> type, that corresponds to SQL INT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlLong">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlLong"/> type, that corresponds to SQL BIGINT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlDecimal">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlDecimal"/> type, that corresponds to SQL DECIMAL.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlFloat">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlFloat"/> type, that corresponds to SQL FLOAT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlDouble">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlDouble"/> type, that corresponds to SQL FLOAT.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.BqlByteArray">
            <summary>
            Allows to define a BqlField, a BqlConstant, or a BqlOperand and also use an Argument of <see cref="T:PX.Data.BQL.IBqlByteArray"/> type, that corresponds to SQL BINARY.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SetOfConstants`3.ISetProvider">
            <exclude/>
        </member>
        <member name="P:PX.Data.BQL.SetOfConstants`3.Set">
            <summary>
            Gets the underlying set of <typeparamref name="TConstantType"/> constants.
            </summary>
        </member>
        <member name="M:PX.Data.BQL.SetOfConstants`3.ContainsValue(`0)">
            <summary>
            Indicates whether the passed value is present in the current set of constants.
            </summary>
        </member>
        <member name="M:PX.Data.BQL.SetOfConstants`3.PX#Data#IBqlConstants#GetValues(PX.Data.PXGraph)">
            <summary>
            Gets the set of constants
            </summary>
            <returns></returns>
        </member>
        <member name="T:PX.Data.BQL.SetOfConstants`3.Contains`1">
            <summary>
            Indicates whether the value of the passed field is present in the current set of constants.
            </summary>
        </member>
        <member name="M:PX.Data.BQL.SetOfConstants`3.Contains`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.BQL.SetOfConstants`3.Contains`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BQL.SetOfConstants`2">
            <summary>
            The base class for BQL set of constants.
            </summary>
            <typeparam name="TConstantType">The data type of the constant.</typeparam>
            <typeparam name="TSetProvider">Type that is used as the set of constants provider</typeparam>
            <example>
            The following code shows how to define a set of constants.
            <code>
            public class PayableDocSet : SetOfConstants&lt;String, PayableDocSet.SetProvider&gt;
            { 
            	public class SetProvider : ISetProvider
            	{
            		public Constant&lt;String&gt;[] Constants { get; } =
            		{
            			new ARDocType.Invoice(),
            			new ARDocType.DebitMemo(),
            			new ARDocType.FinCharge(),
            			new ARDocType.SmallCreditWO()
            		}
            	}
            } 
            ...
            // Using the set of constants in BQL.
            public PXSelect&lt;ARInvoice,
                Where&lt;PayableDocSet.Contains&lt;ARInvoice.docType&gt;&gt;&gt; records;
            
            // Using the set of constants in code.
            if (PayableDocSet.ContainsValue(arinvoice.DocType))
            {
            	...
            }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.BQL.SetOfConstantsFluent`2.AsIntegers.Contains`1">
            <summary>
            Indicates whether the value of the passed field is present in the current set of constants.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SetOfConstantsFluent`2.AsStrings.Contains`1">
            <summary>
            Indicates whether the value of the passed field is present in the current set of constants.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SetOf.Integers.ProvidedBy`1.Contains`1">
            <summary>
            Indicates whether the value of the passed field is present in the current set of constants.
            </summary>
        </member>
        <member name="T:PX.Data.BQL.SetOf.Strings.ProvidedBy`1.Contains`1">
            <summary>
            Indicates whether the value of the passed field is present in the current set of constants.
            </summary>
        </member>
        <member name="T:PX.Data.BqlCommandInfo">
            <exclude/>
        </member>
        <member name="P:PX.Data.BqlCommandInfo.BuildExpression">
            If false, AppendQuery() and AppendExpression() methods can skip expression building process - just collecting info
        </member>
        <member name="F:PX.Data.BqlCommandInfo.UseColumnAliases">
            Use it to pass this flag to <see cref="F:PX.Data.BqlCommand.Selection.UseColumnAliases"/>
        </member>
        <member name="T:PX.Data.BqlCommand">
            <summary>The BQL statement generator.</summary>
        </member>
        <member name="T:PX.Data.BqlCommand.Selection">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlCommand.Selection.PredicatesFromOuterClause">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <summary>
            Verifies if the item meet the command
            </summary>
            <param name="cache">Cache the item is contained in</param>
            <param name="item">Data item to verify</param>
            <param name="pars">Query parameters</param>
            <param name="result">The result of verification if possible</param>
            <param name="value">Value of the Bql operand if any</param>
        </member>
        <member name="M:PX.Data.BqlCommand.Meet(PX.Data.PXCache,System.Object,System.Object[])">
            <summary>
            Verifies if the item meets the Bql command and provided parameters
            </summary>
            <param name="cache">Cache the item is contained in</param>
            <param name="item">Data item to verify</param>
            <param name="parameters">Query parameters</param>
            <returns>True if the item meets or it is impossible to determine</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetTables">
            <summary>
            Gets tables referenced in the command
            </summary>
            <returns>Table types</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetFirstTable">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetParameters">
            <summary>
            Gets parameters of the command.
            </summary>
            <returns>Parameter instances</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetParameterPairs">
            <summary>
            Retrieves referenced field to parameter field pairs from current command
            </summary>
            <returns>List of referenced field to parameter field pairs, where Key is referenced field and Value is parameter field</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetParameterPairs(System.Type)">
            <summary>
            Retrieves referenced field to parameter field pairs
            </summary>
            <param name="command"></param>
            <returns>List of referenced field to parameter field pairs, where Key is referenced field and Value is parameter field</returns>
        </member>
        <member name="T:PX.Data.BqlCommand.EqualityList">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetReferencedFields(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetSelectType">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetSortColumns">
            <summary>
            Gets columns the command is ordered by
            </summary>
            <returns>Sort column instances</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereNew``1">
            <summary>Constructs the command out of the current one replacing the where clause.</summary>
            <typeparam name="newWhere">New restriction</typeparam>
            <returns>New command with the where clause replaced</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereNew(System.Type)">
            <summary>
            Constructs the command out of the current one replacing the where clause.
            </summary>
            <param name="newWhere">New restriction</param>
            <returns>New command with the where clause replaced</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereAnd``1">
            <summary>
            Constructs the command out of the current one appending the where clause with the And operator.
            </summary>
            <typeparam name="where">Additional restriction</typeparam>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereAnd(System.Type)">
            <summary>
            Constructs the command out of the current one appending the where clause with the And operator.
            </summary>
            <param name="where">Additional restriction</param>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereOr``1">
            <summary>
            Constructs the command out of the current one appending the where clause with the Or operator.
            </summary>
            <typeparam name="where">Additional restriction</typeparam>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereOr(System.Type)">
            <summary>
            Constructs the command out of the current one appending the where clause with the Or operator.
            </summary>
            <param name="where">Additional restriction</param>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.WhereNot">
            <summary>
            Constructs the command out of the current one inversing the where clause.
            </summary>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.OrderByNew``1">
            <summary>
            Constructs the command out of the current one replacing the sort columns list.
            </summary>
            <typeparam name="newOrderBy">Sort columns</typeparam>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.OrderByNew(System.Type)">
            <summary>
            Constructs the command out of the current one replacing the sort columns list.
            </summary>
            <param name="newOrderBy">Sort columns</param>
            <returns>New command created</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.AggregateNew``1">
            <summary>
            Constructs the command out of the current one appending the group by clause.
            </summary>
            <typeparam name="newAggregate">New group by clause</typeparam>
            <returns>New command with the group by clause appended</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.AggregateNew(System.Type)">
            <summary>
            Constructs the command out of the current one appending the group by clause.
            </summary>
            <param name="newAggregate">New group by clause</param>
            <returns>New command with the group by clause appended</returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetColumnAlias(System.String,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetTableName(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetField(System.Type,PX.Data.PXCache,PX.Data.PXDBOperation)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetFieldName(System.Type,PX.Data.PXCache,PX.Data.PXDBOperation)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetFieldName``1(PX.Data.PXCache,PX.Data.PXDBOperation)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetValue(System.Type,System.Object,PX.Data.PXCache,PX.Data.PXDBOperation)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetValue``1(System.Object,PX.Data.PXCache,PX.Data.PXDBOperation)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.SplitPredicateIntoConjunctions(PX.Data.IBqlUnary)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetTransitionedPredicates(System.Collections.Generic.IEnumerable{PX.Data.IBqlUnary},System.Collections.Generic.IEnumerable{PX.Data.IBqlUnary})">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlCommand.Null">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlCommand.DBOperationCommands">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlCommand.DBOperationOptions">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.GetItemType(System.Type)">
            <summary>Allows to get a table from a field type</summary>
            <param name="field">
            bql field
            </param>
            <returns>
            bql table
            </returns>
        </member>
        <member name="M:PX.Data.BqlCommand.GetItemType``1">
            <summary>Allows to get a table from a generic field type</summary>
            <typeparam name="TField">
            Generic type of BQL field
            </typeparam>
            <returns>
            Type of BQL table
            </returns>
        </member>
        <member name="T:PX.Data.BqlCommand.FieldPlace">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.FindRealTableForType(System.Collections.Generic.List{System.Type},System.Type,System.Boolean)">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlCommand.invalid_join_criteria_detected">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.CreateInstance(System.Type[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.Compose(System.Type[])">
            <summary>
            Generates final command type from type definitions array
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.BqlCommand.Decompose(System.Type)">
            <summary>Generates a Type array of definitions, that make up a given command.</summary>
        </member>
        <member name="M:PX.Data.BqlCommand.GetFields(System.Type)">
            <summary>
            Returns all DAC fields that are used in the BQL expression.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.BqlCommand.AddJoinConditions(System.Type,System.Type,System.Type)">
            <summary>Appends an additional <tt>JOIN</tt> command.</summary>
            <param name="command">A command type</param>
            <param name="joinTable">Joint table type</param>
        </member>
        <member name="M:PX.Data.BqlCommand.AppendJoin``1(PX.Data.BqlCommand)">
            <summary>Appends a <tt>JOIN</tt> clause to an existing command.</summary>
            <param name="command">Target command</param>
            <param name="TJoin">type of joined table</param>
        </member>
        <member name="M:PX.Data.BqlCommand.AppendJoin(PX.Data.BqlCommand,System.Type)">
            <summary>Appends a <tt>JOIN</tt> clause to an existing command.</summary>
            <param name="command">Target command</param>
            <param name="join">Type of a joined table</param>
        </member>
        <member name="M:PX.Data.BqlCommand.AppendJoin``1(System.Type)">
            <summary>Appends a <tt>JOIN</tt> clause to an existing command.</summary>
            <param name="command">A target command type.</param>
            <param name="TJoin">type of joined table</param>
        </member>
        <member name="M:PX.Data.BqlCommand.AppendJoin(System.Type,System.Type)">
            <summary>Appends a <tt>JOIN</tt> clause to an existing command.</summary>
            <param name="command">A target command type</param>
            <param name="join">A joined table type</param>
        </member>
        <member name="M:PX.Data.BqlCommand.NewJoin(System.Type,System.Type)">
            <summary>
            Sets join to command.
            </summary>
            <param name="command">type of target command</param>
            <param name="join">type of joined table</param>
        </member>
        <member name="M:PX.Data.BqlCommand.MakeGenericType(System.Type[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlCommand.KillAllWheres(System.Collections.Generic.IEnumerable{System.Type})">
            <exclude/>
        </member>
        <member name="T:PX.Data.Equal`1">
            <summary>
            Compares the preceding operand with <tt>Operand</tt> for equality.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view defined in a graph, and the corresponding SQL query." lang="CS">
            // Data view definition in a graph
            public PXSelect&lt;CurrencyInfo,
                Where&lt;CurrencyInfo.curyInfoID, Equal&lt;Required&lt;CurrencyInfo.curyInfoID&gt;&gt;&gt;&gt;
                CurrencyInfo_CuryInfoID;
            ...
            APTaxTran tran = ...
            // Data view execution at run time
            CurrencyInfo orig_info = CurrencyInfo_CuryInfoID.Select(tran.CuryInfoID);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM CurrencyInfo
            WHERE CurrencyInfo.CuryInfoID = [value]</code>
            </example>
        </member>
        <member name="M:PX.Data.Equal`1.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.Equal`1.#ctor(PX.Data.IBqlOperand)">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotEqual`1">
            <summary>
            Checks if the preceding operand is not equal to <tt>Operand</tt>.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field. The NotEqual&lt;&gt; class is used in the BQL command that retrieves the data records that can be selected in the lookup control." lang="CS">
            [PXDBString(10, IsUnicode = true, IsKey = true, InputMask = "&gt;CCCCCCCCCCCCCCC")]
            [PXDefault()]
            [PXUIField(DisplayName = "Discount Code")]
            [PXSelector(typeof(
                Search&lt;APDiscount.discountID,
                    Where&lt;APDiscount.type, NotEqual&lt;DiscountType.LineDiscount&gt;&gt;&gt;))]
            public virtual String DiscountID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.NotEqual`1.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.NotEqual`1.#ctor(PX.Data.IBqlOperand)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Greater`1">
            <summary>
            Checks if the preceding operand is greater than <tt>Operand</tt>.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
        </member>
        <member name="M:PX.Data.Greater`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.Less`1">
            <summary>
            Checks if the preceding operand is less than <tt>Operand</tt>.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
            <example>
            	<code title="Example" description="The code below creates a dynamic data view that selects financial periods satifying the condition. The corresponding SQL code is also shown." lang="CS">
            PXSelectBase selectperiod = new PXSelect&lt;FinPeriod,
                Where&lt;FinPeriod.startDate, Less&lt;FinPeriod.endDate&gt;,
                    And&lt;FinPeriod.finYear, Equal&lt;Required&lt;FinPeriod.finYear&gt;&gt;&gt;&gt;,
                OrderBy&lt;Desc&lt;FinPeriod.periodNbr&gt;&gt;&gt;(this);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM FinPeriod
            WHERE ( FinPeriod.StartDate &lt; FinPeriod.EndDate
                AND FinPeriod.FinYear = [value] )
            ORDER BY FinPeriod.PeriodNbr DESC</code>
            </example>
        </member>
        <member name="M:PX.Data.Less`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.GreaterEqual`1">
            <summary>
            Checks if the preceding operand is greater or equal to <tt>Operand</tt>.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
        </member>
        <member name="M:PX.Data.GreaterEqual`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.LessEqual`1">
            <summary>
            Checks if the preceding operand is less or equal to <tt>Operand</tt>.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
        </member>
        <member name="M:PX.Data.LessEqual`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.ComparisonBase`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.Like`1">
            <summary>
            Compares the preceding operand with the pattern specified in <tt>Operand</tt>.
            Equivalent to the SQL operator LIKE.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
            <remarks>
            Operand should have a wildcard string value in which the sign "%" is used
            to substitute missing letters. For example, "%land%" will be matched by
            "Iceland" and "Laplandia".
            </remarks>
            <example>
            	<code title="Example" description="The code below selects and iterates over accounts whose account IDs match the provided wildcard." lang="CS">
            string acctCDWildCard = SubCDUtils.CreateSubCDWildcard(aSrc.AccountCD, AccountAttribute.DimensionName);
            foreach (Account iAcct in PXSelect&lt;Account, Where&lt;Account.accountCD, Like&lt;Required&lt;Account.accountCD&gt;&gt;&gt;&gt;.Select(this, acctCDWildCard))
            {
            ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.Like`1.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.Like`1.CheckLike(System.String,System.String)">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotLike`1">
            <summary>
            Checks if the preceding operand does not match the pattern specified in <tt>Operand</tt>.
            Equivalent to SQL operator NOT LIKE.
            </summary>
            <typeparam name="Operand">The operand to compare to.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field. The PXSelector attribute configures the lookup control that will represent the PageID field in the UI." lang="CS">
            [PXDBGuid(IsKey = true)]
            [PXSelector(typeof(Search2&lt;SimpleWikiPage.pageID,
                InnerJoin&lt;WikiDescriptor, On&lt;WikiDescriptor.pageID, Equal&lt;SimpleWikiPage.wikiID&gt;&gt;&gt;,
                Where&lt;WikiDescriptor.articleType, Equal&lt;WikiArticleTypeAttribute.kb&gt;,
                    And&lt;SimpleWikiPage.name, NotLike&lt;GenTemplateLeftLike&gt;,
                    And&lt;SimpleWikiPage.name, NotLike&lt;TemplateLeftLike&gt;,
                    And&lt;SimpleWikiPage.name, NotLike&lt;ContainerTemplateLeftLike&gt;&gt;&gt;&gt;&gt;&gt;))]
            public virtual Guid? PageID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.NotLike`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.StartsWith`1">
            <summary>
            Checks if the preceding string operand starts with the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE @P0 + '%'.
            </summary>
        </member>
        <member name="T:PX.Data.EndsWith`1">
            <summary>
            Checks if the preceding string operand ends with the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE '%' + @P0.
            </summary>
        </member>
        <member name="T:PX.Data.Contains`1">
            <summary>
            Checks if the preceding string operand contains the <typeparamref name="TOperand"/> string.
            Equivalent to SQL operator LIKE '%' + @P0 + '%'.
            </summary>
        </member>
        <member name="T:PX.Data.Between`2">
            <summary>
            Checks if the value of the preceding operand falls between the values of
            <tt>Operand1</tt> and <tt>Operand2</tt>. Equivalent to SQL operator BETWEEN.
            </summary>
            <typeparam name="Operand1">The beginning of the range.</typeparam>
            <typeparam name="Operand2">The end of the range.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view that uses Between&lt;&gt; in the conditional expression and the SQL query corresponding to the data view." lang="CS">
            public PXSelect&lt;TaxRev,
                Where&lt;TaxRev.taxID, Equal&lt;Required&lt;TaxRev.taxID&gt;&gt;,
                    And&lt;TaxRev.taxType, Equal&lt;Required&lt;TaxRev.taxType&gt;&gt;,
                    And&lt;TaxRev.outdated, Equal&lt;boolFalse&gt;,
                    And&lt;Required&lt;TaxRev.startDate&gt;, Between&lt;TaxRev.startDate, TaxRev.endDate&gt;&gt;&gt;&gt;&gt;&gt;
                    SalesTaxRev_Select;
            ...
            // Executing the data view
            TaxRev _TaxRev = SalesTaxRev_Select.Select(tran.TaxID, tran.TaxType, tran.TranDate);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM TaxRev
            WHERE ( TaxRev.TaxID = [tran.TaxID value]
                AND TaxRev.TaxType = [tran.TaxType value]
                AND TaxRev.OutDated = CONVERT(bit, 0)
                AND [tran.TranDate value] BETWEEN TaxRev.StartDate AND TaxRev.EndDate )</code>
            </example>
        </member>
        <member name="M:PX.Data.Between`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Between`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.NotBetween`2">
            <summary>
            Checks if the value of the preceding operand does not fall between the
            values of <tt>Operand1</tt> and <tt>Operand2</tt>. Equivalent to SQL
            operator NOT BETWEEN.
            </summary>
            <typeparam name="Operand1">The beginning of the range.</typeparam>
            <typeparam name="Operand2">The end of the range.</typeparam>
        </member>
        <member name="M:PX.Data.NotBetween`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.NotBetween`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.IsNull">
            <summary>
            Checks if the preceding field is null. Equivalent to SQL operator IS NULL.
            </summary>
            <example>
            <code>
            public PXSelectJoin&lt;APQuickCheck,
                LeftJoin&lt;Vendor, On&lt;Vendor.bAccountID, Equal&lt;APQuickCheck.vendorID&gt;&gt;&gt;,
                Where&lt;APQuickCheck.docType, Equal&lt;Optional&lt;APQuickCheck.docType&gt;&gt;,
                    And&lt;Where&lt;Vendor.bAccountID, IsNull,
                        Or&lt;Match&lt;Vendor, Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt;&gt;&gt;&gt; Document;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.IsNull.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.IsNull.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.IsNotNull">
            <summary>
            Checks if the preceding field is not null. Results in true for data records
            with this field containing a value. Equivalent to SQL operator IS NOT NULL.
            </summary>
            <example>
            	<code title="Example" description="The code below shows the data view defined in a graph and the corresponding SQL query." lang="CS">
            // Data view definition
            public PXSelect&lt;APTran,
                Where&lt;APTran.tranType, Equal&lt;Required&lt;APTran.tranType&gt;&gt;,
                    And&lt;APTran.refNbr, Equal&lt;Required&lt;APTran.refNbr&gt;&gt;,
                    And&lt;APTran.box1099, IsNotNull&gt;&gt;&gt;&gt; AP1099Tran_Select;
            ...
            private void Update1099(APAdjust adj, APRegister apdoc)
            {
                // Data view execution
                foreach(APTran tran in AP1099Tran_Select.Select(apdoc.DocType, apdoc.RefNbr))
                {
                    ...
                }
            }</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM APTran
            WHERE ( APTran.TranType = [apdoc.DocType value]
                AND APTran.RefNbr = [apdoc.RefNbr value]
                AND APTran.Box1099 IS NOT NULL )</code>
            </example>
        </member>
        <member name="M:PX.Data.IsNotNull.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.IsNotNull.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Constant">
            <exclude/>
        </member>
        <member name="T:PX.Data.Constant`1">
            <summary>
            The base class for BQL constants.
            </summary>
            <typeparam name="ConstType">The data type of the constant.</typeparam>
            <remarks>
            To define a custom constant in the application, derive a class from <tt>Constant&lt;&gt;</tt>.
            Specify constant's type in the <tt>ConstType</tt> type parameter and implement the
            constructor. The constructor should inherit base class constructor and provide
            the constant's actual value in its argument.
            </remarks>
            <example>
            	<code title="Example" description="The predefined constant Zero represents integer 0 and is not suitable for comparison with decimal values. The application should define a custom constant for decimal zero, deriving it from Constant&lt;Decimal&gt; as the following code shows." lang="CS">
            public class decimal_0 : Constant&lt;Decimal&gt;
            {
                public decimal_0()
                    : base(0m)
                {
                }
            }
            ...
            // Using the constant in BQL.
            public PXSelect&lt;Table1,
                Where&lt;Table.decimalField, Greater&lt;decimal_0&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="This constant can be used in BQL statements in the following way:" groupname="Example" lang="CS">
            PXSelect&lt;Table,
                Where&lt;Table.decimalField, Greater&lt;decimal_0&gt;&gt;&gt;</code>
            	<code title="Example3" description="This BQL statement is translated into the following SQL query:" groupname="Example2" lang="SQL">
            SELECT * FROM Table
            WHERE Table.DecimalField &gt; .0</code>
            </example>
        </member>
        <member name="M:PX.Data.Constant`1.#ctor(`0)">
            <exclude/>
        </member>
        <member name="P:PX.Data.Constant`1.Value">
            <exclude/>
        </member>
        <member name="M:PX.Data.Constant`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Constant`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Null">
            <summary>
            The null value used in Switch clauses as a default value. Don't use this
            constant for checking fields for null value — use the <tt>IsNull</tt> and
            <tt>IsNotNull</tt> classes instead.
            </summary>
            <example>
            	<code title="Example" description="The code below shows the usage of the Null class in a formula added to the definition of a DAC field." lang="CS">
            [PXDBInt()]
            [PXDefault(PersistingCheck = PXPersistingCheck.Nothing)]
            [PXUIField(DisplayName = "Labor Item", Required = false)]
            [PXFormula(
                typeof(Switch&lt;
                    Case&lt;Where&lt;perItemBilling, Equal&lt;BillingTypeListAttribute.perActivity&gt;&gt;, Null&gt;,
                    Current&lt;labourItemID&gt;&gt;))]
            public virtual Int32? LabourItemID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Null.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Null.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.CurrentValue`1">
            <summary>
            Equivalent to the <tt>Current</tt> parameter, but is used in the
            <tt>PXProjection</tt> attribute.
            </summary>
            <typeparam name="Field">The field whose current value is inserted.</typeparam>
            <example>
            The code below shows the definition of a DAC field.
            <code>
            [PXDBCalced(
                typeof(Left&lt;INSubItem.subItemCD, CurrentValue&lt;Dimension.segments&gt;&gt;),
                typeof(string))]
            public override string SubItemCD { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.CurrentValue`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.CurrentValue`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.SavedStringValue`1">
            <summary>Includes in a BQL command a previously saved string value. The class can be used if current cannot be accessed easily. For example, the class can be used
            in some attributes. The value must be saved in the corresponded slot using PXContext.SetSlot function.</summary>
            <typeparam name="Field">The field whose current value is recovered.</typeparam>
            <example>
            The code below shows the definition of a DAC field.
            <code title="" description="" lang="CS">
            [PXDBCalced(
                typeof(Left&lt;INSubItem.subItemCD, CurrentValue&lt;Dimension.segments&gt;&gt;),
                typeof(string))]
            public override string SubItemCD { get; set; }</code></example>
        </member>
        <member name="M:PX.Data.SavedStringValue`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.SavedStringValue`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.CurrentMatch`1">
            <summary>
            Matches only the data records the specified user has access rights for.
            Equivalent to <tt>Match&lt;Field&gt;</tt>, but is used in the
            <tt>PXProjection</tt> attribute.
            </summary>
            <typeparam name="Parameter">The field holding the user name.</typeparam>
        </member>
        <member name="M:PX.Data.CurrentMatch`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.CurrentMatch`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.CurrentMatch`2">
            <summary>
            Matches only the data records the specified user has access rights for. The condition
            is applied to the data records of the table set with <tt>Table</tt>.
            Equivalent to <tt>Match&lt;Table, Field&gt;</tt>, but is used in the
            <tt>PXProjection</tt> attribute.
            </summary>
            <typeparam name="Table">The DAC whose data records are cheched by the condition.</typeparam>
            <typeparam name="Parameter">The field holding the user name.</typeparam>
        </member>
        <member name="M:PX.Data.CurrentMatch`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.CurrentMatch`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.ConstantInterval`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.Now">
            <summary>
            Current UTC time.
            </summary>
            <example>
            	<code title="Example" description="The code below shows a data view that select EPActivity data records with the ReminderDate field less or equal than the current date, and the corresponding SQL query." lang="CS">
            PXSelect&lt;EPActivity,
                Where&lt;EPActivity.reminderDate, LessEqual&lt;Now&gt;&gt;&gt; records;</code>
            	<code title="" description="" lang="SQL">
            SELECT * FROM EPActivity
            WHERE EPActivity.ReminderDate &lt;= [current date and time]</code>
            </example>
        </member>
        <member name="M:PX.Data.Now.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.Today">
            <summary>
            Represents the current date (on the server) in BQL queries.
            </summary>
            <example>
            <code>
            public PXSelect&lt;EPActivity,
                Where&lt;EPActivity.startDate, LessEqual&lt;Today&gt;,
                    And&lt;EPActivity.endDate, Greater&lt;Tomorrow&gt;&gt;&gt;&gt; records;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Today.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.Tomorrow">
            <summary>
            Represents the tomorrow date (on the server) in BQL queries.
            </summary>
            <example>
            <code>
            public PXSelect&lt;EPActivity,
                Where&lt;EPActivity.startDate, LessEqual&lt;Today&gt;,
                    And&lt;EPActivity.endDate, Greater&lt;Tomorrow&gt;&gt;&gt;&gt; records;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Tomorrow.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.True">
            <summary>
            The true value for comparing with boolean fields. In translation
            to SQL corresponds to CONVERT(BIT, 1).
            </summary>
            <example>
            	<code title="Example" description="The code below iterates over the APInvoice data records retrieved by using the static Select(...) method. The SQL query corresponding to the BQL query is given below." lang="CS">
            foreach (APInvoice rec in PXSelect&lt;APInvoice,
                Where&lt;APInvoice.openDoc, Equal&lt;True&gt;,
                    And2&lt;Where&lt;APInvoice.released, Equal&lt;True&gt;,
                        Or&lt;APInvoice.prebooked,Equal&lt;True&gt;&gt;&gt;&gt;&gt;.Select(this))
            {
            ...
            }</code>
            	<code title="" description="" lang="SQL">
            SELECT * FROM APInvoice
            WHERE APInvoice.OpenDoc = CONVERT(BIT, 1) AND
                ( APInvoice.Released = CONVERT(BIT, 1) OR APInvoice.Prebooked = CONVERT(BIT, 1) )</code>
            </example>
        </member>
        <member name="M:PX.Data.True.#ctor">
            <exclude/>
        </member>
        <member name="P:PX.Data.True.UnaryLazyImpl">
            <exclude/>
        </member>
        <member name="T:PX.Data.False">
            <summary>
            The false value for comparing with boolean fields. In translation
            to SQL corresponds to CONVERT(BIT, 0).
            </summary>
            <example>
            	<code title="Example" description="The code below shows a definition of the %PXProcessing:PXProcessing{T}% data view in a graph." lang="CS">
            public PXProcessing&lt;TranslationHistory,
                Where&lt;TranslationHistory.released, Equal&lt;False&gt;&gt;&gt; TranslationReleaseList;</code>
            </example>
        </member>
        <member name="M:PX.Data.False.#ctor">
            <exclude/>
        </member>
        <member name="P:PX.Data.False.UnaryLazyImpl">
            <exclude/>
        </member>
        <member name="T:PX.Data.Zero">
            <summary>
            The integer zero, not comparable with floating point numeric types (such as decimal).
            </summary>
            <example>
            	<code title="Example" description="The code below shows a possible definition of a data view that selects BAccount data records in a graph. The corresponding SQL query is given below." lang="CS">
            public PXSelect&lt;CR.BAccount, 
                Where&lt;CR.BAccount.bAccountID, Equal&lt;Current&lt;BAccount.bAccountID&gt;&gt;, 
                    Or&lt;Current&lt;BAccount.bAccountID&gt;, Less&lt;Zero&gt;&gt;&gt;&gt; records;</code>
            	<code title="" description="" lang="SQL">
            SELECT * FROM BAccount
            WHERE BAccount.bAccountID = [value] OR [value] &lt; 0</code>
            </example>
        </member>
        <member name="M:PX.Data.Zero.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.EmptyGuid">
            <exclude/>
        </member>
        <member name="T:PX.Data.StringEmpty">
            <summary>
            Represents an empty string in BQL queries.
            </summary>
        </member>
        <member name="M:PX.Data.StringEmpty.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.Space">
            <exclude/>
        </member>
        <member name="T:PX.Data.DoubleSpace">
            <exclude/>
        </member>
        <member name="T:PX.Data.Empty">
            <exclude/>
        </member>
        <member name="T:PX.Data.WildcardAny">
            <exclude/>
        </member>
        <member name="T:PX.Data.Comma">
            <exclude/>
        </member>
        <member name="T:PX.Data.CommaSpace">
            <exclude/>
        </member>
        <member name="T:PX.Data.Hyphen">
            <exclude/>
        </member>
        <member name="T:PX.Data.HyphenSpace">
            <exclude/>
        </member>
        <member name="T:PX.Data.Colon">
            <exclude/>
        </member>
        <member name="T:PX.Data.SiteMapRootNodeSreenID">
            <summary>
            Represents value of SiteMap root node Screen ID. It is "00000000".
            </summary>
        </member>
        <member name="M:PX.Data.SiteMapRootNodeSreenID.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.MaxDate">
            <summary>
            The maximum date: 06/06/2079.
            </summary>
        </member>
        <member name="M:PX.Data.MaxDate.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.NameOf`1">
            <summary>
            The BQL-constant that represents the name of a given type.
            The BQL equivalent of the <see cref="P:System.Reflection.MemberInfo.Name"/> property.
            </summary>
        </member>
        <member name="T:PX.Data.FullNameOf`1">
            <summary>
            The BQL-constant that represents the fully qualified name of a given type, including its namespace but not its assembly.
            The BQL equivalent of the <see cref="P:System.Type.FullName"/> property.
            </summary>
        </member>
        <member name="T:PX.Data.IsPortal">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlFormula">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator.Evaluate(PX.Data.PXCache,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`1">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <summary>
            Verifies the BQL command.
            </summary>
            <param name="cache"></param>
            <param name="item"></param>
            <param name="pars"></param>
            <param name="result"></param>
            <param name="value"></param>
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`2">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`3">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`4">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`4.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`5">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`5.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`5.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`6">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`6.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`6.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`7">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
            <typeparam name="Operand7">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`7.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`7.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`8">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
            <typeparam name="Operand7">A field, constant, or function.</typeparam>
            <typeparam name="Operand8">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`8.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`8.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormulaEvaluator`9">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
            <typeparam name="Operand7">A field, constant, or function.</typeparam>
            <typeparam name="Operand8">A field, constant, or function.</typeparam>
            <typeparam name="Operand9">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`9.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormulaEvaluator`9.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`1">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFormula`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`2">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`3">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`4">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`5">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`5.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`6">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`6.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`7">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
            <typeparam name="Operand7">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`7.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFormula`8">
            <summary>
            An abstract class that is used to derive custom BQL functions.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="Operand3">A field, constant, or function.</typeparam>
            <typeparam name="Operand4">A field, constant, or function.</typeparam>
            <typeparam name="Operand5">A field, constant, or function.</typeparam>
            <typeparam name="Operand6">A field, constant, or function.</typeparam>
            <typeparam name="Operand7">A field, constant, or function.</typeparam>
            <typeparam name="Operand8">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BqlFormula`8.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Const`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.Const`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Const`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.Default">
            <exclude/>
        </member>
        <member name="M:PX.Data.Default.Verify(PX.Data.PXCache,System.String,System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Default`1">
            <summary>
            Raises the <tt>FieldDefaulting</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified field changes.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the usage of Default&lt;&gt; in the definition of a DAC field." lang="CS">
            [PXFormula(typeof(Default&lt;NotificationSource.setupID&gt;))]
            public virtual string Format { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Default`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Default`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Default`2">
            <summary>
            Raises the <tt>FieldDefaulting</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the usage of Default&lt;,&gt; in the definition of a DAC field." lang="CS">
            [PXDBCurrency(typeof(EPExpenseClaimDetails.claimCuryInfoID), typeof(EPExpenseClaimDetails.claimTranAmt))]
            [PXUIField(DisplayName = "Employee Claim Amount")]
            [PXDefault(TypeCode.Decimal, "0.0")]
            [PXFormula(typeof(Default&lt;curyTranAmt, curyTranAmt&gt;))]
            [PXUIEnabled(typeof(Where&lt;claimCuryInfoID, NotEqual&lt;curyInfoID&gt;&gt;))]
            public virtual Decimal? ClaimCuryTranAmt { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Default`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Default`3">
            <summary>
            Raises the <tt>FieldDefaulting</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <typeparam name="V3">A data field.</typeparam>
            <example>
            	<code title="Example" description="The code below shows how an expression for the %PXFormula:PXFormulaAttribute% attribute can be composed at run time by using the %BqlCommand:BqlCommand% class." lang="CS">
            Type formulaType =
                _BAccountID != null ?
                BqlCommand.Compose(typeof(Default&lt;,,&gt;), _InventoryID, _SubItemID, _BAccountID) :
                BqlCommand.Compose(typeof(Default&lt;,&gt;), _InventoryID, _SubItemID);
            _Attributes.Add(new PXFormulaAttribute(formulaType));</code>
            </example>
        </member>
        <member name="M:PX.Data.Default`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Default`4">
            <summary>
            Raises the <tt>FieldDefaulting</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <typeparam name="V3">A data field.</typeparam>
            <typeparam name="V4">A data field.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the usage of Default&lt;,,,&gt; in the definition of a DAC field." lang="CS">
            [PXDefault]
            [PXFormula(typeof(Default&lt;inventoryID, contractID, taskID, customerLocationID&gt;))]
            public virtual Int32? ExpenseSubID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Default`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.ExternalValue`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.ExternalValue`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Parent`1">
            <summary>
            Returns the value of the specified field from the parent data record.
            The parent data record is defined by the <see cref="T:PX.Data.PXParentAttribute">PXParet</see>
            attribute.
            </summary>
            <typeparam name="Field">The field of the parent data record.</typeparam>
            <example>
            <code>
            [PXUnboundFormula(
                typeof(Switch&lt;
                    Case&lt;Where&lt;SOLine.operation, Equal&lt;Parent&lt;SOOrder.defaultOperation&gt;&gt;, 
                             And&lt;SOLine.lineType, NotEqual&lt;SOLineType.miscCharge&gt;&gt;&gt;, 
                         SOLine.orderQty&gt;, 
                    decimal0&gt;),
                typeof(SumCalc&lt;SOOrder.orderQty&gt;))]
            public virtual decimal? OrderQty { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Parent`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Parent`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Row`2">
            <summary>
            Returns the value of the specified field and creates an additional
            dependency for the formula (on the provided dependency field).
            Each time the dependency field is updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula.
            </summary>
            <typeparam name="Field">The field whose value is returned.</typeparam>
            <typeparam name="DependentField">The dependent field.</typeparam>
            <example>
            <code>
            [PXFormula(
                typeof(Mult&lt;Row&lt;POLine.baseOrderQty, POLine.orderQty&gt;, POLine.unitWeight&gt;),
                typeof(SumCalc&lt;POOrder.orderWeight&gt;))]
            public virtual Decimal? ExtWeight { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Row`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Row`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Row`1">
            <summary>
            Returns the value of the specified field.
            </summary>
            <typeparam name="Field">The field whose value is returned.</typeparam>
        </member>
        <member name="M:PX.Data.Row`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Row`1.WithDependencies`1">
            <summary>
            Creates additional dependencies for the formula on the provided dependency fields.
            Each time the dependency fields are updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula.
            </summary>
            <typeparam name="TDependentFields">The <see cref="T:PX.Common.TypeArray"/> of dependent <see cref="T:PX.Data.IBqlField"/>s.</typeparam>
        </member>
        <member name="M:PX.Data.Row`1.WithDependencies`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Row`1.WithDependencies`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.Row`1.WithDependency`1">
            <summary> 
            Creates an additional dependency for the formula – on the provided dependency field.
            Each time the dependency field is updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula.
            </summary>
            <typeparam name="TDependentField">The dependent field.</typeparam>
        </member>
        <member name="T:PX.Data.Row`1.WithDependencies`2">
            <summary> 
            Creates additional dependencies for the formula – on the provided two dependency fields.
            Each time the dependency fields are updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula.
            </summary>
            <typeparam name="TDependentField1">The first dependent field.</typeparam>
            <typeparam name="TDependentField2">The second dependent field.</typeparam>
        </member>
        <member name="T:PX.Data.Row`1.WithDependencies`3">
            <summary>
            Creates additional dependencies for the formula – on the provided three dependency fields.
            Each time the dependency fields are updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula.
            </summary>
            <typeparam name="TDependentField1">The first dependent field.</typeparam>
            <typeparam name="TDependentField2">The second dependent field.</typeparam>
            <typeparam name="TDependentField3">The third dependent field.</typeparam>
        </member>
        <member name="T:PX.Data.Row`1.WithDependencies`4">
            <summary>
            Creates additional dependencies for the formula – on the provided four dependency fields.
            Each time the dependency fields are updated, the formula is recalculated.
            The formula also depends on all other fields referenced in the formula. 
            </summary>
            <typeparam name="TDependentField1">The first dependent field.</typeparam>
            <typeparam name="TDependentField2">The second dependent field.</typeparam>
            <typeparam name="TDependentField3">The third dependent field.</typeparam>
            <typeparam name="TDependentField4">The fourth dependent field.</typeparam>
        </member>
        <member name="T:PX.Data.Selector`2">
            <summary>
            Searches for the <see cref="T:PX.Data.PXSelectorAttribute">PXSelector</see> attribute
            on the key field and calculates the provided expression for the data record
            currently referenced by the attribute.
            </summary>
            <typeparam name="KeyField">The key field to which the PXSelector attribute
            should be attached.</typeparam>
            <typeparam name="ForeignOperand">The expression that is calculated for the
            data record currently referenced by PXSelector.</typeparam>
            <example>
            <code>
            [PXFormula(typeof(
                Selector&lt;APPaymentChargeTran.entryTypeID,
                         Selector&lt;CAEntryType.accountID, Account.accountCD&gt;&gt;))]
            public virtual int? AccountID { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Selector`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Selector`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Foreign`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Foreign`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Foreign`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.SmartJoin`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.SmartJoin`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.SmartJoin`3">
            <exclude/>
        </member>
        <member name="M:PX.Data.Validate.Verify(PX.Data.PXCache,System.String,System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Validate`1">
            <summary>
            Raises the <tt>FieldVerifying</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified field changes.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <example>
            The code below enables validation of the <tt>UnitRate</tt> field
            on changes of the <tt>INUnit.UnitMultDiv</tt>.
            <code>
            [PXDBDecimal(6)]
            [PXDefault(TypeCode.Decimal,"1.0")]
            [PXUIField(DisplayName="Conversion Factor", Visibility=PXUIVisibility.Visible)]
            [PXFormula(typeof(Validate&lt;INUnit.unitMultDiv&gt;))]
            public virtual Decimal? UnitRate { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Validate`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Validate`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Validate`2">
            <summary>
            Raises the <tt>FieldVerifying</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <example>
            <code>
            [PXFormula(typeof(Validate&lt;ContractItem.maxQty, ContractItem.minQty&gt;))]
            public decimal? DefaultQty { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Validate`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Validate`3">
            <summary>
            Raises the <tt>FieldVerifying</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <typeparam name="V3">A data field.</typeparam>
            <example>
            <code>
            [PXFormula(Validate&lt;MyDAC.field1, MyDAC.field2, MyDAC.field3&gt;)]
            public virtual Decimal? ValidatedField { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Validate`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Validate`4">
            <summary>
            Raises the <tt>FieldVerifying</tt> event for the field to which the
            <tt>PXFormula</tt> attribute is attached once the specified fields change.
            </summary>
            <typeparam name="V1">A data field.</typeparam>
            <typeparam name="V2">A data field.</typeparam>
            <typeparam name="V3">A data field.</typeparam>
            <typeparam name="V4">A data field.</typeparam>
            <example>
            <code>
            [PXFormula(Validate&lt;MyDAC.field1, MyDAC.field2, MyDAC.field3, MyDAC.field4&gt;)]
            public virtual Decimal? ValidatedField { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Validate`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.IBqlUnaryFullText">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlUnaryFullTextExtensions">
            <exclude />
        </member>
        <member name="T:PX.Data.IBqlRankFullText">
            <exclude />
        </member>
        <member name="T:PX.Data.RankOf`1">
            <exclude />
        </member>
        <member name="M:PX.Data.RankOf`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.RankOf`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.FreeTextBase`4">
            <exclude />
        </member>
        <member name="M:PX.Data.FreeTextBase`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.FreeText`3">
            <summary>This class is used to find all records for which the value of the specified field matches the meaning (not just the exact wording) of the text that is specified in the operand. </summary>
            <typeparam name="Field">Specifies the field in which the text specified by <em>Operand</em> should be found.</typeparam>
            <typeparam name="Operand">Specifies the text to be found.</typeparam>
            <typeparam name="FieldKey">Specifies the key field.</typeparam>
            <remarks>The class can be used in the Where clause.</remarks>
            <example>
              <code title="Example" description="For example, the following statement illustrates the use of the FreeText function." lang="CS">
            PXSelect&lt;SearchIndex, 
              Where&lt;
                FreeText&lt;
                  SearchIndex.content, 
                  Required&lt;SearchIndex.content&gt;, 
                  SearchIndex.indexID&gt;&gt;&gt;</code>
              <code title="Example2" description="This statement is converted to the following SQL statement, where search_value is the value that is specified with the Required parameter." groupname="Example" lang="SQL">
            SELECT * FROM SearchIndex
              INNER JOIN FREETEXTTABLE(SearchIndex, SearchIndex.content, search_value) 
                AS ftt_SearchIndex ON ftt_SearchIndex.Key = SearchIndex.indexID</code>
            </example>
        </member>
        <member name="T:PX.Data.FreeText`4">
            <summary>This class is used to find all records for which the value of the specified field matches the meaning (not just the exact wording) of the text that is specified in the operand. The returned table contains the specified number of the highest-ranked matches. </summary>
            <typeparam name="Operand">Specifies the text to be found.</typeparam>
            <typeparam name="Field">Specifies the field in which the text specified by <em>Operand</em> should be found.</typeparam>
            <typeparam name="FieldKey">Specifies the key field.</typeparam>
            <remarks>The class can be used in the Where clause.</remarks>
            <example>
              <code title="Example" description="For example, the following statement illustrates the use of the FreeText function." lang="CS">
            PXSelect&lt;SearchIndex, 
              Where&lt;
                Contains&lt;
                  SearchIndex.content, 
                  Required&lt;SearchIndex.content&gt;, 
                  SearchIndex.indexID,
                  Argument&lt;int?&gt;&gt;&gt;&gt;</code>
              <code title="Example2" description="This statement is converted to the following SQL statement, where search_value is the value that is specified with the Required parameter, and number_of_records is the value that is specified with the Argument parameter." groupname="Example" lang="SQL">
            SELECT * FROM SearchIndex
              INNER JOIN FREETEXTTABLE(SearchIndex, SearchIndex.content, search_value, number_of_records) 
                AS ftt_SearchIndex ON ftt_SearchIndex.Key = SearchIndex.indexID</code>
            </example>
        </member>
        <member name="T:PX.Data.Contains`3">
            <summary>
            	<para>This function is used to find all records for which the value of the specified field contains the text that is specified in the operand. </para>
            </summary>
            <typeparam name="Field">Specifies the field in which the text specified by <em>Operand</em> should be found.</typeparam>
            <typeparam name="Operand">Specifies the text to be found.</typeparam>
            <typeparam name="FieldKey">Specifies the key field.</typeparam>
            <remarks>By using full-text search functions, you can perform a full-text search on full-text indexed columns containing character-based data types. The full-text
            search functions can be used in the Where clause.</remarks>
            <example>
            	<code title="Example" description="The following statement illustrates the use of the Contains function. This statement is converted to the following SQL statement, where search_value is the value that is specified with the Required parameter." lang="CS">
            PXSelect&lt;SearchIndex, 
              Where&lt;
                Contains&lt;
                  SearchIndex.content, 
                  Required&lt;SearchIndex.content&gt;, 
                  SearchIndex.indexID&gt;&gt;&gt;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM SearchIndex
              INNER JOIN CONTAINSTABLE(SearchIndex, SearchIndex.content, search_value) 
                AS ftt_SearchIndex ON ftt_SearchIndex.Key = SearchIndex.indexID</code>
            </example>
        </member>
        <member name="T:PX.Data.Contains`4">
            <summary>The function is used to find all records for which the value of the specified field contains the text that is specified in the operand. The returned table contains the specified number of the highest-ranked matches. e</summary>
            <typeparam name="Field">Specifies the field in which the text specified by <em>Operand</em> should be found.</typeparam>
            <typeparam name="Operand">Specifies the text to be found.</typeparam>
            <typeparam name="FieldKey">Specifies the key field.</typeparam>
            <remarks>The class can be used in the Where clause.</remarks>
            <example>
              <code title="Example" description="For example, the following statement illustrates the use of the Contains function." lang="CS">
            PXSelect&lt;SearchIndex, 
              Where&lt;
                Contains&lt;
                  SearchIndex.content, 
                  Required&lt;SearchIndex.content&gt;, 
                  SearchIndex.indexID,
                  Argument&lt;int?&gt;&gt;&gt;&gt;</code>
              <code title="Example2" description="This statement is converted to the following SQL statement, where search_value is the value that is specified with the Required parameter, and number_of_records is the value that is specified with the Argument parameter." groupname="Example" lang="SQL">
            SELECT * FROM SearchIndex
              INNER JOIN CONTAINSTABLE(SearchIndex, SearchIndex.content, search_value, number_of_records) 
                AS ftt_SearchIndex ON ftt_SearchIndex.Key = SearchIndex.indexID</code>
            </example>
        </member>
        <member name="T:PX.Data.LikeFullTextSubst`2">
            <exclude />
        </member>
        <member name="T:PX.Data.FullTextMatchAgainst`3">
            <exclude />
        </member>
        <member name="T:PX.Data.Abs`1">
            <summary>
            Returns module number.
            </summary>
            <typeparam name="Operand">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the usage of the Abs&lt;&gt; class in the calculation of a DAC field through the %PXDBCalced:PXDBCalcedAttribute% attribute." lang="CS">
            [PXDefault(TypeCode.Decimal, "0.0")]
            [PXDBCalced(
                typeof(Switch&lt;
                    Case&lt;Where&lt;LandedCostTran.aPDocType, Equal&lt;APDocType.debitAdj&gt;&gt;,
                        Abs&lt;LandedCostTran.curyLCAPAmount&gt;&gt;,
                    LandedCostTran.curyLCAPAmount&gt;),
                typeof(Decimal))]        
            [PXUIField(DisplayName = "Amount")]
            public virtual Decimal? CuryLCAPEffAmount { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Abs`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Abs`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Add`2">
            <summary>Returns the sum of the <tt>Operand1</tt> and <tt>Operand2</tt> values.</summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The following code shows a DAC field definition, which is calculated by the formula." lang="CS">
            [PXCurrency(typeof(ARPayment.curyInfoID), typeof(ARPayment.unappliedBal))]
            [PXUIField(DisplayName = "Available Balance", Visibility = PXUIVisibility.Visible, Enabled = false)]
            [PXFormula(typeof(Sub&lt;ARPayment.curyDocBal, Add&lt;ARPayment.curyApplAmt, ARPayment.curySOApplAmt&gt;&gt;))]
            public virtual Decimal? CuryUnappliedBal
            {
            ...
            }</code>
            	<code title="Example2" description="Below you can see the corresponding SQL query from the example above." groupname="Example" lang="SQL">
            (ARPayment.CuryDocBal - (ARPayment.CuryApplAmt + ARPayment.CurySOApplAmt))</code>
            </example>
        </member>
        <member name="M:PX.Data.Add`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Add`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Plus`2">
            <summary>Deprecated. Use the <see cref="T:PX.Data.Add`2">Add&lt;Operand1,Operand2&gt;</see> class instead.</summary>
        </member>
        <member name="M:PX.Data.Plus`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Plus`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BitwiseAnd`2">
            <summary>
            Returns the binary AND of <tt>Operand1</tt> and <tt>Operand2</tt>.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.BitwiseAnd`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.BitwiseAnd`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.BqlFunction">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFunction.getValue``1(PX.Data.IBqlCreator@,PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFunction.tryCreateOperand``1(PX.Data.IBqlCreator@)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFunction.getTypeCodeForOperand``1(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.BqlFunction.getTypeCodeForOperand(System.Type,PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="T:PX.Data.Case2`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Case2`2.Ensure``2(``0@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Case2`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Case2`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Case2`3">
            <exclude/>
        </member>
        <member name="M:PX.Data.Case2`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Case2`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Case`2">
            <summary>
            Specifies a condition that should be evaluated in the <tt>Switch</tt> clause, and
            the expression, which should be returned if the condition is satisfied.
            </summary>
            <typeparam name="Where_">The conditional expression, the <tt>Where</tt>
            class.</typeparam>
            <typeparam name="Operand">The value specified as field, constant, or
            function.</typeparam>
            <remarks>
            The condition is set by the <tt>Where</tt> clause. In the translation to SQL,
            <tt>Case</tt> is replaced with <tt>WHEN [conditions] THEN [expression]</tt>.
            </remarks>
            <seealso cref="T:PX.Data.Switch`1"></seealso>
            <seealso cref="T:PX.Data.Switch`2"></seealso>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field calculated at run time." lang="CS">
            [PXDBInt]
            [PXUIField(DisplayName = "Time")]
            [PXFormula(typeof(
                Switch&lt;
                    Case&lt;Where&lt;EPActivity.trackTime, NotEqual&lt;True&gt;&gt;, int0&gt;,
                    EPActivity.timeSpent&gt;))]
            public virtual Int32? TimeSpent { ... }</code>
            </example>
        </member>
        <member name="M:PX.Data.Case`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Case`3">
            <summary>
            Specifies a single condition to evaluate in the <tt>Switch</tt> clause
            and the expression to return if the condition is satisfied, and allows
            attaching more <tt>Case</tt> clauses.
            </summary>
            <typeparam name="Where_">The conditional expression, the <tt>Where</tt>
            class.</typeparam>
            <typeparam name="Operand">The value specified as field, constant, or
            function.</typeparam>
            <typeparam name="NextCase">The next <tt>Case</tt> clause.</typeparam>
            <seealso cref="T:PX.Data.Switch`1"/>
            <seealso cref="T:PX.Data.Switch`2"/>
            <example>
            The code below shows the usage of <tt>Switch</tt> and <tt>Case</tt>
            classes in <tt>OrderBy</tt>. Because of the expression with
            <tt>Switch</tt>, the rows with the <tt>FABookBalance.UpdateGL</tt> field equal
            to <tt>false</tt> will be placed before the rows with <tt>FABookBalance.UpdateGL</tt>
            equal to <tt>true</tt>.
            <code>
            [PXDefault(typeof(
                Search2&lt;FinPeriod.finPeriodID,
                    InnerJoin&lt;FABookBalance, On&lt;FABookBalance.deprFromPeriod, LessEqual&lt;FinPeriod.finPeriodID&gt;&gt;&gt;,
                    Where&lt;FABookBalance.assetID, Equal&lt;Current&lt;FixedAsset.assetID&gt;&gt;,
                        And&lt;FinPeriod.endDate, Greater&lt;FinPeriod.startDate&gt;&gt;&gt;,
                    OrderBy&lt;Asc&lt;Switch&lt;Case&lt;Where&lt;FABookBalance.updateGL, Equal&lt;True&gt;&gt;, int1&gt;, int0&gt;,
                        Desc&lt;FinPeriod.finPeriodID&gt;&gt;&gt;&gt;))]
            public virtual string PeriodID
            { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Case`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.Cases" -->
        <member name="T:PX.Data.DateDiff">
            <summary>
            Wraps string constants that can be used as the third argument in
            the <see cref="T:PX.Data.DateDiff`3"/> BQL function.
            </summary>
            <seealso cref="T:PX.Data.DateDiff.day"/>
            <seealso cref="T:PX.Data.DateDiff.hour"/>
            <seealso cref="T:PX.Data.DateDiff.minute"/>
            <seealso cref="T:PX.Data.DateDiff.second"/>
            <seealso cref="T:PX.Data.DateDiff.millisecond"/>
        </member>
        <member name="F:PX.Data.DateDiff.Year">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Quarter">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Month">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Week">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Day">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Hour">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Minute">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Second">
            <exclude/>
        </member>
        <member name="F:PX.Data.DateDiff.Millisecond">
            <exclude/>
        </member>
        <member name="T:PX.Data.DateDiff.year">
            <summary>
            Constant <tt>yyyy</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.quarter">
            <summary>
            Constant <tt>qq</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.month">
            <summary>
            Constant <tt>mm</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.week">
            <summary>
            Constant <tt>ww</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.day">
            <summary>
            Constant <tt>dd</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.hour">
            <summary>
            Constant <tt>hh</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.minute">
            <summary>
            Constant <tt>mi</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.second">
            <summary>
            Constant <tt>ss</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff.millisecond">
            <summary>
            Constant <tt>ms</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DateDiff`3">
            <summary>
            Returns the count of the datepart boundaries specified in UOM crossed
            between <tt>Operand1</tt> and <tt>Operand2</tt>. Equivalent to SQL function DATEDIFF.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <typeparam name="OUM">A string constant. Use nested classes of <tt>DateDiff</tt>.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;DateDiff&lt;Table1.field1, Table1.field2, DateDiff.hour&gt; Greater&lt;Zero&gt;&gt;&gt; records;</code>
            	<code title="" description="" lang="SQL">
            SELECT * FROM Table1
            WHERE DATEDIFF(hh, Table1.Field1, Table1.Field2) &gt; 0</code>
            </example>
        </member>
        <member name="M:PX.Data.DateDiff`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.DateDiff`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.DatePart">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Day">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.WeekDay">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.DayOfYear">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Hour">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Minute">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Week">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Quarter">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Second">
            <exclude/>
        </member>
        <member name="F:PX.Data.DatePart.Millisecond">
            <exclude/>
        </member>
        <member name="T:PX.Data.DatePart.day">
            <summary>
            Constant <tt>dd</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.weekDay">
            <summary>
            Constant <tt>dw</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.dayOfYear">
            <summary>
            Constant <tt>dy</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.hour">
            <summary>
            Constant <tt>hh</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.minute">
            <summary>
            Constant <tt>mi</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.week">
            <exclude/>
        </member>
        <member name="T:PX.Data.DatePart.month">
            <exclude/>
        </member>
        <member name="T:PX.Data.DatePart.quarter">
            <exclude/>
        </member>
        <member name="T:PX.Data.DatePart.second">
            <summary>
            Constant <tt>ss</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart.millisecond">
            <summary>
            Constant <tt>ms</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.DatePart`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.DatePart`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.DatePart`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Div`2">
            <summary>
            Returns the division of <tt>Operand1</tt> and <tt>Operand2</tt></summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field and the SQL expression that is inserted into the query to get the value for the DAC field." lang="CS">
            [PXDBCalced(
                typeof(Switch&lt;Case&lt;Where&lt;ARTran.qty, NotEqual&lt;decimal0&gt;&gt;, Div&lt;ARTran.tranCost, ARTran.qty&gt;&gt;, decimal0&gt;),
                typeof(Decimal))]
            [PXDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? UnitCost { get; set; }</code>
            	<code title="" description="" lang="SQL">
            CASE
                WHEN ARTran.Qty != 10m THEN ARTran.TranCost / ARTran.Qty
                ELSE 10m
            END</code>
            </example>
        </member>
        <member name="M:PX.Data.Div`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Div`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Divide`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Divide`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Divide`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.IsNull`2">
            <summary>
            Returns <tt>Operand1</tt> if it is not null, or <tt>Operand2</tt> otherwise.
            Equivalent to SQL function ISNULL.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a part of a DAC field definition. The formula here sets the CuryRUTROTUndistributedAmt field at run time to the difference of the ARInvoice.CuryRUTROTTotalAmt and ARInvoice.CuryRUTROTTotalAmt values and to decimal zero if any of these values is null." lang="CS">
            [PXFormula(typeof(
                IsNull&lt;Sub&lt;ARInvoice.curyRUTROTTotalAmt,
                           ARInvoice.curyRUTROTDistributedAmt&gt;,
                       decimal0&gt;))]
            public virtual decimal? CuryRUTROTUndistributedAmt { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.IsNull`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.IsNull`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.IsNumeric`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.IsNumeric`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Minus`1">
            <summary>
            Returns <tt>-Operand</tt> (multiplies by -1).
            </summary>
            <typeparam name="Operand">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the usage of the Minus&lt;&gt; class in the calculation of a DAC field through the %PXDBCalced:PXDBCalcedAttribute% attribute." lang="CS">
            [PXDefault(TypeCode.Decimal, "0.0")]
            [PXDBCalced(
                typeof(Switch&lt;
                    Case&lt;Where&lt;LandedCostTran.aPDocType, Equal&lt;APDocType.debitAdj&gt;&gt;,
                        Minus&lt;LandedCostTran.curyLCAPAmount&gt;&gt;,
                    LandedCostTran.curyLCAPAmount&gt;),
                typeof(Decimal))]        
            [PXUIField(DisplayName = "Amount")]
            public virtual Decimal? CuryLCAPEffAmount { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Minus`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Minus`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Minus1`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Minus1`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.Mod`2" -->
        <member name="M:PX.Data.Mod`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Mod`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Mult`2">
            <summary>Returns the multiplication of <tt>Operand1</tt> by <tt>Operand2</tt>.</summary>
        </member>
        <member name="M:PX.Data.Mult`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Mult`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Multiply`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Multiply`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Multiply`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.NullIf`2">
            <summary>
            Returns null if <tt>Operand1</tt> equals <tt>Operand2</tt> and
            returns <tt>Operand1</tt> if the two expression are not equal.
            Equivalent to SQL function NULLIF.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows part of the definition of a DAC field. The NullIf&lt;,&gt; class is used in the formula to prevent deletion by zero. If the APTran.qty equals zero, the formula returns null, so the CuryDiscCost value is null." lang="CS">
            [PXFormula(typeof(
                Div&lt;Sub&lt;APTran.curyTranAmt, APTran.curyDiscAmt&gt;,
                    NullIf&lt;APTran.qty, decimal0&gt;&gt;))]
            [PXUIField(DisplayName = "Disc. Unit Cost", Enabled = false, Visible = false)]
            public virtual Decimal? CuryDiscCost { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.NullIf`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.NullIf`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Power`2">
            <summary>
            Returns the value of <typeparamref name="Operand1"/> raised to the power of <typeparamref name="Operand2"/>.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
        </member>
        <member name="M:PX.Data.Power`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Power`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Replace`3">
            <summary>
            Replaces all occurrences of a string with another string in
            the source expression. Equivalent to SQL function REPLACE.
            </summary>
            <typeparam name="Operand">A field, constant, or function.</typeparam>
            <typeparam name="toReplace">A field, constant, or function.</typeparam>
            <typeparam name="replaceWith">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a part of a BQL command and the corresponding SQL code (provided str_AAA and str_BBB are classes representing string constants &quot;AAA&quot; and &quot;BBB&quot;)." lang="CS">
            Replace&lt;Table1.field1, str_AAA, str_BBB&gt;</code>
            	<code title="" description="" lang="SQL">
            REPLACE(Table1.Field1, "AAA", "BBB")</code>
            </example>
        </member>
        <member name="M:PX.Data.Replace`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Replace`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Round`2">
            <summary>
            Returns a numeric value rounded to the specified precision.
            Equivalent to SQL function ROUND.
            </summary>
            <typeparam name="Operand1">The numeric expression, given by a field, constant, or function.</typeparam>
            <typeparam name="Operand2">The precision, given by a field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field that is calculated at run time by a formula." lang="CS">
            [PXFormula(typeof(
                Sub&lt;Mult&lt;SOLine.openQty, SOLine.curyUnitPrice&gt;,
                    Round&lt;Div&lt;Mult&lt;Mult&lt;SOLine.openQty, SOLine.curyUnitPrice&gt;, SOLine.discPct&gt;, decimal100&gt;, SOLine.curyInfoID&gt;&gt;))]
            [PXDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? CuryOpenAmt { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.Round`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Round`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.RTrim`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.RTrim`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.RTrim`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.StrLen`1">
            <summary>
            Returns the number of characters in the <tt>Source</tt> string.
            </summary>
            <typeparam name="Source">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definiton of the FinYear field and the SQL expression that is inserted into the query to select the value for it." lang="CS">
            [PXDBCalced(typeof(StrLen&lt;AcctHist.finPeriodID), typeof(int))]
            public override int FinYearLength { ... }</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            LEN(AcctHist.FinPeriodID)</code>
            </example>
        </member>
        <member name="M:PX.Data.StrLen`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.StrLen`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Sub`2">
            <summary>
            Returns the subtraction of <tt>Operand2</tt> from <tt>Operand1</tt>.
            </summary>
            <typeparam name="Operand1">A field, constant, or function.</typeparam>
            <typeparam name="Operand2">A field, constant, or function.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definitinon of the CuryUnappliedBal field in the ARPayment DAC. The field is set to the difference of CuryDocBal and CuryApplAmt fields." lang="CS">
            [PXCurrency(typeof(APPayment.curyInfoID), typeof(APPayment.unappliedBal))]
            [PXUIField(DisplayName = "Unapplied Balance", Visibility = PXUIVisibility.Visible, Enabled = false)]
            [PXFormula(typeof(Sub&lt;APPayment.curyDocBal, APPayment.curyApplAmt&gt;))]
            public virtual Decimal? CuryUnappliedBal
            {
            ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.Sub`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Sub`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Minus`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.Minus`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.Minus`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Substring`3">
            <summary>
            Returns the <tt>Length</tt> characters from the <tt>Source</tt> string starting
            from the <tt>StartIndex</tt> index (the first character has index 1). 
            Equivalent to SQL function SUBSTRING.
            </summary>
            <typeparam name="Source">A field, constant, or function.</typeparam>
            <typeparam name="StartIndex">A field, constant, or function.</typeparam>
            <typeparam name="Length">A field, constant, or function.</typeparam>
            <example>
            The code below shows the definiton of the <tt>FinYear</tt> field and
            the SQL expression that is inserted into the query to select the value for it.
            <code>
            [PXDBCalced(typeof(Substring&lt;AcctHist.finPeriodID, CS.int1, CS.int4&gt;), typeof(string))]
            public override string FinYear { ... }
            </code>
            <code lang="SQL">
            SUBSTRING(AcctHist.FinPeriodID, 1, 4)
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Substring`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Substring`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Switch`2">
            <summary>
            Evaluates conditions and returns one of multiple possible values
            or the default value if none of the conditions is satisfied.
            Equivalent to SQL CASE-ELSE expression. Pairs condition-value
            are specified via the <tt>Case</tt> clause.
            </summary>
            <typeparam name="Case">Pairs condition-value specified via the
            <tt>Case</tt> class.</typeparam>
            <typeparam name="Default">The default value as field, constant,
            or function.</typeparam>
            <seealso cref="T:PX.Data.Case`2"></seealso>
            <seealso cref="T:PX.Data.Case`3"></seealso>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field and the SQL expression inserted into the query to calculate the field value." lang="CS">
            [PXDBCalced(
                typeof(Switch&lt;
                    Case&lt;Where&lt;APInvoice.paySel, Equal&lt;boolTrue&gt;&gt;, APInvoice.payDate&gt;,
                    APInvoice.dueDate&gt;),
                typeof(DateTime))]
            public virtual DateTime? EstPayDate { ... }</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            CASE
                WHEN APInvoice.PaySel = 1 THEN APInvoice.PayDate
                ELSE 0
            END</code>
            </example>
        </member>
        <member name="P:PX.Data.Switch`2.OuterField">
            <exclude/>
        </member>
        <member name="M:PX.Data.Switch`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Switch`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Switch`1">
            <summary>
            Evaluates conditions and returns one of multiple possible values.
            Equivalent to SQL CASE expression without the ELSE expression.
            The condition-value pairs are specified via the <tt>Case</tt> clause.
            </summary>
            <typeparam name="Case">Pairs condition-value specified via the
            <tt>Case</tt> class.</typeparam>
            <remarks>
            The <tt>Switch</tt> clause can be used as <tt>Operand</tt> in
            classes such as <tt>Where</tt> ad <tt>OrderBy</tt>.
            </remarks>
            <seealso cref="T:PX.Data.Case`2"></seealso>
            <seealso cref="T:PX.Data.Case`3"></seealso>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field calculated at run time." lang="CS">
            [PXFormula(typeof(Switch&lt;
                Case&lt;Where&lt;EPActivity.priority, Equal&lt;int0&gt;&gt;, EPActivity.priorityIcon.low,
                Case&lt;Where&lt;EPActivity.priority, Equal&lt;int2&gt;&gt;, EPActivity.priorityIcon.high&gt;&gt;&gt;))]
            public virtual String PriorityIcon { get; set; }</code>
            	<code title="Example2" description="This is translated into:" groupname="Example" lang="SQL">
            CASE
                WHEN Table.Field1 &lt; Table.Field2 THEN Table.Field3
                WHEN Table.Field1 = Table.Field2 THEN Table.Field4
                WHEN Table.Field1 &gt; Table.Field2 THEN Table.Field5
            END</code>
            </example>
        </member>
        <member name="M:PX.Data.Switch`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Switch`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.IIf`3">
            <exclude/>
        </member>
        <member name="M:PX.Data.IIf`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.IIf`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.IIf2`3">
            <exclude/>
        </member>
        <member name="M:PX.Data.IIf2`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.IIf2`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="T:PX.Data.TestIf`1">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.ArrayedSwitch`2" -->
        <member name="T:PX.Data.In`1">
            <summary>Checks if the preceding operand matches any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name. 
            The condition is true if the preceding operand is equal to a value from the array. Equivalent to the SQL operator IN.
            The In operator is used to replace multiple OR conditions in a BQL statement.</summary>
        </member>
        <member name="T:PX.Data.NotIn`1">
            <summary>Checks if the preceding operand does not match any value in the array returned by the operand that should be the Required or Optional BQL parameter with a specified field name. The condition is true if the array does not contain a value that is equal to the preceding operand. Equivalent to SQL operator NOT IN.</summary>
        </member>
        <member name="T:PX.Data.InBase`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.InBase`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.InBase`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.In2`1">
            <summary>Checks if the preceding operand matches any value in the results of the Search-based statement that is defined by the operand. The condition is true if the preceding operand is equal to a value from the result set. Equivalent to SQL statement <tt>IN(SELECT ... FROM ...)</tt>.</summary>
        </member>
        <member name="T:PX.Data.NotIn2`1">
            <summary>Checks if the preceding operand does not match any value in the results of the Search-based statement that is defined by the operand. The condition is true if
            the <tt>Search&lt;&gt;</tt> result set does not contain a value that is equal to the preceding operand.</summary>
        </member>
        <member name="T:PX.Data.InBase3">
            <exclude/>
        </member>
        <member name="M:PX.Data.InBase3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.InBase3`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.InBase3`1.#ctor">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`4">
            <summary>Checks if the specified field value matches any value in the list of constants defined by the operand. The list can contain from two to four constants. The condition is true if the field value is equal to a value from the list. Equivalent to <tt>(... OR ... OR ... OR ...)</tt> statement.</summary>
        </member>
        <member name="T:PX.Data.In3`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.In3`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotIn3`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotInHelper`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.NotInHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.InHelper`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.InHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.InHelperWithIsNull`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.InHelperWithIsNull">
            <exclude/>
        </member>
        <member name="T:PX.Data.InFieldClassActivated">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlTable">
            <summary>Represents a database table. The data access class (DAC) corresponding to the table must be derived from this interface.</summary>
            <example>
              <code title="Example" description="A DAC representing the &lt;tt&gt;Product&lt;/tt&gt; database table is defined in the following way." lang="CS">
            [System.SerializableAttribute()]
            public class Product : PX.Data.IBqlTable
            {
                //Declarations of fields
            }</code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.IBqlField" -->
        <member name="T:PX.Data.IBqlFieldOf`1">
            <summary>Represents a field declared in a specific <typeparamref name="TTable"/>. The field is either bound or not bound to a database column.</summary>
        </member>
        <member name="T:PX.Data.IDoNotParametrize">
            <summary>
            Prevents parametrization of that clause's generics
            </summary>
        </member>
        <member name="T:PX.Data.IBqlParameter">
            <summary>A BQL parameter.</summary>
        </member>
        <member name="M:PX.Data.IBqlParameter.GetReferencedType">
            <summary>Returns the type of the underlying field or argument.</summary>
            <returns>Referenced type.</returns>
        </member>
        <member name="P:PX.Data.IBqlParameter.TryDefault">
            <summary>Gets a value indicating whether the parameter raises <tt>FieldDefaulting</tt> for an empty value.</summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.HasDefault">
            <summary>Gets a value indicating whether the parameter is <tt>Current</tt> or <tt>Optional</tt>.</summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.IsVisible">
            <summary>Gets a value indicating whether the parameter is a required, an optional, or a method argument.</summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.IsArgument">
            <summary>Gets a value indicating whether the parameter is a method argument.</summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.IsContext">
            <summary>
            If the parameter is a value passed via the navigation context
            </summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.MaskedType">
            <summary>
            
            </summary>
        </member>
        <member name="P:PX.Data.IBqlParameter.NullAllowed">
            <summary>
            
            </summary>
        </member>
        <member name="T:PX.Data.IBqlCase">
            <summary>A case operator.</summary>
        </member>
        <member name="T:PX.Data.IBqlOperand">
            <summary>A BQL scalar operand: an expression involving multiple fields.</summary>
        </member>
        <member name="T:PX.Data.IBqlAggregateOperand">
            <summary>
            A BQL operand for aggregate function
            </summary>
        </member>
        <member name="T:PX.Data.IBqlConstants">
            <summary> A BQL constant value sequence</summary>
        </member>
        <member name="T:PX.Data.IBqlComparison">
            <summary>A BQL predicate on scalars.</summary>
        </member>
        <member name="T:PX.Data.IBqlBinary">
            <summary>A predicate that applies its operator to a previous value (up the hierarchy) and the stored operand. Returns a Boolean value (<tt>true</tt> or <tt>false</tt>).</summary>
        </member>
        <member name="T:PX.Data.IBqlUnary">
            <summary>A predicate that applies its operator to the stored operand.</summary>
        </member>
        <member name="T:PX.Data.IBqlPredicateChain">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlPortalRestrictor">
            <summary>
            Marks classes used in Support Portal to restrict entities by currently logged partner
            </summary>
        </member>
        <member name="T:PX.Data.IBqlQueryHintTableOptions">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlSortColumn">
            <summary>A BQL sort column (either <tt>Asc</tt> or <tt>Desc</tt>).</summary>
        </member>
        <member name="T:PX.Data.IBqlOrderBy">
            <summary>A BQL <tt>OrderBy</tt> clause.</summary>
        </member>
        <member name="T:PX.Data.IBqlJoin">
            <summary>A BQL <tt>Join</tt> clause.</summary>
        </member>
        <member name="M:PX.Data.IBqlJoin.AppendQuery(PX.Data.SQLTree.Query,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection,PX.Data.IBqlFunction[],System.Type)">
            <summary>Appends the SQL tree query that corresponds to the BQL <tt>Join</tt> clause to a BQL statement.</summary>
            <param name="query">The SQL tree query to be appended.</param>
            <param name="graph">A graph instance.</param>
            <param name="info">The information about the BQL command.</param>
        </member>
        <member name="M:PX.Data.IBqlJoin.getNextJoin">
            <summary>Returns the next BQL <tt>Join</tt> statement.</summary>
            <returns>An <see cref="T:PX.Data.IBqlJoin">IBqlJoin</see> type.</returns>
        </member>
        <member name="M:PX.Data.IBqlJoin.getJoinedTable">
            <summary>Returns the joined table.</summary>
            <returns>An <see cref="T:PX.Data.IBqlTable">IBqlTable</see> type.</returns>
        </member>
        <member name="M:PX.Data.IBqlJoin.getJoinCondition">
            <summary>Returns the BQL <tt>Join</tt> condition.</summary>
            <returns>A <see cref="T:PX.Data.IBqlUnary">IBqlUnary</see> type.</returns>
        </member>
        <member name="M:PX.Data.IBqlJoin.getJoinType">
            <summary>Returns the yaql type that corresponds to the BQL <tt>Join</tt> type.</summary>
        </member>
        <member name="T:PX.Data.IBqlWhere">
            <summary>A BQL <tt>Where</tt> clause.</summary>
        </member>
        <member name="T:PX.Data.IHasBqlWhere">
            <summary>
            The command that can contain a restriction by BQL where
            </summary>
        </member>
        <member name="T:PX.Data.IBqlOn">
            <summary>A BQL <tt>On</tt> clause.</summary>
        </member>
        <member name="T:PX.Data.IBqlFunction">
            <summary>A BQL aggregate or group function.</summary>
        </member>
        <member name="T:PX.Data.IBqlAggregate">
            <summary>A BQL aggregate expression.</summary>
        </member>
        <member name="T:PX.Data.IBqlHaving">
            <summary>A BQL having expression.</summary>
        </member>
        <member name="T:PX.Data.IBqlSelect">
            <summary>A BQL select command.</summary>
        </member>
        <member name="M:PX.Data.IBqlSelect.GetQueryInternal(PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <summary>Returns the BQL select command in the internal SQL tree format.</summary>
            <param name="graph">A <see cref="T:PX.Data.PXGraph">PXGraph</see> instance.</param>
            <param name="info">The information about the BQL select command.</param>
            <returns>The query in internal SQL tree format.</returns>
        </member>
        <member name="T:PX.Data.IBqlJoinedSelect">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlSearch">
            <summary>A BQL search command.</summary>
        </member>
        <member name="M:PX.Data.IBqlSearch.GetField">
            <summary>Returns the field inside the BQL search command.</summary>
            <returns>An <see cref="T:PX.Data.IBqlField">IBqlField</see> type.</returns>
        </member>
        <member name="M:PX.Data.IBqlSearch.GetFieldName(PX.Data.PXGraph)">
            <summary>Returns the name of the field inside the BQL search command.</summary>
            <param name="graph">A <see cref="T:PX.Data.PXGraph">PXGraph</see> instance.</param>
            <returns>A string with the name of the field.</returns>
        </member>
        <member name="M:PX.Data.IBqlSearch.GetQueryInternal(PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <summary>Returns the BQL search command in the internal SQL tree format.</summary>
            <param name="graph">A <see cref="T:PX.Data.PXGraph">PXGraph</see> instance.</param>
            <param name="info">The information about the BQL search command.</param>
            <returns>The query in internal SQL tree format.</returns>
        </member>
        <member name="M:PX.Data.IBqlSearch.GetFieldExpression(PX.Data.PXGraph)">
            <summary>Returns an SQL tree expression of the field inside the BQL search command.</summary>
            <param name="graph">A <see cref="T:PX.Data.PXGraph">PXGraph</see> instance.</param>
            <returns>An SQL tree expression.</returns>
        </member>
        <member name="T:PX.Data.IBqlCoalesce">
            <summary>A BQL coalesce command.</summary>
        </member>
        <member name="T:PX.Data.IBqlCreator">
            <summary>A BQL element creator.</summary>
        </member>
        <member name="M:PX.Data.IBqlCreator.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <summary>Appends the SQL tree expression that corresponds to the BQL command to an SQL tree query.</summary>
            <param name="exp">The SQL tree expression to be appended.</param>
            <param name="graph">A graph instance.</param>
            <param name="info">The information about the BQL command.</param>
            <param name="selection">The fragment of the BQL command that is translated to an SQL tree expression.</param>
        </member>
        <member name="T:PX.Data.IBqlCalculator">
            <summary>A BQL calculator.</summary>
        </member>
        <member name="M:PX.Data.IBqlCalculator.Calculate(PX.Data.PXCache,System.Object,System.Int32)">
            <summary>Calculates the expression.</summary>
            <param name="cache">A cache instance.</param>
            <param name="row">The row on which the calculation is performed.</param>
            <param name="digit">The number of significant digits (precision) in the return value. Set to -1 if you don't want to perform rounding.</param>
            <returns>Result of calculation or null.</returns>
        </member>
        <member name="T:PX.Data.IBqlDependent">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlTrigger">
            <exclude/>
        </member>
        <member name="T:PX.Data.IBqlUnboundAggregateCalculator">
            <summary>
            Bql aggregate calculator
            </summary>
        </member>
        <member name="M:PX.Data.IBqlUnboundAggregateCalculator.Calculate(PX.Data.PXCache,System.Object,PX.Data.IBqlCreator,System.Object[],System.Int32)">
            <summary>
            Calculates aggregate expression
            </summary>
            <param name="cache">Cache</param>
            <param name="fieldordinal">Position of the field for which this aggregate function is supplied</param>
            <param name="records">Set of records</param>
            <param name="digit">The number of significant digits (precision) in the return value, set to -1 if you don't want to perform Round operation</param>
            <returns>Result of calculation or null</returns>
        </member>
        <member name="T:PX.Data.ISqlTraceable">
            <summary>Marks BQL commands from which SQL command texts are traced.</summary>
        </member>
        <member name="T:PX.Data.IBqlSet">
            <summary>Marks BQL assignment commands in an update statement.</summary>
        </member>
        <member name="M:PX.Data.IBqlSet.AppendExpression(PX.Data.PXGraph,PX.Data.BqlCommandInfo,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{PX.Data.SQLTree.SQLExpression,PX.Data.SQLTree.SQLExpression}})">
            <summary>
            Fills the list passed with target-source SQLExpression pairs
            </summary>
            <param name="graph">A PXGraph instance.</param>
            <param name="tables">The list of tables used in the select statement.</param>
            <param name="pars">The list of parameters used in the statement.</param>
            <param name="assigments">
            List of target-source pairs
            </param>
            <param name="assignmets">The list of target-source pairs.</param>
        </member>
        <member name="T:PX.Data.IBqlUpdate">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlNone">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlCommon">
            <exclude/>
        </member>
        <member name="T:PX.Data.IFullTextJoin">
            <exclude/>
        </member>
        <member name="T:PX.Data.QueryHintUseIndexes">
            <exclude/>
        </member>
        <member name="T:PX.Data.UseIndexWhenJoinedAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.JoinBase`3">
            <summary>
            The base class for JOIN clauses.
            </summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="M:PX.Data.JoinBase`3.getNextJoin">
            <exclude/>
        </member>
        <member name="M:PX.Data.JoinBase`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.CrossJoin`1">
            <summary>Joins tables by using the <tt>CROSS JOIN</tt> clause. No joining condition is specified.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with CrossJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1, CrossJoin&lt;Table2&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1 CROSS JOIN Table2</code>
            </example>
        </member>
        <member name="T:PX.Data.CrossJoinSingleTable`1">
            <summary>Joins tables by using the CROSS JOIN clause. No joining condition is specified. Joins the first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
        </member>
        <member name="T:PX.Data.InnerJoin`2">
            <summary>Joins tables by using the INNER JOIN clause.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with InnerJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            INNER JOIN Table2
                ON Table2.Field2 = Table1.Field1</code>
            </example>
        </member>
        <member name="T:PX.Data.InnerJoinSingleTable`2">
            <summary>Joins tables by using the INNER JOIN clause. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
        </member>
        <member name="T:PX.Data.LeftJoin`2">
            <summary>Joins tables by using the LEFT JOIN clause.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with LeftJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                LeftJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            LEFT JOIN Table2
                ON Table2.Field2 = Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.LeftJoin`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.LeftJoinSingleTable`2">
            <summary>Joins tables by using the LEFT JOIN clause. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
        </member>
        <member name="M:PX.Data.LeftJoinSingleTable`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.RightJoin`2">
            <summary>Joins tables by using the RIGHT JOIN clause.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with RightJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                RightJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            RIGHT JOIN Table2
                ON Table2.Field2 = Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.RightJoin`2.getJoinType">
            <exclude />
        </member>
        <member name="T:PX.Data.RightJoinSingleTable`2">
            <summary>Joins tables by using the RIGHT JOIN clause. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
        </member>
        <member name="M:PX.Data.RightJoinSingleTable`2.getJoinType">
            <exclude />
        </member>
        <member name="M:PX.Data.RightJoinSingleTable`2.AppendQuery(PX.Data.SQLTree.Query,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection,PX.Data.IBqlFunction[],System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.FullJoin`2">
            <summary>Joins tables by using the FULL JOIN clause.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with FullJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                FullJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            FULL JOIN Table2
                ON Table2.Field2 = Table1.Field1</code>
            </example>
        </member>
        <member name="T:PX.Data.FullJoinSingleTable`2">
            <summary>Joins tables by using the FULL JOIN clause. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
        </member>
        <member name="T:PX.Data.CrossJoin`2">
            <summary>Joins tables by using the <tt>CROSS JOIN</tt> clause and allows joining one or several more tables.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with CrossJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                CrossJoin&lt;Table2&gt;,
                InnerJoin&lt;Table3, On&lt;Table3.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            CROSS JOIN Table2
            INNER JOIN Table3
                ON Table3.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="T:PX.Data.CrossJoinSingleTable`2">
            <summary>Joins tables by using the <tt>CROSS JOIN</tt> clause and allows joining one or several more tables. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="T:PX.Data.InnerJoin`3">
            <summary>Joins tables by using the <tt>INNER JOIN</tt> clause and allows joining one or several more tables.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with InnerJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;,
                LeftJoin&lt;Table3, On&lt;Table3.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            INNER JOIN Table2
                ON Table2.Field2 = Table1.Field1
            LEFT JOIN Table3
                ON Table3.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="T:PX.Data.InnerJoinSingleTable`3">
            <summary>Joins tables by using the <tt>INNER JOIN</tt> clause and allows joining one or several more tables. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="T:PX.Data.LeftJoin`3">
            <summary>Joins tables by using the <tt>LEFT JOIN</tt> clause and allows joining one or several more tables.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with LeftJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                LeftJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;,
                InnerJoin&lt;Table3, On&lt;Table3.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            LEFT JOIN Table2
                ON Table2.Field2 = Table1.Field1
            INNER JOIN Table3
                ON Table3.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="M:PX.Data.LeftJoin`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.LeftJoinSingleTable`3">
            <summary>Joins tables by using the <tt>LEFT JOIN</tt> clause and allows joining one or several more tables. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="M:PX.Data.LeftJoinSingleTable`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.RightJoin`3">
            <summary>Joins tables by using the <tt>RIGHT JOIN</tt> clause and allows joining one or several more tables.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with RightJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                RightJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;,
                InnerJoin&lt;Table3, On&lt;Table3.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            RIGHT JOIN Table2
                ON Table2.Field2 = Table1.Field1
            INNER JOIN Table3
                ON Table3.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="M:PX.Data.RightJoin`3.getJoinType">
            <exclude />
        </member>
        <member name="T:PX.Data.RightJoinSingleTable`3">
            <summary>Joins tables by using the <tt>RIGHT JOIN</tt> clause and allows joining one or several more tables. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="M:PX.Data.RightJoinSingleTable`3.getJoinType">
            <exclude />
        </member>
        <member name="M:PX.Data.RightJoinSingleTable`3.AppendQuery(PX.Data.SQLTree.Query,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection,PX.Data.IBqlFunction[],System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.FullJoin`3">
            <summary>Joins tables by using the <tt>FULL JOIN</tt> clause and allows joining one or several more tables.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with FullJoin and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                FullJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;,
                InnerJoin&lt;Table3, On&lt;Table3.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            FULL JOIN Table2
                ON Table2.Field2 = Table1.Field1
            INNER JOIN Table3
                ON Table3.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="T:PX.Data.FullJoinSingleTable`3">
            <summary>Joins tables by using the <tt>FULL JOIN</tt> clause and allows joining one or several more tables. Joins first table only.</summary>
            <typeparam name="Table">A DAC class that represents a database table.</typeparam>
            <typeparam name="On">The joining condition.</typeparam>
            <typeparam name="NextJoin">The next JOIN clause.</typeparam>
        </member>
        <member name="T:PX.Data.OnBase">
            <exclude/>
        </member>
        <member name="T:PX.Data.On`1">
            <summary>
            Specifies the joining condition for a JOIN clause. Corresponds to SQL keyword ON.
            </summary>
            <typeparam name="Operator">The conditional expression, the <tt>Not</tt>,
            <tt>Where</tt>, or <tt>Where2</tt> class.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with On and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2, On&lt;Not&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt;&gt;
                records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            INNER JOIN Table2 ON NOT (Table2.Field2 = Table1.Field1)</code>
            </example>
        </member>
        <member name="M:PX.Data.On`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.On`1.GetMatchingWhere">
            <exclude/>
        </member>
        <member name="T:PX.Data.On`2">
            <summary>
            Specifies a single joining condition for a JOIN clause. Corresponds to SQL keyword ON.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with On and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2, On&lt;Table2.field2, Equal&lt;Table1.field1&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            INNER JOIN Table2 ON Table2.Field2 = Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.On`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.On`2.GetMatchingWhere">
            <exclude/>
        </member>
        <member name="T:PX.Data.On`3">
            <summary>
            Specifies a single joining condition for a JOIN clause and allows
            continuing the chain of conditions using a logical operator.
            Corresponds to SQL keyword ON.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <typeparam name="NextOperator">The next conditional expression.</typeparam>
            <example>
            	<code title="Example" description="Below is an example of a data view with On and the corresponding SQL query." lang="CS">
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2,
                    On&lt;Table2.field1, Equal&lt;Table1.field2&gt;,
                    And&lt;Table2.field3, Equal&lt;Table1.field4&gt;&gt;&gt;&gt;&gt;
                records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            INNER JOIN Table2 ON
                Table2.Field1 = Table1.Field2
                AND Table2.Field3 = Table1.Field4</code>
            </example>
        </member>
        <member name="M:PX.Data.On`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.On`3.GetMatchingWhere">
            <exclude/>
        </member>
        <member name="T:PX.Data.On2`2">
            <summary>
            Specifies the joining condition for a JOIN clause and allows
            continuing the chain of conditions using a logical operator.
            Corresponds to SQL keyword ON.
            </summary>
            <typeparam name="Operator">The conditional expression, the <tt>Not</tt>,
            <tt>Where</tt>, or <tt>Where2</tt> class.</typeparam>
            <typeparam name="NextOperator">The next conditional expression.</typeparam>
            <example>
            	<code title="Example" description="The code below selects ARRegister data records for the current customer and joins ARAdjust data records. The second code sample shows the corresponding SQL query." lang="CS">
            PXResultset&lt;ARRegister&gt; docs = PXSelectJoin&lt;ARRegister,
                InnerJoin&lt;ARAdjust, On2&lt;
                    Where&lt;ARAdjust.adjgDocType, Equal&lt;ARRegister.docType&gt;, 
                        Or&lt;ARAdjust.adjgDocType, Equal&lt;ARDocType.payment&gt;, And&lt;ARRegister.docType, Equal&lt;ARDocType.voidPayment&gt;, 
                        Or&lt;ARAdjust.adjgDocType, Equal&lt;ARDocType.prepayment&gt;, And&lt;ARRegister.docType, Equal&lt;ARDocType.voidPayment&gt;&gt;&gt;&gt;&gt;&gt;, 
                    And&lt;ARAdjust.adjgRefNbr, Equal&lt;ARRegister.refNbr&gt;&gt;&gt;&gt;,
                Where&lt;ARRegister.customerID, Equal&lt;Current&lt;Customer.bAccountID&gt;&gt;&gt;&gt;.Select(this);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM ARRegister
            INNER JOIN ARAdjust ON
              ( ( ARAdjust.AdjgDocType = ARRegister.DocType
                    OR ARAdjust.AdjgDocType = "PMT" AND ARRegister.DocType = "RPM"
                    OR ARAdjust.AdjgDocType = "PPM" AND ARRegister.DocType = "RPM" )
                AND ARAdjust.AdjgRefNbr = ARRegister.RefNbr )
            WHERE ARRegister.CustomerID = [current Customer.BAccountID value]</code>
            </example>
        </member>
        <member name="M:PX.Data.On2`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.On2`2.GetMatchingWhere">
            <exclude/>
        </member>
        <member name="T:PX.Data.ParameterBase`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.ParameterBase`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.ParameterBase`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Current`1">
            <summary>
            	<para>Inserts the field value from the <tt>Current</tt> property of the cache. If the <tt>Current</tt> property is null or the field value is null, the parameter
            will be replaced by the default value.</para>
            </summary>
            <typeparam name="Field">The inserted field value.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view with Current and the corresponding SQL query. Where [value] is the TableID value from the Current property of the PXCache&lt;Table1&gt; object." lang="CS">
            // Declaration of views in a BLC
            PXSelect&lt;Table1&gt; MasterRecords;
            PXSelect&lt;Table2,
                Where&lt;Table2.tableID, Equal&lt;Current&lt;Table1.tableID&gt;&gt;&gt;&gt; DetailRecords;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table2
            WHERE Table2.TableID = [value]</code>
            </example>
        </member>
        <member name="P:PX.Data.Current`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.Current2`1">
            <summary>Works similar to <tt>Current</tt>, but the default value will not be inserted if NULL was passed to the parameter.</summary>
            <typeparam name="Field">The inserted field value.</typeparam>
        </member>
        <member name="P:PX.Data.Current2`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current2`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current2`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Current2`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.Required`1">
            <summary>
            	<para>Replaced by a value passed to the <tt>Select()</tt> method. The value type should match the type of the field specified as <tt>Field</tt>.</para>
            </summary>
            <typeparam name="Field">
            	<para>The inserted field value.</para>
            </typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXResutset&lt;Table&gt; res =
                new PXSelect&lt;Table1,
                        Where&lt;Table1.field1, Equal&lt;Required&lt;Table1.field1&gt;&gt;&gt;&gt;
                    .Select(this, val);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 = [the val variable value]</code>
            </example>
        </member>
        <member name="P:PX.Data.Required`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Required`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Required`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Required`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.Optional`1">
            <summary>Inserts the  <tt>Current</tt> property value of the cache or the value explicitly passed to the <tt>Select()</tt> method. In the latter case, the
            parameter causes raising of the <tt>FieldUpdating</tt> event for the specified field (which can modify or substitute the value). If the null value is passed or
            the <tt>Current</tt> property is null, the default value of the field is inserted.</summary>
            <typeparam name="Field">The inserted field value.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXResutset&lt;Table1&gt; res =
                new PXSelect&lt;Table1,
                        Where&lt;Table1.field1, Equal&lt;Optional&lt;Table2.field1&gt;&gt;&gt;&gt;
                    .Select(this, val);</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 = [value]</code>
            </example>
        </member>
        <member name="P:PX.Data.Optional`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.Optional2`1">
            <summary>Same as <tt>Optional</tt>, but in case the null value is passed to the parameter, doesn't insert the default value.</summary>
            <typeparam name="Field">The inserted field value.</typeparam>
        </member>
        <member name="P:PX.Data.Optional2`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional2`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional2`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Optional2`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.Context`1">
            <summary>
            	<para>Inserts a <tt>Navigation Context</tt> value. When you use this parameter, the <tt>FieldUpdating</tt> event will be triggered for the specified field. This
            event can modify or substitute the value.</para>
            </summary>
            <typeparam name="Field">The field to convert a value passed within context with <tt>FieldUpdating</tt> event.</typeparam>
            <example>
            	<code title="Example" description="In the following example a new value (val) will be assigned to the Field1." lang="CS">
            PXResutset&lt;Table1&gt; res =
                new PXSelect&lt;Table1,
                        Where&lt;Table1.field1, Equal&lt;Context&lt;Table2.field1&gt;&gt;&gt;&gt;
                    .Select(this, val);</code>
            	<code title="Example2" description="The expression above will be translated into the following SQL query." groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 = [value]</code>
            </example>
        </member>
        <member name="P:PX.Data.Context`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Context`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Context`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Context`1.IsArgument">
            <exclude/>
        </member>
        <member name="P:PX.Data.Context`1.IsContext">
            <exclude/>
        </member>
        <member name="T:PX.Data.Argument`1">
            <summary>
            	<para>You use this parameter to pass a particular data type value from the UI control to the associated data view.</para>
            </summary>
            <typeparam name="ArgumentType">A data type.</typeparam>
            <example>
            	<code title="Example" description="The example below shows a data view that contains all the records from the Field1 that are greater than the argument, the value of which is provided in the Select method." lang="CS">
            // Declaration of a data view in a graph
            PXSelect&lt;Table1, Where&lt;Table1.field1, Greater&lt;Argument&lt;int?&gt;&gt;&gt;&gt; Records;
            ...
            // Execution of the data view in code
            foreach(Table1 rec in Records.Select(5))
                ...</code>
            	<code title="Example2" description="The expression above will be translated into the following SQL query." groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 &gt; 5</code>
            </example>
        </member>
        <member name="P:PX.Data.Argument`1.TryDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Argument`1.HasDefault">
            <exclude/>
        </member>
        <member name="P:PX.Data.Argument`1.IsVisible">
            <exclude/>
        </member>
        <member name="P:PX.Data.Argument`1.IsArgument">
            <exclude/>
        </member>
        <member name="T:PX.Data.FieldNameParam">
            <exclude/>
        </member>
        <member name="M:PX.Data.FieldNameParam.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.FieldNameParam.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.FieldNameParam.PXRequiredField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Coalesce`2">
            <summary>
            Retrieves a value using <tt>Search1</tt> or, if it returns null, <tt>Search2</tt>.
            </summary>
            <typeparam name="Search1">The main <tt>Search</tt> expression.</typeparam>
            <typeparam name="Search2">The additional <tt>Search</tt> expression.</typeparam>
        </member>
        <member name="M:PX.Data.Coalesce`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.Coalesce`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.Coalesce`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.Coalesce`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.Coalesce`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchBase`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search`1">
            <summary>
            Retrieves a field value.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field. The Search&lt;&gt; class is used in the PXDefault attribute to specify the field whose value should be used as the default value for the CashCuryID field." lang="CS">
            [PXDBString(5, IsUnicode = true, BqlField = typeof(CashAccount.curyID))]
            [PXDefault(typeof(Search&lt;Company.baseCuryID&gt;))]
            [PXUIField(DisplayName = "Cash Account Currency")]
            public virtual string CashCuryID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search`2">
            <summary>
            Retrieves a field value, applying filtering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field." lang="CS">
            [PXDBString(10, IsUnicode = true)]
            [PXUIField(DisplayName = "Payment Method", Visibility = PXUIVisibility.SelectorVisible)]
            [PXSelector(
                typeof(Search&lt;PaymentMethod.paymentMethodID,
                    Where&lt;PaymentMethod.useForAP,Equal&lt;True&gt;&gt;&gt;),
                DescriptionField = typeof(CA.PaymentMethod.descr))]
            public virtual String PayTypeID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search`3">
            <summary>
            Retrieves a field from a table, applying filtering and ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a part of the DAC field definition. The Search&lt;,,&gt; class is used to specify the source of the default value for the FinPeriodID field." lang="CS">
            [PXDefault(typeof(
                Search&lt;FinPeriod.finPeriodID,
                    Where&lt;FinPeriod.aPClosed, Equal&lt;False&gt;&gt;,
                    OrderBy&lt;Desc&lt;FinPeriod.finPeriodID&gt;&gt;&gt;))]
            [PXUIField(DisplayName = "Fin. Period")]
            public virtual String FinPeriodID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search2`2">
            <summary>
            Retrieves a field from a table joined with other tables.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined Bql tables to select from</typeparam>
            <example>
            	<code title="Example" description="The code below shows a part of the DAC field definition. The Search2&lt;,&gt; class is used to specify the source of the default value for the DiscountAcctID field." lang="CS">
            [PXDefault(
                typeof(Search2&lt;VendorClass.discountAcctID,
                    InnerJoin&lt;APSetup, On&lt;VendorClass.vendorClassID, Equal&lt;APSetup.dfltVendorClassID&gt;&gt;&gt;&gt;),
                PersistingCheck = PXPersistingCheck.Nothing)]
            public virtual Int32? DiscountAcctID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search2`3">
            <summary>
            Retrieves a field from a table joined with other tables, applying filtering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the definition of a DAC field. The Search2&lt;,,&gt; class is used to specify the data records that can be selected in the lookup control in the UI and the field (VendorClassID) whose value is assigned to the DfltVendorClassID field." lang="CS">
            [PXDBString(10, IsUnicode = true)]
            [PXSelector(typeof(
                Search2&lt;VendorClass.vendorClassID,
                    LeftJoin&lt;EPEmployeeClass,
                        On&lt;EPEmployeeClass.vendorClassID, Equal&lt;VendorClass.vendorClassID&gt;&gt;&gt;,
                    Where&lt;EPEmployeeClass.vendorClassID, IsNull&gt;&gt;))]
            [PXUIField(DisplayName = "Default Vendor Class ID", Visibility=PXUIVisibility.Visible)]
            public virtual String DfltVendorClassID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search2`4">
            <summary>
            Retrieves a field from a table joined with other tables, applying filtering and ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a part of the DAC field definition. The Search2&lt;,,,&gt; class is used to specify the source of the default value for the AdjdWhTaxAcctID field." lang="CS">
            [PXDefault(typeof(
                Search2&lt;APTaxTran.accountID,
                    InnerJoin&lt;Tax, On&lt;Tax.taxID, Equal&lt;APTaxTran.taxID&gt;&gt;&gt;,
                    Where&lt;APTaxTran.tranType, Equal&lt;Current&lt;APAdjust.adjdDocType&gt;&gt;,
                        And&lt;APTaxTran.refNbr, Equal&lt;Current&lt;APAdjust.adjdRefNbr&gt;&gt;,
                        And&lt;Tax.taxType, Equal&lt;CSTaxType.withholding&gt;&gt;&gt;&gt;,
                    OrderBy&lt;Asc&lt;APTaxTran.taxID&gt;&gt;&gt;),
                PersistingCheck = PXPersistingCheck.Nothing)]
            public override Int32? AdjdWhTaxAcctID { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.Search3`2">
            <summary>
            Retrieves a field value, applying ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.Search3`3">
            <summary>
            Retrieves a field value from a table joined with other tables, applying ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.Search4`2">
            <summary>
            Retrieves an aggregated field value.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="P:PX.Data.Search4`2.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search4`3">
            <summary>
            Retrieves an aggregated field value, applying filtering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="P:PX.Data.Search4`3.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search4`4">
            <summary>
            Retrieves an aggregated field value, applying filtering and ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">Sort columns</typeparam>
        </member>
        <member name="P:PX.Data.Search4`4.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search5`3">
            <summary>
            Retrieves an aggregated field value from one table joined with other
            tables.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="P:PX.Data.Search5`3.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search5`4">
            <summary>
            Retrieves an aggregated field value from one table joined with other
            tables, applying filtering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="P:PX.Data.Search5`4.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search5`5">
            <summary>
            Retrieves an aggregated field value from one table joined with other
            tables, applying filtering and ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="P:PX.Data.Search5`5.Having">
            <exclude />
        </member>
        <member name="T:PX.Data.Search6`3">
            <summary>
            Retrieves an aggregated field value, applying ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Search6`3.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Search6`3.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.GetSelectType">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Search6`4">
            <summary>
            Retrieves an aggregated field value from one table joined with other
            tables, applying ordering.
            </summary>
            <typeparam name="Field">The DAC field whose value is selected.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Search6`4.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Search6`4.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.GetSelectType">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Search6`4.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.SelectBase`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.Select`1">
            <summary>
            Selects data records from a single table with filtering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
        </member>
        <member name="M:PX.Data.Select`1.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`1.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select`2">
            <summary>
            Selects data records from a single table with filtering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select`2.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`2.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select`3">
            <summary>
            Selects data records from a single table with filtering and ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select2`2">
            <summary>
            Selects data records from multiple tables.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
        </member>
        <member name="M:PX.Data.Select2`2.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select2`2.IsInner">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.#cctor">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`2.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select2`3">
            <summary>
            Selects data records from multiple tables with filtering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select2`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select2`3.IsInner">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.#cctor">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select2`4">
            <summary>
            Selects data records from multiple tables with filtering and ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select2`4.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select2`4.IsInner">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.#cctor">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select2`4.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select3`2">
            <summary>
            Selects data records from a single table with ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select3`2.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`2.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select3`3">
            <summary>
            Selects data records from multiple tables with ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select3`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select3`3.IsInner">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.#cctor">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select3`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select4`2">
            <summary>
            Selects aggregated values from a single table.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.Select4`2.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select4`2.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`2.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select4`3">
            <summary>
            Selects aggregated values from a single table with filtering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.Select4`3.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select4`3.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select4`4">
            <summary>
            Selects aggregated values from a single table with filtering and ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select4`4.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select4`4.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select4`4.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select5`3">
            <summary>
            Selects aggregated values from multiple tables.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.Select5`3.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`3.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`3.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`3.IsInner">
            <exclude />
        </member>
        <member name="T:PX.Data.Select5`4">
            <summary>
            Selects aggregated values from multiple tables with filtering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.Select5`4.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`4.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`4.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`4.IsInner">
            <exclude />
        </member>
        <member name="T:PX.Data.Select5`5">
            <summary>
            Selects aggregated values from multiple tables with filtering and ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select5`5.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`5.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select5`5.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select5`5.IsInner">
            <exclude />
        </member>
        <member name="T:PX.Data.Select6`3">
            <summary>
            Selects aggregated values from a single table with ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select6`3.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select6`3.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`3.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.Select6`4">
            <summary>
            Selects aggregated values from multiple tables with ordering.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.Select6`4.GetAggregates">
            <exclude />
        </member>
        <member name="P:PX.Data.Select6`4.Having">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereAnd``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereAnd(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereOr``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereOr(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.WhereNot">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.OrderByNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.OrderByNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.AddNewJoin(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.AggregateNew``1">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.AggregateNew(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.Select6`4.PX#Data#IBqlJoinedSelect#GetTail">
            <exclude />
        </member>
        <member name="P:PX.Data.Select6`4.IsInner">
            <exclude />
        </member>
        <member name="T:PX.Data.OrderBy`1">
            <summary>
            The clause for specifying how to order the result set of a BQL statetement, equivalent to the SQL clause ORDER BY. 
            </summary>
            <typeparam name="List">The fields to sort by, <tt>Asc</tt> or <tt>Desc</tt>
            class.</typeparam>
            <example>
            	<code title="]" description="An example of a data view with OrderBy and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull&gt;,
                OrderBy&lt;Asc&lt;Table1.field1&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 IS NOT NULL
            ORDER BY Table1.Field1</code>
            </example>
        </member>
        <member name="M:PX.Data.OrderBy`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.OrderBy`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.OrderBy`1.AppendQuery(PX.Data.SQLTree.Query,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.AscDescBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Asc`1">
            <summary>
            Indication of sorting in ascending order: from the least value to the largest value. The field to order by is specified in the Field type parameter. The clause itself is used as a type parameter in OrderBy.
            </summary>
            <typeparam name="Field">The field to sort by.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view with Asc with one type parameter and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull&gt;,
                OrderBy&lt;Asc&lt;Table1.field1&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 IS NOT NULL
            ORDER BY Table1.Field1</code>
            </example>
        </member>
        <member name="P:PX.Data.Asc`1.IsDescending">
            <exclude/>
        </member>
        <member name="T:PX.Data.Desc`1">
            <summary>
            Indication of sorting in descending order: from the largest value down to the least value. The field to order by is specified in the Field type parameter. The clause itself is used as a type parameter in OrderBy.
            </summary>
            <typeparam name="Field">The field to sort by.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view with Desc with one type parameter and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field2, Equal&lt;Table1.field1&gt;&gt;,
                OrderBy&lt;Desc&lt;Table1.field1&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field2 = Table1.Field1
            ORDER BY Table1.Field1 DESC</code>
            </example>
        </member>
        <member name="P:PX.Data.Desc`1.IsDescending">
            <exclude/>
        </member>
        <member name="T:PX.Data.Asc`2">
            <summary>
            A variant of the <tt>Asc</tt> clause used to add additional sort expression.
            </summary>
            <typeparam name="Field">The field to sort by.</typeparam>
            <typeparam name="NextField">The next field to sort by.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view with Asc with two type parameters and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull&gt;,
                OrderBy&lt;Asc&lt;Table1.field1,
                        Desc&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 IS NOT NULL
            ORDER BY Table1.Field1, Table1.Field2 DESC</code>
            </example>
        </member>
        <member name="P:PX.Data.Asc`2.IsDescending">
            <exclude/>
        </member>
        <member name="T:PX.Data.Desc`2">
            <summary>
            A variant of the <tt>Desc</tt> clause used to add additional sort expression.
            </summary>
            <typeparam name="Field">The field to sort by.</typeparam>
            <typeparam name="NextField">The next field to sort by.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view with Desc with two type parameters and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull&gt;,
                OrderBy&lt;Desc&lt;Table1.field1,
                        Asc&lt;Table1.field2&gt;&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 IS NOT NULL
            ORDER BY Table1.Field1 DESC, Tabl1e.Field2</code>
            </example>
        </member>
        <member name="P:PX.Data.Desc`2.IsDescending">
            <exclude/>
        </member>
        <member name="T:PX.Data.FieldNameAsc">
            <exclude/>
        </member>
        <member name="T:PX.Data.FieldNameDesc">
            <exclude/>
        </member>
        <member name="T:PX.Data.FieldNameAsc`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.FieldNameDesc`1">
            <exclude />
        </member>
        <member name="T:PX.Data.Not`1">
            <summary>
            Adds logical "not" to a unary operator. In the resulting SQL the group is
            preceded with NOT and surrounded by brackets.
            </summary>
            <typeparam name="Operator">The unary operator, <tt>Where</tt>, <tt>Where2</tt>,
            or <tt>Match</tt> class.</typeparam>
            <example>
            The code below shows the definition of a data view in a graph.
            The <tt>Not&lt;&gt;</tt> class is used in joining condition to add
            negation to the <see cref="T:PX.Data.Match`2">Match&lt;,&gt;</see> clause.
            <code>
            public PXSelectJoin&lt;Schedule,
                LeftJoin&lt;APRegisterAccess, On&lt;APRegisterAccess.scheduleID, Equal&lt;Schedule.scheduleID&gt;,
                    And&lt;APRegisterAccess.scheduled, Equal&lt;boolTrue&gt;,
                    And&lt;Not&lt;Match&lt;APRegisterAccess, Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                    Schedule_Header;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Not`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Not`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Not`2">
            <summary>
            Adds logical "not" to a single condition in a BQL statement.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <remarks>
            This <tt>Not</tt> class can be used to negate a single comparison.
            In many cases, you can avoid using this class as most of the comparison
            operators have their negative counterparts
            (for example, <tt>Equal</tt> and <tt>NotEqual</tt>).</remarks>
            <example>
            The code below shows the defition of a data view and the
            corresponding SQL query.
            <code>
            public PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull,
                    And&lt;Not&lt;Table1.field2, Equal&lt;Zero&gt;&gt;&gt;&gt;&gt; records;
            </code>
            <code lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NOT NULL
                AND NOT (Table1.Field2 = 0) )
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Not`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Not`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Not`3">
            <summary>
            Adds logical "not" to a conditional expression of a BQL statement. In the resulting SQL,
            the group is preceded with NOT and surrounded by brackets.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
            <example>
            The code below shows the defition of a data view and the
            corresponding SQL query.
            <code>
            public PXSelect&lt;Table1,
                Where&lt;Table1.field1, IsNotNull,
                    And&lt;Not&lt;Table1.field2, Equal&lt;Zero&gt;,
                        Or&lt;Table1.field2, Greater&lt;Table1.field1&gt;&gt;&gt;&gt;&gt;&gt; records;
            </code>
            <code lang="SQL">
            SELECT * FROM Table1
            WHERE ( Table1.Field1 IS NOT NULL
                AND NOT (Table1.Field2 = 0 OR Table1.Field2 &gt; Table1.Field1) )
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Not`3.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Not`3.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Not2`2">
            <summary>
            Adds logical "not" to a unary operator and continues the conditonal
            expression. In the resulting SQL the group is
            preceded with NOT and surrounded by brackets.
            </summary>
            <typeparam name="Operator">The unary operator, <tt>Where</tt>, <tt>Where2</tt>,
            or <tt>Match</tt> class.</typeparam>
            <typeparam name="NextOperator">The next conditional expression, <tt>And</tt>,
            <tt>And2</tt>, <tt>Or</tt>, or <tt>Or2</tt> class.</typeparam>
        </member>
        <member name="M:PX.Data.Not2`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Not2`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.FeatureInstalled`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.MatchWithBranch`1">
            <summary>
            Matches the data records whose field is null or holds the ID of a branch that
            can be accessed from within the current branch. The current branch is the
            branch to which the user is logged in.
            </summary>
            <typeparam name="Field">A field where to look for the branch ID whose rights
            should be checked.</typeparam>
        </member>
        <member name="M:PX.Data.MatchWithBranch`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MatchWithBranch`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.MatchWithOrganization`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MatchWithOrganization`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.MatchWithBranch`2">
            <summary>
            Matches the data records whose field is null or holds the ID of a branch that
            can be accessed from within the specified branch or its subsidiaries.
            </summary>
            <typeparam name="Field">A field where to look for the branch ID whose rights
            should be checked.</typeparam>
            <typeparam name="Parameter">The branch to check against the branch found in <tt>Field</tt>.</typeparam>
        </member>
        <member name="M:PX.Data.MatchWithBranch`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.MatchWithBranch`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="M:PX.Data.Inside`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.InsideBranchesOf`1">
            <summary>
            Builds a list of BranchID for a specific BAccountID
            </summary>
            <typeparam name="Operand">BAccountID to look for the BranchID.</typeparam>
        </member>
        <member name="T:PX.Data.Match`1">
            <summary>Matches only the data records the specified user has access rights for. The condition is applied to the data records of the first table mentioned in a BQL
            statement.</summary>
            <typeparam name="Parameter">The user, which is typically specified through the <tt>Current</tt> parameter.</typeparam>
            <example>
              <code title="" description="" lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Match&lt;Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt; records;</code>
            </example>
        </member>
        <member name="M:PX.Data.Match`1.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Match`1.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.Match`2">
            <summary>
            Matches only the data records the specified user has access rights for. The condition
            is applied to the data records of the table set with <tt>Table</tt>.
            </summary>
            <typeparam name="Table">The DAC whose data records are cheched by the condition.</typeparam>
            <typeparam name="Parameter">The user, typically, specified through the <tt>Current</tt>
            </typeparam>
            <remarks>
            This form of <tt>Match</tt> is used when the filtered table is added though a join clause.
            </remarks>
            <example>
            <code>
            PXSelectJoin&lt;Table1,
                InnerJoin&lt;Table2, On&lt;Table1.field1, Equal&lt;Table2.field2&gt;&gt;&gt;,
                Where&lt;Match&lt;Table2, Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt; records;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.Match`2.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Match`2.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.MatchUser">
            <summary>
            Matches only the data records the current user has access rights for.
            The condition is applied to the data records of the first table mentioned in a BQL statement.
            </summary>
        </member>
        <member name="T:PX.Data.MatchUserFor`1">
            <summary>
            Matches only the data records the current user has access rights for.
            The condition is applied to the data records of the table set with <tt>Table</tt>.
            </summary>
            <typeparam name="Table">The DAC whose data records are cheched by the condition.</typeparam>
        </member>
        <member name="T:PX.Data.Exists`1">
            <summary>
              <para>Is used to test for the existence of any record in a subquery. The class corresponds to the <tt>EXIST</tt> SQL statement.</para>
            </summary>
            <typeparam name="Select">An appropriate <tt>Select&lt;&gt;</tt> statement.</typeparam>
            <example>
              <code title="Example" description="" lang="CS">
            Exists&lt;Select&lt;
                   APTran,
                   Where&lt;
                    APTran.tranType, Equal&lt;TDocTypeField&gt;,
                    And&lt;APTran.refNbr, Equal&lt;TRefNbrField&gt;,
                    And&lt;Where&lt;
                     APTran.pONbr, IsNotNull,
                     Or&lt;APTran.pOLineNbr, IsNotNull,
                     Or&lt;APTran.receiptNbr, IsNotNull,
                     Or&lt;APTran.receiptLineNbr, IsNotNull&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>
              <code title="Example2" description="The BQL statement above will be translated into the following SQL query." groupname="Example" lang="SQL">
            EXISTS (SELECT [list of columns] FROM APTran
              WHERE 
              APTran.TranType = [value of TDocTypeField] 
              AND APTran.RefNbr = [value of TRefNbrField])
              AND (APTran.PONbr IS NOT NULL
                   OR APTran.POLineNbr  IS NOT NULL
                   OR APTran.ReceiptNbr  IS NOT NULL
                   OR APTran.ReceiptLineNbr  IS NOT NULL)</code>
            </example>
        </member>
        <member name="T:PX.Data.NotExists`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.CustomPredicate">
            <summary>
            Allows to easily define a shortcut for a custom predicate.
            Use it if you want to express one predicate through a combination of other ones.
            </summary>
        </member>
        <member name="M:PX.Data.CustomPredicate.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.CustomPredicate.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.Data.AreSame`2">
            <summary>
            Indicates whether operands are equal or both NULL.
            If you use a parameter placeholder such as <see cref="T:PX.Data.Required`1"/>
            as one of operands, you must pass such parameter value twice!
            If both operands are parameter placeholders, you must pass
            their values as shown: operand1, operand2, operand1, operand2
            </summary>
        </member>
        <member name="T:PX.Data.AreDistinct`2">
            <summary>
            Indicates whether operands are not equal or both NULL.
            If you use a parameter placeholder such as <see cref="T:PX.Data.Required`1"/>
            as one of operands, you must pass such parameter value twice!
            If both operands are parameter placeholders, you must pass
            their values as shown: operand1, operand2, operand1, operand2
            </summary>
        </member>
        <member name="T:PX.Data.EqualBaseCuryID`1">
            <summary>
            Builds a list of BranchID for a specific BAccountID
            </summary>
            <typeparam name="Operand">BAccountID to look for the BranchID.</typeparam>
        </member>
        <member name="T:PX.Data.Update`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.SetBase`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.Set`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Set`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.Where`1">
            <summary>
            Specifies an unary operator as the conditional expression for a BQL
            command.
            </summary>
            <typeparam name="UnaryOperator">The conditional expression, <tt>Not</tt>
            or <tt>Match</tt> class.</typeparam>
            <example>
            	<code title="Example" description="The code below shows a data view and the corresponding SQL query." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Not&lt;Table1.field1, IsNotNull,
                          And&lt;Table1.field2, LessEqual&lt;Table1.field1&gt;&gt;&gt;&gt;&gt;
                records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE NOT ( Table1.Field1 IS NOT NULL
                        AND Table1.Field2 &lt;= Table1.Field1 )</code>
            </example>
        </member>
        <member name="M:PX.Data.Where`1.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.Where`1.#ctor(PX.Data.IBqlUnary)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Where`1.UseParenthesis">
            <exclude/>
        </member>
        <member name="T:PX.Data.Where2`2">
            <summary>
            Specifies a complex conditional expression for a BQL command that
            typically joins two groups of conditions.
            </summary>
            <typeparam name="UnaryOperator">The first conditional expression.</typeparam>
            <typeparam name="NextOperator">The logical operator appending the second
            conditional expression.</typeparam>
            <example>
            	<code title="Example" description="A filtering expression of the form ((C1 and C2) or (C3 and C4)), where C with a number denotes a single condition, is implemented by the BQL code of the following form:" lang="CS">
            Where2&lt;Where&lt;C1,
                       And&lt;C2&gt;&gt;,
                Or&lt;Where&lt;C3,
                       And&lt;C4&gt;&gt;&gt;&gt;</code>
            	<code title="Example2" description="A full expression of this type may look something like this:" groupname="Example" lang="CS">
            Where2&lt;Where&lt;Table.field2, Greater&lt;Table.field1&gt;
                       And&lt;Table.field3, Between&lt;Table.field1, Table.field2&gt;&gt;&gt;,
                Or&lt;Where&lt;Table.field3, IsNull,
                       And&lt;Table.field1, Equal&lt;Table.field2&gt;&gt;&gt;&gt;&gt;</code>
            	<code title="Example3" description="This is translated into:" groupname="Example2" lang="SQL">
            WHERE ( Table.Field2 &gt; Table.Field1
                    AND Table.Field3 BETWEEN Table.Field1 AND Table.Field2 )
               OR ( Table.Field3 IS NULL
                    AND Table.Field1 = Table.Field2 )</code>
            </example>
        </member>
        <member name="M:PX.Data.Where2`2.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.Where2`2.#ctor(PX.Data.IBqlUnary,PX.Data.IBqlBinary)">
            <exclude/>
        </member>
        <member name="M:PX.Data.Where2`2.UseParenthesis">
            <exclude/>
        </member>
        <member name="T:PX.Data.Where`2">
            <summary>
            Specifies a single filtering condition for a BQL command.
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, Equal&lt;Table1.field2&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1 WHERE Table1.Field1 = Table1.Field2</code>
            </example>
        </member>
        <member name="M:PX.Data.Where`2.UseParenthesis">
            <exclude/>
        </member>
        <member name="T:PX.Data.Where`3">
            <summary>
            Specifies a particular condition in the two first type parameters and
            attaches one more logical operator (<tt>And</tt> or <tt>Or</tt>).
            </summary>
            <typeparam name="Operand">The compared operand.</typeparam>
            <typeparam name="Comparison">The comparison operator.</typeparam>
            <typeparam name="NextOperator">The next conditional expression.</typeparam>
            <example>
            	<code title="Example" description="An example of a data view and the corresponding SQL query are given below." lang="CS">
            PXSelect&lt;Table1,
                Where&lt;Table1.field1, Greater&lt;Table1.field2&gt;,
                    And&lt;Table1.field3, IsNull&gt;&gt;&gt; records;</code>
            	<code title="Example2" description="" groupname="Example" lang="SQL">
            SELECT * FROM Table1
            WHERE Table1.Field1 &gt; Table1.Field2
                AND Table.Field3 IS NULL</code>
            </example>
        </member>
        <member name="M:PX.Data.Where`3.UseParenthesis">
            <exclude/>
        </member>
        <member name="T:PX.Data.Where2Np`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.WhereNp`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.WhereNp`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.WhereBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.WhereBase`3">
            <exclude/>
        </member>
        <member name="P:PX.Data.BusinessProcess.Event.Rows">
            <summary>
            Collection of matched old/new rows. First item is old row, second item is new row
            </summary>
        </member>
        <member name="T:PX.Data.BusinessProcess.ValueWithInternalTypedConverter">
            <exclude/>
        </member>
        <member name="T:PX.Data.KeysCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXEntryStatus">
            <summary>The enumeration that specifies a data record status. A data record status changes as a result of manipulations with the data record: insertion, update, or
            removal.</summary>
            <remarks>
              <para>The table below shows data record status update depending on different <tt>PXCache</tt> methods.</para>
              <table>
                <tbody>
                  <tr>
                    <td>
                      <para align="center">
                        <strong>Original Status</strong>
                      </para>
                    </td>
                    <td>
                      <para align="center">
                        <strong>Previous status</strong>
                      </para>
                    </td>
                    <td>
                      <para align="center">
                        <strong>PXCache Method Invoked</strong>
                      </para>
                    </td>
                    <td>
                      <para align="center">
                        <strong>Status After</strong>
                      </para>
                    </td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>Insert() / Insert(object)</td>
                    <td>Inserted</td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>Inserted</td>
                    <td>Update(object)</td>
                    <td>Inserted</td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>Inserted</td>
                    <td>Delete(object)</td>
                    <td>InsertedDeleted</td>
                  </tr>
                  <tr>
                    <td>Inserted</td>
                    <td>InsertedDeleted</td>
                    <td>Insert(object) / Update(object)</td>
                    <td>Inserted</td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>Notchanged</td>
                    <td>Update(object)</td>
                    <td>Updated</td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>Notchanged</td>
                    <td>Delete(object)</td>
                    <td>Deleted</td>
                  </tr>
                  <tr>
                    <td>Notchanged</td>
                    <td>Deleted</td>
                    <td>Insert(object) / Update(object)</td>
                    <td>Updated</td>
                  </tr>
                  <tr>
                    <td>N/A</td>
                    <td>Updated</td>
                    <td>Delete(object)</td>
                    <td>Deleted</td>
                  </tr>
                  <tr>
                    <td>Updated</td>
                    <td>Deleted</td>
                    <td>Insert(object) / Update(object)</td>
                    <td>Updated</td>
                  </tr>
                </tbody>
              </table>
            </remarks>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Notchanged">
            <summary>The data record has not been modified since it was placed in
            the <tt>PXCache</tt> object or since the last time the <tt>Save</tt>
            action was invoked (triggering execution of BLC's
            <tt>Actions.PressSave()</tt>).</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Updated">
            <summary>The data record has been modified, and the <tt>Save</tt>
            action has not been invoked. After the changes are saved to the
            database, the data record status changes to
            <tt>Notchanged</tt>.</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Inserted">
            <summary>The data record is new and has been added to the
            <tt>PXCache</tt> object, and the <tt>Save</tt> action has not been
            invoked. After the changes are saved to the database, the data record
            status changes to <tt>Notchanged</tt>.</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Deleted">
            <summary>The data record is not new and has been marked as
            <tt>Deleted</tt> within the <tt>PXCache</tt> object. After the changes
            are saved, the data record is deleted from the database and removed
            from the <tt>PXCache</tt> object.</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.InsertedDeleted">
            <summary>The data record is new and has been added to the
            <tt>PXCache</tt> object and then marked as <tt>Deleted</tt> within the
            <tt>PXCache</tt> object. After the changes are saved, the data record
            is removed from the <tt>PXCache</tt> object.</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Held">
            <summary>An <tt>Unchanged</tt> data record can be marked as
            <tt>Held</tt> within the <tt>PXCache</tt> object to avoid being
            collected during memory cleanup. <tt>Updated</tt>, <tt>Inserted</tt>,
            <tt>Deleted</tt>, <tt>InsertedDeleted</tt>, or <tt>Held</tt> data
            records are never collected during memory cleanup. Any
            <tt>Notchanged</tt> data record can be removed from the
            <tt>PXCache</tt> object during memory cleanup.</summary>
        </member>
        <member name="F:PX.Data.PXEntryStatus.Modified">
            <summary>This flag is passed to the <tt>PXCache&lt;&gt;.SetStatus</tt>
            method to indicate that the data record must be saved. The final status assigned
            to the data record (whether <tt>Inserted</tt> or <tt>Updated</tt>) depends
            on the initial status of the data record.</summary>
        </member>
        <member name="T:PX.Data.PXCollection`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCollection`1.Entry">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCollection`1.Enumerator">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCollection`1.PlaceInserted(`0,System.Boolean@)">
            <summary>
            places row into collection, returns the same value on success.<br/>
            returns null if cache contains row with incompatible status
            </summary>
            <param name="value"></param>
            <param name="wasDeleted"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.HashHelpers">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXHashtable">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXHashtable.Entry">
            <exclude/>
        </member>
        <member name="T:PX.Data.CompareIgnoreCase">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBOperation">
            <summary>This enumeration specifies the type of a T-SQL statement generated by the Acumatica Data Access Layer. 
            The enumeration is used to indicate the type of the operation and the option set for the operation. 
            <code>PXDBOperation</code> supports the <code>FlagsAttribute</code> attribute, which allows <code>PXDBOperation</code> members to be represented as bit fields in the enumeration value.
            </summary>
            <example>
            	<para></para>
            	<code title="Example" description="Getting the type of an operation:" lang="CS">
            protected virtual void DACName_FieldName_CommandPreparing(
                PXCache sender, PXCommandPreparingEventArgs e)
            {
                PXDBOperation operationKind = e.Operation &amp; PXDBOperation.Command;
            }</code>
            	<code title="Example2" description="Getting the option set for an operation:" groupname="Example" lang="CS">
            protected virtual void DACName_FieldName_CommandPreparing(
                PXCache sender, 
                PXCommandPreparingEventArgs e)
            {
                PXDBOperation operationOptions = e.Operation &amp; PXDBOperation.Option;
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXDBOperation.Select">
            <summary>The SELECT statement.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Update">
            <summary>The UPDATE statement.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Insert">
            <summary>The INSERT statement.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Delete">
            <summary>The DELETE statement.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Command">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBOperation.Normal">
            <summary>The operation has no options set.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.GroupBy">
            <summary>Specifies an aggregate operation.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Internal">
            <summary>The result of the operation cannot be used to prepare
            the external representation.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.External">
            <summary>The operation contains a sorting, filter, or search query across
            any DAC field visible in the UI.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Second">
            <summary>The operation is changing the system data visibility and transferring
            it from the system data segment to the customer data segment.</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.ReadOnly">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBOperation.SubselectForExport">
            <summary>The operation is select in massdataexport scenario and subselect for field required</summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Option">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBOperation.SelectClause">
            <summary>
            The operation is in the SELECT statement.
            </summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.WhereClause">
            <summary>
            The operation is in the WHERE clause.
            </summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.OrderByClause">
            <summary>
            The operation is in the ORDER BY clause.
            </summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.GroupByClause">
            <summary>
            The operation is in the GROUP BY clause.
            </summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.NestedSelectInReport">
            <summary>
            The operation is in a nested SELECT statement.
            </summary>
        </member>
        <member name="F:PX.Data.PXDBOperation.Place">
            <exclude />
        </member>
        <member name="F:PX.Data.PXDBOperation.ReadItem">
            <exclude />
        </member>
        <member name="T:PX.Data.PXAttributeLevel">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXAttributeLevel.Type">
            <summary>
            Original attributes of a DAC.
            Cannot be obtained directly.<para/>
            Are instantiated once for each type on 
            first instantiating of its <see cref="T:PX.Data.PXCache"/><para/>
            Attributes of this level cannot be modified in runtime.
            </summary>
        </member>
        <member name="F:PX.Data.PXAttributeLevel.Cache">
            <summary>
            Attributes that copied from attributes of <see cref="F:PX.Data.PXAttributeLevel.Type"/>,
            merged with <see cref="T:PX.Data.PXGraph"/> attributes, relevant to the DAC, 
            and then linked to a certain <see cref="T:PX.Data.PXCache"/> instance.<para/>
            Are instantiated on every <see cref="T:PX.Data.PXCache"/> instantiating 
            by copying of <see cref="F:PX.Data.PXAttributeLevel.Type"/> attributes.<para/>
            Attributes of this level can be modified in runtime, usually by calling
            attributes static methods that have signature corresponding to
            <code>"AttributeName.SetSomeValue(PXCache sender, object row, SomeType someValue)"</code>
            and passing <code>null</code> as a second parameter.
            </summary>
        </member>
        <member name="F:PX.Data.PXAttributeLevel.Item">
            <summary>
            Attributes that copied from attributes of <see cref="F:PX.Data.PXAttributeLevel.Cache"/>,
            and then linked to a certain row instance in a <see cref="T:PX.Data.PXCache"/>.<para/>
            Are instantiated by copying of <see cref="F:PX.Data.PXAttributeLevel.Cache"/> attributes 
            at certain data row attributes demanding.<para/>
            Attributes of this level can be modified in runtime, usually by calling
            attributes static methods that have signature corresponding to
            <code>"AttributeName.SetSomeValue(PXCache sender, object row, SomeType someValue)"</code>
            and passing a certain row as a second parameter.
            </summary>
        </member>
        <member name="T:PX.Data.PXCacheRights">
            <summary>Maps the user role's access rights for a specific
            <tt>PXCache&lt;&gt;</tt> object.</summary>
            <example>
            The following example uses the enumeration value to configure access rights for the button,
            which represents a graph action in the user interface. The user with the <tt>Select</tt> rights
            for the <tt>ApproveBillsFilter</tt> cache can see the <b>View Document</b> button in the user interface. 
            For the user with the <tt>Update</tt> rights for the <tt>ApproveBillsFilter</tt> cache, the <b>View Document</b> button is also available.
            <code>
            public PXAction&lt;ApproveBillsFilter&gt; ViewDocument;
            [PXUIField(DisplayName = "View Document",
                MapEnableRights = PXCacheRights.Update,
                MapViewRights = PXCacheRights.Select)]
            [PXButton]
            public virtual IEnumerable viewDocument(PXAdapter adapter)
            {
            ...
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXCacheRights.Denied">
            <summary>Matches the roles for whom access to a <tt>PXCache</tt>
            object is denied.</summary>
        </member>
        <member name="F:PX.Data.PXCacheRights.Select">
            <summary>Matches the roles that are allowed to read data records of
            the DAC type corresponding to the <tt>PXCache&lt;&gt;</tt> object.</summary>
        </member>
        <member name="F:PX.Data.PXCacheRights.Update">
            <summary>Matches the roles that are allowed to update data records of
            the DAC type corresponding to the <tt>PXCache&lt;&gt;</tt> object.</summary>
        </member>
        <member name="F:PX.Data.PXCacheRights.Insert">
            <summary>Matches the roles that are allowed to insert data records of
            the DAC type corresponding to the <tt>PXCache&lt;&gt;</tt> object.</summary>
        </member>
        <member name="F:PX.Data.PXCacheRights.Delete">
            <summary>Matches the roles that are allowed to delete data records of
            the DAC type corresponding to the <tt>PXCache&lt;&gt;</tt> object.</summary>
        </member>
        <member name="T:PX.Data.PXCacheRightsPrioritized">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMemberRights">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCacheOperation">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTranStatus">
            <summary>Describes the current status of a transaction
            scope.</summary>
        </member>
        <member name="F:PX.Data.PXTranStatus.Open">
            <summary>The status of the transaction is unknown, because some
            participants still have to be polled.</summary>
        </member>
        <member name="F:PX.Data.PXTranStatus.Completed">
            <summary>The changes associated with the transaction scope have been
            successfully committed to the database.</summary>
        </member>
        <member name="F:PX.Data.PXTranStatus.Aborted">
            <summary>The changes within the transaction scope have been dropped
            because of an error.</summary>
        </member>
        <member name="T:PX.Data.PXClearOption">
            <summary>Defines possible options of clearing the graph data through
            the <see cref="M:PX.Data.PXGraph.Clear(PX.Data.PXClearOption)">Clear(PXClearOption)</see>
            method.</summary>
        </member>
        <member name="F:PX.Data.PXClearOption.PreserveData">
            <summary>Data records are preserved.</summary>
        </member>
        <member name="F:PX.Data.PXClearOption.PreserveTimeStamp">
            <summary>The timestamp is preserved.</summary>
        </member>
        <member name="F:PX.Data.PXClearOption.PreserveQueries">
            <summary>The query cache is preserved.</summary>
        </member>
        <member name="F:PX.Data.PXClearOption.ClearAll">
            <summary>Everything is removed.</summary>
        </member>
        <member name="F:PX.Data.PXClearOption.ClearQueriesOnly">
            <summary>Only the query cache is cleared.</summary>
        </member>
        <member name="T:PX.Data.PXSpecialButtonType">
            <summary>Defines possible special types of a button. The enumeration
            is used to set <tt>PXButton</tt> attribute properties.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Default">
            <summary>The button does not have a special type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Save">
            <summary>The button has the <b>Save</b> button type. In particular, a graph searches buttons of this type when the graph's <tt>Actions.PressSave()</tt> method is
            invoked.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.SaveNotClose">
            <summary>The button has the <b>Save &amp; Close</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Cancel">
            <summary>The button has the <b>Cancel</b> button type. In particular,
            a graph searches buttons of this type when the graph's
            <tt>Actions.PressCancel()</tt> method is invoked.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Refresh">
            <summary>The button has the <b>Refresh</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.CopyPaste">
            <summary>The button has the <b>CopyPaste</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Report">
            <summary>The button has the <b>Report</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.First">
            <summary>The button has the <strong>Go to First Record </strong>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Next">
            <summary>The button has the <strong>Go to Next Record</strong> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Prev">
            <summary>The button has the <b>Go to Previous Record </b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Last">
            <summary>The button has the <strong>Go to Last Record</strong> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Insert">
            <summary>The button has the <b>Add New Record </b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Delete">
            <summary>The button has the <b>Delete</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Approve">
            <summary>The button has the <b>Approve</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ApproveAll">
            <summary>The button has the <b>Approve All</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Process">
            <summary>The button has the <b>Process</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ProcessAll">
            <summary>The button has the <b>Process All</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.Schedule">
            <summary>The button has the <b>Schedule</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.EditDetail">
            <summary>The button has the <b>Switch Between Grid and Form </b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ActionsFolder">
            <summary>The button has the <b>ActionsFolder</b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.InquiriesFolder">
            <summary>The button has the <b>InquiriesFolder</b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ReportsFolder">
            <summary>The button has the <b>ReportsFolder</b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ToolbarFolder">
            <summary>The button has the <b>ToolbarFolder</b>button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.SidePanelFolder">
            <summary>The button has the <b>SidePanelFolder</b> button type.</summary>
        </member>
        <member name="F:PX.Data.PXSpecialButtonType.ApiCallback">
            <summary>The button has the <b>ApiCallback</b> button type.</summary>
        </member>
        <member name="T:PX.Data.PXUIErrorInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXErrorInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRowUpdating">
            <summary>
              <para>The delegate for the <tt>RowUpdating</tt> event.</para>
            </summary>
            <param name="sender">
              <para>Required. The cache object that generated the event.</para>
            </param>
            <param name="e">
              <para>Required. The instance of the <see cref="T:PX.Data.PXRowUpdatingEventArgs">PXRowUpdatingEventArgs</see> type
              that holds data for the <tt>RowUpdating</tt> event.</para>
            </param>
            <remarks>
              <para>The <tt>RowUpdating</tt> event is generated before the data record is actually updated
              in the <tt>PXCache</tt> object during an update initiated in either of the following cases:</para>
              <list type="bullet">
                <item>In the UI or via Web Service API.</item>
                <item>When the following <tt>PXCache</tt> class methods were invoked:<ul><li><tt>Update(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>RowUpdating</tt> event handler is used to evaluate a data record that is being updated
              and to cancel the update operation if the data record does not
            fit the business logic requirements.</para>
              <para>The following execution order is used for the <tt>RowUpdating</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowUpdating(
                PXCache sender, 
                PXRowUpdatingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowUpdating&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to evaluate the data record that is being updated, cancel the update operation, and show a message box." lang="CS">
            public class APPaymentEntry : APDataEntryGraph&lt;APPaymentEntry, APPayment&gt;
            {
                ...
                
                protected virtual void APAdjust_RowUpdating(PXCache sender, 
                                                            PXRowUpdatingEventArgs e)
                {
                    APAdjust adj = (APAdjust)e.Row;
                    if (_IsVoidCheckInProgress == false &amp;&amp; adj.Voided == true)
                    {
                        throw new PXException(ErrorMessages.CantUpdateRecord);
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to evaluate the data record that is being updated, cancel the update operation, and show a message box." lang="CS">
            public class APPaymentEntry : APDataEntryGraph&lt;APPaymentEntry, APPayment&gt;
            {
                ...
                
                protected virtual void _(Events.RowUpdating&lt;APAdjust&gt; e)
                {
                    APAdjust adj = e.Row;
                    if (_IsVoidCheckInProgress == false &amp;&amp; adj.Voided == true)
                    {
                        throw new PXException(ErrorMessages.CantUpdateRecord);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to evaluate the data record that is being updated, cancel the update operation, and show the warning or error indication near the input control for one field or multiple fields." lang="CS">
            protected virtual void INLotSerClass_RowUpdating(PXCache sender,
                                                             PXRowUpdatingEventArgs e)
            {
                INLotSerClass row = (INLotSerClass) e.NewRow;
                if (row.LotSerTrackExpiration != true &amp;&amp;
                    row.LotSerIssueMethod == INLotSerIssueMethod.Expiration)
                {
                    sender.RaiseExceptionHandling&lt;INLotSerClass.lotSerIssueMethod&gt;(
                        row, null,
                        new PXSetPropertyException(
                            Messages.LotSerTrackExpirationInvalid,
                            typeof(INLotSerClass.lotSerIssueMethod).Name));
                    e.Cancel = true;
                }
            }</code>
              <code title="Example3b" description="The following code uses the generic event handler approach to evaluate the data record that is being updated, cancel the update operation, and show the warning or error indication near the input control for one field or multiple fields." lang="CS">
            protected virtual void _(Events.RowUpdating&lt;INLotSerClass&gt; e)
            {
                INLotSerClass row = e.NewRow;
                if (row.LotSerTrackExpiration != true &amp;&amp;
                    row.LotSerIssueMethod == INLotSerIssueMethod.Expiration)
                {
                    e.Cache.RaiseExceptionHandling&lt;INLotSerClass.lotSerIssueMethod&gt;(
                        row, null,
                        new PXSetPropertyException(
                            Messages.LotSerTrackExpirationInvalid,
                            typeof(INLotSerClass.lotSerIssueMethod).Name));
                    e.Cancel = true;
                }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowUpdatingEventArgs">
            <summary>Provides data for the <tt>RowUpdating</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowUpdating"/>
        </member>
        <member name="M:PX.Data.PXRowUpdatingEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="newrow"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowUpdatingEventArgs.Row">
            <summary>Returns the original DAC object that is being updated.</summary>
        </member>
        <member name="P:PX.Data.PXRowUpdatingEventArgs.NewRow">
            <summary>Returns the updated copy of the DAC object that is going to be
            merged with the original one.</summary>
        </member>
        <member name="P:PX.Data.PXRowUpdatingEventArgs.ExternalCall">
            <summary>
            Returns <tt>true</tt> if the update of the DAC object has been initiated from the UI
            or through the Web Service API; otherwise, it returns <tt>false</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.PXRowUpdated">
            <summary>
              <para>The delegate for the <tt>RowUpdated</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowUpdatedEventArgs">PXRowUpdatedEventArgs</see> type that holds data for the <tt>RowUpdated</tt> event.</param>
            <remarks>
              <para>The <tt>RowUpdated</tt> event is generated after the data record has been successfully updated
              in the <tt>PXCache</tt> object in one of the following cases:</para>
              <list type="bullet">
                <item>The update is initiated in the UI or through the Web Service API.</item>
                <item>One of the following methods of the <tt>PXCache</tt> class is invoked:
                    <ul><li><tt>Update(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <div class="WidgetContent" contenteditable="false" style="BORDER-TOP: white 2px solid; BORDER-BOTTOM: white 1px solid; MARGIN-TOP: 2px" data-widget-type="Note Box" data-source-widget-type="Note Box" data-widget-layout="block">
                <div class="i-box i-box-note">
                    The updating of a data record is executed only when there is a data record
                    with the same values of the data access class (DAC) key fields, either in the
                    <tt>PXCache</tt> object or in the database. Otherwise, the process of inserting the data record is started.
                </div>
              </div>
              <para>The <tt>RowUpdated</tt> event handler is used to implement the business logic of the following actions:</para>
              <list type="bullet">
                <item>Update of the master data record in a many-to-one relationship</item>
                <item>Insertion or update of the detail data records in a one-to-many relationship</item>
                <item>Update of the related data record in a one-to-one relationship</item>
              </list>
              <para>The following execution order is used for the <tt>RowUpdated</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowUpdated(PXCache sender, 
                                                      PXRowUpdatedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowUpdated&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code updates the detail data records in a one-to-many relationship by using the classic event handler approach." lang="CS">
            public class DraftScheduleMaint : PXGraph&lt;DraftScheduleMaint, DRSchedule&gt;
            {
                ...
                
                protected virtual void DRSchedule_RowUpdated(PXCache sender, 
                                                             PXRowUpdatedEventArgs e)
                {
                    DRSchedule row = e.Row as DRSchedule;
                    if (!sender.ObjectsEqual&lt;DRSchedule.documentType, DRSchedule.refNbr, 
                                             DRSchedule.lineNbr, DRSchedule.bAccountID, 
                                             DRSchedule.finPeriodID, 
                                             DRSchedule.docDate&gt;(e.Row, e.OldRow))
                    {
                        foreach (DRScheduleDetail detail in Components.Select())
                        {
                            detail.Module = row.Module;
                            detail.DocumentType = row.DocumentType;
                            detail.DocType = row.DocType;
                            detail.RefNbr = row.RefNbr;
                            detail.LineNbr = row.LineNbr;
                            detail.BAccountID = row.BAccountID;
                            detail.FinPeriodID = row.FinPeriodID;
                            detail.DocDate = row.DocDate;
                            Components.Update(detail);
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code updates the detail data records in a one-to-many relationship by using the generic event handler approach." lang="CS">
            public class DraftScheduleMaint : PXGraph&lt;DraftScheduleMaint, DRSchedule&gt;
            {
                ...
                
                protected virtual void _(Events.RowUpdated&lt;DRSchedule&gt; e)
                {
                    DRSchedule row = e.Row;
                    if (!e.Cache.ObjectsEqual&lt;DRSchedule.documentType, DRSchedule.refNbr, 
                                             DRSchedule.lineNbr, DRSchedule.bAccountID, 
                                             DRSchedule.finPeriodID, 
                                             DRSchedule.docDate&gt;(e.Row, e.OldRow))
                    {
                        foreach (DRScheduleDetail detail in Components.Select())
                        {
                            detail.Module = row.Module;
                            detail.DocumentType = row.DocumentType;
                            detail.DocType = row.DocType;
                            detail.RefNbr = row.RefNbr;
                            detail.LineNbr = row.LineNbr;
                            detail.BAccountID = row.BAccountID;
                            detail.FinPeriodID = row.FinPeriodID;
                            detail.DocDate = row.DocDate;
                            Components.Update(detail);
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code updates the master data record in a many-to-one relationship by using the classic event handler approach." lang="CS">
            public class ARInvoiceEntry : ARDataEntryGraph&lt;ARInvoiceEntry, ARInvoice&gt;, 
                                          PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void ARTran_RowUpdated(PXCache sender, 
                                                         PXRowUpdatedEventArgs e)
                {
                    ARTran row = (ARTran)e.Row;
                    ARTran oldRow = (ARTran)e.OldRow;
                    if (Document.Current != null &amp;&amp; 
                        IsExternalTax == true &amp;&amp;
                        !sender.ObjectsEqual&lt;ARTran.accountID, ARTran.inventoryID, 
                                             ARTran.tranDesc,
                                             ARTran.tranAmt, ARTran.tranDate, 
                                             ARTran.taxCategoryID&gt;(e.Row, e.OldRow))
                    {
                        ARInvoice copy = Document.Current;
                        copy.IsTaxValid = false;
                        Document.Update(copy);
                    }
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code updates the master data record in a many-to-one relationship by using the generic event handler approach." lang="CS">
            public class ARInvoiceEntry : ARDataEntryGraph&lt;ARInvoiceEntry, ARInvoice&gt;, 
                                          PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void _(Events.RowUpdated&lt;ARTran&gt; e)
                {
                    ARTran row = e.Row;
                    ARTran oldRow = e.OldRow;
                    if (Document.Current != null &amp;&amp; 
                        IsExternalTax == true &amp;&amp;
                        !e.Cache.ObjectsEqual&lt;ARTran.accountID, ARTran.inventoryID, 
                                             ARTran.tranDesc,
                                             ARTran.tranAmt, ARTran.tranDate, 
                                             ARTran.taxCategoryID&gt;(e.Row, e.OldRow))
                    {
                        ARInvoice copy = Document.Current;
                        copy.IsTaxValid = false;
                        Document.Update(copy);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowUpdatedEventArgs">
            <summary>Provides data for the <tt>RowUpdated</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowUpdated"/>
        </member>
        <member name="M:PX.Data.PXRowUpdatedEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="oldRow"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowUpdatedEventArgs.Row">
            <summary>Returns the DAC object that has been updated.</summary>
        </member>
        <member name="P:PX.Data.PXRowUpdatedEventArgs.OldRow">
            <summary>Returns the copy of the original DAC object before the update operation.</summary>
        </member>
        <member name="P:PX.Data.PXRowUpdatedEventArgs.ExternalCall">
            <summary>
            Returns <tt>true</tt> if the DAC object has been updated from the UI or through the Web Service API;
            otherwise, it returns <tt>false</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.PXRowInserting">
            <summary>
              <para>The delegate for the <tt>RowInserting</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowInsertingEventArgs">PXRowInsertingEventArgs</see> type
            that holds data for the <tt>RowInserting</tt> event.</param>
            <remarks>
              <para>The <tt>RowInserting</tt> event is trigged before the new data record is inserted into the <tt>PXCache</tt> object
              as a result of one of the following actions:</para>
              <list type="bullet">
                <item>Insertion initiated in the UI or through the Web Service API</item>
                <item>Invocation of either of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>RowInserting</tt> event handler is used to perform the following actions:
              </para>
              <list type="bullet">
                <item>Evaluation of the data record that is being inserted</item>
                <item>Cancellation of the insertion by throwing an exception</item>
                <item>Assignment of the default values to the fields of the data record that is being inserted</item>
              </list>
              <para>The following execution order is used for the <tt>RowInserting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowInserting(PXCache sender, 
                                                        PXRowInsertingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowInserting&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to evaluate the data record that is being inserted and cancel the insertion." lang="CS">
            public class CashAccountMaint : PXGraph&lt;CashAccountMaint&gt;
            {
                ...
                
                protected virtual void PaymentMethodAccount_RowInserting(
                    PXCache sender, 
                    PXRowInsertingEventArgs e)
                {
                    PaymentMethodAccount row = (PaymentMethodAccount)e.Row;
                    if (row.PaymentMethodID != null)
                        foreach (PaymentMethodAccount it in Details.Select())
                            if (!object.ReferenceEquals(row, it) &amp;&amp; 
                                it.PaymentMethodID == row.PaymentMethodID)
                                throw new PXException(
                                    Messages.DuplicatedPaymentMethodForCashAccount, 
                                    row.PaymentMethodID);
                    if (row.APIsDefault == true &amp;&amp; 
                        String.IsNullOrEmpty(row.PaymentMethodID))
                        throw new PXException(ErrorMessages.FieldIsEmpty, 
                                              typeof(PaymentMethodAccount.
                                                  paymentMethodID).Name);
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to evaluate the data record that is being inserted and cancel the insertion." lang="CS">
            public class CashAccountMaint : PXGraph&lt;CashAccountMaint&gt;
            {
                ...
                
                protected virtual void _(Events.RowInserting&lt;PaymentMethodAccount&gt; e)
                {
                    PaymentMethodAccount row = e.Row;
                    if (row.PaymentMethodID != null)
                        foreach (PaymentMethodAccount it in Details.Select())
                            if (!object.ReferenceEquals(row, it) &amp;&amp; 
                                it.PaymentMethodID == row.PaymentMethodID)
                                throw new PXException(
                                    Messages.DuplicatedPaymentMethodForCashAccount, 
                                    row.PaymentMethodID);
                    if (row.APIsDefault == true &amp;&amp; 
                        String.IsNullOrEmpty(row.PaymentMethodID))
                        throw new PXException(ErrorMessages.FieldIsEmpty, 
                                              typeof(PaymentMethodAccount.
                                                  paymentMethodID).Name);
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to assign the default field values to the data record that is being inserted." lang="CS">
            public class MyCaseDetailsMaint : PXGraph&lt;MyCaseDetailsMaint&gt;
            {
                ...
                
                protected virtual void EPActivity_RowInserting(PXCache sender, 
                                                               PXRowInsertingEventArgs e)
                {
                    EPActivity row = e.Row as EPActivity;
                    if (Case.Current != null)
                    {
                        row.StartDate = PXTimeZoneInfo.Now;
                        row.RefNoteID = Case.Current.NoteID;
                        row.ClassID = CRActivityClass.Activity;
                        row.IsExternal = true;
                    }
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code uses the generic event handler approach to assign the default field values to the data record that is being inserted." lang="CS">
            public class MyCaseDetailsMaint : PXGraph&lt;MyCaseDetailsMaint&gt;
            {
                ...
                
                protected virtual void _(Events.RowInserting&lt;EPActivity&gt; e)
                {
                    EPActivity row = e.Row;
                    if (Case.Current != null)
                    {
                        row.StartDate = PXTimeZoneInfo.Now;
                        row.RefNoteID = Case.Current.NoteID;
                        row.ClassID = CRActivityClass.Activity;
                        row.IsExternal = true;
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowInsertingEventArgs">
            <summary>Provides data for the <tt>RowInserting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowInserting"/>
        </member>
        <member name="M:PX.Data.PXRowInsertingEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowInsertingEventArgs.Row">
            <summary>Returns the DAC object that is being inserted.</summary>
        </member>
        <member name="P:PX.Data.PXRowInsertingEventArgs.ExternalCall">
            <summary>
            Returns <tt>true</tt> if a DAC object was inserted from the UI or by using the Web API Service; otherwise, it returns <tt>false</tt>.
            </summary>
        </member>
        <member name="T:PX.Data.PXRowInserted">
            <summary>
            The delegate for the <tt>RowInserted</tt> event.
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowInsertedEventArgs">PXRowInsertedEventArgs</see> type that holds data for the <tt>RowInserted</tt> event.</param>
            <remarks>
              <para>The <tt>RowInserted</tt> event is generated after a new data record has been successfully inserted
              into the <tt>PXCache</tt> as a result of one of the following actions:</para>
              <list type="bullet">
                <item>Insertion initiated in the UI or through the Web Service API</item>
                <item>Invocation of any of the following <tt>PXCache</tt> class methods:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>RowInserted</tt> event handler is used to implement the business logic for
              the following actions:</para>
              <list type="bullet">
                <item>Insertion of the detail data records in a one-to-many relationship</item>
                <item>Update of the master data record in a many-to-one relationship</item>
                <item>Insertion or update of the related data record in a one-to-one relationship</item>
              </list>
              <para>The following execution order is used for the <tt>RowInserted</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowInserted(PXCache sender, 
                                                       PXRowInsertedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowInserted&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code inserts the detail data records in a one-to-many relationship by using the classic event handler approach." lang="CS">
            public class VendorClassMaint : PXGraph&lt;VendorClassMaint&gt;
            {
                ...
                
                public virtual void VendorClass_RowInserted(PXCache sender, 
                                                            PXRowInsertedEventArgs e)
                {
                    VendorClass row = (VendorClass)e.Row;
                    if (row == null || row.VendorClassID == null) return;
                    
                    foreach (APNotification n in PXSelect&lt;
                        APNotification,
                        Where&lt;APNotification.sourceCD, 
                              Equal&lt;APNotificationSource.vendor&gt;&gt;&gt;.
                        Select(this))
                    {
                        NotificationSource source = new NotificationSource();
                        source.SetupID = n.SetupID;
                        NotificationSources.Insert(source);
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code inserts the detail data records in a one-to-many relationship by using the generic event handler approach." lang="CS">
            public class VendorClassMaint : PXGraph&lt;VendorClassMaint&gt;
            {
                ...
                
                public virtual void _(Events.RowInserted&lt;VendorClass&gt; e)
                {
                    VendorClass row = e.Row;
                    if (row == null || row.VendorClassID == null) return;
                    
                    foreach (APNotification n in PXSelect&lt;
                        APNotification,
                        Where&lt;APNotification.sourceCD, 
                              Equal&lt;APNotificationSource.vendor&gt;&gt;&gt;.
                        Select(this))
                    {
                        NotificationSource source = new NotificationSource();
                        source.SetupID = n.SetupID;
                        NotificationSources.Insert(source);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code updates the master data record in a many-to-one relationship by using the classic event handler approach." lang="CS">
            public class InventoryItemMaint : PXGraph&lt;InventoryItemMaint&gt;
            {
                ...
                
                protected virtual void POVendorInventory_RowInserted(
                    PXCache sender, 
                    PXRowInsertedEventArgs e)
                {
                    POVendorInventory current = e.Row as POVendorInventory;
                    if (current.IsDefault == true &amp;&amp; current.VendorID != null &amp;&amp; 
                        current.VendorLocationID != null &amp;&amp; current.SubItemID != null &amp;&amp;
                        this.Item.Current.PreferredVendorLocationID != 
                        current.VendorLocationID)
                    {
                        InventoryItem upd = Item.Current;
                        upd.PreferredVendorID = current.IsDefault == true ? 
                                                                     current.VendorID : 
                                                                     null;
                        upd = this.Item.Update(upd);
                        upd.PreferredVendorLocationID = current.IsDefault == 
                            true ? current.VendorLocationID : null;
                        Item.Update(upd);
                    }
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code updates the master data record in a many-to-one relationship by using the generic event handler approach." lang="CS">
            public class InventoryItemMaint : PXGraph&lt;InventoryItemMaint&gt;
            {
                ...
                
                protected virtual void _(Events.RowInserted&lt;POVendorInventory&gt; e)
                {
                    POVendorInventory current = e.Row;
                    if (current.IsDefault == true &amp;&amp; current.VendorID != null &amp;&amp; 
                        current.VendorLocationID != null &amp;&amp; current.SubItemID != null &amp;&amp;
                        this.Item.Current.PreferredVendorLocationID != 
                        current.VendorLocationID)
                    {
                        InventoryItem upd = Item.Current;
                        upd.PreferredVendorID = current.IsDefault == true ? 
                                                                     current.VendorID : 
                                                                     null;
                        upd = this.Item.Update(upd);
                        upd.PreferredVendorLocationID = current.IsDefault == 
                            true ? current.VendorLocationID : null;
                        Item.Update(upd);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowInsertedEventArgs">
            <summary>Provides data for the <tt>RowInserted</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowInserted"/>
        </member>
        <member name="M:PX.Data.PXRowInsertedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowInsertedEventArgs.Row">
            <summary>Returns the DAC object that has been inserted.</summary>
        </member>
        <member name="P:PX.Data.PXRowInsertedEventArgs.ExternalCall">
            <summary>
            Returns <tt>true</tt> if the DAC object has been inserted in the UI or through the Web Service API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXRowDeleting">
            <summary>The delegate for the <tt>RowDeleting</tt> event.</summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowDeletingEventArgs">PXRowDeletingEventArgs</see> type
            that holds data for the <tt>RowDeleting</tt> event.</param>
            <remarks>
              <para>The <tt>RowDeleting</tt> event is generated for a data record that is being deleted
              from the <tt>PXCache</tt> object after its status has been set to
            <tt>Deleted</tt> or <tt>InsertedDeleted</tt>, but the data record can still be reverted
            to the previous state by canceling the deletion. The status of
            the data record is set to <tt>Deleted</tt> or <tt>InsertedDeleted</tt> as a result of either of the following actions:</para>
              <list type="bullet">
                <item>Deletion initiated in the UI or through the Web Service API.</item>
                <item>Invocation of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Delete(object)</tt></li><li><tt>Delete(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">When a data record is deleted that has already been stored
                in the database (and, hence, exists in
                both the database and the <tt>PXCache</tt> object), the status of the data record is set to <tt>Deleted</tt>.
                For a data record that has not yet been stored in the
                database but was only inserted in the <tt>PXCache</tt> object, the status of the data record is set to <tt>InsertedDeleted</tt>.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The <tt>RowDeleting</tt> event handler is used to evaluate the data record that is marked as
              <tt>Deleted</tt> or <tt>InsertedDeleted</tt> and cancel the deletion if
            it is required by the business logic.</para>
              <para>The following execution order is used for the <tt>RowDeleting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowDeleting(PXCache sender, 
                                                       PXRowDeletingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowDeleting&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to evaluate the data record that is being deleted and cancel the deletion by throwing an exception." lang="CS">
            public class VendorMaint : BusinessAccountGraphBase&lt;
                VendorR, VendorR, 
                 Where&lt;BAccount.type, 
                       Equal&lt;BAccountType.vendorType&gt;,
                       Or&lt;BAccount.type, 
                          Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
                
                protected virtual void Vendor_RowDeleting(PXCache sender, 
                                                          PXRowDeletingEventArgs e)
                {
                    Vendor row = e.Row as Vendor;
             
                    TX.Tax tax = PXSelect&lt;
                        TX.Tax, 
                        Where&lt;TX.Tax.taxVendorID, 
                              Equal&lt;Current&lt;Vendor.bAccountID&gt;&gt;&gt;&gt;.
                        Select(this);
                    if (tax != null)
                        throw new PXException(Messages.TaxVendorDeleteErr);
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to evaluate the data record that is being deleted and cancel the deletion by throwing an exception." lang="CS">
            public class VendorMaint : BusinessAccountGraphBase&lt;
                VendorR, VendorR, 
                 Where&lt;BAccount.type, 
                       Equal&lt;BAccountType.vendorType&gt;,
                       Or&lt;BAccount.type, 
                          Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
                
                protected virtual void _(Events.RowDeleting&lt;Vendor&gt; e)
                {
                    Vendor row = e.Row;
             
                    TX.Tax tax = PXSelect&lt;
                        TX.Tax, 
                        Where&lt;TX.Tax.taxVendorID, 
                              Equal&lt;Current&lt;Vendor.bAccountID&gt;&gt;&gt;&gt;.
                        Select(this);
                    if (tax != null)
                        throw new PXException(Messages.TaxVendorDeleteErr);
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowDeletingEventArgs">
            <summary>Provides data for the <tt>RowDeleting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowDeleting"/>
        </member>
        <member name="M:PX.Data.PXRowDeletingEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowDeletingEventArgs.Row">
            <summary>Returns the DAC object that has been marked as <tt>Deleted</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXRowDeletingEventArgs.ExternalCall">
            <summary>Returns <tt>true</tt> if the DAC object has been marked as <tt>Deleted</tt> in the UI or
            through the Web Service API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXRowDeleted">
            <summary>The delegate for the <tt>RowDeleted</tt> event.</summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowDeletedEventArgs">PXRowDeletedEventArgs</see>
            type that holds data for the <tt>RowDeleted</tt> event.</param>
            <remarks>
              <para>The <tt>RowDeleted</tt> event is generated for a data record that is being deleted from the <tt>PXCache</tt>
              object—that is, a data record whose status has been successfully set to <tt>Deleted</tt> or <tt>InsertedDeleted</tt>
              as a result of the following actions:</para>
              <list type="bullet">
                <item>Deletion initiated in the UI or through the Web Service API</item>
                <item>Invocation of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Delete(object)</tt></li><li><tt>Delete(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">When a data record is deleted that has already been stored in the database
                (and, hence, exists in both the database and the <tt>PXCache</tt> object),
                the status of the data record is set to <tt>Deleted</tt>. For a data record that has not yet been stored in the database
                but has only been inserted in the <tt>PXCache</tt> object, the status of the data record is set to <tt>InsertedDeleted</tt>.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The <tt>RowDeleted</tt> event handler is used to implement the business logic of the following actions:</para>
              <list type="bullet">
                <item>Deletion of the detail data records in a one-to-many relationship</item>
                <item>Update of the master data record in a many-to-one relationship</item>
                <item>Deletion or update of the related data record in a one-to-one relationship</item>
              </list>
              <para>The following execution order is used for the <tt>RowDeleted</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowDeleted(PXCache sender, 
                                                      PXRowDeletedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowDeleted&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code deletes detail data records in a one-to-many relationship by using the classic event handler approach." lang="CS">
            public class CashTransferEntry : PXGraph&lt;CashTransferEntry, CATransfer&gt;
            {
                ...
                
                public virtual void CATransfer_RowDeleted(PXCache sender, 
                                                          PXRowDeletedEventArgs e)
                {
                    foreach (CATran item in TransferTran.Select())
                        TransferTran.Delete(item);
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code deletes detail data records in a one-to-many relationship by using the generic event handler approach." lang="CS">
            public class CashTransferEntry : PXGraph&lt;CashTransferEntry, CATransfer&gt;
            {
                ...
                
                public virtual void _(Events.RowDeleted&lt;CATransfer&gt; e)
                {
                    foreach (CATran item in TransferTran.Select())
                        TransferTran.Delete(item);
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code updates the master data record in a many-to-one relationship by using the classic event handler approach." lang="CS">
            public class INSiteMaint : PXGraph&lt;INSiteMaint, INSite&gt;
            {
                ...
                
                protected virtual void INLocation_RowDeleted(PXCache sender, 
                                                             PXRowDeletedEventArgs e)
                {
                    INLocation l = (INLocation)e.Row;
                    if (site.Current == null || l == null ||
                        site.Cache.GetStatus(site.Current) == PXEntryStatus.Deleted) 
                        return;
             
                    INSite s = site.Current;
                    if (s.DropShipLocationID == l.LocationID)
                        s.DropShipLocationID = null;
                    if (s.ReceiptLocationID == l.LocationID)
                        s.ReceiptLocationID = null;
                    if (s.ShipLocationID == l.LocationID)
                        s.ShipLocationID = null;
                    if (s.ReturnLocationID == l.LocationID)
                        s.ReturnLocationID = null;
                    site.Update(s);
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code updates the master data record in a many-to-one relationship by using the generic event handler approach." lang="CS">
            public class INSiteMaint : PXGraph&lt;INSiteMaint, INSite&gt;
            {
                ...
                
                protected virtual void _(Events.RowDeleted&lt;INLocation&gt; e)
                {
                    INLocation l = e.Row;
                    if (site.Current == null || l == null ||
                        site.Cache.GetStatus(site.Current) == PXEntryStatus.Deleted) 
                        return;
             
                    INSite s = site.Current;
                    if (s.DropShipLocationID == l.LocationID)
                        s.DropShipLocationID = null;
                    if (s.ReceiptLocationID == l.LocationID)
                        s.ReceiptLocationID = null;
                    if (s.ShipLocationID == l.LocationID)
                        s.ShipLocationID = null;
                    if (s.ReturnLocationID == l.LocationID)
                        s.ReturnLocationID = null;
                    site.Update(s);
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowDeletedEventArgs">
            <summary>Provides data for the <tt>RowDeleted</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowDeleted"/>
        </member>
        <member name="M:PX.Data.PXRowDeletedEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXRowDeletedEventArgs.Row">
            <summary>Returns the DAC object that has been marked as <tt>Deleted</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXRowDeletedEventArgs.ExternalCall">
            <summary>Returns <tt>true</tt> if the DAC object has been marked as <tt>Deleted</tt> in the UI or
            through the Web Services API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXRowSelected">
            <summary>
              <para>The delegate for the <tt>RowSelected</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowSelectedEventArgs">PXRowSelectedEventArgs</see> type that holds data for the <tt>RowSelected</tt> event.</param>
            <remarks>
              <para>The <tt>RowSelected</tt> event is generated in the following cases:</para>
              <list type="bullet">
                <item>To display a data record in the UI</item>
                <item>To execute the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Locate(IDictionary)</tt></li><li><tt>Insert()</tt></li><li><tt>Insert()</tt></li><li><tt>Insert(IDictionary)</tt></li><li><tt>Update(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>Delete(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">Avoid executing BQL statements in a <tt>RowSelected</tt> event handler,
                because this execution may cause performance degradation caused by multiple invocations
                of the <tt>RowSelected</tt> event for a single data record.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The <tt>RowSelected</tt> event handler is used to do the following:</para>
              <list type="bullet">
                <item>Implement the UI presentation logic</item>
                <item>Set up the processing operation on a processing screen (which is a type of UI screen
                that allows the execution of a long-running operation on multiple data records at once)</item>
              </list>
              <para>The following execution order is used for the <tt>RowSelected</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowSelected(PXCache sender, 
                                                       PXRowSelectedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowSelected&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code sets the UI properties for input controls at run time by using the classic event handler approach." lang="CS">
            public class VendorMaint :
                 BusinessAccountGraphBase&lt;VendorR, VendorR,
                     Where&lt;BAccount.type, Equal&lt;BAccountType.vendorType&gt;,
                         Or&lt;BAccount.type, Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
             
                protected virtual void Vendor_RowSelected(PXCache sender,
                                                          PXRowSelectedEventArgs e)
                {
                    Vendor row = (Vendor)e.Row;
                    if (row == null) return;
             
                    bool isNotInserted = !(sender.GetStatus(row) ==
                                           PXEntryStatus.Inserted);
                    PXUIFieldAttribute.SetVisible&lt;VendorBalanceSummary.depositsBalance&gt;(
                        VendorBalance.Cache, null, isNotInserted);
                    PXUIFieldAttribute.SetVisible&lt;VendorBalanceSummary.balance&gt;(
                        VendorBalance.Cache, null, isNotInserted);
                    PXUIFieldAttribute.SetEnabled&lt;Vendor.taxReportFinPeriod&gt;(
                        sender, null,
                        row.TaxPeriodType != PX.Objects.TX.VendorTaxPeriodType.FiscalPeriod);
                    PXUIFieldAttribute.SetEnabled&lt;Vendor.taxReportPrecision&gt;(
                        sender, null, row.TaxUseVendorCurPrecision != true);
                }
             
                ...
            }</code>
              <code title="Example2b" description="The following code sets the UI properties for input controls at run time by using the generic event handler approach." lang="CS">
            public class VendorMaint :
                 BusinessAccountGraphBase&lt;VendorR, VendorR,
                     Where&lt;BAccount.type, Equal&lt;BAccountType.vendorType&gt;,
                         Or&lt;BAccount.type, Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
             
                protected virtual void _(Events.RowSelected&lt;Vendor&gt; e)
                {
                    Vendor row = e.Row;
                    if (row == null) return;
             
                    bool isNotInserted = !(e.Cache.GetStatus(row) ==
                                           PXEntryStatus.Inserted);
                    PXUIFieldAttribute.SetVisible&lt;VendorBalanceSummary.depositsBalance&gt;(
                        VendorBalance.Cache, null, isNotInserted);
                    PXUIFieldAttribute.SetVisible&lt;VendorBalanceSummary.balance&gt;(
                        VendorBalance.Cache, null, isNotInserted);
                    PXUIFieldAttribute.SetEnabled&lt;Vendor.taxReportFinPeriod&gt;(
                        e.Cache, null,
                        row.TaxPeriodType != PX.Objects.TX.VendorTaxPeriodType.FiscalPeriod);
                    PXUIFieldAttribute.SetEnabled&lt;Vendor.taxReportPrecision&gt;(
                        e.Cache, null, row.TaxUseVendorCurPrecision != true);
                }
             
                ...
            }</code>
              <code title="Example3a" description="The following code sets the UI properties for actions by using the classic event handler approach." lang="CS">
            public class APAccess : PX.SM.BaseAccess
            {
                ...
                
                protected virtual void RelationGroup_RowSelected(PXCache sender, 
                                                                 PXRowSelectedEventArgs e)
                {
                    PX.SM.RelationGroup group = e.Row as PX.SM.RelationGroup;
                    if (group != null)
                    {
                        if (String.IsNullOrEmpty(group.GroupName))
                        {
                            Save.SetEnabled(false);
                            Vendor.Cache.AllowInsert = false;
                        }
                        else
                        {
                            Save.SetEnabled(true);
                            Vendor.Cache.AllowInsert = true;
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code sets the UI properties for actions by using the generic event handler approach." lang="CS">
            public class APAccess : PX.SM.BaseAccess
            {
                ...
                
                protected virtual void _(Events.RowSelected&lt;RelationGroup&gt; e)
                {
                    RelationGroup group = e.Row;
                    if (group != null)
                    {
                        if (String.IsNullOrEmpty(group.GroupName))
                        {
                            Save.SetEnabled(false);
                            Vendor.Cache.AllowInsert = false;
                        }
                        else
                        {
                            Save.SetEnabled(true);
                            Vendor.Cache.AllowInsert = true;
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example4a" description="The following code sets up the processing operation on a processing screen by using the classic event handler approach." lang="CS">
            [TableAndChartDashboardType]
            public class APIntegrityCheck : PXGraph&lt;APIntegrityCheck&gt;
            {
                ...
                
                protected virtual void APIntegrityCheckFilter_RowSelected(
                    PXCache sender, 
                    PXRowSelectedEventArgs e)
                {
                    APIntegrityCheckFilter filter = Filter.Current;
             
                    APVendorList.SetProcessDelegate&lt;APReleaseProcess&gt;(
                        delegate(APReleaseProcess re, Vendor vend)
                        {
                            re.Clear(PXClearOption.PreserveTimeStamp);
                            re.IntegrityCheckProc(vend, filter.FinPeriodID);
                        }
                    );
                }
                
                ...
            }</code>
              <code title="Example4b" description="The following code sets up the processing operation on a processing screen by using the generic event handler approach." lang="CS">
            [TableAndChartDashboardType]
            public class APIntegrityCheck : PXGraph&lt;APIntegrityCheck&gt;
            {
                ...
                
                protected virtual void _(Events.RowSelected&lt;APIntegrityCheckFilter&gt; e)
                {
                    APIntegrityCheckFilter filter = Filter.Current;
             
                    APVendorList.SetProcessDelegate&lt;APReleaseProcess&gt;(
                        delegate(APReleaseProcess re, Vendor vend)
                        {
                            re.Clear(PXClearOption.PreserveTimeStamp);
                            re.IntegrityCheckProc(vend, filter.FinPeriodID);
                        }
                    );
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowSelectedEventArgs">
            <summary>Provides data for the <tt>RowSelected</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowSelected"/>
        </member>
        <member name="M:PX.Data.PXRowSelectedEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="row"></param>
        </member>
        <member name="P:PX.Data.PXRowSelectedEventArgs.Row">
            <summary>Returns the DAC object that is being processed.</summary>
        </member>
        <member name="T:PX.Data.PXCommandPreparing">
            <summary>The delegate for the <tt>CommandPreparing</tt> event.</summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXCommandPreparingEventArgs">PXCommandPreparingEventArgs</see> type
            that contains data for the <tt>CommandPreparing</tt> event.</param>
            <remarks>
              <para>The <tt>CommandPreparing</tt> event is generated each time the Acumatica data access layer prepares a database-specific SQL statement for a <tt>SELECT</tt>,
            <tt>INSERT</tt>, <tt>UPDATE</tt>, or <tt>DELETE</tt> operation. This event is raised for every data access class (DAC) field placed in the <tt>PXCache</tt>
            object. By using the <tt>CommandPreparing</tt> event subscriber, you can alter the property values of the <tt>PXCommandPreparingEventArgs.FieldDescription</tt>
            object that is used in the generation of an SQL statement.</para>
              <para>The <tt>CommandPreparing</tt> event handler is used in the following cases:</para>
              <list type="bullet">
                <item>To exclude a DAC field from a <tt>SELECT</tt>, <tt>INSERT</tt>, or <tt>UPDATE</tt> operation</item>
                <item>To replace a DAC field from a <tt>SELECT</tt> operation with a custom SQL statement</item>
                <item>To transform a DAC field value submitted to the server for an <tt>INSERT</tt>, <tt>UPDATE</tt>, or <tt>DELETE</tt> operation</item>
              </list>
              <para>The following execution order is used for the <tt>CommandPreparing</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldType_CommandPreparing(
              PXCache sender, 
              PXCommandPreparingEventArgs e) 
            { 
              ... 
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.CommandPreparing&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code excludes a DAC field from the UPDATE operation by using the classic event handler approach." lang="CS">
            public class APReleaseProcess : PXGraph&lt;APReleaseProcess&gt;
            {
                ...
                
                protected virtual void APRegister_FinPeriodID_CommandPreparing(
                    PXCache sender, 
                    PXCommandPreparingEventArgs e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) == PXDBOperation.Update)
                    {
                        e.ExcludeFromInsertUpdate();
                    }
                }
            }</code>
              <code title="Example2b" description="The following code excludes a DAC field from the UPDATE operation by using the generic event handler approach." lang="CS">
            public class APReleaseProcess : PXGraph&lt;APReleaseProcess&gt;
            {
                ...
                
                protected virtual void _(Events.CommandPreparing&lt;APRegister.FinPeriodID&gt; e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) == PXDBOperation.Update)
                    {
                        e.Args.ExcludeFromInsertUpdate();
                    }
                }
            }</code>
              <code title="Example3a" description="The following code transforms the DAC field value during INSERT and UPDATE operations by using a redefinition of the attribute method." lang="CS">
            public class PXDBCryptStringAttribute : PXDBStringAttribute, 
                                                    IPXFieldVerifyingSubscriber, 
                                                    IPXRowUpdatingSubscriber, 
                                                    IPXRowSelectingSubscriber
            {
                ...
             
                public override void CommandPreparing(PXCache sender, 
                                                      PXCommandPreparingEventArgs e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) == PXDBOperation.Insert ||
                        (e.Operation &amp; PXDBOperation.Command) == PXDBOperation.Update)
                    {
                        string value = (string)sender.GetValue(e.Row, _FieldOrdinal);
             
                        e.Value = !string.IsNullOrEmpty(value) ?
                                  Convert.ToBase64String(
                                      Encrypt(Encoding.Unicode.GetBytes(value))) :
                                  null;
                    }
                    base.CommandPreparing(sender, e);
                }
             
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXCommandPreparingEventArgs">
            <summary>Provides data for the <tt>CommandPreparing</tt> event.</summary>
            <seealso cref="T:PX.Data.PXCommandPreparing"/>
        </member>
        <member name="T:PX.Data.PXCommandPreparingEventArgs.FieldDescription">
            <summary>
            The nested class that provides information about the field
            required for the SQL statement generation.
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.BqlTable">
            <summary>
            The type of the DAC objects placed in the cache.
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.DataType">
            <summary>The <tt>PXDbType</tt> value of the DAC field being
            used during the current operation.</summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.DataLength">
            <summary>
            The storage size of the DAC field.
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.DataValue">
            <summary>
            The value stored in the DAC field.
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.IsRestriction">
            <summary>
            The value indicating that the DAC field being used during the
            <tt>UPDATE</tt> or <tt>DELETE</tt> operation is placed in the <tt>WHERE</tt> clause.
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.IsForcedSubQuery">
            <summary>
            The value indicating that the DAC field is subquery and must be used as is
            </summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.FieldDescription.Expr">
            <summary>The SQL tree expression of the field.</summary>
        </member>
        <member name="M:PX.Data.PXCommandPreparingEventArgs.GetFieldDescription">
            <summary>Initializes and returns an object that contains a DAC field description
            that was used during the current operation.</summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.SqlDialect">
            <summary>The SQL dialect of the command.</summary>
        </member>
        <member name="F:PX.Data.PXCommandPreparingEventArgs.Expr">
            <summary>The SQL tree expression of the command.</summary>
        </member>
        <member name="M:PX.Data.PXCommandPreparingEventArgs.#ctor(System.Object,System.Object,PX.Data.PXDBOperation,System.Type,PX.Data.ISqlDialect)">
            <summary>
            Initializes an instance of the <tt>PXCommandPreparingEventArgs</tt> class.
            </summary>
            <param name="row">The data record.</param>
            <param name="value">The field value.</param>
            <param name="operation">The type of the database operation.</param>
            <param name="table">The DAC type of the data record.</param>
            <param name="dialect">The SQL dialect.</param>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.Value">
            <summary>Returns the current DAC field value or sets the value for the DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.Operation">
            <summary>Returns the type of the current database operation.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.Table">
            <summary>Returns the type of the DAC objects placed in the cache.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.BqlTable">
            <summary>Returns or sets the DAC type that is being used during the current operation.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.DataType">
            <summary>Returns or sets the <tt>PXDbType</tt> value of the DAC field being
            used during the current operation.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.DataLength">
            <summary>Returns or sets the number of characters in the DAC field being
            used during the current operation.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.DataValue">
            <summary>Returns or sets the DAC field value being used during the
            current operation.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.IsRestriction">
            <summary>Returns or sets the value indicating that the DAC field
            being used during the <tt>UPDATE</tt> or <tt>DELETE</tt> operation is placed in the <tt>WHERE</tt> clause.</summary>
        </member>
        <member name="P:PX.Data.PXCommandPreparingEventArgs.IsForcedSubQuery">
            <summary>
            Returns or sets the value indicating that the DAC field is subquery and must be used as is
            </summary>
        </member>
        <member name="T:PX.Data.PXRowSelecting">
            <summary>
              <para>The delegate for the <tt>RowSelecting</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowSelectingEventArgs">PXRowSelectingEventArgs</see> type
            that holds data for the <tt>RowSelecting</tt> event.</param>
            <remarks>
              <para>The <tt>RowSelecting</tt> event is generated for each retrieved data record
              when the result of a BQL statement is processed. For a BQL statement that
            contains a <tt>JOIN</tt> clause, the <tt>RowSelecting</tt> event is raised for every joined data access class (DAC).</para>
              <para>The <tt>RowSelecting</tt> event handler can be used for the following purposes:</para>
              <list type="bullet">
                <item>To calculate DAC field values that are not bound to specific database columns</item>
                <item>To modify the logic that converts the database record to the DAC</item>
              </list>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">We recommend that you not use <tt>RowSelecting</tt> event handlers
                in the application code. However, if you use these event handlers in the application code
                and you execute additional BQL statements within a <tt>RowSelecting</tt> event
                handler, you should use a separate connection scope for the execution. The connection scope
                that is used to retrieve the data that generated
                the <tt>RowSelecting</tt> event is still busy; therefore, no other operations can be performed
                on this connection scope.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The following execution order is used for the <tt>RowSelecting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowSelecting(PXCache sender, 
                                                        PXRowSelectingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowSelecting&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to calculate a DAC field value that is not bound to a specific column in a database table." lang="CS">
            public class LocationMaint : 
                LocationMaintBase&lt;Location, Location, 
                                  Where&lt;Location.bAccountID, 
                                        Equal&lt;Optional&lt;Location.bAccountID&gt;&gt;&gt;&gt;
            {
             
                ...
                
                protected virtual void Location_RowSelecting(PXCache sender, 
                                                             PXRowSelectingEventArgs e)
                {
                    Location record = (Location)e.Row;
                    if (record != null)
                        record.IsARAccountSameAsMain = 
                            !object.Equals(record.LocationID, record.CARAccountLocationID);
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to calculate a DAC field value that is not bound to a specific column in a database table." lang="CS">
            public class LocationMaint : 
                LocationMaintBase&lt;Location, Location, 
                                  Where&lt;Location.bAccountID, 
                                        Equal&lt;Optional&lt;Location.bAccountID&gt;&gt;&gt;&gt;
            {
             
                ...
                
                protected virtual void _(Events.RowSelecting&lt;Location&gt; e)
                {
                    Location record = e.Row;
                    if (record != null)
                        record.IsARAccountSameAsMain = 
                            !object.Equals(record.LocationID, record.CARAccountLocationID);
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to execute an additional BQL statement to calculate a DAC field value that is not bound to a specific column in a database table." lang="CS">
            public class SOInvoiceEntry : ARInvoiceEntry
            {
                ...
                
                protected virtual void ARInvoice_RowSelecting(PXCache sender, 
                                                              PXRowSelectingEventArgs e)
                {
                    ARInvoice row = (ARInvoice)e.Row;
                    if (row != null &amp;&amp; !String.IsNullOrEmpty(row.DocType) 
                                    &amp;&amp; !String.IsNullOrEmpty(row.RefNbr))
                    {
                        row.IsCCPayment = false;
                        using (new PXConnectionScope())
                        {
                            if (PXSelectJoin&lt;
                                CustomerPaymentMethodC,
                                InnerJoin&lt;
                                    CA.PaymentMethod,
                                    On&lt;CA.PaymentMethod.paymentMethodID, 
                                       Equal&lt;CustomerPaymentMethodC.paymentMethodID&gt;&gt;,
                                    InnerJoin&lt;
                                        SOInvoice,
                                        On&lt;SOInvoice.pMInstanceID, 
                                           Equal&lt;CustomerPaymentMethodC.pMInstanceID&gt;&gt;&gt;&gt;,
                                Where&lt;SOInvoice.docType, 
                                      Equal&lt;Required&lt;SOInvoice.docType&gt;&gt;,
                                      And&lt;SOInvoice.refNbr, 
                                          Equal&lt;Required&lt;SOInvoice.refNbr&gt;&gt;,
                                          And&lt;CA.PaymentMethod.paymentType, 
                                              Equal&lt;CA.PaymentMethodType.creditCard&gt;,
                                          And&lt;CA.PaymentMethod.aRIsProcessingRequired, 
                                              Equal&lt;True&gt;&gt;&gt;&gt;&gt;&gt;.
                                Select(this, row.DocType, row.RefNbr).Count &gt; 0)
                            {
                                row.IsCCPayment = true;
                            }
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code uses the generic event handler approach to execute an additional BQL statement to calculate a DAC field value that is not bound to a specific column in a database table." lang="CS">
            public class SOInvoiceEntry : ARInvoiceEntry
            {
                ...
                
                protected virtual void _(Events.RowSelecting&lt;ARInvoice&gt; e)
                {
                    ARInvoice row = e.Row;
                    if (row != null &amp;&amp; !String.IsNullOrEmpty(row.DocType) 
                                    &amp;&amp; !String.IsNullOrEmpty(row.RefNbr))
                    {
                        row.IsCCPayment = false;
                        using (new PXConnectionScope())
                        {
                            if (PXSelectJoin&lt;
                                CustomerPaymentMethodC,
                                InnerJoin&lt;
                                    CA.PaymentMethod,
                                    On&lt;CA.PaymentMethod.paymentMethodID, 
                                       Equal&lt;CustomerPaymentMethodC.paymentMethodID&gt;&gt;,
                                    InnerJoin&lt;
                                        SOInvoice,
                                        On&lt;SOInvoice.pMInstanceID, 
                                           Equal&lt;CustomerPaymentMethodC.pMInstanceID&gt;&gt;&gt;&gt;,
                                Where&lt;SOInvoice.docType, 
                                      Equal&lt;Required&lt;SOInvoice.docType&gt;&gt;,
                                      And&lt;SOInvoice.refNbr, 
                                          Equal&lt;Required&lt;SOInvoice.refNbr&gt;&gt;,
                                          And&lt;CA.PaymentMethod.paymentType, 
                                              Equal&lt;CA.PaymentMethodType.creditCard&gt;,
                                          And&lt;CA.PaymentMethod.aRIsProcessingRequired, 
                                              Equal&lt;True&gt;&gt;&gt;&gt;&gt;&gt;.
                                Select(this, row.DocType, row.RefNbr).Count &gt; 0)
                            {
                                row.IsCCPayment = true;
                            }
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example4a" description="The following code converts the database table value to the DAC field value by using a redefinition of the attribute method." lang="CS">
            public class PXDBCryptStringAttribute : PXDBStringAttribute, 
                                                    IPXFieldVerifyingSubscriber, 
                                                    IPXRowUpdatingSubscriber, 
                                                    IPXRowSelectingSubscriber
            {
                ...
                
                public override void RowSelecting(PXCache sender, 
                                                  PXRowSelectingEventArgs e)
                {
                    base.RowSelecting(sender, e);
                    if (e.Row == null || sender.GetStatus(e.Row) 
                                      != PXEntryStatus.Notchanged) return;
                    string value = (string)sender.GetValue(e.Row, _FieldOrdinal);
                    string result = string.Empty;
                    if (!string.IsNullOrEmpty(value))
                    {
                        try
                        {
                            result = Encoding.
                                Unicode.
                                GetString(Decrypt(Convert.FromBase64String(value)));
                        }
                        catch (Exception)
                        {
                            try
                            {
                                result = Encoding.Unicode.
                                    GetString(Convert.FromBase64String(value));
                            }
                            catch (Exception)
                            {
                                result = value;
                            }
                        }
                    }
                    sender.SetValue(e.Row, _FieldOrdinal, 
                                    result.Replace("\0", string.Empty));
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowSelectingEventArgs">
            <summary>Provides data for the <tt>RowSelecting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowSelecting"/>
        </member>
        <member name="M:PX.Data.PXRowSelectingEventArgs.#ctor(System.Object,PX.Data.PXDataRecord,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="record"></param>
            <param name="position"></param>
            <param name="isReadOnly"></param>
        </member>
        <member name="P:PX.Data.PXRowSelectingEventArgs.Row">
            <summary>Returns the DAC object that is being processed.</summary>
        </member>
        <member name="P:PX.Data.PXRowSelectingEventArgs.Record">
            <summary>Returns the processed data record in the result set.</summary>
        </member>
        <member name="P:PX.Data.PXRowSelectingEventArgs.Position">
            <summary>Returns or sets the index of the processed column in the result set.</summary>
        </member>
        <member name="P:PX.Data.PXRowSelectingEventArgs.IsReadOnly">
            <summary>Returns the value indicating whether the DAC object is read-only.</summary>
        </member>
        <member name="T:PX.Data.PXRowPersisting">
            <summary>
              <para>The delegate for the <tt>RowPersisting</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowPersistingEventArgs">PXRowPersistingEventArgs</see> type
            that holds data for the <tt>RowPersisting</tt> event.</param>
            <remarks>
              <para>The <tt>RowPersisting</tt> event is generated in the process of committing changes to the database
              for every data record whose status is <tt>Inserted</tt>, <tt>Updated</tt>, or <tt>Deleted</tt> before
              the corresponding changes for the data record are committed to the database. The committing of changes to a database
              is initiated by invoking the <tt>Actions.PressSave()</tt> method of the business logic controller (BLC).
              While processing this method, the Acumatica data access layer commits first every inserted
            data record, then every updated data record, and finally every deleted data record.</para>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">Avoid executing additional BQL statements
                in a <tt>RowPersisting</tt> event handler. When the <tt>RowPersisting</tt>
                event is raised, the associated transaction scope is busy saving the changes,
                and any other operation performed within this transaction scope may cause
                performance degradation and deadlocks.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The <tt>RowPersisting</tt> event handler is used to do the following:</para>
              <list type="bullet">
                <item>Validate the data record before it has been committed to the database</item>
                <item>Cancel the committing of the data record by throwing an exception</item>
              </list>
              <para>The following execution order is used for the <tt>RowPersisting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowPersisting(PXCache sender, 
                                                         PXRowPersistingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowPersisting&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to validate the data record before it is committed to the database." lang="CS">
            public class CCProcessingCenterMaint : PXGraph&lt;CCProcessingCenterMaint, 
                                                           CCProcessingCenter&gt;, 
                                                   IProcessingCenterSettingsStorage
            {
                ...
                
                protected virtual void CCProcessingCenter_RowPersisting(
                    PXCache sender, 
                    PXRowPersistingEventArgs e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) != PXDBOperation.Delete &amp;&amp; 
                         e.Row != null &amp;&amp; 
                         (bool)((CCProcessingCenter)e.Row).IsActive &amp;&amp; 
                         string.IsNullOrEmpty(((CCProcessingCenter)e.Row).
                             ProcessingTypeName))
                    {
                        throw new PXRowPersistingException(
                            typeof(CCProcessingCenter.processingTypeName).Name, 
                            null, 
                            ErrorMessages.FieldIsEmpty, 
                            typeof(CCProcessingCenter.processingTypeName).Name);
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to validate the data record before it is committed to the database." lang="CS">
            public class CCProcessingCenterMaint : PXGraph&lt;CCProcessingCenterMaint, 
                                                           CCProcessingCenter&gt;, 
                                                   IProcessingCenterSettingsStorage
            {
                ...
                
                protected virtual void _(Events.RowPersisting&lt;CCProcessingCenter&gt; e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) != PXDBOperation.Delete &amp;&amp; 
                         e.Row != null &amp;&amp; 
                         (bool)e.Row.IsActive &amp;&amp; 
                         string.IsNullOrEmpty(e.Row.ProcessingTypeName))
                    {
                        throw new PXRowPersistingException(
                            typeof(CCProcessingCenter.processingTypeName).Name, 
                            null, 
                            ErrorMessages.FieldIsEmpty, 
                            typeof(CCProcessingCenter.processingTypeName).Name);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to show a message box, as well as the warning and error indications near the input control for one field or multiple fields." lang="CS">
            protected virtual void APInvoice_RowPersisting(PXCache sender,
                                                           PXRowPersistingEventArgs e)
            {
                APInvoice doc = (APInvoice)e.Row;
                if (doc.PaySel == true &amp;&amp; doc.PayDate == null)
                {
                    sender.RaiseExceptionHandling&lt;APInvoice.payDate&gt;(
                        doc, null,
                        new PXSetPropertyException(ErrorMessages.FieldIsEmpty,
                                                   typeof(APInvoice.payDate).Name));
                }
                if (doc.PaySel == true &amp;&amp; doc.PayDate != null &amp;&amp;
                    ((DateTime)doc.DocDate).CompareTo((DateTime)doc.PayDate) &gt; 0)
                {
                    sender.RaiseExceptionHandling&lt;APInvoice.payDate&gt;(
                        e.Row, doc.PayDate,
                        new PXSetPropertyException(Messages.ApplDate_Less_DocDate,
                                                   PXErrorLevel.RowError,
                                                   typeof(APInvoice.payDate).Name));
                }
            }</code>
              <code title="Example3b" description="The following code uses the generic event handler approach to show a message box, as well as the warning and error indications near the input control for one field or multiple fields." lang="CS">
            protected virtual void _(Events.RowPersisting&lt;APInvoice&gt; e)
            {
                APInvoice doc = e.Row;
                if (doc.PaySel == true &amp;&amp; doc.PayDate == null)
                {
                    e.Cache.RaiseExceptionHandling&lt;APInvoice.payDate&gt;(
                        doc, null,
                        new PXSetPropertyException(ErrorMessages.FieldIsEmpty,
                                                   typeof(APInvoice.payDate).Name));
                }
                if (doc.PaySel == true &amp;&amp; doc.PayDate != null &amp;&amp;
                    ((DateTime)doc.DocDate).CompareTo((DateTime)doc.PayDate) &gt; 0)
                {
                    e.Cache.RaiseExceptionHandling&lt;APInvoice.payDate&gt;(
                        e.Row, doc.PayDate,
                        new PXSetPropertyException(Messages.ApplDate_Less_DocDate,
                                                   PXErrorLevel.RowError,
                                                   typeof(APInvoice.payDate).Name));
                }
            }</code>
              <code title="Example4a" description="The following code uses the classic event handler approach to cancel the operation of committing a data record." lang="CS">
            public class CampaignMemberMassProcess : PXGraph&lt;CampaignMemberMassProcess&gt;
            {
                ...
                
                protected virtual void Contact_RowPersisting(PXCache sender, 
                                                             PXRowPersistingEventArgs e)
                {
                    e.Cancel = true;
                }
                
                ...
            }</code>
              <code title="Example4b" description="The following code uses the generic event handler approach to cancel the operation of committing a data record." lang="CS">
            public class CampaignMemberMassProcess : PXGraph&lt;CampaignMemberMassProcess&gt;
            {
                ...
                
                protected virtual void _(Events.RowPersisting&lt;Contact&gt; e)
                {
                    e.Cancel = true;
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowPersistingEventArgs">
            <summary>Provides data for the <tt>RowPersisting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowPersisting"/>
        </member>
        <member name="M:PX.Data.PXRowPersistingEventArgs.#ctor(PX.Data.PXDBOperation,System.Object)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="operation"></param>
            <param name="row"></param>
        </member>
        <member name="P:PX.Data.PXRowPersistingEventArgs.Row">
            <summary>Returns the DAC object that is being committed to the database.</summary>
        </member>
        <member name="P:PX.Data.PXRowPersistingEventArgs.Operation">
            <summary>Returns the <tt>PXDBOperation</tt> of the current commit operation.</summary>
        </member>
        <member name="T:PX.Data.PXRowPersisted">
            <summary>
              <para>The delegate for the <tt>RowPersisted</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="e">Required. The instance of the <see cref="T:PX.Data.PXRowPersistedEventArgs">PXRowPersistedEventArgs</see> type
            that holds data for the <tt>RowPersisted</tt> event.</param>
            <remarks>
              <para>The <tt>RowPersisted</tt> event is generated in the process of committing changes to the database
              for every data record whose status is <tt>Inserted</tt>, <tt>Updated</tt>,
            or <tt>Deleted</tt>. The <tt>RowPersisted</tt> event is generated in the following cases:</para>
              <list type="bullet">
                <item>When the data record has been committed to the database and the status of the transaction scope
                (indicated in the <tt>e.TranStatus</tt> field) is <tt>Open</tt></item>
                <item>When the status of the transaction scope has been changed to <tt>Completed</tt>, indicating successful committing,
                or <tt>Aborted</tt>, indicating that a database error has occurred and changes to the database have been dropped</item>
              </list>
              <para>The <tt>Actions.PressSave()</tt> method of the business logic controller (graph)
              initiates the committing of changes to a database. While processing this method,
            the Acumatica data access layer commits first every inserted data record, then every updated data record,
            and finally every deleted data record.</para>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">Avoid executing additional BQL statements in a
                <tt>RowPersisted</tt> event handler when the status of the transaction scope is <tt>Open</tt>.
                When the <tt>RowPersisted</tt> event is raised with this status, the associated transaction scope is busy saving the changes,
                and any other operation performed within this transaction scope may cause performance degradation and deadlocks.</innovasys:widgetproperty>
              </innovasys:widget>
              <para>The <tt>RowPersisted</tt> event handler is used to perform the following actions:</para>
              <list type="bullet">
                <item>Retrieval of data generated by the database.</item>
                <item>Restoring of data access class (DAC) field values if the status of the transaction scope
                is <tt>Aborted</tt> indicating that changes have not been saved. Note that in this case
                the DAC fields do not revert to any previous state automatically but are left
                by the Acumatica data access layer in the state they were in before
                the committing was initiated.</item>
                <item>Validation of the data record while committing it to the database.</item>
              </list>
              <para>The following execution order is used for the <tt>RowPersisted</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_RowPersisted(PXCache sender, 
                                                        PXRowPersistedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.RowPersisted&lt;DACType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the redefinition of the attribute method to retrieve data generated by the database." lang="CS">
            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter | 
                            AttributeTargets.Class | AttributeTargets.Method)]
            public class PXDBIdentityAttribute : PXDBFieldAttribute, 
                                                 IPXFieldDefaultingSubscriber, 
                                                 IPXRowSelectingSubscriber, 
                                                 IPXCommandPreparingSubscriber, 
                                                 IPXFieldUpdatingSubscriber, 
                                                 IPXFieldSelectingSubscriber, 
                                                 IPXRowPersistedSubscriber, 
                                                 IPXFieldVerifyingSubscriber
            {
                ...
                
                public virtual void RowPersisted(PXCache sender, 
                                                 PXRowPersistedEventArgs e)
                {
                    if ((e.Operation &amp; PXDBOperation.Command) == PXDBOperation.Insert)
                    {
                        if (e.TranStatus == PXTranStatus.Open)
                        {
                            if (_KeyToAbort == null)
                                _KeyToAbort = (int?)sender.GetValue(e.Row, _FieldOrdinal);
                            if (_KeyToAbort &lt; 0)
                            {
                                int? id = 
                                    Convert.ToInt32(PXDatabase.SelectIdentity(_BqlTable, _FieldName));
                                if ((id ?? 0m) == 0m)
                                {
                                    PXDataField[] pars = 
                                        new PXDataField[sender.Keys.Count + 1];
                                    pars[0] = new PXDataField(_DatabaseFieldName);
                                    for (int i = 0; i &lt; sender.Keys.Count; i++)
                                    {
                                        string name = sender.Keys[i];
                                        PXCommandPreparingEventArgs.
                                            FieldDescription description = null;
                                        sender.RaiseCommandPreparing(
                                            name, e.Row, 
                                            sender.GetValue(e.Row, name), 
                                            PXDBOperation.Select, 
                                            _BqlTable, out description);
                                        if (description != null &amp;&amp;
                                                description.Expr != null &amp;&amp; 
                                            description.IsRestriction)
                                        {
                                            pars[i + 1] = new PXDataFieldValue(
                                                description.Expr, 
                                                description.DataType, 
                                                description.DataLength, 
                                                description.DataValue);
                                        }
                                    }
                                    using (PXDataRecord record = 
                                        PXDatabase.SelectSingle(_BqlTable, pars))
                                    {
                                        if (record != null)
                                            id = record.GetInt32(0);
                                    }
                                }
                                sender.SetValue(e.Row, _FieldOrdinal, id);
                            }
                            else
                                _KeyToAbort = null;
                        }
                        else if (e.TranStatus == PXTranStatus.Aborted &amp;&amp; 
                                 _KeyToAbort != null)
                        {
                            sender.SetValue(e.Row, _FieldOrdinal, _KeyToAbort);
                            _KeyToAbort = null;
                        }
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses a redefinition of the attribute method to restore the values of a DAC field if the commitment failed—resulting in the &lt;tt&gt;Aborted&lt;/tt&gt; status of the transaction scope." lang="CS">
            public class AddressRevisionIDAttribute : PXEventSubscriberAttribute, 
                                                      IPXRowPersistingSubscriber, 
                                                      IPXRowPersistedSubscriber
            {
                ...
                
                public virtual void RowPersisted(PXCache sender, 
                                                 PXRowPersistedEventArgs e)
                {
                    if (e.TranStatus == PXTranStatus.Aborted &amp;&amp; 
                        (e.Operation == PXDBOperation.Insert || e.Operation == 
                         PXDBOperation.Update))
                    {
                        int? revision = (int?)sender.GetValue(e.Row, _FieldOrdinal);
                        revision--;
                        sender.SetValue(e.Row, _FieldOrdinal, revision);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRowPersistedEventArgs">
            <summary>Provides data for the <tt>RowPersisted</tt> event.</summary>
            <seealso cref="T:PX.Data.PXRowPersisted"/>
        </member>
        <member name="M:PX.Data.PXRowPersistedEventArgs.#ctor(System.Object,PX.Data.PXDBOperation,PX.Data.PXTranStatus,System.Exception)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="operation"></param>
            <param name="tranStatus"></param>
            <param name="exception"></param>
        </member>
        <member name="P:PX.Data.PXRowPersistedEventArgs.Row">
            <summary>Returns the DAC object that has been committed to the database.</summary>
        </member>
        <member name="P:PX.Data.PXRowPersistedEventArgs.TranStatus">
            <summary>Returns the status of the transaction scope associated with the
            current commitment.</summary>
        </member>
        <member name="P:PX.Data.PXRowPersistedEventArgs.Operation">
            <summary>Returns the <tt>PXDBOperation</tt> value, indicating the type of
            the current commitment.</summary>
        </member>
        <member name="P:PX.Data.PXRowPersistedEventArgs.Exception">
            <summary>Returns the <tt>Exception</tt> object, which is thrown while changes are
            committed to the database.</summary>
        </member>
        <member name="T:PX.Data.PXFieldSelecting">
            <summary>
              <para>The delegate for the <tt>FieldSelecting</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXFieldSelectingEventArgs">PXFieldSelectingEventArgs</see> type
            that holds data for the <tt>FieldSelecting</tt> event.</param>
            <remarks>
              <para>The <tt>FieldSelecting</tt> event is generated in the following cases:</para>
              <list type="bullet">
                <item>When the external representation—the way the value should be displayed in the UI—of
                a data access class field (DAC) value is requested
                from the UI or through the Web Service API.</item>
                <item>When any of the following methods of the <tt>PXCache</tt> class initiates the assigning the default value to a field:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li></ul></item>
                <item>While a field is updated in the <tt>PXCache</tt> object, and this action is initiated
                by any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Update(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li></ul></item>
                <item>While a DAC field value is requested through any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>GetValueInt(object, string)</tt></li><li><tt>GetValueIntField(object)</tt></li><li><tt>GetValueExt(object, string)</tt></li><li><tt>GetValueExt&lt;Field&gt;(object)</tt></li><li><tt>GetValuePending(object, string)</tt></li><li><tt>ToDictionary(object)</tt></li><li><tt>GetStateExt(object, string)</tt></li><li><tt>GetStateExt&lt;Field&gt;(object)</tt></li></ul></item>
              </list>
              <para>The <tt>FieldSelecting</tt> event handler is used to perform the following actions:</para>
              <list type="bullet">
                <item>Conversion of the internal presentation of a DAC field (the data field value of a DAC instance)
                to the external presentation (the value displayed in the UI)</item>
                <item>Conversion of the values of multiple DAC fields to a single external presentation</item>
                <item>Provision of additional information to set up a DAC field input control or cell presentation</item>
              </list>
              <para>The following execution order is used for the <tt>FieldSelecting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_FieldSelecting(
              PXCache sender, 
              PXFieldSelectingEventArgs e) 
            { 
              ... 
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.FieldSelecting&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.FieldSelecting&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code converts the DAC field value to its external presentation by using a redefinition of the attribute method." lang="CS">
            public class PXTimeSpanLongAttribute : PXIntAttribute
            {
                ...
                
                public override void FieldSelecting(PXCache sender, 
                                                    PXFieldSelectingEventArgs e)
                {
                    if (_AttributeLevel == PXAttributeLevel.Item || e.IsAltered)
                    {
                        string inputMask = this.inputMask ?? 
                                           _inputMasks[(int)this._Format];
                        int lenght = this.inputMask != null ? _maskLenght : 
                                                       _lengths[(int)this._Format];
                        inputMask = PXMessages.LocalizeNoPrefix(inputMask);
                        e.ReturnState = PXStringState.CreateInstance(
                            e.ReturnState, 
                            lenght, 
                            null, 
                            _FieldName, 
                            _IsKey, 
                            null, 
                            String.IsNullOrEmpty(inputMask) ? null : inputMask, 
                            null, null, null, null);
                    }
                    if (e.ReturnValue != null)
                    {
                        TimeSpan span = new TimeSpan(0, 0, (int)e.ReturnValue, 0);
                        int hours = 
                            (this._Format == TimeSpanFormatType.LongHoursMinutes) ?
                            span.Days * 24 + span.Hours :  span.Hours;
                        e.ReturnValue = string.Format(_outputFormats[(int)this._Format], 
                                                      span.Days, hours, span.Minutes);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code calculates the external value of a DAC field by using the classic event handler approach." lang="CS">
            [TableAndChartDashboardType]
            public class RevalueAPAccounts : PXGraph&lt;RevalueAPAccounts&gt;
            {
                ...
                
                protected virtual void RevalueFilter_TotalRevalued_FieldSelecting(
                    PXCache sender, 
                    PXFieldSelectingEventArgs e)
                {
                    if (e.Row == null) return;
             
                    decimal val = 0m;
                    foreach (RevaluedAPHistory res in APAccountList.Cache.Updated)
                        if ((bool)res.Selected)
                            val += (decimal)res.FinPtdRevalued;
                    e.ReturnValue = val;
                    e.Cancel = true;
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code calculates the external value of a DAC field by using the generic event handler approach." lang="CS">
            [TableAndChartDashboardType]
            public class RevalueAPAccounts : PXGraph&lt;RevalueAPAccounts&gt;
            {
                ...
                
                protected virtual void _(Events.FieldSelecting&lt;RevalueFilter.TotalRevalued&gt; e)
                {
                    if (e.Row == null) return;
             
                    decimal val = 0m;
                    foreach (RevaluedAPHistory res in APAccountList.Cache.Updated)
                        if ((bool)res.Selected)
                            val += (decimal)res.FinPtdRevalued;
                    e.Args.ReturnValue = val;
                    e.Args.Cancel = true;
                }
                
                ...
            }</code>
              <code title="Example4a" description="The following code defines the mask for the input control or the cell presentation of a DAC field by using a redefinition of the attribute method." lang="CS">
            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Parameter | 
                            AttributeTargets.Class | AttributeTargets.Method)]
            public class PXDBStringWithMaskAttribute : PXDBStringAttribute, 
                                                       IPXFieldSelectingSubscriber 
            {
                ...
                
                public override void FieldSelecting(PXCache sender, 
                                                    PXFieldSelectingEventArgs e)
                {
                    if (e.Row == null) return;
             
                    string mask = this.FindMask(sender, e.Row);
                    if (!string.IsNullOrEmpty(mask))
                        e.ReturnState = PXStringState.CreateInstance(e.ReturnState, 
                                                                     _Length, 
                                                                     null, 
                                                                     _FieldName, 
                                                                     _IsKey, 
                                                                     null, 
                                                                     mask, 
                                                                     null, null, null, 
                                                                     null);
                    else
                        base.FieldSelecting(sender, e);
                }
                
                ...
            }</code>
              <code title="Example6a" description="The following code defines the lists of values and labels for the PXDropDown input control of the DAC field by using a redefinition of the attribute method." lang="CS">
            [AttributeUsage(AttributeTargets.Property | AttributeTargets.Class | 
                            AttributeTargets.Parameter | AttributeTargets.Method)]
            [PXAttributeFamily(typeof(PXBaseListAttribute))]
            public class PXStringListAttribute : PXEventSubscriberAttribute, 
                                                 IPXFieldSelectingSubscriber
            {
                ...
                
                public virtual void FieldSelecting(PXCache sender, 
                                                   PXFieldSelectingEventArgs e)
                {
                    if (_AttributeLevel == PXAttributeLevel.Item || e.IsAltered)
                    {
                        string[] values = _AllowedValues;
                        e.ReturnState = PXStringState.CreateInstance(
                            e.ReturnState, null, null, _FieldName,
                            null, -1, null, values, _AllowedLabels,
                            _ExclusiveValues, null);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXFieldSelectingEventArgs">
            <summary>Provides data for the <tt>FieldSelecting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXFieldSelecting"/>
        </member>
        <member name="M:PX.Data.PXFieldSelectingEventArgs.#ctor(System.Object,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="returnValue"></param>
            <param name="isAltered"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXFieldSelectingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXFieldSelectingEventArgs.ReturnState">
            <summary>Returns or sets the data used to set up the DAC field input control
            or cell presentation.</summary>
        </member>
        <member name="P:PX.Data.PXFieldSelectingEventArgs.IsAltered">
            <summary>Returns or sets the value indicating whether the
            <tt>ReturnState</tt> property should be created for each data
            record.</summary>
        </member>
        <member name="P:PX.Data.PXFieldSelectingEventArgs.ReturnValue">
            <summary>Returns or sets the external presentation of the value of the
            DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldSelectingEventArgs.ExternalCall">
            <summary>Returns <tt>true</tt> if the current DAC field has been
            selected in the UI or through the Web Service API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXFieldDefaulting">
            <summary>
              <para>The delegate for the <tt>FieldDefaulting</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXFieldDefaultingEventArgs">PXFieldDefaultingEventArgs</see>
            type that holds data for a <tt>FieldDefaulting</tt> event.</param>
            <remarks>
              <para>The <tt>FieldDefaulting</tt> event is generated in either of the following cases:</para>
              <list type="bullet">
                <item>A new record is inserted into the <tt>PXCache</tt> object by user action in the user interface or via the Web API.</item>
                <item>Any of the following methods of the <tt>PXCache</tt> class initiates the assigning the default value to a field:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li><li><tt>SetDefaultExt(object, string)</tt></li><li><tt>SetDefaultExt(object)</tt></li></ul></item>
              </list>
              <para>The <tt>FieldDefaulting</tt> event handler is used to generate and assign the default value to a data access class (DAC) field.</para>
              <para>The following execution order is used for the <tt>FieldDefaulting</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_FieldDefaulting(
                PXCache sender, 
                PXFieldDefaultingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.FieldDefaulting&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.FieldDefaulting&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The example below shows how to generate a default value for a DAC field by using the classic event handler approach." lang="CS">
            public class POOrderEntry : PXGraph&lt;POOrderEntry, POOrder&gt;, 
                                        PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void POOrder_ExpectedDate_FieldDefaulting(
                    PXCache sender, 
                    PXFieldDefaultingEventArgs e)
                {
                    POOrder row = (POOrder)e.Row;
                    Location vendorLocation = this.location.Current;
                    if (row != null &amp;&amp; row.OrderDate.HasValue)
                    {
                        int offset = (vendorLocation != null ? 
                                     (int)(vendorLocation.VLeadTime ?? 0) : 0);
                        e.NewValue = row.OrderDate.Value.AddDays(offset);
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The example below shows how to generate a default value for a DAC field by using the generic event handler approach." lang="CS">
            public class POOrderEntry : PXGraph&lt;POOrderEntry, POOrder&gt;, 
                                        PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void _(Events.FieldDefaulting&lt;POOrder.ExpectedDate&gt; e)
                {
                    POOrder row = (POOrder)e.Row;
                    Location vendorLocation = this.location.Current;
                    if (row != null &amp;&amp; row.OrderDate.HasValue)
                    {
                        int offset = (vendorLocation != null ? 
                                     (int)(vendorLocation.VLeadTime ?? 0) : 0);
                        e.NewValue = row.OrderDate.Value.AddDays(offset);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXFieldDefaultingEventArgs">
            <summary>Provides data for the <tt>FieldDefaulting</tt> event.</summary>
            <seealso cref="T:PX.Data.PXFieldDefaulting"/>
        </member>
        <member name="M:PX.Data.PXFieldDefaultingEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row">The current DAC object.</param>
        </member>
        <member name="P:PX.Data.PXFieldDefaultingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXFieldDefaultingEventArgs.NewValue">
            <summary>Returns or sets the default value for a DAC field.</summary>
        </member>
        <member name="T:PX.Data.PXFieldUpdating">
            <summary>
              <para>The delegate for the <tt>FieldUpdating</tt> event.</para>
              <para></para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXFieldUpdatingEventArgs">PXFieldUpdatingEventArgs</see>
            type that holds data for the <tt>FieldUpdating</tt> event.</param>
            <remarks>
              <para>In the following cases, the <tt>FieldUpdating</tt> event is generated for a data access class (DAC) field
              before the field is updated:</para>
              <list type="bullet">
                <item>For each DAC field value that is received
                from the UI or through the Web Service
                API when a data record is being inserted or updated.</item>
                <item>For each DAC key field value in the process
                of deleting a data record when the deletion is initiated
                from the UI or through the Web Service API.</item>
                <item>When any of the following methods of the <tt>PXCache</tt> class
                initiates the assigning of the default value to a field:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li><li><tt>SetDefaultExt(object, string)</tt></li><li><tt>SetDefaultExt&lt;Field&gt;(object)</tt></li></ul></item>
                <item>When any of the following methods of the <tt>PXCache</tt> class
                initiates the updating of a field:
                    <ul><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>SetValueExt(object, string, object)</tt></li><li><tt>SetValueExt&lt;Field&gt;(object, object)</tt></li><li><tt>SetValuePending(object, string, object)</tt></li><li><tt>SetValuePending&lt;Field&gt;(object, object)</tt></li></ul></item>
                <item>When the conversion of the external DAC key field presentation
                to the internal field value is initiated by the following <tt>PXCache</tt> class methods:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>FieldUpdating</tt> event handler is used when either or both of the following occur:</para>
              <list type="bullet">
                <item>The external presentation of a DAC field (the value displayed in the UI) differs from the value stored in the DAC.</item>
                <item>The storage of values is spread among multiple DAC fields (database columns).</item>
              </list>
              <para>In both cases, the application should implement both the <tt>FieldUpdating</tt> and
              <tt>FieldSelecting</tt> events.</para>
              <para>The following execution order is used for the <tt>FieldUpdating</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_FieldUpdating(
                PXCache sender, 
                PXFieldUpdatingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.FieldUpdating&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.FieldUpdating&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example3a" description="The following code spreads the external presentation of a field among multiple DAC fields by using the classic event handler approach." lang="CS">
            protected void Batch_ManualStatus_FieldUpdating(PXCache sender, PXFieldUpdatingEventArgs e)
            {
                Batch batch = (Batch)e.Row;
                if (batch != null &amp;&amp; e.NewValue != null)
                {
                    switch ((string)e.NewValue)
                    {
                        case "H":
                            batch.Hold = true;
                            batch.Released = false;
                            batch.Posted = false;
                            break;
                        case "B":
                            batch.Hold = false;
                            batch.Released = false;
                            batch.Posted = false;
                            break;
                        case "U":
                            batch.Hold = false;
                            batch.Released = true;
                            batch.Posted = false;
                            break;
                        case "P":
                            batch.Hold = false;
                            batch.Released = true;
                            batch.Posted = true;
                            break;
                    }
               }
            }
             
            protected void Batch_ManualStatus_FieldSelecting(PXCache sender, PXFieldSelectingEventArgs e)
            {
                Batch batch = (Batch)e.Row;
                if (batch != null)
                {
                    if (batch.Hold == true)
                    {
                        e.ReturnValue = "H";
                    }
                    else if (batch.Released != true)
                    {
                        e.ReturnValue = "B";
                    }
                    else if (batch.Posted != true)
                    {
                        e.ReturnValue = "U";
                    }
                    else
                    {
                        e.ReturnValue = "P";
                    }
                }
            }</code>
              <code title="Example3b" description="The following code spreads the external presentation of a field among multiple DAC fields by using the classic event handler approach." lang="CS">
            protected void _(Events.FieldUpdating&lt;Batch.ManualStatus&gt; e)
            {
                Batch batch = (Batch)e.Row;
                if (batch != null &amp;&amp; e.NewValue != null)
                {
                    switch ((string)e.NewValue)
                    {
                        case "H":
                            batch.Hold = true;
                            batch.Released = false;
                            batch.Posted = false;
                            break;
                        case "B":
                            batch.Hold = false;
                            batch.Released = false;
                            batch.Posted = false;
                            break;
                        case "U":
                            batch.Hold = false;
                            batch.Released = true;
                            batch.Posted = false;
                            break;
                        case "P":
                            batch.Hold = false;
                            batch.Released = true;
                            batch.Posted = true;
                            break;
                    }
               }
            }
             
            protected void _(Events.FieldSelecting&lt;Batch.ManualStatus&gt; e)
            {
                Batch batch = (Batch)e.Row;
                if (batch != null)
                {
                    if (batch.Hold == true)
                    {
                        e.ReturnValue = "H";
                    }
                    else if (batch.Released != true)
                    {
                        e.ReturnValue = "B";
                    }
                    else if (batch.Posted != true)
                    {
                        e.ReturnValue = "U";
                    }
                    else
                    {
                        e.ReturnValue = "P";
                    }
                }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXFieldUpdatingEventArgs">
            <summary>Provides data for the <tt>FieldUpdating</tt> event.</summary>
            <seealso cref="T:PX.Data.PXFieldUpdating"/>
        </member>
        <member name="M:PX.Data.PXFieldUpdatingEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:PX.Data.PXFieldUpdatingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXFieldUpdatingEventArgs.NewValue">
            <summary>Returns or sets the internal DAC field value.</summary>
        </member>
        <member name="T:PX.Data.PXFieldVerifying">
            <summary>
              <para>The delegate for the <tt>FieldVerifying</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXFieldVerifyingEventArgs">PXFieldVerifyingEventArgs</see>
            type that holds data for the <tt>PXFieldVerifying</tt> event.</param>
            <remarks>
              <para>The system generates the <tt>FieldVerifying</tt> event for each data access class (DAC) field
              of a data record that is inserted or updated in the
            <tt>PXCache</tt> object in the following processes:</para>
              <list type="bullet">
                <item>Insertion or update that is initiated in the UI
                or through the Web Service API.</item>
                <item>Assignment of the default value to the DAC field that is initiated by any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li><li><tt>SetDefaultExt(object, string)</tt></li><li><tt>SetDefaultExt&lt;Event&gt;(object)</tt></li></ul></item>
                <item>A DAC field update that is initiated by any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Update(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>SetValueExt(object, string, object)</tt></li><li><tt>SetValueExt&lt;Field&gt;(object, object)</tt></li></ul></item>
                <item>Validation of a DAC key field value when the validation is initiated by any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Locate(IDictionary)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>FieldVerifying</tt> event handler is used to perform the following actions:</para>
              <list type="bullet">
                <item>Implementation of the business logic associated with the validation of the DAC field value before the value is assigned to the DAC field.</item>
                <item>Cancellation of the assigning of a value by throwing an exception of the <tt>PXSetPropertyException</tt>
                type if the value does not meet the requirements.</item>
                <item>Conversion of the external presentation of a DAC field value to the internal presentation
                and implementation of the associated business logic. The internal presentation is the value stored in a DAC instance.</item>
              </list>
              <para>The following execution order is used for the <tt>FieldVerifying</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_FieldVerifying(
                PXCache sender, 
                PXFieldVerifyingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.FieldVerifying&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.FieldVerifying&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code validates the new value of a DAC field by using the classic event handler approach." lang="CS">
            public class APPaymentEntry : APDataEntryGraph&lt;APPaymentEntry, APPayment&gt;
            {
                ...
                
                protected virtual void APPayment_AdjDate_FieldVerifying(
                    PXCache sender, 
                    PXFieldVerifyingEventArgs e)
                {
                    if ((bool)((APPayment)e.Row).VoidAppl == false &amp;&amp; 
                        vendor.Current != null &amp;&amp; (bool)vendor.Current.Vendor1099)
                    {
                        string Year1099 = ((DateTime)e.NewValue).Year.ToString();
                        AP1099Year year = PXSelect&lt;
                            AP1099Year, 
                            Where&lt;AP1099Year.finYear, 
                                  Equal&lt;Required&lt;AP1099Year.finYear&gt;&gt;&gt;&gt;.
                            Select(this, Year1099);
                        if (year != null &amp;&amp; year.Status != "N")
                            throw new PXSetPropertyException(
                                Messages.AP1099_PaymentDate_NotIn_OpenYear);
                    }
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code validates the new value of a DAC field by using the generic event handler approach." lang="CS">
            public class APPaymentEntry : APDataEntryGraph&lt;APPaymentEntry, APPayment&gt;
            {
                ...
                
                protected virtual void _(Events.FieldVerifying&lt;APPayment.AdjDate&gt; e)
                {
                    if ((bool)((APPayment)e.Row).VoidAppl == false &amp;&amp; 
                        vendor.Current != null &amp;&amp; (bool)vendor.Current.Vendor1099)
                    {
                        string Year1099 = ((DateTime)e.NewValue).Year.ToString();
                        AP1099Year year = PXSelect&lt;
                            AP1099Year, 
                            Where&lt;AP1099Year.finYear, 
                                  Equal&lt;Required&lt;AP1099Year.finYear&gt;&gt;&gt;&gt;.
                            Select(this, Year1099);
                        if (year != null &amp;&amp; year.Status != "N")
                            throw new PXSetPropertyException(
                                Messages.AP1099_PaymentDate_NotIn_OpenYear);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to validate the external presentation of a DAC field value and convert it to the internal presentation if the validation succeeds." lang="CS">
            [TableAndChartDashboardType]
            public class CAReconEnq : PXGraph&lt;CAReconEnq&gt;
            {
                ...
                
                protected virtual void CashAccountFilter_CashAccountID_FieldVerifying(
                    PXCache sender, 
                    PXFieldVerifyingEventArgs e)
                {
                    CashAccountFilter createReconFilter = (CashAccountFilter)e.Row;
                    if (!e.NewValue is string) return;
                    CashAccount acct = 
                        PXSelect&lt;CashAccount, 
                                 Where&lt;CashAccount.accountCD, 
                                       Equal&lt;Required&lt;CashAccount.accountCD&gt;&gt;&gt;&gt;.
                            Select(this, (string)e.NewValue);
                    if (acct != null &amp;&amp; acct.Reconcile != true)
                        throw new PXSetPropertyException(Messages.CashAccounNotReconcile);
                    e.NewValue = acct.AccountID;
                }
                
                ...
            }</code>
              <code title="Example3b" description="The following code uses the generic event handler approach to validate the external presentation of a DAC field value and convert it to the internal presentation if the validation succeeds." lang="CS">
            [TableAndChartDashboardType]
            public class CAReconEnq : PXGraph&lt;CAReconEnq&gt;
            {
                ...
                
                protected virtual void _(Events.FieldVerifying&lt;CashAccountFilter.CashAccountID&gt; e)
                {
                    CashAccountFilter createReconFilter = (CashAccountFilter)e.Row;
                    if (!e.NewValue is string) return;
                    CashAccount acct = 
                        PXSelect&lt;CashAccount, 
                                 Where&lt;CashAccount.accountCD, 
                                       Equal&lt;Required&lt;CashAccount.accountCD&gt;&gt;&gt;&gt;.
                            Select(this, (string)e.NewValue);
                    if (acct != null &amp;&amp; acct.Reconcile != true)
                        throw new PXSetPropertyException(Messages.CashAccounNotReconcile);
                    e.NewValue = acct.AccountID;
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXFieldVerifyingEventArgs">
            <summary>Provides data for the <tt>FieldVerifying</tt> event.</summary>
            <seealso cref="T:PX.Data.PXFieldVerifying"/>
        </member>
        <member name="M:PX.Data.PXFieldVerifyingEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="newValue"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXFieldVerifyingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXFieldVerifyingEventArgs.NewValue">
            <summary>Returns or sets the new value of the current DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldVerifyingEventArgs.ExternalCall">
            <summary>Returns <tt>true</tt> if the new value of the current DAC
            field has been received from the UI or through the Web Service
            API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXFieldUpdated">
            <summary>
              <para>The delegate for the <tt>FieldUpdated</tt> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXFieldUpdatedEventArgs">PXFieldUpdatedEventArgs</see>
            type that holds data for the <tt>FieldUpdated</tt> event.</param>
            <remarks>
              <para>In the following cases, the <tt>FieldUpdated</tt> event is generated after a data access class (DAC) field is actually updated:</para>
              <list type="bullet">
                <item>For each DAC field value that is received
                from the UI or through the Web Service API when a data record is
                inserted or updated in the <tt>PXCache</tt> object.</item>
                <item>For each DAC key field value in the process of deleting a data record
                from the <tt>PXCache</tt> object when the deletion is initiated from the UI or
                through the Web Service API.</item>
                <item>When any of the following methods of the <tt>PXCache</tt> class
                initiates the assigning of a default value to a field:
                    <ul><li><tt>Insert()</tt></li><li><tt>Insert(object)</tt></li><li><tt>Insert(IDictionary)</tt></li><li><tt>SetDefaultExt(object, string)</tt></li><li><tt>SetDefaultExt&lt;Event&gt;(object)</tt></li></ul></item>
                <item>When the field update is initiated
                by any of the following methods of the <tt>PXCache</tt> class:
                    <ul><li><tt>Update(object)</tt></li><li><tt>SetValueExt(object, string, object)</tt></li><li><tt>SetValueExt&lt;Field&gt;(object, object)</tt></li></ul></item>
                <item>During the validation of the DAC key field value
                that is initiated by any of the following <tt>PXCache</tt> class methods:
                    <ul><li><tt>Locate(IDictionary)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>Delete(IDictionary, IDictionary)</tt></li></ul></item>
              </list>
              <para>The <tt>FieldUpdated</tt> event handler is used to implement the business logic
              related to the changes to the value of the DAC field in the following cases:</para>
              <list type="bullet">
                <item>To update the related fields of a data record containing a modified field or assigning default values to these fields</item>
                <item>To update any of the following:
                    <ul><li>The detail data records in a one-to-many relationship</li>
                    <li>The related data records in a one-to-one relationship</li>
                    <li>The master data records in a many-to-one relationship</li></ul></item>
              </list>
              <para>The following execution order is used for the <tt>FieldUpdated</tt> event handlers:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_FieldUpdated(
                PXCache sender, 
                PXFieldUpdatedEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.FieldUpdated&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.FieldUpdated&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to update the related field values of the current data record, assign them the default values, or perform both actions." lang="CS">
            public class APInvoiceEntry : APDataEntryGraph&lt;APInvoiceEntry,
                                          APInvoice&gt;, 
                                          PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void APTran_UOM_FieldUpdated(
                    PXCache sender, 
                    PXFieldUpdatedEventArgs e)
                {
                    APTran tran = (APTran)e.Row;
                    sender.SetDefaultExt&lt;APTran.unitCost&gt;(tran);
                    sender.SetDefaultExt&lt;APTran.curyUnitCost&gt;(tran);
                    sender.SetValue&lt;APTran.unitCost&gt;(tran, null);
                }
                
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to update the related field values of the current data record, assign them the default values, or perform both actions." lang="CS">
            public class APInvoiceEntry : APDataEntryGraph&lt;APInvoiceEntry,
                                          APInvoice&gt;, 
                                          PXImportAttribute.IPXPrepareItems
            {
                ...
                
                protected virtual void _(Events.FieldUpdated&lt;APTran.UOM&gt; e)
                {
                    APTran tran = (APTran)e.Row;
                    e.Cache.SetDefaultExt&lt;APTran.unitCost&gt;(tran);
                    e.Cache.SetDefaultExt&lt;APTran.curyUnitCost&gt;(tran);
                    e.Cache.SetValue&lt;APTran.unitCost&gt;(tran, null);
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code updates the related data records by using the classic event handler approach." lang="CS">
            public class ARCashSaleEntry : ARDataEntryGraph&lt;ARCashSaleEntry,
                                                            ARCashSale&gt;
            {
                ...
                
                protected virtual void ARCashSale_ProjectID_FieldUpdated(
                    PXCache sender, 
                    PXFieldUpdatedEventArgs e)
                {
                    ARCashSale row = e.Row as ARCashSale;
             
                    foreach (ARTran tran in Transactions.Select())
                        Transactions.Cache.SetDefaultExt&lt;ARTran.projectID&gt;(tran);
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code updates the related data records by using the generic event handler approach." lang="CS">
            public class ARCashSaleEntry : ARDataEntryGraph&lt;ARCashSaleEntry,
                                                            ARCashSale&gt;
            {
                ...
                
                protected virtual void _(Events.FieldUpdated&lt;ARCashSale.ProjectID&gt; e)
                {
                    ARCashSale row = e.Row as ARCashSale;
             
                    foreach (ARTran tran in Transactions.Select())
                        Transactions.Cache.SetDefaultExt&lt;ARTran.projectID&gt;(tran);
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXFieldUpdatedEventArgs">
            <summary>Provides data for the <tt>FieldUpdated</tt> event.</summary>
            <seealso cref="T:PX.Data.PXFieldUpdated"/>
        </member>
        <member name="M:PX.Data.PXFieldUpdatedEventArgs.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row"></param>
            <param name="oldValue"></param>
            <param name="externalCall"></param>
        </member>
        <member name="P:PX.Data.PXFieldUpdatedEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXFieldUpdatedEventArgs.OldValue">
            <summary>Returns the previous value of the current DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldUpdatedEventArgs.ExternalCall">
            <summary>Returns <tt>true</tt> if the new value of the
            current DAC field has been changed in the UI or through the Web
            Service API; otherwise, it returns <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXExceptionHandling">
            <summary>
              <para>The delegate for the <code>ExceptionHandling</code> event.</para>
            </summary>
            <param name="sender">Required. The cache object that raised the event.</param>
            <param name="args">Required. The instance of the <see cref="T:PX.Data.PXExceptionHandlingEventArgs">PXExceptionHandlingEventArgs</see>
            type that holds data for the <tt>ExceptionHandling</tt> event.</param>
            <remarks>
              <para>The <tt>ExceptionHandling</tt> event is generated in the following cases:</para>
              <list type="bullet">
                <item>The <tt>PXSetPropertyException</tt> exception is thrown while the system is processing
                a data access class (DAC) field value received from the UI or
                through the Web Service API when a data record
                is being inserted or updated in the <tt>PXCache</tt> object.</item>
                <item>The <tt>PXSetPropertyException</tt> exception is thrown while the system is processing
                DAC key field values when the deletion of a data record from the <tt>PXCache</tt> object
                is initiated in the UI or through the Web Service API.</item>
                <item>The <tt>PXSetPropertyException</tt> exception is thrown when the system is assigning the default value to a field
                or updating the value when the assignment or update is initiated by any
                of the following methods of the <tt>PXCache</tt> class:
                <ul><li><tt>Insert(IDictionary)</tt></li><li><tt>SetDefaultExt(object, string)</tt></li><li><tt>SetDefaultExt&lt;Field&gt;(object)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>SetValueExt(object, string, object)</tt></li><li><tt>SetValueExt&lt;Field&gt;(object, object</tt></li></ul></item>
                <item>The <tt>PXSetPropertyException</tt> exception is thrown while the system is converting
                the external DAC key field presentation to the internal field value initiated by any of the following methods
                of the <tt>PXCache</tt> class:
                <ul><li><tt>Locate(IDictionary)</tt></li><li><tt>Update(IDictionary, IDictionary)</tt></li><li><tt>Delete(IDictionary, IDictionary)</tt></li></ul></item>
                <item>The <tt>PXCommandPreparingException</tt>, <tt>PXRowPersistingException</tt>, or <tt>PXRowPersistedException</tt>
                exception is thrown when an inserted, updated, or deleted data record is saved in the database.</item>
              </list>
              <para>The <code>ExceptionHandling</code> event handler is used to do the following:</para>
              <list type="bullet">
                <item>Catch and handle the exceptions mentioned above (the platform rethrows all unhandled exceptions)</item>
                <item>Implement non-standard handling of the exceptions mentioned above</item>
              </list>
              <para>The following execution order is used for the <tt>ExceptionHandling</tt> event handlers:</para>
              <list type="number">
                <item>Graph event handlers are executed.</item>
                <item>If <tt>e.Cancel</tt> is <tt>false</tt>, attribute event handlers are executed.</item>
              </list>
            </remarks>
            <example>
              <code title="Example1a" description="According to the naming convention for graph event handlers in Acumatica Framework, the classic event handler must have the following signature." lang="CS">
            protected virtual void DACName_FieldName_ExceptionHandling(
                PXCache sender, 
                PXExceptionHandlingEventArgs e)
            {
                ...
            }</code>
              <code title="Example1b" description="The generic event handler must have the following signature." lang="CS">
            protected virtual void _(Events.ExceptionHandling&lt;DACType, FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example1c" description="The generic event handler signature can contain only the field parameter; it can omit the DAC parameter if this field belongs to the DAC. Following is the signature with only one parameter." lang="CS">
            protected virtual void _(Events.ExceptionHandling&lt;FieldType&gt; e)
            {
                ...
            }</code>
              <code title="Example2a" description="The following code uses the classic event handler approach to handle an exception on a DAC field and set the field value." lang="CS">
            public class APVendorBalanceEnq : PXGraph&lt;APVendorBalanceEnq&gt;
            {
                ...
             
                protected virtual void APHistoryFilter_AccountID_ExceptionHandling(
                    PXCache sender, 
                    PXExceptionHandlingEventArgs e)
                {
                    APHistoryFilter header = e.Row as APHistoryFilter;
                    if (header != null)
                    {
                        e.Cancel = true;
                        header.AccountID = null;
                    }
                }
             
                ...
            }</code>
              <code title="Example2b" description="The following code uses the generic event handler approach to handle an exception on a DAC field and set the field value." lang="CS">
            public class APVendorBalanceEnq : PXGraph&lt;APVendorBalanceEnq&gt;
            {
                ...
             
                protected virtual void _(Events.ExceptionHandling&lt;APHistoryFilter.AccountID&gt; e)
                {
                    APHistoryFilter header = e.Row as APHistoryFilter;
                    if (header != null)
                    {
                        e.Cancel = true;
                        header.AccountID = null;
                    }
                }
             
                ...
            }</code>
              <code title="Example3a" description="The following code uses the classic event handler approach to alter an exception on a DAC field by setting its description." lang="CS">
            public class CustomerMaint : 
                BusinessAccountGraphBase&lt;Customer, Customer, 
                                         Where&lt;BAccount.type,
                                               Equal&lt;BAccountType.customerType&gt;,
                                               Or&lt;BAccount.type, 
                                                  Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
             
                protected virtual void Customer_CustomerClassID_ExceptionHandling(
                    PXCache sender, 
                    PXExceptionHandlingEventArgs e)
                {
                    PXSetPropertyException ex = e.Exception as PXSetPropertyException;
                    if (ex != null)
                    {
                        ex.SetMessage(ex.Message + System.Environment.NewLine + 
                                      System.Environment.NewLine + 
                                      "Stack Trace:" + System.Environment.NewLine + 
                                      ex.StackTrace);
                    }
                }
                
                ...
            }</code>
              <code title="Example3a" description="The following code uses the generic event handler approach to alter an exception on a DAC field by setting its description." lang="CS">
            public class CustomerMaint : 
                BusinessAccountGraphBase&lt;Customer, Customer, 
                                         Where&lt;BAccount.type,
                                               Equal&lt;BAccountType.customerType&gt;,
                                               Or&lt;BAccount.type, 
                                                  Equal&lt;BAccountType.combinedType&gt;&gt;&gt;&gt;
            {
                ...
             
                protected virtual void _(Events.ExceptionHandling&lt;Customer.CustomerClassID&gt; e)
                {
                    PXSetPropertyException ex = e.Exception as PXSetPropertyException;
                    if (ex != null)
                    {
                        ex.SetMessage(ex.Message + System.Environment.NewLine + 
                                      System.Environment.NewLine + 
                                      "Stack Trace:" + System.Environment.NewLine + 
                                      ex.StackTrace);
                    }
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXExceptionHandlingEventArgs">
            <summary>Provides data for the <tt>ExceptionHandling</tt> event.</summary>
            <seealso cref="T:PX.Data.PXExceptionHandling"/>
        </member>
        <member name="M:PX.Data.PXExceptionHandlingEventArgs.#ctor(System.Object,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the class with the provided values.
            </summary>
            <param name="row">The data record.</param>
            <param name="newValue">The new value.</param>
            <param name="exception">The exception instance.</param>
        </member>
        <member name="P:PX.Data.PXExceptionHandlingEventArgs.Row">
            <summary>Returns the current DAC object.</summary>
        </member>
        <member name="P:PX.Data.PXExceptionHandlingEventArgs.NewValue">
            <summary>Returns or sets the values of the DAC field. By default, this property
            contains one of the following groups of values:<ul>
            <li>The values that are generated in the process of assigning the default value to a DAC field</li>
            <li>The values that are passed as new values when a field is updated</li>
            <li>The values that are entered in the UI or through the Web Service API</li>
            <li>The values that are received with the <tt>PXCommandPreparingException</tt>,
            <tt>PXRowPersistingException</tt>, or <tt>PXRowPersistedException</tt> exception</li>
            </ul></summary>
        </member>
        <member name="P:PX.Data.PXExceptionHandlingEventArgs.Exception">
            <summary>Returns the initial exception that caused the event to be generated.</summary>
        </member>
        <member name="T:PX.Data.PXOverridableException">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXOverridableException.MapErrorTo">
            <summary>
            Gets oe Set fieldname to map exception to
            </summary>
        </member>
        <member name="T:PX.Data.PXOperationCompletedException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOperationCompletedWithErrorException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOperationCompletedSingleErrorException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOperationCompletedWithWarningException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetupNotEnteredException">
            <summary>An exception type that is used to indicate that the required data isn't entered on the setup form.</summary>
        </member>
        <member name="M:PX.Data.PXSetupNotEnteredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSetupNotEnteredException`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetupNotEnteredException`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetPropertyException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFieldProcessingException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFieldValueProcessingException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetPropertyKeepPreviousException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetPropertyException`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXForeignRecordDeletedException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRestartOperationException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLockViolationException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCommandPreparingException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRowPersistingException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRowPersistedException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRestrictionViolationException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDbOperationSwitchRequiredException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXVisibiltyUpdateRequiredException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXInsertSharedRecordRequiredException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateDeletedFlagRequiredException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUnderMaintenanceException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXForceLogOutException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUndefinedCompanyException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOuterException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNotEnoughRightsException">
            <exclude/>
        </member>
        <member name="T:PX.Data.KeysVerifyer">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1">
            <summary>
            	<para>Represents a cache that contains modified data records relating to a particular table along with the controller that allows you to perform basic operations
            on such records. A type parameter is set to a data access class (DAC) that represents this table.</para>
            </summary>
            <typeparam name="TNode">The DAC type of data records stored in the cache object.</typeparam>
            <remarks>
              <para>Cache objects consist of two parts:</para>
              <list type="bullet">
                <item>Data records collection that were modified but have not been saved to the database, such
                as <see cref="P:PX.Data.PXCache`1.Updated">Updated</see>, <see cref="P:PX.Data.PXCache`1.Inserted">Inserted</see>, <see cref="P:PX.Data.PXCache`1.Deleted">Deleted</see>, and <see cref="P:PX.Data.PXCache`1.Dirty">
                Dirty</see>.</item>
                <item>A controller that executes basic data-related operations through the use of the methods, such
                as <see cref="O:PX.Data.PXCache{TNode}.Update">Update()</see>, <see cref="O:PX.Data.PXCache{TNode}.Insert">Insert()</see>, <see cref="O:PX.Data.PXCache{TNode}.Delete">Delete()</see>, <see cref="O:PX.Data.PXCache{TNode}.Persist">Persist()</see>,
                and other methods.</item>
              </list>
              <para>During execution of these methods, the cache object raises events. The graph as well as attributes can subscribe to these events to implement a business
            logic. Each method is applied to a previously unchanged data record result in placing of the data record into the cache.</para>
              <para>The system creates and destroys PXCache instances (caches) on each request. If the user or the code modifies a data record, it is placed into the cache.
            When request execution is completed, the system serializes the modified records from the caches to the session. At run time, the cache may also include the
            unchanged data records retrieved during request execution. These data records are discarded once the request is served.</para>
              <para>On the next round trip, the modified data records are loaded from the session to the caches. The cache merges the data retrieved from the database with the
            modified data, and the application accesses the data as if the entire data set has been preserved from the time of previous request.</para>
              <para>The cache maintains the modified data until the changes are discarded or saved to the database.</para>
              <para>The cache is the issuer of all data-related events, which can be handled by the graph and attributes.</para>
              <para></para>
            </remarks>
            <example>
            	<code title="Example" description="An instance of the PXCache&lt;&gt; type. The cache object that initiated the event is passed to every event handler as the first argument." lang="CS">
            protected virtual void Vendor_RowDeleted(PXCache cache, PXRowDeletedEventArgs e)
            {
                Vendor row = e.Row as Vendor;
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXCache`1.memberwiseCloneDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.HasAttributes(System.Object)">
            <summary>Checks if the provided data record has any attributes
            attached to its fields.</summary>
            <param name="data">The data record.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetAttributesReadonly(System.String)">
            <summary>Returns the cache-level instances of attributes for the specified field.</summary>
            <param name="name">
            	<para>A field name, the attributes of which were returned. The method will return attributes from the entire field collection if <tt>null</tt>.</para>
            </param>
            <remarks>The system maintains instances of attributes on three different
            levels. On its instantiation, a cache object copies appropriate
            attributes from the global level to the cache level and stores them in
            an internal collection. When an attribute needs to be modified for a
            particular data record, the cache creates item-level copies of all
            attributes and stores them associated with the data record.</remarks>
        </member>
        <member name="M:PX.Data.PXCache`1.GetAttributesReadonly(System.String,System.Boolean)">
            <summary>Returns the cache-level instances of attributes for the specified field.</summary>
            <param name="name">The data record.</param>
            <param name="extractEmmbeddedAttr">The value that indicates whether
            the attributes embedded into an aggregate attribute are included into
            the list. If <tt>true</tt>, both the aggregate attribute and the
            attributes embedded into it are included in the list. Otherwise, only
            the aggregate attribute is included. An aggregate attribute is an
            attribute that derives from the <tt>PXAggregateAttribute</tt> class.
            This class allows combining multiple different attributes in a single
            one.</param>
            <remarks>Using this method, you can prevent expanding the aggregate
            attributes by setting the second parameter to <tt>false</tt>. Other
            overloads of this method always include both the aggregate attributes
            and the attributes that comprise such attributes.</remarks>
        </member>
        <member name="M:PX.Data.PXCache`1.GetAttributesReadonly(System.Object,System.String)">
            <summary>
            	<para>Returns the cache-level instances of attributes for the specified field. If there are no instances to be found, the cache-level instances will be
            returned.</para>
            </summary>
            <param name="data">The data record.</param>
            <param name="name">
            	<para>A field name, the attributes of which were returned. The method will return attributes from the entire field collection if <tt>null</tt>.</para>
            </param>
            <example>
            	<code title="Example" description="The following code snippet gets the attributes and places them into a list collection." lang="CS">
            protected virtual void InventoryItem_ValMethod_FieldVerifying(
                PXCache sender, PXFieldVerifyingEventArgs e)
            {
                List&lt;PXEventSubscriberAttribute&gt; attrlist = 
                    sender.GetAttributesReadonly(e.Row, "ValMethod");
                ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.GetAttributes(System.Object,System.String)">
            <summary>Returns item-level instances of attributes for the specified field. In case there are no instances for the provided data record(s), this method will create
            them simply by copying all cache-level attributes along with having them placed into the internal collection that contains specific data record attributes. To
            avoid cloning cache-level attributes, use the <see cref="M:PX.Data.PXCache`1.GetAttributesReadonly(System.Object,System.String)">GetAttributesReadonly(object, string)</see> method.</summary>
            <param name="data">The data record.</param>
            <param name="name">
            	<para>A field name, the attributes of which are used. The method will return attributes from the entire field collection if <tt>null</tt>.</para>
            </param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetAttributes(System.String)">
            <summary>
            	<para>Returns the cach-level instances of attributes for the specified field along with the entire collection of item-level instances currently stored in
            cache.</para>
            </summary>
            <param name="name">
            	<para>A field name, the attributes of which are used. The method will return attributes from the entire field collection if <tt>null</tt>.</para>
            </param>
        </member>
        <member name="M:PX.Data.PXCache`1.SetValue(System.Object,System.Int32,System.Object)">
            <summary>Sets the value of the field in the provided data record
            without raising events. The field is specified by its index in the
            field map.</summary>
            <remarks>To set the value, raising the field-related events, use the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,
            string, object)</see> method.</remarks>
            <param name="data">The data record.</param>
            <param name="ordinal">The index of the field in the internally stored
            field map. To get the index of a specific field, use the <see
            cref="M:PX.Data.PXCache`1.GetFieldOrdinal(System.String)">GetFieldOrdinal(string)</see>
            method.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.SetValue(System.Object,System.String,System.Object)">
            <summary>Sets the value of the field in the provided data record
            without raising events.</summary>
            <remarks>
            To set the value, raising the field-related events, use the
            <see cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)"/> method.
            </remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the value.
            The parameter is case-insensitive.</param>
            <param name="value">The value to set to the field.</param>
            <remarks>To set the value, raising the field-related events, use the <see cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object, string, object)</see> method.</remarks>
            <example>
            	<code title="" description="" lang="CS">
            public virtual void RowInserted(PXCache sender, PXRowInsertedEventArgs e)
            {
                bool freeze = ((bool?)sender.GetValue(e.Row, sender.GetField(freezeDisc))) == true;
                
                if (!freeze &amp;&amp; !sender.Graph.IsImport)
                {
                    IDiscountable row = (IDiscountable)e.Row;
                    if (row.CuryDiscAmt != null &amp;&amp; row.CuryDiscAmt != 0 &amp;&amp; row.CuryExtPrice != 0)
                    {
                        row.DiscPct = 100 * row.CuryDiscAmt / row.CuryExtPrice;
                        sender.SetValue(row, sender.GetField(curyTranAmt), row.CuryExtPrice - row.CuryDiscAmt);
                        sender.SetValue(e.Row, this.FieldName, true);
                    }
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.SetDefaultExt(System.Object,System.String,System.Object)">
            <summary>Sets the default value to the field in the provided data
            record.</summary>
            <remarks>The method raises <tt>FieldDefaulting</tt>,
            <tt>FieldUpdating</tt>, <tt>FieldVerifying</tt>, and
            <tt>FieldUpdated</tt>.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field to set.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the field in the provided data record.
            </summary>
            <remarks>
            The method raises the <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, and <tt>FieldUpdated</tt> events. To set the
            value to the field without raising events, use the
            <see cref="M:PX.Data.PXCache`1.SetValue(System.Object,System.String,System.Object)"/> method.
            </remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the value.
            The parameter is case-insensitive.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValue(System.Object,System.Int32)">
            <summary>Returns the value of the specified field in the given data
            record without raising any events. The field is specified by its
            index—see the <see cref="M:PX.Data.PXCache`1.GetFieldOrdinal(System.String)">GetFieldOrdinal(string)</see>
            method.</summary>
            <param name="data">The data record.</param>
            <param name="ordinal">A field index, value of which is returned.</param>
            <example>
            	<code title="Example" description="" lang="CS">
            if (tran == null || tran.InventoryID == null || !string.IsNullOrEmpty(tran.PONbr))
            {
                e.NewValue = sender.GetValue&lt;APTran.curyUnitCost&gt;(e.Row);
                e.Cancel = e.NewValue != null;
                return;
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValue(System.Object,System.String)">
            <summary>Returns the value of the specified field in the given data
            record without raising any events.</summary>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose value is
            returned.</param>
            <remarks>
            	<para>To get a known DAC type data record field, you can use DAC properties. If a type of a data record is unknown (for example, when it is available as
            <tt>object</tt>), you can use the <tt>GetValue()</tt> methods to get a value of a field. These methods can also be used to get values of fields defined in
            extensions (another way is to get the extension data record through the <see cref="M:PX.Data.PXCache`1.GetExtension``1(`0)">GetExtension&lt;&gt;()</see> method).</para>
            	<para>The <see cref="M:PX.Data.PXCache`1.GetValueExt(System.Object,System.String)">GetValueExt()</see> methods are used to get the value or the field state object and raise events.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code snippet below iterates throughout the entire collection of fields in a specific DAC (including those fields defined in extensions) and checks whether the value is null." lang="CS">
            foreach (string field in sender.Fields)
            {
                if (sender.GetValue(row, field) == null)
                    ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValueInt(System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.GetStateInt(System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValueExt(System.Object,System.String)">
            <summary>Returns external UI field representation. The <tt>PXFieldState</tt> object is returned if the field is in the <tt>AlteredFields</tt> collection.</summary>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose value or
            <tt>PXFieldState</tt> object is returned.</param>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <returns>
            	<tt>PXFieldState</tt> object field value.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            string name = _MapErrorTo.Name;
            name = char.ToUpper(name[0]) + name.Substring(1);
            object val = sender.GetValueExt(e.Row, name);
                if (val is PXFieldState)
                {
                    val = ((PXFieldState)val).Value;
                }</code>
            	<code title="Example2" description="" groupname="Example" lang="CS">
            protected virtual void APPayment_CashAccountID_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
            {
                APPayment payment = (APPayment)e.Row;
                if (payment == null || e.NewValue == null) return;
             
                CashAccount cashAccount = PXSelect&lt;CashAccount, Where&lt;CashAccount.cashAccountID, Equal&lt;Required&lt;CashAccount.cashAccountID&gt;&gt;&gt;&gt;.SelectSingleBound(this, null, e.NewValue);
                if (cashAccount != null)
                {
                    foreach (PXResult&lt;APAdjust, APInvoice, Standalone.APRegisterAlias&gt; res in Adjustments_Invoices.Select())
                    {
                        APAdjust adj = res;
                        APInvoice invoice = res;
             
                        PXCache&lt;APRegister&gt;.RestoreCopy(invoice, (Standalone.APRegisterAlias)res);
             
                        if(adj.AdjdDocType == APDocType.Prepayment
                            &amp;&amp; (adj.AdjgDocType == APDocType.Check || adj.AdjgDocType == APDocType.VoidCheck)
                            &amp;&amp; invoice.CuryID != cashAccount.CuryID)
                        {
                            e.NewValue = sender.GetValueExt&lt;APPayment.cashAccountID&gt;(payment);
                            throw new PXSetPropertyException(Messages.CashCuryNotPPCury);
                        }
                    }
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.GetStateExt(System.Object,System.String)">
            <summary>Gets the <tt>PXFieldState</tt> object of the specified field
            in the given data record.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose
            <tt>PXFieldState</tt> object is created.</param>
            <returns>The field state object.</returns>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValueOriginal(System.Object,System.String)">
            <summary>Returns the value of the specified field for the data record
            as it is stored in the database.</summary>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose original value is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetOriginal(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.GetValuePending(System.Object,System.String)">
            <summary>Returns the value of the field from the provided data record
            when the data record's update or insertion is in progress.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.SetValuePending(System.Object,System.String,System.Object)">
            <summary>Sets the value of the field in the provided data record when
            the data record's update or insertion is in process and the field
            possibly hasn't been updated in the cache yet. The field is specified
            in the type parameter.</summary>
            <remarks>The method raises the <tt>FieldUpdating</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the
            value.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.FillWithValues(`0,`0,System.Collections.IDictionary,PX.Data.PXCacheOperation)">
            <summary>
            Copy values from dictionary to item with event handling.<br/>
            for insert operation raise OnFieldDefaulting, OnFieldUpdating, OnFieldVerifying, OnFieldUpdated<br/>
            for update operation raise OnFieldUpdating, OnFieldVerifying, OnFieldUpdated<br/>
            for delete operation events raised for key fields, OnFieldUpdating, OnFieldUpdated
            returns key updated flag<br/>
            </summary>
            <param name="item"></param>
            <param name="copy"></param>
            <param name="values"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache`1.FillWithValues(`0,`0@)">
            <summary>
            Create new node, then assigns all default values, then copy non empty fields from item.<br/>
            If no exceptions, replace item with copy.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PX.Data.PXCache`1.Insert(PX.Data.PXGraph,`0)">
            <summary>Inserts a new row into the cache. Returns inserted row of type <tt>CacheItemType</tt> or null if row was not inserted. Raises events <tt>OnRowInserting</tt>,
            <tt>OnRowInserted</tt> and other field related events. Does not check the database for existing row. Flag <tt>AllowInsert</tt> does not affects this method.</summary>
            <param name="graph">A Graph object</param>
            <param name="item">IBqlTable of type <tt>CacheItemType</tt></param>
        </member>
        <member name="M:PX.Data.PXCache`1.Update(PX.Data.PXGraph,`0)">
            <summary>Places a row into the cache with the Updated status. If the row does not exist in the cache, the method looks for it in the database. If the row does not
            exist in the database, the method inserts the row with the Inserted status.The method raises the OnRowUpdating, OnRowUpdated, and other events. The
            PXCache.AllowUpdate flag does not affect this method.</summary>
            <param name="graph">graph object</param>
            <param name="item">IBqlTable of type <tt>CacheItemType</tt></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache`1.Delete(PX.Data.PXGraph,`0)">
            <summary>
            	<para>Places the data record into the cache with the <tt>Deleted</tt> or <tt>InsertedDeleted</tt> status. The method assigns the <tt>InsertedDeleted</tt> status to the data record if it has
            the Inserted status when the method is invoked. This method raises the <tt>RowDeleting</tt> and <tt>RowDeleted</tt> events. The <tt>AllowDelete</tt> property does not affect this
            method.</para>
            </summary>
        </member>
        <member name="M:PX.Data.PXCache`1.CreateCopy(`0)">
            <summary>Creates a new node along with cloning field values.</summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXCache`1.StoreOriginal(PX.Data.PXGraph,`0)" -->
        <member name="M:PX.Data.PXCache`1.RestoreCopy(System.Object,System.Object)">
            <summary>Copies values of all fields from the second data record to
            the first data record.</summary>
            <remarks>The data records should have the DAC type of the cache, or the
            method does nothing.</remarks>
            <param name="item">The data record whose field values are
            updated.</param>
            <param name="copy">The data record whose field values are
            copied.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.CreateCopy(System.Object)">
            <summary>
              <para>Creates a clone of the provided data record by initializing a new data record with the field values get from the provided data record.</para>
            </summary>
            <param name="item">The data record to copy.</param>
            <example>
            	<code title="Example" description="The following example creates a copy of the Address data record, modifies it, and then inserts modified data straight into the cache." lang="CS">
            Address addr = PXCache&lt;Address&gt;.CreateCopy(defAddress);
            addr.AddressID = null;
            addr.BAccountID = owner.BAccountID;
            addr = this.RemitAddress.Insert(addr);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.ToDictionary(System.Object)">
            <summary>Converts the provided data record to the dictionary of field
            names and field values. Returns the resulting dictionary
            object.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event for each
            field.</remarks>
            <param name="data">The data record to convert to a dictionary.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.ToXml(System.Object)">
            <summary>Returns the XML string representing the provided data
            record.</summary>
            <remarks>
            <para>The data record is represented in the XML by the
            <i>&lt;Row&gt;</i> element with the <i>type</i> attribute set to the
            DAC name. Each field is represented by the <i>&lt;Field&gt;</i>
            element with the <i>name</i> attribute holding the field name and the
            <i>value</i> attribute holding the field value.</para>
            </remarks>
            <param name="data">The data record to convert to XML.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.FromXml(System.String)">
            <summary>Initializes a data record with the provided XML string.</summary>
            <param name="xml">The XML string to parse.</param>
            <remarks>A data record is represented in the XML as the <i>&lt;Row&gt;</i> element with the <i>type</i> attribute that is set to the DAC name. Each field is
            represented as the <i>&lt;Field&gt;</i> element with the <i>name</i> attribute that holds the field name and the <i>value</i> attribute that holds the
            field value.</remarks>
        </member>
        <member name="M:PX.Data.PXCache`1.ValueToString(System.String,System.Object)">
            <summary>Converts the provided value of the field to string and
            returns the resulting value. No events are raised.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="val">The field value.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.ValueFromString(System.String,System.String)">
            <summary>Converts the provided value of the field from a string to the
            appropriate type and returns the resulting value. No events are
            raised.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="val">The string representation of the field
            value.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.RestoreCopy(`0,`0)">
            <summary>
            Copies values of all fields from the second data record to the
            first data record.
            </summary>
            <param name="item">The data record whose field values are updated.</param>
            <param name="copy">The data record whose field values are copied.</param>
            <example>
            The code below modifies an <tt>APRegister</tt> data record and copies the
            values of all its fields to an <tt>APInvoice</tt> data record.
            <code>
            APInvoice apdoc = ...
            ...
            // Modifying the doc data record
            doc.OpenDoc = true;
            doc.ClosedFinPeriodID = null;
            ...
            // Copying all fields of doc to apdoc (APInvoince derives from APRegister)
            PXCache&lt;APRegister&gt;.RestoreCopy(apdoc, doc);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.SyncModel(`0)">
            <summary>
            Used to sync extension objects.
            </summary>
            <param name="item">The data record whose field values should be synced.</param>
        </member>
        <member name="P:PX.Data.PXCache`1.Fields">
            <summary>Gets the collection of names of fields and virtual fields. By
            default, the collection includes all public properties of the DAC that
            is associated with the cache. The collection may also include the
            virtual fields that are injected by attributes (such as the
            description field of the <see
            cref="T:PX.Data.PXSelectorAttribute">PXSelector</see> attribute). The
            developer can add any field to the collection.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.BqlFields">
            <summary>Gets the list of classes that implement <tt>IBqlField</tt>
            and are nested in the DAC and its base type. These types represent DAC
            fields in BQL queries. This list differs from the list that the
            <tt>Fields</tt> property returns.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.BqlKeys">
            <summary>Gets the collection of BQL types that correspond to the key
            fields which the DAC defines.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.BqlImmutables">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXCache`1.BqlSelect">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXCache`1.BqlTable">
            <summary>Gets the DAC the cache is associated with. The DAC is
            specified through the type parameter when the cache is
            instantiated.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.GetExtensionTypes">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.ObjectsEqual(System.Object,System.Object)">
            <summary>Compares two data records by the key fields. Returns
            <tt>true</tt> if the values of all key fields in the data records are
            equal. Otherwise, returns <tt>false</tt>.</summary>
            <param name="a">The first data record to compare.</param>
            <param name="b">The second data record to compare.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetObjectHashCode(System.Object)">
            <summary>Returns the hash code generated from key field
            values.</summary>
            <param name="data">The data record.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.ObjectToString(System.Object)">
            <summary>Returns a string of key fields and their values in the
            <i>{key1=value1, key2=value2}</i> format.</summary>
            <param name="data">The data record which key fields are written to a
            string.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetExtension``1(System.Object)">
            <summary>Gets a DAC extention instance of the specified type. The extension type is specified as the type parameter.</summary>
            <param name="item">A data record whose extension is returned.</param>
            <example>
            	<code title="Example" description="The code below gets an extension data record corresponding to the given instance of the base data record." lang="CS">
            InventoryItem item = cache.Current as InventoryItem;
            InventoryItemExtension itemExt = 
                cache.GetExtension&lt;InventoryItemExtension&gt;(item);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.GetExtension``1(`0)">
            <summary>
            Gets an extension of appropriate type
            </summary>
            <typeparam name="Extension">
            The type of extension requested
            </typeparam>
            <param name="item">
            Parent standard object
            </param>
            <returns>
            Object of type Extension
            </returns>
        </member>
        <member name="M:PX.Data.PXCache`1.GetItemType">
            <summary>
            	<para>Returns a DAC type data records that are stored in the cache.</para>
            </summary>
        </member>
        <member name="P:PX.Data.PXCache`1.Interceptor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.GetFieldCount">
            <summary>Returns the number of fields and virtual fields which
            comprise the <tt>Fields</tt> collection.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.GetFieldOrdinal``1">
            <summary>Returns the index of the specified field in the internally kept fields map.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.GetFieldOrdinal(System.String)">
            <summary>Returns the index of the specified field in the internally
            kept fields map.</summary>
            <param name="field">The name of the field whose index is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.Normalize">
            <summary>Recalculates internally stored hash codes. The method should
            be called after a key field is modified in a data record from the
            cache.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.Current">
            <summary>Gets or sets the current data record. This property points to
            the last data record displayed in the user interface. If the user
            selects a data record in a grid, this property points to this data
            record. If the user or the application inserts, updates, or deletes a
            data record, the property points to this data record. Assigning this
            property raises the <tt>RowSelected</tt> event.</summary>
            <remarks>You can reference the <tt>Current</tt> data record and its
            fields in the <tt>PXSelect</tt> BQL statements by using the
            <tt>Current</tt> parameter.</remarks>
        </member>
        <member name="P:PX.Data.PXCache`1.InternalCurrent">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.#ctor(PX.Data.PXGraph)">
            <summary>The application does not need to instantiate PXCache directly, as the system creates caches automatically whenever they are needed. A cache instance is always bound to an instance of the business logic controller (graph). The application typically accesses a cache instance through the Cache property of a data view. The property always returns the valid cache instance, even if it didn’t exist before the property was accessed. A cache instance is also available through the Caches property of the graph to which the cache instance is bound.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.Select(PX.Data.PXDataRecord,System.Int32@,System.Boolean,System.Boolean@)">
            <summary>Creates a data record from the <tt>PXDataRecord</tt> object
            and places it into the cache with the <tt>NotChanged</tt> status if
            the data record isn't found among the modified data records in the
            cache.</summary>
            <remarks>
            <para>If <tt>isReadOnly</tt> is <tt>false</tt> then:</para>
            <list type="bullet">
            <item><description>If the cache already contains
            the data record with the same keys and the <tt>NotChanged</tt> status,
            the method returns this data record updated to the state of
            <tt>PXDataRecord</tt>.</description></item>
            <item><description>If the
            cache contains the same data record with the <tt>Updated</tt> or
            <tt>Inserted</tt> status, the method returns this data
            record.</description></item>
            </list>
            <para>In other cases and when <tt>isReadonly</tt> is <tt>true</tt>,
            the method returns the data record created from the
            <tt>PXDataRecord</tt> object.</para>
            <para>If the <tt>AllowSelect</tt> property is <tt>false</tt>, the
            methods returns a new empty data record and the logic described above
            is not executed.</para>
            <para>The method raises the <tt>RowSelecting</tt> event.</para>
            </remarks>
            <param name="record">The <tt>PXDataRecord</tt> object to convert to
            the DAC type of the cache.</param>
            <param name="position">The index of the first field to read in
            the list of columns comprising the <tt>PXDataRecord</tt>
            object.</param>
            <param name="isReadOnly">The value indicating if the data record with
            the same key fields should be located in the cache and
            updated.</param>
            <param name="bool">The value indicating whether the data record
            with the same keys existed in the cache among the modified data
            records.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.GetStatus(System.Object)">
            <summary>Returns the provided data record status. The <see cref="T:PX.Data.PXEntryStatus">PXEntryStatus</see> enumeration defines the possible status values. For example, the status can indicate
            whether the data record has been inserted, updated, or deleted.</summary>
            <param name="item">The data record whose status is requested.</param>
            <example>
            	<code title="Example" description="The code snippet below shows how to check a data record status in an event handler." lang="CS">
            protected virtual void Vendor_RowSelected(PXCache sender,
                                                      PXRowSelectedEventArgs e)
            {
                Vendor vend = e.Row as Vendor;
                if (vend != null &amp;&amp; sender.GetStatus(vend) == PXEntryStatus.Notchanged)
                {
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.SetStatus(System.Object,PX.Data.PXEntryStatus)">
            <summary>Sets the status to the provided data record. The <see
            cref="T:PX.Data.PXEntryStatus">PXEntryStatus</see> enumeration
            defines the possible status values.</summary>
            <param name="item">The data record to set status to.</param>
            <param name="status">The new status.</param>
            <example>
            The code below checks the status of a data record and sets the status
            to <tt>Updated</tt> if the status is <tt>Notchanged</tt>.
            <code>
            if (Transactions.Cache.GetStatus(tran) == PXEntryStatus.Notchanged)
            {
                Transactions.Cache.SetStatus(tran, PXEntryStatus.Updated);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.Locate(System.Object)">
            <summary>Searches the cache for a data record that has the same key
            fields as the provided data record. If the data record is not found in
            the cache, the method retrieves the data record from the database and
            places it into the cache with the <tt>NotChanged</tt> status. The
            method returns the located or retrieved data record.</summary>
            <remarks>The <tt>AllowSelect</tt> property does not affect this method
            unlike the <see
            cref="M:PX.Data.PXCache`1.Locate(System.Collections.IDictionary)">Locate(IDictionary)</see>
            method.</remarks>
            <param name="item">The data record to locate in the cache.</param>
            <example>
            <code>
            public PXSelectJoin&lt;SOAdjust,
                InnerJoin&lt;ARPayment, On&lt;ARPayment.docType, Equal&lt;SOAdjust.adjgDocType&gt;,
                    And&lt;ARPayment.refNbr, Equal&lt;SOAdjust.adjgRefNbr&gt;&gt;&gt;&gt;&gt; Adjustments;
            ...
            // The optional delegate of the Adjustment data view to replace the
            // output of the Select() method
            public virtual IEnumerable adjustments()
            {
                ...
                SOAdjust adj = new SOAdjust();
            
                // Setting the key fields
                adj.CustomerID = Document.Current.CustomerID;
                adj.AdjdOrderType = Document.Current.OrderType;
                adj.AdjdOrderNbr = Document.Current.OrderNbr;
                adj.AdjgDocType = payment.DocType;
                adj.AdjgRefNbr = payment.RefNbr;
            
                // Searching the cache for the Adjustment data record with
                // the same key fields
                if (Adjustments.Cache.Locate(adj) == null)
                {
                    yield return new PXResult&lt;SOAdjust, ARPayment&gt;(Adjustments.Insert(adj), payment);
                }
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.Locate(System.Collections.IDictionary)">
            <summary>Searches the cache for a data record that has the same key
            fields as in the provided dictionary. If the data record is not found
            in the cache, the method initializes a new data record with the
            provided values and places it into the cache with the
            <tt>NotChanged</tt> status.</summary>
            <remarks>Returns 1 if a data record is successfully located or placed
            into the cache, and returns 0 if placing into the cache fails or the
            <tt>AllowSelect</tt> property is <tt>false</tt>.</remarks>
            <param name="keys">The dictionary with values to initialize the data
            record fields. The dictionary keys are field names.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.Remove(System.Object)">
            <summary>Completely removes provided data recors from the cache object without raising any events.</summary>
            <param name="item">The data record to remove from the cache.</param>
            <remarks>Please, keep in mind that this method will not remove any records from the database itself but only from the cache.</remarks>
            <example>
            	<code title="Example" description="The code below locates a data record in the cache and, if the data record has not been changed, silently removes it from the cache. (The Held status indicates that a data record has not been changed but needs to the preserved in the session." lang="CS">
            // Searching the data record by its key fields in the cache
            object cached = sender.Locate(item);
            // Checking the status
            if (cached != null &amp;&amp; (sender.GetStatus(cached) == PXEntryStatus.Held || 
                                   sender.GetStatus(cached) == PXEntryStatus.Notchanged))
            {
                // Removing without events
                sender.Remove(cached);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.readItem(`0)">
            <summary>
            Reads a row from the Database. Raises the <tt>OnRowSelecting</tt> event.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache`1.Update(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Updates the data record in the cache with the provided
            values.</summary>
            <remarks>
            <para>The method initalizes a data record with the provided key
            fields. If the data record with such keys does not exist in the cache,
            the method tries to retrieve it from the database. If the data record
            exists in the cache or database, it gets the <tt>Updated</tt> status.
            If the data record does not exist in the database, the method inserts
            a new data record into the cache with the <tt>Inserted</tt>
            status.</para>
            <para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowUpdating</tt>,
            and <tt>RowUpdated</tt>. See <a href="Update.html">Updating a Data Record</a> for
            the events flowchart. If the data record does not exist in the
            database, the method also causes the events of the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method.</para>
            <para>If the <tt>AllowUpdate</tt> property is <tt>false</tt>, the data
            record is not updated and the methods returns 0. The method returns 1
            if the data record is successfully updated or inserted.</para>
            </remarks>
            <param name="keys">The values of the key fields of the data record to
            update.</param>
            <param name="values">The new values with which the data record fields
            are updated.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.Update(System.Object)">
            <summary>Updates the provided data record in the cache.</summary>
            <remarks>
            <para>If the data record does not exist in the cache, the method tries
            to retrieve it from the database. If the data record exists in the
            cache or database, it gets the <tt>Updated</tt> status. If the data
            record does not exist in the database, the method inserts a new data
            record into the cache with the <tt>Inserted</tt> status.</para>
            <para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowUpdating</tt>,
            and <tt>RowUpdated</tt>. See <a href="Update.html">Updating a Data Record</a> for
            the events flowchart. If the data record does not exist in the
            database, the method also causes the events of the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method.</para>
            <para>The <tt>AllowUpdate</tt> property does not affect the method
            unlike the <see
            cref="M:PX.Data.PXCache`1.Update(System.Collections.IDictionary,System.Collections.IDictionary)">Update(IDictionary,
            IDictionary)</see> method.</para>
            </remarks>
            <param name="data">The data record to update in the cache.</param>
            <example>
            The code below modifies an <tt>APRegister</tt> data record and places
            it in the cache with the <tt>Updated</tt> status or updates it in the
            cache if the data record is already there.
            <code>
            // Declaring a data view in a graph
            public PXSelect&lt;APRegister&gt; APDocument;
            ...
            
            APRegister apdoc = ...
            // Modifying the data record
            apdoc.Voided = true;
            apdoc.OpenDoc = false;
            apdoc.CuryDocBal = 0m;
            apdoc.DocBal = 0m;
            
            // Updating the data record in the cache
            APDocument.Cache.Update(apdoc);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.Insert(System.Collections.IDictionary)">
            <summary>Initializes a new data record using the provided field values and inserts the data record into the cache. Returns 1 in case of successful insertion, 0
            otherwise.</summary>
            <param name="values">The dictionary with values to initialize the data
            record fields. The dictionary keys are field names.</param>
            <remarks>
            	<para>The method raises the following events:
            <tt>FieldDefaulting</tt>, <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowInserting</tt>,
            and <tt>RowInserted</tt>. See <a href="Insert.html">Inserting a Data Record</a> for
            the events chart.</para>
            	<para>The method does not check if the data record exists in the
            database. The values provided in the dictionary are not readonly and
            can be updated during execution of the method. The method is typically
            used by the system when the values are received from the user
            interface. If the <tt>AllowInsert</tt> property is <tt>false</tt>, the
            data record is not inserted and the method returns 0.</para>
            	<para>In case of successful insertion, the method marks the data
            record as <tt>Inserted</tt>, and it becomes accessible through the
            <tt>Inserted</tt> collection.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache`1.Insert(System.Object)">
            <summary>Inserts the provided data record into the cache. Returns the
            inserted data record or <tt>null</tt> if the data record wasn't
            inserted.</summary>
            <param name="data">The data record to insert into the cache.</param>
            <remarks>
            	<para>The method raises the following events:
            <tt>FieldDefaulting</tt>, <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowInserting</tt>,
            and <tt>RowInserted</tt>. See <a href="Insert.html">Inserting a Data Record</a> for
            the events chart.</para>
            	<para>The method does not check if the data record exists in the
            database. The AllowInsert property does not affect this method unlike
            the <see cref="M:PX.Data.PXCache`1.Insert(System.Collections.IDictionary)">Insert(IDictionary)</see>
            method.</para>
            	<para>In case of successful insertion, the method marks the data
            record as <tt>Inserted</tt>, and it becomes accessible through the
            <tt>Inserted</tt> collection.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code below initializes a new instance of the APInvoice data record and inserts it into the cache." lang="CS">
            APInvoice newDoc = new APInvoice();
            newDoc.VendorID = Document.Current.VendorID;
            Document.Insert(newDoc);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.Extend``1(``0)">
            <summary>Initializes a data record of the DAC type of the cache from
            the provided data record of the base DAC type and inserts the new data
            record into the cache. Returns the inserted data record.</summary>
            <param name="item">The data record of the base DAC type, the field values of which are used to initialize the data record.</param>
            <example>
            See the <see cref="M:PX.Data.PXSelectBase`1.Extend``1(``0)">Extend&lt;Parent&gt;(Parent)</see>
            method of the <tt>PXSelectBase&lt;&gt;</tt> class.
            <code title="" description="" lang="neutral"></code></example>
        </member>
        <member name="M:PX.Data.PXCache`1.Insert">
            <summary>Initializes a new data record with default values and inserts
            it into the cache by invoking the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method. Returns the new data record inserted into the cache.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.CreateInstance">
            <summary>
            	<para>Returns a new <tt>DAC type</tt> data record. This method must be used to initialize a data record that is of an appropriate type for the <tt>PXCache</tt>
            instance when its DAC type is unknown.</para>
            </summary>
        </member>
        <member name="M:PX.Data.PXCache`1.ClearQueryCacheObsolete">
            <summary>Clears the internal cache of database query
            results.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.ClearQueryCache">
            <summary>Clears the internal cache of database query
            results.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.Delete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Initializes the data record with the provided key values and places it into the cache with the Deleted or InsertedDeleted status. The method assigns the
            InsertedDeleted status to the data record if it has the Inserted status when the method is invoked.</summary>
            <param name="keys">The values of key fields.</param>
            <param name="values">The values of all fields. The parameter is not
            used in the method.</param>
            <remarks>
            	<para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldUpdated</tt>, <tt>RowDeleting</tt>, and <tt>RowDeleted</tt>
            events. See <a href="Delete.html">Deleting a Data Record</a> for the events
            flowchart.</para>
            	<para>This method is typically used to process deletion initiated from
            the user interface. If the <tt>AllowDelete</tt> property is
            <tt>false</tt>, the data record is not marked deleted and the method
            returns 0. The method returns 1 if the data record is successfully
            marked deleted.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache`1.Delete(System.Object)">
            <summary>Places the data record into the cache with the Deleted or InsertedDeleted status. The method assigns the InsertedDeleted status to the data record if it has
            the Inserted status when the method is invoked.</summary>
            <param name="data">The data record to delete.</param>
            <remarks>
              <para>The method raises the RowDeleting and RowDeleted events.</para>
              <para>The AllowDelete property does not affect this method.</para>
            </remarks>
            <example>
            The code below deletes the current data records through the
            <tt>Address</tt> and <tt>Contact</tt> data views on deletion of an
            <tt>INSite</tt> data record.
            <code title="" description="" lang="CS">
            public PXSelect&lt;Address, Where&lt;Address.bAccountID, Equal&lt;Current&lt;Branch.bAccountID&gt;&gt;,
                And&lt;Address.addressID, Equal&lt;Current&lt;INSite.addressID&gt;&gt;&gt;&gt;&gt; Address;
            public PXSelect&lt;Contact, Where&lt;Contact.bAccountID, Equal&lt;Current&lt;Branch.bAccountID&gt;&gt;,
                And&lt;Contact.contactID, Equal&lt;Current&lt;INSite.contactID&gt;&gt;&gt;&gt;&gt; Contact;
            ...
            protected virtual void INSite_RowDeleted(PXCache cache, PXRowDeletedEventArgs e)
            {
                INSite row = (INSite)e.Row;
                Address.Cache.Delete(Address.Current);
                Contact.Cache.Delete(Contact.Current);
            }</code></example>
        </member>
        <member name="P:PX.Data.PXCache`1.Dirty">
            <summary>Gets the collection of updated, inserted, and deleted data
            records. The collection contains data records with the
            <tt>Updated</tt>, <tt>Inserted</tt>, or <tt>Deleted</tt>
            status.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.Updated">
            <summary>Gets the collection of updated data records that exist in the
            database. The collection contains data records with the
            <tt>Updated</tt> status.</summary>
            <example>
            	<code title="Example" description="The following example shows how to iterate over all updated data records." lang="CS">
            // The defition of a data view
            public PXProcessing&lt;POReceipt&gt; Orders;
            ...
            // The optional delegate for the Orders data view
            public virtual IEnumerable orders()
            {
                // Iterating over all updated POReceipt data records
                foreach (POReceipt order in Orders.Cache.Updated)
                {
                    yield return order;
                }
                ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXCache`1.Inserted">
            <summary>Gets the collection of inserted data records that does not
            exist in the database. The collection contains data records with the
            <tt>Inserted</tt> status.</summary>
            <example>
            The code below modifies inserted <tt>Address</tt> data records on
            update of an <tt>EPEmployee</tt> data record.
            <code>
            protected virtual void EPEmployee_RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)
            {
                // Checking whether the ParentBAccountID has changed
                if (!sender.ObjectsEqual&lt;EPEmployee.parentBAccountID&gt;(e.Row, e.OldRow))
                {
                    // Iterating over all inserted and not saved Address data records
                    foreach (Address addr in Address.Cache.Inserted)
                    {
                        addr.BAccountID = ((EPEmployee)e.Row).ParentBAccountID;
                        addr.CountryID = company.Current.CountryID;
                    }
                    ...
                }
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXCache`1.Cached">
            <summary>Get the collection of all cached data records. The collection
            contains data records with any status. The developer should not rely
            on the presense of data records with statuses other than
            <tt>Updated</tt>, <tt>Inserted</tt>, and <tt>Deleted</tt> in this
            collection.</summary>
        </member>
        <member name="P:PX.Data.PXCache`1.Deleted">
            <summary>Gets the collection of deleted data records that exist in the
            database. The collection contains data records with the
            <tt>Deleted</tt> status.</summary>
            <example>
            	<code title="Example" description="The code below deletes EPActivity data records through a different graph." lang="CS">
            public override void Persist()
            {
                CREmailActivityMaint graph = CreateInstance&lt;CREmailActivityMaint&gt;();
                // Iterating over all deleted EPActivity data records
                foreach (EPActivity item in Emails.Cache.Deleted)
                {
                    // Setting the current data record for the CREmailActivityMaint graph
                    graph.Message.Current = graph.Message.Search&lt;EPActivity.taskID&gt;(item.TaskID);
                    // Invoking the Delete action in the CREmailActivityMaint graph
                    graph.Delete.Press();
                    Emails.Cache.SetStatus(item, PXEntryStatus.Notchanged);
                }
                base.Persist();
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXCache`1.IsInsertedUpdatedDeleted">
            <summary>Gets the value that indicates if the cache contains modified
            data records to be saved to database.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.Persist(PX.Data.PXDBOperation)">
            <summary>Saves the modifications of a particular type from the cache
            to the database. Returns the number of saved data records.</summary>
            <remarks>
            <para>Using this method, you can update, delete, or insert all data
            records kept by the cache. You can also perform different operations
            at once by passing a combination of <tt>PXDBOperation</tt> values,
            such as <tt>PXDBOperation.Insert | PXDBOperation.Update</tt>.</para>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            </remarks>
            <param name="operation">The value that indicates the types of database
            operations to execute, either one of <tt>PXDBOperation.Insert</tt>,
            <tt>PXDBOperation.Update</tt>, and <tt>PXDBOperation.Delete</tt>
            values or their bitwise "or" (<tt>|</tt>) combination.</param>
            <example>
            The code below modifies a <tt>Vendor</tt> data record, updates it in
            the cache, saves changes to update <tt>Vendor</tt> data records to the
            database, and causes raising of the <tt>RowPersisted</tt> event with
            indication that the operation has completed successfully.
            <code>
            vendor.VStatus = VendorStatus.Inactive;
            Caches[typeof(Vendor)].Update(vendor);
            Caches[typeof(Vendor)].Persist(PXDBOperation.Update);
            Caches[typeof(Vendor)].Persisted(false);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.Persist(System.Object,PX.Data.PXDBOperation)">
            <summary>Saves the modification of the specified type from the cache
            to the database for a particular data record.</summary>
            <param name="row">The data record to save to the database.</param>
            <param name="operation">The database operation to perform for the data
            record, either one of <tt>PXDBOperation.Insert</tt>,
            <tt>PXDBOperation.Update</tt>, and <tt>PXDBOperation.Delete</tt>
            values or their bitwise "or" (<tt>|</tt>) combination.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.PersistUpdated(System.Object,System.Boolean)">
            <summary>Updates the provided data record in the database. Returns
            <tt>true</tt> if the data record has been updated sucessfully, or
            <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to update in the database.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.PersistInserted(System.Object,System.Boolean)">
            <summary>Inserts the provided data record into the database. Returns
            <tt>true</tt> if the data record has been inserted sucessfully, or
            <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method throws an exception if the data record with such keys
            exists in the database.</para>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to insert into the database.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.PersistDeleted(System.Object,System.Boolean)">
            <summary>Deletes the provided data record from the database by the key
            fields. Returns <tt>true</tt> if the data record has been deleted
            sucessfully, or <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to deleted from the
            database.</param>
        </member>
        <member name="M:PX.Data.PXCache`1.ResetPersisted(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.Persisted(System.Boolean)">
            <summary>Completes saving changes to the database by raising the
            <tt>RowPersisted</tt> event for all persisted data records.</summary>
            <param name="isAborted">The value indicating whether the database
            operation has been aborted or completed.</param>
            <example>
            	<code title="Example" description="You need to call this method in the application only when you call the Persist(), PersistInserted(), PersistUpdated(), or PersistDeleted() method, as the following example shows." lang="CS">
            // Opening a transaction and saving changes to the provided
            // new data record
            using (PXTransactionScope ts = new PXTransactionScope())
            {
                cache.PersistInserted(item);
                ts.Complete(this);
            }
            // Indicating successful completion of saving changes to the database
            cache.Persisted(false);</code>
            </example>
        </member>
        <member name="T:PX.Data.PXCache`1.ItemComparer">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.Load">
            <summary>Loads dirty items and other cache state objects from the
            session. The application does not typically use this method.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.Clear">
            <summary>Clears the cache completely.</summary>
            <example>
            	<code title="Example" description="The following example demonstrates how to clear all POReceipt data records from the cache." lang="CS">
            // Declaration of a data view in a graph
            public PXSelect&lt;POReceipt&gt; poreceiptslist;
            ...
            // Clearing the cache of POReceipt data records 
            poreceiptslist.Cache.Clear();</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache`1.ClearItemAttributes">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.TrimItemAttributes(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache`1.Unload">
            <summary>Serializes cache to the session.</summary>
        </member>
        <member name="M:PX.Data.PXCache`1.ToString">
            <summary>Returns the string representing the current cache
            object.</summary>
        </member>
        <member name="T:PX.Data.PXCache`1.PXCacheDebugView">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.CreateExtensionsDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.GetValueByOrdinalDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.SetValueByOrdinalDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.GetHashCodeDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.EqualsDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache`1.CacheStaticInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache">
            <summary>
            Untyped interface to access <see cref="T:PX.Data.PXCache`1">PXCache&lt;TNode&gt;</see>
            without knowledge of the <tt>TNode</tt> type.</summary>
            <seealso cref="T:PX.Data.PXCache`1"/>
        </member>
        <member name="F:PX.Data.PXCache.DisableCloneAttributes">
            <summary>
            The flag controlled by the
            <see cref="T:PX.Data.PXDisableCloneAttributesAttribute">PXDisableCloneAttributes</see>
            attribute.
            </summary>
        </member>
        <member name="F:PX.Data.PXCache.DisableReadItem">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetAttributes(System.String)">
            <summary>
            Returns the cach-level instances of attributes placed on the
            specified field and all item-level instances currently stored
            in the cache.
            </summary>
            <param name="name">The name of the field whose attributes are returned.
            If <tt>null</tt>, the method returns attributes from all fields.</param>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesReadonly(System.String)">
            <summary>Returns the cach-level instances of attributes placed on the specified field and all item-level instances currently stored in the cache as read-only instances.</summary>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesReadonly(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesReadonly(System.Object,System.String)">
            <summary>Returns a collection of row-specific attributes as read-only instances.</summary>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributes(System.Object,System.String)">
            <summary>Returns a collection of row specific attributes. This method creates a copy of all cache level attributes and stores these clones to internal collection that
            contains row specific attributes. To avoid cloning cache level attributes, use the GetAttributesReadonly method.</summary>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesOfType``1(System.Object,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.HasAttributes(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.HasAttribute``1">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetAttributes``1">
            <summary>
            Returns the cach-level instances of attributes placed on the
            specified field and all item-level instances currently stored
            in the cache.
            </summary>
            <typeparam name="Field">The DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesReadonly``1">
            <summary>Returns the cache-level read-only instances of attributes placed on the specified field in the DAC. The field is specified as the type parameter.</summary>
            <typeparam name="Field">The DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributesReadonly``1(System.Object)">
            <summary>Returns the read-only item-level instances of attributes placed on the specified field if such instances exist for the provided data record, or the cache-level
            instances otherwise. The field is specified as the type parameter.</summary>
            <typeparam name="Field">The DAC field.</typeparam>
            <param name="data">The data record.</param>
        </member>
        <member name="M:PX.Data.PXCache.GetAttributes``1(System.Object)">
            <summary>
            Returns the item-level instances of attributes placed on the
            specified field. If such instances are not exist for the
            provided data record, the method creates them by copying all
            cache-level attributes and storing them in the internal collection
            that contains the data record specific attributes.</summary>
            <remarks>
            To avoid cloning cache-level attributes, use the
            <see cref="M:PX.Data.PXCache`1.GetAttributesReadonly(System.Object,System.String)">GetAttributesReadonly(object, string)</see>
            method. The field is specified as the type parameter.
            </remarks>
            <typeparam name="Field">The DAC field.</typeparam>
            <param name="data">The data record.</param>
            <example>
            <code>
            foreach (PXEventSubscriberAttribute attr in sender.GetAttributes&lt;Field&gt;(data))
            {
                if (attr is PXUIFieldAttribute)
                {
                    // Doing something
                }
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.GetExtensionTables">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.InitItemAttributesCollection">
             <summary>
            initializes internal collections: _ItemAttributes, _CacheAttributesWithEmbedded, _ReusableItemAttributes, _AttributesByType
             </summary>
             <exclude />
        </member>
        <member name="T:PX.Data.PXCache.DisposableAttributesList">
            <summary>
            Ensures cleanup of item attributes after foreach statement
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.AttributesEqual(PX.Data.PXEventSubscriberAttribute,PX.Data.PXEventSubscriberAttribute)">
            <summary>
            Compares attributes by field values
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.PXCache.DirtyItemState">
            <summary>
            Container for dirty attributes in _ItemAttributes collection
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.CheckoutItemAttribute(PX.Data.PXCache.DirtyItemState,System.Int32)">
            <summary>
            Clones attribute to per item collection
            </summary>
            <param name="state"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.GetItemState(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetDirtyAttribute``1(PX.Data.PXCache.DirtyItemState,``0)">
            <summary>Checks if a subscriber attribute has an item related dirty clone.</summary>
            <exclude />
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="subscriber"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.CompressItemState(PX.Data.PXCache.DirtyItemState)">
            <summary>Cleans up unmodified attributes from the item state.</summary>
            <exclude />
            <param name="buffer"></param>
        </member>
        <member name="P:PX.Data.PXCache.BypassAuditFields">
            <summary>
            Bypass collecting values for audit. May be used for passwords ans so on.
            </summary>
            <exclude/>
        </member>
        <member name="P:PX.Data.PXCache.EncryptAuditFields">
            <summary>
            Bypass collecting values for audit. May be used for passwords ans so on.
            </summary>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.GetFieldsWithChangingUpdatability">
            <exclude />
        </member>
        <member name="P:PX.Data.PXCache.AlteredFields">
            <summary>Gets the collection of field names. Placing the field name in this collection forces calculation of the <tt>PXFieldState</tt> object in the <tt>GetValueExt</tt>, <tt>GetValueInt</tt>
            methods.</summary>
            <remarks>This property internally calls the OnFieldSelecting event with the IsAltered flag.</remarks>
        </member>
        <member name="M:PX.Data.PXCache.SetAltered``1(System.Boolean)">
            <summary>
            Adds or removes the specified field to/from the <tt>AlteredFields</tt> list.
            </summary>
            <typeparam name="Field">The DAC field.</typeparam>
            <param name="isAltered">The value indicating whether the field is added
            (<tt>true</tt>) or removed (<tt>false</tt>) from the <tt>AlteredFields</tt> list.</param>
            <example>
            <code>
            Items.Cache.SetAltered&lt;FlatPriceItem.inventoryID&gt;(true);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.SetAltered(System.String,System.Boolean)">
            <summary>
            Adds or removes the specified field to/from the <tt>AlteredFields</tt> list.
            </summary>
            <param name="field">The name of the DAC field.</param>
            <param name="isAltered">The value indicating whether the field is added
            (<tt>true</tt>) or removed (<tt>false</tt>) from the <tt>AlteredFields</tt> list.</param>
        </member>
        <member name="M:PX.Data.PXCache.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            Sets value without any validation or event handling
            </summary>
            <param name="data">IBqlTable or IDictionary</param>
            <param name="ordinal"></param>
            <param name="value"></param>
        </member>
        <member name="M:PX.Data.PXCache.GetValue(System.Object,System.Int32)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.SetValue(System.Object,System.String,System.Object)">
            <summary>
            sets value without any validation or event handling
            </summary>
            <param name="data">IBqlTable or IDictionary</param>
        </member>
        <member name="M:PX.Data.PXCache.GetValue(System.Object,System.String)">
            <summary>Gets the field value by the field name without raising any events.</summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.SetValueExt(System.Object,System.String,System.Object)">
            <summary>
            Set field value. <br/>
            Raises events: OnFieldUpdating, OnFieldVerifying, OnFieldUpdated. <br/>
            If exception - OnExceptionHandling. <br/>
            </summary>
            <param name="data">IBqlTable or IDictionary</param>
            <param name="fieldName">The name of the field. The parameter is case-insensitive.</param>
            <param name="value"></param>
        </member>
        <member name="M:PX.Data.PXCache.SetDefaultExt(System.Object,System.String,System.Object)">
            <summary>
            Raises OnFieldUpdating event to set field value
            </summary>
            <param name="data">IBqlTable or IDictionary</param>
            <param name="fieldName"></param>
        </member>
        <member name="M:PX.Data.PXCache.SetValue``1(System.Object,System.Object)">
            <summary>
            Sets the value of the field in the provided data record
            without raising events.
            </summary>
            <typeparam name="Field">The field that is set to the
            value.</typeparam>
            <param name="data">The data record.</param>
            <param name="value">The value to set to the field.</param>
            <example>
            The code below shows an event handler that sets values to
            three fields of the <tt>ARTran</tt> data record on update
            of the <tt>UOM</tt> field: two fields are assigned their
            default values and the <tt>UnitCost</tt> field is set
            directly.
            <code>
            protected virtual void APTran_UOM_FieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e)
            {
                APTran tran = (APTran)e.Row;
                sender.SetDefaultExt&lt;APTran.unitCost&gt;(tran);
                sender.SetDefaultExt&lt;APTran.curyUnitCost&gt;(tran);
                sender.SetValue&lt;APTran.unitCost&gt;(tran, null);
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.SetValueExt``1(System.Object,System.Object)">
            <summary>Sets the value of the field in the provided data
            record.</summary>
            <remarks>The method raises the <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, and <tt>FieldUpdated</tt> events. To set the
            value to the field without raising events, use the <see
            cref="M:PX.Data.PXCache`1.SetValue(System.Object,System.String,System.Object)">SetValue(object,
            string, object)</see> method.</remarks>
            <typeparam name="Field">The field that is set to the
            value.</typeparam>
            <param name="data">The data record.</param>
            <param name="value">The value to set to the field.</param>
            <example>
            <code>
            protected virtual void APInvoice_RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)
            {
                APInvoice doc = e.Row as APInvoice;
            
                if (doc.Released != true &amp;&amp; doc.Prebooked != true)
                {
                    if (doc.CuryDocBal != doc.CuryOrigDocAmt)
                    {
                        if (doc.CuryDocBal != null &amp;&amp; doc.CuryDocBal != 0)
                            sender.SetValueExt&lt;APInvoice.curyOrigDocAmt&gt;(doc, doc.CuryDocBal);
                        else
                            sender.SetValueExt&lt;APInvoice.curyOrigDocAmt&gt;(doc, 0m);
                    }
                    ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.SetDefaultExt``1(System.Object)">
            <summary>Sets the default value to the field in the provided data
            record.</summary>
            <remarks>The method raises <tt>FieldDefaulting</tt>,
            <tt>FieldUpdating</tt>, <tt>FieldVerifying</tt>, and
            <tt>FieldUpdated</tt>.</remarks>
            <typeparam name="Field">The field to set.</typeparam>
            <param name="data">The data record.</param>
            <example>
            The code below sets default values to the fields of a
            <tt>Location</tt> data record.
            <code>
            // The data view to select Location data records
            public PXSelect&lt;Location,
                Where&lt;Location.bAccountID, Equal&lt;Current&lt;BAccount.bAccountID&gt;&gt;&gt;,
                OrderBy&lt;Asc&lt;Location.locationID&gt;&gt;&gt; IntLocations;
            ...
            public virtual void InitVendorLocation(Location aLoc, string aLocationType)
            {
                this.IntLocations.Cache.SetDefaultExt&lt;Location.vCarrierID&gt;(aLoc);
                this.IntLocations.Cache.SetDefaultExt&lt;Location.vFOBPointID&gt;(aLoc);
                this.IntLocations.Cache.SetDefaultExt&lt;Location.vLeadTime&gt;(aLoc);
                this.IntLocations.Cache.SetDefaultExt&lt;Location.vShipTermsID&gt;(aLoc);
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.GetValueExt(System.Object,System.String)">
            <summary>Gets the value by the field name. The method raises the OnFieldSelecting event.</summary>
            <param name="data">IBqlTable or IDictionary</param>
            <param name="fieldName"></param>
            <returns>Returns the field value or PXFieldState (if the field is in the <see cref="P:PX.Data.PXCache.AlteredFields">AlteredFields</see> list).</returns>
        </member>
        <member name="M:PX.Data.PXCache.GetValueInt(System.Object,System.String)">
            <summary>
            The same as GetValueExt
            </summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.GetStateInt(System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.GetStateExt(System.Object,System.String)">
            <summary>
            Gets the field state by the field name.
            </summary>
            <remarks>Raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">IBqlTable or IDictionary</param>
            <param name="fieldName"></param>
            <returns>A <tt>PXFieldState</tt> object generated in the <tt>FieldSelecting</tt> event</returns>
        </member>
        <member name="M:PX.Data.PXCache.GetValue``1(System.Object)">
            <summary>
            Gets the value of the specified field in the provided data record.
            </summary>
            <typeparam name="Field">The field.</typeparam>
            <param name="data">The data record.</param>
            <returns>The field value.</returns>
            <example>
            The code below shows a <tt>FieldDefaulting</tt> event handler which
            gets the default value for the <tt>LocationExtAddress.VPaymentByType</tt> field
            from the current <tt>VendorClass</tt> data record.
            <code>
            protected virtual void LocationExtAddress_VPaymentByType_FieldDefaulting(
                PXCache sender, PXFieldDefaultingEventArgs e)
            {
                if (VendorClass.Current != null)
                {
                    e.NewValue = VendorClass.Cache.GetValue&lt;VendorClass.paymentByType&gt;(VendorClass.Current);
                    e.Cancel = true;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.GetValueExt``1(System.Object)">
            <summary>Returns the value or the <tt>PXFieldState</tt> object of the
            specified field in the given data record. The <tt>PXFieldState</tt>
            object is returned if the field is in the <tt>AlteredFields</tt>
            collection.</summary>
            <param name="data">The data record.</param>
            <typeparam name="Field">The field whose value or
            <tt>PXFieldState</tt> object is returned.</typeparam>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <returns>Returns the field value or PXFieldState (if the field is in the <see cref="P:PX.Data.PXCache.AlteredFields">AlteredFields</see> list).</returns>
            <example>
            The code below shows a <tt>RowDeleted</tt> event handler in which you
            get the value (or field state) of the <tt>IsDefault</tt> field
            of the <tt>POVendorInventory</tt> data record.
            <code title="" description="" lang="CS">
            protected virtual void POVendorInventory_RowDeleted(PXCache cache, PXRowDeletedEventArgs e)
            {
                POVendorInventory vendor = e.Row as POVendorInventory;
                object isdefault = cache.GetValueExt&lt;POVendorInventory.isDefault&gt;(e.Row);
                if (isdefault is PXFieldState)
                {
                    isdefault = ((PXFieldState)isdefault).Value;
                }
                if ((bool?)isdefault == true)
                    ...
            }</code></example>
        </member>
        <member name="M:PX.Data.PXCache.GetValueInt``1(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.GetStateExt``1(System.Object)">
            <summary>
            Gets the <tt>PXFieldState</tt> object of the specified field
            in the given data record.
            </summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <typeparam name="Field">The field whose
            <tt>PXFieldState</tt> object is created.</typeparam>
            <param name="data">The data record.</param>
            <returns>The field state object.</returns>
            <example>
            The code below shows a part of the <tt>SOOrderEntry</tt> graph
            constructor. The field state is created for the
            <tt>SOLine.InventoryID</tt> field.
            <code>
            public SOOrderEntry()
            {
                ...
                PXFieldState state = (PXFieldState)this.Transactions.Cache.GetStateExt&lt;SOLine.inventoryID&gt;(null);
                viewInventoryID = state != null ? state.ViewName : null;
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.SetValuePending(System.Object,System.String,System.Object)">
            <summary>
            Specified value stored in internal dictionary associated with data row,  <br/>
            and can be retrived later by GetValuePending method.
            </summary>
            <param name="data"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:PX.Data.PXCache.GetValuePending(System.Object,System.String)">
            <summary>
            returns value stored by SetValuePending
            </summary>
            <exclude />
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.GetValuePending``1(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetValueOriginal(System.Object,System.String)">
            <summary>
            returns value from instance copy stored in database
            </summary>
            <exclude />
            <param name="data"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.GetValueOriginal``1(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetOriginal(System.Object)">
            <exclude />
        </member>
        <member name="P:PX.Data.PXCache.Keys">
            <summary>
            Gets the collection of fied names that form the primary key
            of the data record. The collection is usually composed of
            the field that have attributes with the <tt>IsKey</tt> property
            set to <tt>true</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.PreventDeadlock">
            <summary>
            When set to <c>true</c> makes the cache sort the accumulator records
            by keys before executing update/insert commands, which allows to
            avoid deadlocks in case of multithreaded update of the same accumulator table.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.CustomDeadlockComparison">
            <summary>
            When set, makes the cache sort the accumulator records
            by custom comparison before executing update/insert commands, which allows to
            avoid deadlocks in case of multithreaded update of the same accumulator table.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.Identity">
            <summary>
            Gets the name of the identity field if the DAC defines it.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.RowId">
            <summary>
            Gets the name of the Row ID (identity, guid or foreign identity) field if the DAC defines it.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.Immutables">
            <summary>
            Gets the list of names of the fields that are considered as immutable.
            Immutable fields are the fields that have attributes with the
            <tt>IsImmutable</tt> property set to <tt>true</tt>.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.IsAutoNumber(System.String)">
            <summary>
            Return true if the <paramref name="field"/> value is auto number
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.SetAutoNumber(System.String)">
            <summary>
            Set the <paramref name="field"/> as auto number
            </summary>
            <param name="field"></param>
        </member>
        <member name="P:PX.Data.PXCache.Fields">
            <summary>Gets the collection of names of fields and virtual fields.</summary>
            <value>By default, the collection includes all public properties of the DAC that is associated with the cache. The collection may also include the virtual fields that
            are injected by attributes (such as the description field of the PXSelector attribute). The developer can add any field to the collection.</value>
        </member>
        <member name="P:PX.Data.PXCache.Interceptor">
            <summary>Allows you to intercept the database operations (insertion, update and removal of a row in the database).</summary>
        </member>
        <member name="P:PX.Data.PXCache.BqlFields">
            <summary>Gets the list of classes that implement IBqlField and are nested in the DAC and its base type. These types represent DAC fields in BQL queries. This list
            differs from the list that the Fields property returns.</summary>
        </member>
        <member name="M:PX.Data.PXCache.GetField(System.Type)">
            <summary>Searchs for the specified BQL field in the <see cref="P:PX.Data.PXCache.Fields">Fields</see> collection.</summary>
            <param name="bqlField">A BQL field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.GetBqlField(System.String)">
            <summary>
            Searches for the specified field in the <see cref="P:PX.Data.PXCache`1.BqlFields">BqlFields</see>
            collection.
            </summary>
            <param name="field">The field to find.</param>
            <returns>The abstract type implementing <tt>IBqlField</tt>.</returns>
        </member>
        <member name="M:PX.Data.PXCache.GetFieldName(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="P:PX.Data.PXCache.BqlKeys">
            <summary>Gets the collection of BQL types that correspond to the key fields that the DAC defines.</summary>
        </member>
        <member name="P:PX.Data.PXCache.BqlSelect">
            <summary>Looks like obsolete property. The value of this property is not used.</summary>
            <exclude />
        </member>
        <member name="P:PX.Data.PXCache.BqlTable">
            <summary>Gets the DAC the cache is associated with. The DAC is specified through the type parameter when the cache is instantiated.</summary>
        </member>
        <member name="M:PX.Data.PXCache.GetBqlTable(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.ToDictionary(System.Object)">
            <summary>
            Save row field values to Dictionary 
            </summary>
            <param name="data">IBqlTable</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.FromXml(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.ValueToString(System.String,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.ValueFromString(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetFieldCount">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetFieldOrdinal(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetFieldOrdinal``1">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.Normalize">
            <summary>
            Repair internal hashtable, if user has changed the key values of stored data rows.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.Graph">
            <summary>Gets or sets the business logic controller the cache is related to.</summary>
        </member>
        <member name="P:PX.Data.PXCache.AllowSelect">
            <summary>
            Gets or sets the value that indicates whether the cache
            allows selection of data records from the user interface.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.AllowUpdate">
            <summary>
            Gets or sets the value that indicates whether the cache allows
            update of data records from the user interface. This value does
            not affect the ability to update a data record via the methods.
            By default, the property equals true.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.AllowInsert">
            <summary>
            Gets or sets the value that indicates whether the cache allows insertion
            of data records from the user interface. This value does not affect the
            ability to insert a data record via the methods. By default, the property
            equals <tt>true</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.AllowDelete">
            <summary>
            Gets or sets the value that indicates whether the cache allows
            deletion of data records from the user interface. This value does
            not affect the ability to delete a data record via the methods.
            By default, the property equals <tt>true</tt>.
            </summary>
        </member>
        <member name="F:PX.Data.PXCache.ForceExceptionHandling">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.getBqlTableAndParents(System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetExtensionTypes">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetExtension``1(System.Object)">
            <summary>Gets an extension of appropriate type.</summary>
            <typeparam name="Extension">
            The type of extension requested
            </typeparam>
            <param name="item">
            Parent standard object
            </param>
            <returns>
            Object of type Extension
            </returns>
        </member>
        <member name="M:PX.Data.PXCache.GetMain``1(``0)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.GetItemType">
            <summary>
            Gets the type of data rows in the cache.
            </summary>
            <returns>Containing type.</returns>
        </member>
        <member name="P:PX.Data.PXCache.Current">
            <summary>
              <para>Gets or sets the current data record. This property can point to the last data record displayed in the user interface. If the user selects a data record in
            a grid, this property points to this data record. If the user or the application inserts, updates, or deletes a data record, the property points to this data
            record. Insertion and update of records through the API methods also assign this property.</para>
            </summary>
            <remarks>
              <para>When this property is assigned, the RowSelected event is raised.</para>
              <para>You can reference the Current data record and its fields in the PXSelect BQL statements by using the Current parameter.</para>
            </remarks>
            <value>Contains value of type IBqlTable.</value>
        </member>
        <member name="F:PX.Data.PXCache.ActiveRow">
            <summary>
            Allow to pass active row from business logic back to UI
            Current can not be used for this because its value can be unpredictable changed
            </summary>
        </member>
        <member name="F:PX.Data.PXCache.InsertPosition">
            <summary>
            Allows to pass data key of the row before which new row should be inserted.
            </summary>
        </member>
        <member name="F:PX.Data.PXCache.InsertPositionMode">
            <summary>
            If true you should insert 'RowsToMove' after specified 'InsertPosition'.
            </summary>
        </member>
        <member name="F:PX.Data.PXCache.RowsToMove">
            <summary>
            Allows to pass data keys of the rows that need to be moved.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual(System.Object,System.Object)">
            <summary>Compares the values of the key fields. The list of key fields is taken from the cache.</summary>
            <param name="a">IBqlTable or IDictionary</param>
            <param name="b">IBqlTable or IDictionary</param>
            <returns>Returns true if the values of the key fields are equal.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``1(System.Object,System.Object)">
            <summary>Compares the values of the specified fields.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The field to compare.</typeparam>
            <returns>Returns true if the values of the specified fields in the specified rows are equal.</returns>
            <example>
              <code title="Example" description="To check whether a field has been changed, you use the ObjectsEqual&lt;&gt;() method of the cache as follows." lang="CS">
            if (!sender.ObjectsEqual&lt;ShipmentLine.lineQty&gt;(newLine, oldLine)
                ...</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``2(System.Object,System.Object)">
            <summary>Compares the values of two fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
            <example>
              <code title="Example" description="You can specify up to eight fields as type parameters of the ObjectsEqual&lt;&gt;() method to compare two data records by using these fields." lang="CS">
            if (!sender.ObjectsEqual&lt;ShipmentLine.lineQty,
                                     ShipmentLine.cancelled&gt;(newLine, oldLine)
                ...</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``3(System.Object,System.Object)">
            <summary>Compares the values of three fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``4(System.Object,System.Object)">
            <summary>Compares the values of four fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field4">The fourth field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``5(System.Object,System.Object)">
            <summary>Compares the values of five fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field5">The fifth field to compare.</typeparam>
            <typeparam name="Field4">The fourth field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``6(System.Object,System.Object)">
            <summary>Compares the values of six fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field6">The sixth field to compare.</typeparam>
            <typeparam name="Field5">The fifth field to compare.</typeparam>
            <typeparam name="Field4">The fourth field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``7(System.Object,System.Object)">
            <summary>Compares the values of seven fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field7">The seventh field to compare.</typeparam>
            <typeparam name="Field6">The sixth field to compare.</typeparam>
            <typeparam name="Field5">The fifth field to compare.</typeparam>
            <typeparam name="Field4">The fourth field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqual``8(System.Object,System.Object)">
            <summary>Compares the values of eight fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="Field1">The first field to compare.</typeparam>
            <typeparam name="Field2">The second field to compare.</typeparam>
            <typeparam name="Field3">The third field to compare.</typeparam>
            <typeparam name="Field4">The fourth field to compare.</typeparam>
            <typeparam name="Field5">The fifth field to compare.</typeparam>
            <typeparam name="Field6">The sixth field to compare.</typeparam>
            <typeparam name="Field7">The seventh field to compare.</typeparam>
            <typeparam name="Field8">The eighth field to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectsEqualBy``1(System.Object,System.Object)">
            <summary>Compares the values of given fields in the specified records.</summary>
            <param name="a">The first row to compare.</param>
            <param name="b">The second row to compare.</param>
            <typeparam name="TFields">The set of fields to compare.</typeparam>
            <returns>If the values of any of the fields you specify differ, the data records are considered different and the method returns false.</returns>
        </member>
        <member name="M:PX.Data.PXCache.GetObjectHashCode(System.Object)">
            <summary>Returns the hash code generated from the key field values.</summary>
            <param name="data">IBqlTable or IDictionary</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.ObjectToString(System.Object)">
            <summary>
            Displays key fields in format {k1=v1, k2=v2}
            </summary>
            <param name="data">IBqlTable or PXResult</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.GetStatus(System.Object)">
            <summary>Looks for an object in the cache and returns the status of the object. The item is located by the values of the key fields.</summary>
            <param name="item">Cache item to test, IBqlTable</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.SetStatus(System.Object,PX.Data.PXEntryStatus)">
            <summary>
            Looks for an item in the cache and sets the status of the item.
            If the item is not in the cache, the item is inserted.
            </summary>
            <param name="item"></param>
            <param name="status"></param>
        </member>
        <member name="M:PX.Data.PXCache.Locate(System.Object)">
            <summary>
            Searches data row in the cache.<br/>
            Returns located row.
            </summary>
            <param name="item">IBqlRow</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.Locate(System.Collections.IDictionary)">
            <summary>
            Searches data row in the cache. <br/>
            If row not found in cache, <br/>
            reads it from the database and places into the cache with status NotChanged.<br/>
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.Remove(System.Object)">
            <summary>
            Remove entry from cache items hashtable.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PX.Data.PXCache.Update(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Places row into the cache with status Updated.<br/>
            If row does not exists in the cache, looks for it in database.<br/>
            If row does not exists in database, inserts row with status Inserted.<br/>
            Raise events OnRowUpdating, OnRowUpdated and other events.<br/>
            This method is used to update row from user interface.<br/>
            Flag AllowUpdate may cancel this method.<br/>
            returns 1 if updated successfully, otherwise 0.
            </summary>
            <param name="keys">Primary key of the item.</param>
            <param name="values">New field values to update the item with.</param>
            <returns>1 if updated successfully, otherwise 0.</returns>
        </member>
        <member name="M:PX.Data.PXCache.Update(System.Object)">
            <summary>
            Places row into the cache with status Updated.<br/>
            If row does not exists in the cache, looks for it in database.<br/>
            If row does not exists in database, inserts row with status Inserted.<br/>
            Raise events OnRowUpdating, OnRowUpdated and other events.
            Flag AllowUpdate does not affects this method.
            </summary>
            <param name="item">IBqlTable of type [CacheItemType]</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.Update(System.Object,System.Boolean)">
            <summary>
            Place row into the cache with status Updated.<br/>
            If row does not exists in the cache, looks for it in database.<br/>
            If row does not exists in database, inserts row with status Inserted.<br/>
            Raise events OnRowUpdating, OnRowUpdated and other events.
            </summary>
            <param name="item">IBqlTable of type [CacheItemType]</param>
            <param name="bypassinterceptor">whether to ignore PXDBInterceptorAttribute</param>
        </member>
        <member name="M:PX.Data.PXCache.UpdateLastModified(System.Object,System.Boolean)">
            <summary>
            Updates Last Modified state of the row into the cache. <br />
            Called at the end of RowUpdated, RowInserted event. <br />
            Last modified is used to track properties changes on RowUpdate. <br />
            Has influence on Accumulator Attributes <br />
            </summary>
            <param name="item">Row updated/inserted</param>
            <param name="inserted">Flag insert/update</param>
        </member>
        <member name="M:PX.Data.PXCache.CreateNewVersion(System.Object)">
            <summary>
            Create new Version of Graph on Action executed
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PX.Data.PXCache.DiscardCurrentVersion(System.Object)">
            <summary>
            Make DiscardChanges - return to previous stored version
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PX.Data.PXCache.IfModifiedVersion(System.Object)">
            <summary>
            Check is Graph was modified
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.SetVersionModified(System.Object)">
            <summary>
            Reqrites VersionModified on Update()
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:PX.Data.PXCache.Insert(System.Collections.IDictionary)">
            <summary>
            Inserts  new row into the cache. <br/>
            Raises events OnRowInserting, OnRowInserted and other field related events.<br/>
            Does not check the database for existing row.<br/>
            Values of dictionary are not readonly and can be updated during method call.<br/>
            Flag AllowInsert may cancel this method.<br/>
            Returns 1 if inserted successfully, otherwise 0.<br/>
            </summary>
            <param name="values">Field values to populate the item before inserting.</param>
            <returns>1 if inserted successfully, otherwise 0.</returns>
        </member>
        <member name="M:PX.Data.PXCache.Insert(System.Object)">
            <summary>
            Inserts  new row into the cache. <br/>
            Returns inserted row of type [CacheItemType] or null if row was not inserted.<br/>
            Raises events OnRowInserting, OnRowInserted and other field related events.<br/>
            Does not check the database for existing row.
            Flag AllowInsert does not affects this method.
            </summary>
            <param name="item">IBqlTable of type [CacheItemType]</param>
        </member>
        <member name="M:PX.Data.PXCache.Insert(System.Object,System.Boolean)">
            <summary>
            Inserts new row into the cache. <br/>
            Returns inserted row of type [CacheItemType] or null if row was not inserted.<br/>
            Raises events OnRowInserting, OnRowInserted and other field related events.<br/>
            Does not check the database for existing row.<br/>
            </summary>
            <param name="item">IBqlTable of type [CacheItemType]</param>
            <param name="bypassinterceptor">whether to ignore PXDBInterceptorAttribute</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.Insert">
            <summary>
            Place new row into the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCache.CreateInstance">
            <summary>Returns a new TNode();</summary>
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.Extend``1(``0)">
            <summary>Inserts a row into the cache if the row type distincts from the cache item type.</summary>
            <typeparam name="Parent"></typeparam>
            <param name="item"></param>
            <returns>Returns the inserted row.</returns>
        </member>
        <member name="M:PX.Data.PXCache.Delete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Places the item into the cache with the Deleted status. The method raises the OnRowDeleting, OnRowDeleted events. This method is used to delete a row from
            the user interface. The <see cref="P:PX.Data.PXCache.AllowDelete">AllowDelete</see> property can cancel this method.</summary>
            <param name="keys">The primary key of the item.</param>
            <param name="values">The parameter is not used. The value can be null.</param>
            <returns>Returns 1 if deleted successfully, otherwise returns 0.</returns>
        </member>
        <member name="M:PX.Data.PXCache.Delete(System.Object)">
            <summary>Places the item into the cache with the Deleted status. The method raises the OnRowDeleting, OnRowDeleted events. The <see cref="P:PX.Data.PXCache.AllowDelete">AllowDelete</see> property
            does not affect this method.</summary>
            <param name="item">The item to be placed in the cache.</param>
        </member>
        <member name="M:PX.Data.PXCache.Delete(System.Object,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.PlaceNotChanged(System.Object)">
            <summary>
            Looks for a row in the cache collection. If the row has the deleted or insertedDeleted status, the method returns null.
            Returns the row inserted to the cache.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.PlaceNotChanged(System.Object,System.Boolean@)">
            <summary>
            Looks for a row in the cache collection. If the row has the deleted or insertedDeleted status, the method returns null.
            If the status of the row is inserted or updated, the wasUpdated flag is true.
            Returns the row inserted to cache.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.Select(PX.Data.PXDataRecord,System.Int32@,System.Boolean,System.Boolean@)">
            <summary>Creates a data record from the PXDataRecord object and places it into the cache with the NotChanged status if the data record isn't found among the modified
            data records in the cache.</summary>
            <param name="record">The PXDataRecord object to convert to the DAC type of the cache.</param>
            <param name="position">The index of the first field to read in the list of columns comprising the PXDataRecord object.</param>
            <param name="isReadOnly">The value that indicates (if true) that the data record with the same key fields should be located in the cache and updated.</param>
            <param name="wasUpdated">The value that indicates (if true) that the data record with the same keys existed in the cache among the modified data records.</param>
            <remarks>
              <para>If isReadOnly is false then:</para>
              <list type="bullet">
                <item>If the cache already contains the data record with the same keys and the NotChanged status, the method returns this data record updated to the state of
                PXDataRecord.</item>
                <item>If the cache contains the same data record with the Updated or Inserted status, the method returns this data record.</item>
              </list>
              <para>In other cases and when isReadonly is true, the method returns the data record created from the PXDataRecord object.</para>
              <para>If the AllowSelect property is false, the methods returns a new empty data record and the logic described above is not executed.</para>
              <para>The method raises the RowSelecting event.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache.CreateCopy(System.Object)">
            <summary>Initializes a new data record with the field values from the provided data record.</summary>
            <param name="item">The data record to copy.</param>
            <returns></returns>
            <example>
              <code title="Example" description="The code below creates a copy of the Current data record of a data view." lang="CS">
            public PXSelect&lt;APInvoice, ... &gt; Document;
            ...
            APInvoice newdoc = PXCache&lt;APInvoice&gt;.CreateCopy(Document.Current);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.RestoreCopy(System.Object,System.Object)">
            <summary>
            Copy field values from copy to item.
            </summary>
            <param name="item">IBqlTable</param>
            <param name="copy">IBqlTable</param>
        </member>
        <member name="M:PX.Data.PXCache.Load">
            <summary>
            Loads data rows and other cache state objects from the session.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.Unload">
            <summary>
            Saves dirty data rows and other cache state objects into the session.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.Clear">
            <summary>Clears all information stored in the session previously.</summary>
        </member>
        <member name="M:PX.Data.PXCache.ClearItemAttributes">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.TrimItemAttributes(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.ClearQueryCacheObsolete">
            <summary>Clears all cached query result for a given table.</summary>
        </member>
        <member name="P:PX.Data.PXCache.Dirty">
            <summary>Gets the collection of updated, inserted, and deleted data records. The collection contains data records with the Updated, Inserted, or Deleted status.</summary>
        </member>
        <member name="P:PX.Data.PXCache.Deleted">
            <summary>Gets the collection of deleted data records that exist in the database. The collection contains data records with the Deleted status.</summary>
        </member>
        <member name="P:PX.Data.PXCache.Updated">
            <summary>Gets the collection of updated data records that exist in the database. The collection contains data records with the Updated status.</summary>
        </member>
        <member name="P:PX.Data.PXCache.Inserted">
            <summary>Gets the collection of inserted data records that does not exist in the database. The collection contains data records with the Inserted status.</summary>
        </member>
        <member name="P:PX.Data.PXCache.Cached">
            <summary>Get the collection of all cached data records. The collection contains data records with any status. The developer should not rely on the presence of data
            records with statuses other than Updated, Inserted, and Deleted in this collection.</summary>
            <remarks>The collection contains data records with any status. The developer should not rely on the presence of data records with statuses other than Updated, Inserted,
            and Deleted in this collection.</remarks>
        </member>
        <member name="M:PX.Data.PXCache.Persist(PX.Data.PXDBOperation)">
            <summary>
            Saves changed data rows to the database.<br/>
            Raise events OnRowPersisting, OnCommandPreparing, OnRowPersisted, OnExceptionHandling
            </summary>
            <returns>The first item saved.</returns>
        </member>
        <member name="M:PX.Data.PXCache.Persist(System.Object,PX.Data.PXDBOperation)">
            <summary>
            executes PersistUpdated or PersistInserted or PersistDeleted depends on operation
            </summary>
            <param name="row"></param>
            <param name="operation"></param>
        </member>
        <member name="M:PX.Data.PXCache.PersistUpdated(System.Object)">
            <summary>Saves the updated data record to the database.</summary>
            <remarks>
              <para>The method raises the OnRowPersisting, OnCommandPreparing, OnRowPersisted, OnExceptionHandling events.</para>
              <para>The default behavior can be modified by PXDBInterceptorAttribute.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache.PersistInserted(System.Object)">
            <summary>Inserts the provided data record into the database.<br /></summary>
            <remarks>
              <para>The exception is thrown if a row with such keys exists in the database.</para>
              <para>The method raises the OnRowPersisting, OnCommandPreparing, OnRowPersisted, OnExceptionHandling events.</para>
              <para>The default behavior can be modified by PXDBInterceptorAttribute.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache.PersistDeleted(System.Object)">
            <summary>Deletes the provided data record from the database by the key fields</summary>
            <remarks>The method raises the OnRowPersisting, OnCommandPreparing, OnRowPersisted, OnExceptionHandling events.<br />
             The default behavior can be modified by PXDBInterceptorAttribute.</remarks>
        </member>
        <member name="M:PX.Data.PXCache.Persisted(System.Boolean)">
            <summary>
            For each persisted row - raise OnRowPersisted, SetStatus(Notchanged)
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.Persisted(System.Boolean,System.Exception)">
            <summary>
            For each persisted row - raise OnRowPersisted, SetStatus(Notchanged)
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.ResetPersisted(System.Object)">
            <summary>
            remove row from list of persited items
            </summary>
            <param name="row"></param>
        </member>
        <member name="F:PX.Data.PXCache._IsInInsertState">
            <summary>
            Mobile only. Clarifies If cache in before insert state.
            </summary>
        </member>
        <member name="P:PX.Data.PXCache.IsDirty">
            <summary>Gets or sets the value that indicates whether the cache contains the modified data records.</summary>
        </member>
        <member name="P:PX.Data.PXCache.IsInsertedUpdatedDeleted">
            <summary>Gets the value that indicates if the cache contains modified data records to be saved to database.</summary>
        </member>
        <member name="T:PX.Data.PXCache._CacheAttachedDelegate">
            <summary>The internal delegate for the <tt>CacheAttached</tt> event.</summary>
            <param name="graph">(Required). The <see cref="T:PX.Data.PXGraph" /> object to which the cache is attached.</param>
            <param name="sender">(Required). The <see cref="T:PX.Data.PXCache" /> object that raised the event.</param>
            <remarks>
              <para>The <tt>CacheAttached</tt> handler is used to override data access class (DAC) field attributes declared directly within the DAC. By declaring a
            <tt>CacheAttached</tt> handler and attaching <span>appropriate attributes</span> to the handler within a graph, the developer forces the framework to
            completely override DAC field attributes within this graph.</para>
              <para>The execution order for the <tt>CacheAttached</tt> event handlers is the following:</para>
              <list type="number">
                <item>Attribute event handlers are executed.</item>
                <item>Graph event handlers are executed.</item>
              </list>
              <para></para>
            </remarks>
            <example>
              <code title="Example" description="You should define a graph event handler as follows. Event handlers in particular graphs do not have the graph parameter." lang="CS">
            [DAC_Field_Attribute_1]
             ...
             [DAC_Field_Attribute_N]
             protected virtual void DACName_FieldName_CacheAttached(PXCache sender)
             {
             ...
             }</code>
              <code title="Example2" description="The code below overrides DAC field attributes within a graph." lang="CS">
            public class DimensionMaint : PXGraph&lt;DimensionMaint, Dimension&gt;
            {
                ...
                
                [PXDBString(15, IsUnicode = true, IsKey = true)]
                [PXDefault(typeof(Dimension.dimensionID))]
                [PXUIField(DisplayName = "Dimension ID", Visibility = 
                PXUIVisibility.Invisible, Visible = false)]
                [PXSelector(typeof(Dimension.dimensionID), DirtyRead = true)]
                protected virtual void Segment_DimensionID_CacheAttached(PXCache sender)
                {
             
                }
                
                ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXCache.DisplayName">
            <summary>
            Gets or sets the user-friendly name set by the
            <see cref="T:PX.Data.PXCacheNameAttribute">PXCacheName</see> attribute.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.IsKeysFilled(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCache.CollectForeignKeys(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <remarks>
            See <a href="https://wiki.acumatica.com/display/TND/Primary+and+Foreign+Key+API">Foreign Key API</a> for more details.
            </remarks>
        </member>
        <member name="T:PX.Data.PXCache.EventDictionary`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.RaiseCommandPreparing(System.String,System.Object,System.Object,PX.Data.PXDBOperation,System.Type,PX.Data.PXCommandPreparingEventArgs.FieldDescription@)">
            <summary>
            Raises the CommandPreparing
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="value">The current field value.</param>
            <param name="operation">The current database operation.</param>
            <param name="table">The type of DAC objects placed in the cache.</param>
            <param name="description">The object containing the description of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseCommandPreparing``1(System.Object,System.Object,PX.Data.PXDBOperation,System.Type,PX.Data.PXCommandPreparingEventArgs.FieldDescription@)">
            <summary>
            Raises the CommandPreparing
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="value">The current field value.</param>
            <param name="operation">The current database operation.</param>
            <param name="table">The type of DAC objects placed in the cache.</param>
            <param name="description">The object containing the description of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowSelecting(System.Object,PX.Data.PXDataRecord,System.Int32@,System.Boolean)">
            <summary>
            Raises the RowSelecting event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
            <param name="record">The object wrapping the result set row.</param>
            <param name="position">The current index in the list of <tt>PXDataRecord</tt>
            columns.</param>
            <param name="isReadOnly">The value indicating if the data record is read-only.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowSelected(System.Object)">
            <summary>
            Raises the RowSelected event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowInserting(System.Object)">
            <summary>
            Raises the RowInserting event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowInserted(System.Object)">
            <summary>
            Raises the RowInserted event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowUpdating(System.Object,System.Object)">
            <summary>
            Raises the RowUpdating event
            for the specified data record.
            </summary>
            <param name="item">The version of the data record before update.</param>
            <param name="newItem">The updated version of the data record.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowUpdated(System.Object,System.Object)">
            <summary>
            Raises the RowUpdated event
            for the specified data record.
            </summary>
            <param name="newItem">The updated version of the data record.</param>
            <param name="oldItem">The version of the data record before update.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowDeleting(System.Object)">
            <summary>
            Raises the RowDeleting event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowDeleted(System.Object)">
            <summary>
            Raises the RowDeleted event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowPersisting(System.Object,PX.Data.PXDBOperation)">
            <summary>
            Raises the RowPersisting event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
            <param name="operation">The type of the current database operation.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseRowPersisted(System.Object,PX.Data.PXDBOperation,PX.Data.PXTranStatus,System.Exception)">
            <summary>
            Raises the RowPersisted event
            for the specified data record.
            </summary>
            <param name="item">The data record for which the event is raised.</param>
            <param name="operation">The type of the current database operation.</param>
            <param name="tranStatus">The <see cref="T:PX.Data.PXTranStatus">PXTranStatus</see>
            value indicating the status of the transaction.</param>
            <param name="exception">The exception thrown while the database operation
            was executed.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldDefaulting(System.String,System.Object,System.Object@)">
            <summary>
            Raises the FieldDefaulting
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The default value for the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldDefaulting``1(System.Object,System.Object@)">
            <summary>
            Raises the FieldDefaulting
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The default value for the current field.</param>
            <example>
            The code below shows an example of raising the <tt>FieldDefaulting</tt>
            event.
            <code>
            CashAccount acct = null;
            
            // Get the cache (the other way is to use Cache property of a data view)
            PXCache cache = this.Caches[typeof(ARPayment)].Cache;
            
            // Initialize a new ARPayment data record
            ARPayment payment = new ARPayment();
            payment.CustomerID = aDoc.CustomerID;
            payment.CustomerLocationID = aDoc.CustomerLocationID;
            
            // You could execute cache.Insert(payment) to insert the data record
            // in the cache and raise the events including FieldDefaulting.
            // However, we need to raise FieldDefaulting only on one field.
            
            // Declare a variable for the value
            object newValue;
            
            // Raise the FieldDefaulting event
            cache.RaiseFieldDefaulting&lt;ARPayment.cashAccountID&gt;(payment, out newValue);
            
            // Convert the object to the data type of the field
            Int32? acctID = newValue as Int32?;
            
            // Use the value to retrieve the CashAccount data record
            if (acctID.HasValue)
            {
                acct = PXSelect&lt;CashAccount,
                    Where&lt;CashAccount.cashAccountID,
                        Equal&lt;Required&lt;CashAccount.cashAccountID&gt;&gt;&gt;&gt;.
                    Select(this, acctID);
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldUpdating(System.String,System.Object,System.Object@)">
            <summary>
            Raises the FieldUpdating
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The updated value of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldUpdating``1(System.Object,System.Object@)">
            <summary>
            Raises the FieldUpdating
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The updated value of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldVerifying(System.String,System.Object,System.Object@)">
            <summary>
            Raises the FieldVerifying
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The updated value of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldVerifying``1(System.Object,System.Object@)">
            <summary>
            Raises the FieldVerifying
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The updated value of the current field.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldUpdated(System.String,System.Object,System.Object)">
            <summary>
            Raises the FieldUpdated
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="oldValue">The value of the current field before update.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldUpdated``1(System.Object,System.Object)">
            <summary>
            Raises the FieldUpdated
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="oldValue">The value of the current field before update.</param>
        </member>
        <member name="T:PX.Data.PXCache.FieldSelectingDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache.FieldDefaultingDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.DecorateAsRowDelegate(PX.Data.PXCache.FieldDefaultingDelegate)">
            <summary>
            Decorate FieldDefaultingDelegate for using as FieldOfRowDefaultingDelegate.
            </summary>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldSelecting(System.String,System.Object,System.Object@,System.Boolean)">
            <summary>
            Raises the FieldSelecting
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="returnValue">The external presentation of the value of the current field.</param>
            <param name="forceState">The value indicating whether the
            <see cref="T:PX.Data.PXFieldState">PXFieldState</see> object should be generated.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldSelectingInt(System.String,System.Object,System.Object@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCache.RaiseFieldSelecting``1(System.Object,System.Object@,System.Boolean)">
            <summary>
            Raises the FieldSelecting
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="returnValue">The external presentation of the value of the current field.</param>
            <param name="forceState">The value indicating whether the
            <see cref="T:PX.Data.PXFieldState">PXFieldState</see> object should be generated.</param>
        </member>
        <member name="M:PX.Data.PXCache.RaiseExceptionHandling(System.String,System.Object,System.Object,System.Exception)">
            <summary>
            Raises the ExceptionHandling
            event for the specified field and data record.
            </summary>
            <param name="name">The name of the field for which the event is raised.
            The parameter is case-insensitive.</param>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The new value of the current field generated by the
            operation that causes the exception.</param>
            <param name="exception">The exception that causes the event.</param>
            <remarks>
              <para>
                <code>RaiseExceptionHandling</code>, which is used to prevent the saving of a record or to display an error or warning on the form,
            cannot be invoked on a <code>PXCache</code> instance in the following event handlers:</para>
              <list type="bullet">
                <item>
                  <code>FieldDefaulting</code>: This event handler works with a record that has not yet been added to <code>PXCache</code> or a record whose field is changed in the code. Neither situation involves the display of errors or warning for a record.</item>
                <item>
                  <code>FieldSelecting</code>: This event handler is used to configure a UI control of a field. The invocation of <code>PXCache.RaiseExceptionHandling</code> in this event handler has no effect.</item>
                <item>
                  <code>RowSelecting</code>: This event handler is called when the record is being read from the database. These records are not
                available in <code>PXCache</code> yet. Invocation of <code>PXCache.RaiseExceptionHandling</code> in this event
                handler has no effect.</item>
                <item>
                  <code>RowPersisted</code>: This event handler is called when the record has already been saved to the database. Therefore, it would
                not make sense to display any warnings for this record.</item>
              </list>
              <para>
                <code>RaiseExceptionHandling</code> usually is invoked in the following event handlers:</para>
              <list type="bullet">
                <item>
                  <code>RowPersisting</code>to prevent saving of a record</item>
                <item>
                  <code>RowSelected</code>to display an error or warning on the form</item>
              </list>
            </remarks>
        </member>
        <member name="M:PX.Data.PXCache.RaiseExceptionHandling``1(System.Object,System.Object,System.Exception)">
            <summary>
            Raises the ExceptionHandling
            event for the specified field and data record.
            </summary>
            <typeparam name="Field">The field for which the event is raised.</typeparam>
            <param name="row">The data record for which the event is raised.</param>
            <param name="newValue">The new value of the current field generated by the operation that causes the exception.</param>
            <param name="exception">The exception that causes the event.</param>
            <example>
            A typical use of the method is found in event handlers when the value of
            a field doesn't pass validation. If the value is validated in a
            <tt>RowUpdating</tt> event handler, you should pass an instance of
            <tt>PXSetPropertyException</tt> with the error message to the method.
            The code below gives an example for this case.
            <code>
            INComponent row = e.NewRow as INComponent;
            if (row != null &amp;&amp; row.Qty != null &amp;&amp;
                row.MinQty != null &amp;&amp; row.Qty &lt;= row.MinQty)
            {
                sender.RaiseExceptionHandling&lt;INComponent.qty&gt;(
                    row, row.Qty, new PXSetPropertyException(
                        "Quantity must be greater or equal to Min. Quantity."));
            }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXCache.EventsRowMap">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache.AlteredSource">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache.AlteredDescriptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCache.CacheStaticInfoBase">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCacheEx.AdjustUI(PX.Data.PXCache,System.Object)">
            <summary>
            Provides an object that allows to adjust the state of a <see cref="F:PX.Data.PXAttributeLevel.Item"/>-attribute of the <see cref="T:PX.Data.PXUIFieldAttribute"/> type, that is attached to the cache, in runtime.
            </summary>
            <param name="cache">Cache which the attribute is attached to.</param>
            <param name="row">Row which the attribute should be adjusted for.</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.Adjust``1(PX.Data.PXCache,System.Object)">
            <summary>
            Provides an object that allows to adjust the state of a <see cref="F:PX.Data.PXAttributeLevel.Item"/>-attribute of a specific type, that is attached to the cache, in runtime.
            </summary>
            <typeparam name="TAttribute">Type of the adjusted attribute.</typeparam>
            <param name="cache">Cache which the attribute is attached to.</param>
            <param name="row">Row which the attribute should be adjusted for.</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AdjustUIReadonly(PX.Data.PXCache,System.Object)">
            <summary>
            Provides an object that allows to adjust the state of a <see cref="F:PX.Data.PXAttributeLevel.Cache"/>-attribute of the <see cref="T:PX.Data.PXUIFieldAttribute"/> type, that is attached to the cache, in runtime.
            </summary>
            <param name="cache">Cache which the attribute is attached to.</param>
            <param name="row">Row which the attribute should be adjusted for.</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AdjustReadonly``1(PX.Data.PXCache,System.Object)">
            <summary>
            Provides an object that allows to adjust the state of a <see cref="F:PX.Data.PXAttributeLevel.Cache"/>-attribute of a specific type, that is attached to the cache, in runtime.
            </summary>
            <typeparam name="TAttribute">Adjusted attribute type.</typeparam>
            <param name="cache">Cache which the attribute is attached to.</param>
            <param name="row">Row which the attribute should be adjusted for.</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.ForAllFields(System.Action{`0})">
            <summary>
            Adjust attributes attached to any fields by applying the <paramref name="adjustment"/> action.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.For``1(System.Action{`0})">
            <summary>
            Adjust attributes attached to <typeparamref name="TField"/> by applying the <paramref name="adjustment"/> action,
            and memorize <paramref name="adjustment"/> action for further chaining.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.For(System.String,System.Action{`0})">
            <summary>
            Adjust attributes attached to <paramref name="fieldName"/> by applying the <paramref name="adjustment"/> action,
            and memorize <paramref name="adjustment"/> action for further chaining.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.Chained.ForAllFields(System.Action{`0})">
            <summary>
            Adjust attributes attached to any fields by applying the <paramref name="adjustment"/> action.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.Chained.For``1(System.Action{`0})">
            <summary>
            Adjust attributes attached to <typeparamref name="TField"/> by applying the <paramref name="adjustment"/> action,
            and override previous memorized <paramref name="adjustment"/> action.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.Chained.For(System.String,System.Action{`0})">
            <summary>
            Adjust attributes attached to <paramref name="fieldName"/> by applying the <paramref name="adjustment"/> action,
            and override previous memorized <paramref name="adjustment"/> action.
            </summary>
            <param name="adjustment">An attribute adjustment action</param>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.Chained.SameFor``1">
            <summary>
            Adjust attributes attached to <typeparamref name="TField"/> by applying the previously memorized adjustment action.
            </summary>
        </member>
        <member name="M:PX.Data.PXCacheEx.AttributeAdjuster`1.Chained.SameFor(System.String)">
            <summary>
            Adjust attributes attached to <paramref name="fieldName"/> by applying the previously memorized adjustment action.
            </summary>
        </member>
        <member name="M:PX.Data.PXCacheEx.TableExistsInDb(PX.Data.PXCache)">
            <summary>
            Checks if a given <paramref name="cache"/> has a corresponding table in the DB. 
            Cases like inheritance via <see cref="T:PX.Data.PXTableAttribute">PXTable</see>, projections and so on are also handled by this method.
            </summary>
            <param name="cache">Cache that the table belongs to</param>
            <returns/>
        </member>
        <member name="M:PX.Data.PXCacheEx.GetDbTableSchemas(PX.Data.PXCache)">
            <summary>
            Get the DB table schemas for DAC if the table (or tables from projection) exists in the DB. 
            Cases like inheritance via <see cref="T:PX.Data.PXTableAttribute">PXTable</see>, projections and so on are also handled by this method.
            </summary>
            <param name="cache">Cache that the table belongs to</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCacheEx.GetDacExtensionsContainingDacField(System.Type[],System.Type,System.String)">
            <summary>
            Returns non-mapped DAC extension types that contain the DAC field with the specified <paramref name="fieldName"/> and 
            have <paramref name="dacType"/> as their last generic argument.
            </summary>
            <param name="extentionTypes">Types of DAC extensions to check</param>
            <param name="dacType">Type of original DAC which DAC extensions belong to</param>
            <param name="fieldName">Name of DAC field that should be searched among DAC extensions</param>
            <returns>Types of DAC extensions containing DAC field with the name <paramref name="fieldName"/></returns>
            <remarks>This method doesn't return <see cref="T:PX.Data.PXMappedCacheExtension">PXMappedCacheExtension</see>-derived types</remarks>
        </member>
        <member name="M:PX.Data.PXCacheEx.IsAttributesField(PX.Data.PXCache,System.String)">
            <summary>
            Checks if the <paramref name="fieldName"/> is a regular (not UDF) attribute field.
            </summary>
        </member>
        <member name="T:PX.Data.PXModelExtension`1">
            <summary>Represents the cache of modified data records from a
            paricular table and the controller for basic operations over these
            data records. The type parameter is set to the data access class (DAC)
            that represents this table.</summary>
            <typeparam name="TNode">The DAC type of data records stored in
            the cache object.</typeparam>
            <remarks>
            <para>The cache objects consists conceptually of two parts:</para>
            <list type="bullet">
            <item><description>The collections of the data
            records that were modified and not yet saved to the database, such as
            <see cref="P:PX.Data.PXCache`1.Updated">Updated</see>, <see cref="P:PX.Data.PXCache`1.Inserted">Inserted</see>,
            <see cref="P:PX.Data.PXCache`1.Deleted">Deleted</see>, and <see cref="P:PX.Data.PXCache`1.Dirty">Dirty</see>.
            </description></item>
            <item><description>The controller that
            executes basic data-related operations through the use of the methods,
            such as <see cref="M:PX.Data.PXCache`1.Update(System.Object)">Update(object)</see>,
            <see cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>,
            <see cref="M:PX.Data.PXCache`1.Delete(System.Object)">Delete(object)</see>,
            <see cref="M:PX.Data.PXCache`1.Persist(PX.Data.PXDBOperation)">Persist(PXDBOperation)</see>,
            and other methods.</description></item>
            </list>
            <para>During execution of these methods, the cache raises events. The
            graph and attributes can subscribe to these events to implement
            business logic. The methods applied to a previously unchanged data
            record result in placing of the data record into the cache.</para>
            <para>The system creates and destroys <tt>PXCache</tt> instances
            (caches) on each request. If the user or the code modifies a data
            record, it is placed into the cache. When request execution is
            completed, the system serializes the modified records from the caches
            to the session. At run time, the cache may also include the unchanged
            data records retrieved during request execution. These data records
            are discarded once the request is served.</para>
            <para>On the next round trip, the modified data records are loaded
            from the session to the caches. The cache merges the data retrieved
            from the database with the modified data, and the application accesses
            the data as if the entire data set has been preserved from the time of
            previous request.</para>
            <para>The cache maintains the modified data until the changes are
            discarded or saved to the database.</para>
            <para>The cache is the issuer of all data-related events, which can be
            handled by the graph and attributes.</para>
            </remarks>
            <example>
            An instance of <tt>PXCache&lt;&gt;</tt> type, the cache object that initiated
            the event, is passed to every event handler as the first argument.
            <code>
            protected virtual void Vendor_RowDeleted(PXCache cache, PXRowDeletedEventArgs e)
            {
                Vendor row = e.Row as Vendor;
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.HasAttributes(System.Object)">
            <summary>Checks if the provided data record has any attributes
            attached to its fields.</summary>
            <param name="data">The data record.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributesReadonly(System.String)">
            <summary>Returns the cache-level instances of attributes placed on the
            specified field in the DAC.</summary>
            <remarks>The system maintains instances of attributes on three different
            levels. On its instantiation, a cache object copies appropriate
            attributes from the global level to the cache level and stores them in
            an internal collection. When an attribute needs to be modified for a
            particular data record, the cache creates item-level copies of all
            attributes and stores them associated with the data record.</remarks>
            <param name="name">The name of the field whose attributes are
            returned. If <tt>null</tt>, the method returns attributes from all
            fields.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributesReadonly(System.String,System.Boolean)">
            <summary>Returns the cache-level instances of attributes placed on the
            specified field in the DAC.</summary>
            <remarks>Using this method, you can prevent expanding the aggregate
            attributes by setting the second parameter to <tt>false</tt>. Other
            overloads of this method always include both the aggregate attributes
            and the attributes that comprise such attributes.</remarks>
            <param name="name">The data record.</param>
            <param name="extractEmmbeddedAttr">The value that indicates whether
            the attributes embedded into an aggregate attribute are included into
            the list. If <tt>true</tt>, both the aggregate attribute and the
            attributes embedded into it are included in the list. Otherwise, only
            the aggregate attribute is included. An aggregate attribute is an
            attribute that derives from the <tt>PXAggregateAttribute</tt> class.
            This class allows combining multiple different attributes in a single
            one.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributesReadonly(System.Object,System.String)">
            <summary>Returns the item-level attribute instances placed on the
            specified field, if such instances exist for the provided data record,
            or the cache-level instances, otherwise.</summary>
            <param name="data">The data record.</param>
            <param name="name">The name of the field whose attributes are
            returned. If <tt>null</tt>, the method returns attributes from all
            fields.</param>
            <example>
            The code below gets the attributes and places them into a list.
            <code>
            protected virtual void InventoryItem_ValMethod_FieldVerifying(
                PXCache sender, PXFieldVerifyingEventArgs e)
            {
                List&lt;PXEventSubscriberAttribute&gt; attrlist = 
                    sender.GetAttributesReadonly(e.Row, "ValMethod");
                ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributes(System.Object,System.String)">
            <summary>Returns the item-level instances of attributes placed on the
            specified field. If such instances are not exist for the provided data
            record, the method creates them by copying all cache-level attributes
            and storing them in the internal collection that contains the data
            record specific attributes. To avoid cloning cache-level attributes,
            use the <see cref="M:PX.Data.PXCache`1.GetAttributesReadonly(System.Object,System.String)">GetAttributesReadonly(object,
            string)</see> method.</summary>
            <param name="data">The data record.</param>
            <param name="name">The name of the field whose attributes are
            returned. If <tt>null</tt>, the method returns attributes from all
            fields.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributesOfType``1(System.Object,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetExtensionTables">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetAttributes(System.String)">
            <summary>Returns the cach-level instances of attributes placed on the
            specified field and all item-level instances currently stored in the
            cache.</summary>
            <param name="name">The name of the field whose attributes are
            returned. If <tt>null</tt>, the method returns attributes from all
            fields.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetValue(System.Object,System.Int32,System.Object)">
            <summary>Sets the value of the field in the provided data record
            without raising events. The field is specified by its index in the
            field map.</summary>
            <remarks>To set the value, raising the field-related events, use the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,
            string, object)</see> method.</remarks>
            <param name="data">The data record.</param>
            <param name="ordinal">The index of the field in the internally stored
            field map. To get the index of a specific field, use the <see
            cref="M:PX.Data.PXCache`1.GetFieldOrdinal(System.String)">GetFieldOrdinal(string)</see>
            method.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetValue(System.Object,System.String,System.Object)">
            <summary>Sets the value of the field in the provided data record
            without raising events.</summary>
            <remarks>To set the value, raising the field-related events, use the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,
            string, object)</see> method.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the
            value.</param>
            <param name="value">The value to set to the field.</param>
            <example>
            <code>
            public virtual void RowInserted(PXCache sender, PXRowInsertedEventArgs e)
            {
                bool freeze = ((bool?)sender.GetValue(e.Row, sender.GetField(freezeDisc))) == true;
                
                if (!freeze &amp;&amp; !sender.Graph.IsImport)
                {
                    IDiscountable row = (IDiscountable)e.Row;
            
                    if (row.CuryDiscAmt != null &amp;&amp; row.CuryDiscAmt != 0 &amp;&amp; row.CuryExtPrice != 0)
                    {
                        row.DiscPct = 100 * row.CuryDiscAmt / row.CuryExtPrice;
                        sender.SetValue(row, sender.GetField(curyTranAmt), row.CuryExtPrice - row.CuryDiscAmt);
                        sender.SetValue(e.Row, this.FieldName, true);
                    }
                    ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetDefaultExt(System.Object,System.String,System.Object)">
            <summary>Sets the default value to the field in the provided data
            record.</summary>
            <remarks>The method raises <tt>FieldDefaulting</tt>,
            <tt>FieldUpdating</tt>, <tt>FieldVerifying</tt>, and
            <tt>FieldUpdated</tt>.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field to set.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetValueExt(System.Object,System.String,System.Object)">
            <summary>Sets the value of the field in the provided data
            record.</summary>
            <remarks>The method raises the <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, and <tt>FieldUpdated</tt> events. To set the
            value to the field without raising events, use the <see
            cref="M:PX.Data.PXCache`1.SetValue(System.Object,System.String,System.Object)">SetValue(object,
            string, object)</see> method.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the
            value.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValue(System.Object,System.Int32)">
            <summary>Returns the value of the specified field in the given data
            record without raising any events. The field is specified by its
            index&#8212;see the <see
            cref="M:PX.Data.PXCache`1.GetFieldOrdinal(System.String)">GetFieldOrdinal(string)</see>
            method.</summary>
            <param name="data">The data record.</param>
            <param name="ordinal">The index of the field whose value is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValue(System.Object,System.String)">
            <summary>Returns the value of the specified field in the given data
            record without raising any events.</summary>
            <remarks>
            <para>To get the field of a data record of a known DAC type, you can
            use DAC properties. If a type of a data record is unknown (for
            example, when it is available as <tt>object</tt>), you can use the
            <tt>GetValue()</tt> methods to get a value of a field. These methods
            can also be used to get values of fields defined in extensions
            (another way is to get the extension data record through the <see
            cref="M:PX.Data.PXCache`1.GetExtension``1(`0)">GetExtension&lt;&gt;()</see>
            method).</para>
            <para>The <see
            cref="M:PX.Data.PXCache`1.GetValueExt(System.Object,System.String)">GetValueExt()</see>
            methods are used to get the value or the field state object and raise
            events.</para>
            </remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose value is
            returned.</param>
            <example>
            The code below iterates over all fields of a specific DAC (including
            fields defined in extensions) and checks whether a value is null.
            <code>
            foreach (string field in sender.Fields)
            {
                if (sender.GetValue(row, field) == null)
                    ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValueInt(System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetStateInt(System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValueExt(System.Object,System.String)">
            <summary>Returns the value or the <tt>PXFieldState</tt> object of the
            specified field in the given data record. The <tt>PXFieldState</tt>
            object is returned if the field is in the <tt>AlteredFields</tt>
            collection.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose value or
            <tt>PXFieldState</tt> object is returned.</param>
            <returns>The field value or <tt>PXFieldState</tt> object.</returns>
            <example>
            <code>
            string name = _MapErrorTo.Name;
            name = char.ToUpper(name[0]) + name.Substring(1);
            object val = sender.GetValueExt(e.Row, name);
            if (val is PXFieldState)
            {
                val = ((PXFieldState)val).Value;
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetStateExt(System.Object,System.String)">
            <summary>Gets the <tt>PXFieldState</tt> object of the specified field
            in the given data record.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose
            <tt>PXFieldState</tt> object is created.</param>
            <returns>The field state object.</returns>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValueOriginal(System.Object,System.String)">
            <summary>Returns the value of the specified field for the data record
            as it is stored in the database.</summary>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field whose original value is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetOriginal(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetValuePending(System.Object,System.String)">
            <summary>Returns the value of the field from the provided data record
            when the data record's update or insertion is in progress.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetValuePending(System.Object,System.String,System.Object)">
            <summary>Sets the value of the field in the provided data record when
            the data record's update or insertion is in process and the field
            possibly hasn't been updated in the cache yet. The field is specified
            in the type parameter.</summary>
            <remarks>The method raises the <tt>FieldUpdating</tt> event.</remarks>
            <param name="data">The data record.</param>
            <param name="fieldName">The name of the field that is set to the
            value.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RestoreCopy(System.Object,System.Object)">
            <summary>Copies values of all fields from the second data record to
            the first data record.</summary>
            <remarks>The data records should have the DAC type of the cache, or the
            method does nothing.</remarks>
            <param name="item">The data record whose field values are
            updated.</param>
            <param name="copy">The data record whose field values are
            copied.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.CreateCopy(System.Object)">
            <summary>Creates a clone of the provided data record by initializing a
            new data record with the field values get from the provided data
            record.</summary>
            <param name="item">The data record to copy.</param>
            <example>
            The code creates a copy of an <tt>Address</tt> data record, modifies
            it, and inserts in the cache.
            <code>
            Address addr = PXCache&lt;Address&gt;.CreateCopy(defAddress);
            addr.AddressID = null;
            addr.BAccountID = owner.BAccountID;
            addr = this.RemitAddress.Insert(addr);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ToDictionary(System.Object)">
            <summary>Converts the provided data record to the dictionary of field
            names and field values. Returns the resulting dictionary
            object.</summary>
            <remarks>The method raises the <tt>FieldSelecting</tt> event for each
            field.</remarks>
            <param name="data">The data record to convert to a dictionary.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ToXml(System.Object)">
            <summary>Returns the XML string representing the provided data
            record.</summary>
            <remarks>
            <para>The data record is represented in the XML by the
            <i>&lt;Row&gt;</i> element with the <i>type</i> attribute set to the
            DAC name. Each field is represented by the <i>&lt;Field&gt;</i>
            element with the <i>name</i> attribute holding the field name and the
            <i>value</i> attribute holding the field value.</para>
            </remarks>
            <param name="data">The data record to convert to XML.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.FromXml(System.String)">
            <summary>Initializes the data record from the provided XML
            string.</summary>
            <remarks>The data record is represented in the XML by the
            <i>&lt;Row&gt;</i> element with the <i>type</i> attribute set to the
            DAC name. Each field is represented by the <i>&lt;Field&gt;</i>
            element with the <i>name</i> attribute holding the field name and the
            <i>value</i> attribute holding the field value.</remarks>
            <param name="xml">The XML string to parse.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ValueToString(System.String,System.Object)">
            <summary>Converts the provided value of the field to string and
            returns the resulting value. No events are raised.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="val">The field value.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ValueFromString(System.String,System.String)">
            <summary>Converts the provided value of the field from a string to the
            appropriate type and returns the resulting value. No events are
            raised.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="val">The string representation of the field
            value.</param>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Fields">
            <summary>Gets the collection of names of fields and virtual fields. By
            default, the collection includes all public properties of the DAC that
            is associated with the cache. The collection may also include the
            virtual fields that are injected by attributes (such as the
            description field of the <see
            cref="T:PX.Data.PXSelectorAttribute">PXSelector</see> attribute). The
            developer can add any field to the collection.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.BqlFields">
            <summary>Gets the list of classes that implement <tt>IBqlField</tt>
            and are nested in the DAC and its base type. These types represent DAC
            fields in BQL queries. This list differs from the list that the
            <tt>Fields</tt> property returns.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.BqlKeys">
            <summary>Gets the collection of BQL types that correspond to the key
            fields which the DAC defines.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.BqlImmutables">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.BqlSelect">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.BqlTable">
            <summary>Gets the DAC the cache is associated with. The DAC is
            specified through the type parameter when the cache is
            instantiated.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetExtensionTypes">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ObjectsEqual(System.Object,System.Object)">
            <summary>Compares two data records by the key fields. Returns
            <tt>true</tt> if the values of all key fields in the data records are
            equal. Otherwise, returns <tt>false</tt>.</summary>
            <param name="a">The first data record to compare.</param>
            <param name="b">The second data record to compare.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetObjectHashCode(System.Object)">
            <summary>Returns the hash code generated from key field
            values.</summary>
            <param name="data">The data record.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ObjectToString(System.Object)">
            <summary>Returns a string of key fields and their values in the
            <i>{key1=value1, key2=value2}</i> format.</summary>
            <param name="data">The data record which key fields are written to a
            string.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetExtension``1(System.Object)">
            <summary>Gets the instance of the DAC extension of the specified type.
            The extension type is specified as the type parameter.</summary>
            <param name="item">The standard data record whose extension is
            returned.</param>
            <example>
            The code below gets an extension data record corresponding to the
            given instance of the base data record.
            <code>
            InventoryItem item = cache.Current as InventoryItem;
            InventoryItemExtension itemExt = 
                cache.GetExtension&lt;InventoryItemExtension&gt;(item);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetMain``1(``0)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetItemType">
            <summary>Returns the DAC type of the data records in the
            cache.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Interceptor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetBqlField(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetFieldCount">
            <summary>Returns the number of fields and virtual fields which
            comprise the <tt>Fields</tt> collection.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetFieldOrdinal``1">
            <summary>Returns the index of the specified field in the internally
            kept fields map. The pare</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetFieldOrdinal(System.String)">
            <summary>Returns the index of the specified field in the internally
            kept fields map.</summary>
            <param name="field">The name of the field whose index is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Normalize">
            <summary>Recalculates internally stored hash codes. The method should
            be called after a key field is modified in a data record from the
            cache.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Current">
            <summary>Gets or sets the current data record. This property points to
            the last data record displayed in the user interface. If the user
            selects a data record in a grid, this property points to this data
            record. If the user or the application inserts, updates, or deletes a
            data record, the property points to this data record. Assigning this
            property raises the <tt>RowSelected</tt> event.</summary>
            <remarks>You can reference the <tt>Current</tt> data record and its
            fields in the <tt>PXSelect</tt> BQL statements by using the
            <tt>Current</tt> parameter.</remarks>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.InternalCurrent">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.#ctor(PX.Data.PXGraph,PX.Data.IBqlMapping)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Select(PX.Data.PXDataRecord,System.Int32@,System.Boolean,System.Boolean@)">
            <summary>Creates a data record from the <tt>PXDataRecord</tt> object
            and places it into the cache with the <tt>NotChanged</tt> status if
            the data record isn't found among the modified data records in the
            cache.</summary>
            <remarks>
            <para>If <tt>isReadOnly</tt> is <tt>false</tt> then:</para>
            <list type="bullet">
            <item><description>If the cache already contains
            the data record with the same keys and the <tt>NotChanged</tt> status,
            the method returns this data record updated to the state of
            <tt>PXDataRecord</tt>.</description></item>
            <item><description>If the
            cache contains the same data record with the <tt>Updated</tt> or
            <tt>Inserted</tt> status, the method returns this data
            record.</description></item>
            </list>
            <para>In other cases and when <tt>isReadonly</tt> is <tt>true</tt>,
            the method returns the data record created from the
            <tt>PXDataRecord</tt> object.</para>
            <para>If the <tt>AllowSelect</tt> property is <tt>false</tt>, the
            methods returns a new empty data record and the logic described above
            is not executed.</para>
            <para>The method raises the <tt>RowSelecting</tt> event.</para>
            </remarks>
            <param name="record">The <tt>PXDataRecord</tt> object to convert to
            the DAC type of the cache.</param>
            <param name="position">The index of the first field to read in
            the list of columns comprising the <tt>PXDataRecord</tt>
            object.</param>
            <param name="isReadOnly">The value indicating if the data record with
            the same key fields should be located in the cache and
            updated.</param>
            <param name="bool">The value indicating whether the data record
            with the same keys existed in the cache among the modified data
            records.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.GetStatus(System.Object)">
            <summary>Returns the status of the provided data record. The <see
            cref="T:PX.Data.PXEntryStatus">PXEntryStatus</see> enumeration
            defines the possible status values. For example, the status can
            indicate whether the data record has been inserted, updated, or
            deleted.</summary>
            <param name="item">The data record whose status is requested.</param>
            <example>
            The code below shows how a status of a data record can be checked in
            an event handler.
            <code>
            protected virtual void Vendor_RowSelected(PXCache sender,
                                                      PXRowSelectedEventArgs e)
            {
                Vendor vend = e.Row as Vendor;
                if (vend != null &amp;&amp; sender.GetStatus(vend) == PXEntryStatus.Notchanged)
                {
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.SetStatus(System.Object,PX.Data.PXEntryStatus)">
            <summary>Sets the status to the provided data record. The <see
            cref="T:PX.Data.PXEntryStatus">PXEntryStatus</see> enumeration
            defines the possible status values.</summary>
            <param name="item">The data record to set status to.</param>
            <param name="status">The new status.</param>
            <example>
            The code below checks the status of a data record and sets the status
            to <tt>Updated</tt> if the status is <tt>Notchanged</tt>.
            <code>
            if (Transactions.Cache.GetStatus(tran) == PXEntryStatus.Notchanged)
            {
                Transactions.Cache.SetStatus(tran, PXEntryStatus.Updated);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Locate(System.Object)">
            <summary>Searches the cache for a data record that has the same key
            fields as the provided data record. If the data record is not found in
            the cache, the method retrieves the data record from the database and
            places it into the cache with the <tt>NotChanged</tt> status. The
            method returns the located or retrieved data record.</summary>
            <remarks>The <tt>AllowSelect</tt> property does not affect this method
            unlike the <see
            cref="M:PX.Data.PXCache`1.Locate(System.Collections.IDictionary)">Locate(IDictionary)</see>
            method.</remarks>
            <param name="item">The data record to locate in the cache.</param>
            <example>
            <code>
            public PXSelectJoin&lt;SOAdjust,
                InnerJoin&lt;ARPayment, On&lt;ARPayment.docType, Equal&lt;SOAdjust.adjgDocType&gt;,
                    And&lt;ARPayment.refNbr, Equal&lt;SOAdjust.adjgRefNbr&gt;&gt;&gt;&gt;&gt; Adjustments;
            ...
            // The optional delegate of the Adjustment data view to replace the
            // output of the Select() method
            public virtual IEnumerable adjustments()
            {
                ...
                SOAdjust adj = new SOAdjust();
            
                // Setting the key fields
                adj.CustomerID = Document.Current.CustomerID;
                adj.AdjdOrderType = Document.Current.OrderType;
                adj.AdjdOrderNbr = Document.Current.OrderNbr;
                adj.AdjgDocType = payment.DocType;
                adj.AdjgRefNbr = payment.RefNbr;
            
                // Searching the cache for the Adjustment data record with
                // the same key fields
                if (Adjustments.Cache.Locate(adj) == null)
                {
                    yield return new PXResult&lt;SOAdjust, ARPayment&gt;(Adjustments.Insert(adj), payment);
                }
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.UpdateExtensionMapping(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.UpdateExtensionMapping(System.Object,PX.Data.MappingSyncDirection)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Locate(System.Collections.IDictionary)">
            <summary>Searches the cache for a data record that has the same key
            fields as in the provided dictionary. If the data record is not found
            in the cache, the method initializes a new data record with the
            provided values and places it into the cache with the
            <tt>NotChanged</tt> status.</summary>
            <remarks>Returns 1 if a data record is successfully located or placed
            into the cache, and returns 0 if placing into the cache fails or the
            <tt>AllowSelect</tt> property is <tt>false</tt>.</remarks>
            <param name="keys">The dictionary with values to initialize the data
            record fields. The dictionary keys are field names.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.LocateByNoteID(System.Guid)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Remove(System.Object)">
            <summary>Completely removes the provided data record from the cache
            without raising any events.</summary>
            <param name="item">The data record to remove from the cache.</param>
            <example>
            The code below locates a data record in the cache and, if the data
            record has not been changed, silently removes it from the cache.
            (The <tt>Held</tt> status indicates that a data record has not been
            changed but needs to the preserved in the session.
            <code>
            // Searching the data record by its key fields in the cache
            object cached = sender.Locate(item);
            
            // Checking the status
            if (cached != null &amp;&amp; (sender.GetStatus(cached) == PXEntryStatus.Held || 
                                   sender.GetStatus(cached) == PXEntryStatus.Notchanged))
            {
                // Removing without events
                sender.Remove(cached);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Update(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Updates the data record in the cache with the provided
            values.</summary>
            <remarks>
            <para>The method initalizes a data record with the provided key
            fields. If the data record with such keys does not exist in the cache,
            the method tries to retrieve it from the database. If the data record
            exists in the cache or database, it gets the <tt>Updated</tt> status.
            If the data record does not exist in the database, the method inserts
            a new data record into the cache with the <tt>Inserted</tt>
            status.</para>
            <para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowUpdating</tt>,
            and <tt>RowUpdated</tt>. See <a href="Update.html">Updating a Data Record</a> for
            the events flowchart. If the data record does not exist in the
            database, the method also causes the events of the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method.</para>
            <para>If the <tt>AllowUpdate</tt> property is <tt>false</tt>, the data
            record is not updated and the methods returns 0. The method returns 1
            if the data record is successfully updated or inserted.</para>
            </remarks>
            <param name="keys">The values of the key fields of the data record to
            update.</param>
            <param name="values">The new values with which the data record fields
            are updated.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Update(System.Object)">
            <summary>Updates the provided data record in the cache.</summary>
            <remarks>
            <para>If the data record does not exist in the cache, the method tries
            to retrieve it from the database. If the data record exists in the
            cache or database, it gets the <tt>Updated</tt> status. If the data
            record does not exist in the database, the method inserts a new data
            record into the cache with the <tt>Inserted</tt> status.</para>
            <para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowUpdating</tt>,
            and <tt>RowUpdated</tt>. See <a href="Update.html">Updating a Data Record</a> for
            the events flowchart. If the data record does not exist in the
            database, the method also causes the events of the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method.</para>
            <para>The <tt>AllowUpdate</tt> property does not affect the method
            unlike the <see
            cref="M:PX.Data.PXCache`1.Update(System.Collections.IDictionary,System.Collections.IDictionary)">Update(IDictionary,
            IDictionary)</see> method.</para>
            </remarks>
            <param name="data">The data record to update in the cache.</param>
            <example>
            The code below modifies an <tt>APRegister</tt> data record and places
            it in the cache with the <tt>Updated</tt> status or updates it in the
            cache if the data record is already there.
            <code>
            // Declaring a data view in a graph
            public PXSelect&lt;APRegister&gt; APDocument;
            ...
            
            APRegister apdoc = ...
            // Modifying the data record
            apdoc.Voided = true;
            apdoc.OpenDoc = false;
            apdoc.CuryDocBal = 0m;
            apdoc.DocBal = 0m;
            
            // Updating the data record in the cache
            APDocument.Cache.Update(apdoc);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Insert(System.Collections.IDictionary)">
            <summary>Initializes a new data record using the provided field values
            and inserts the data record into the cache. Returns 1 in case of
            successful insertion, and 0 otherwise.</summary>
            <remarks>
            <para>The method raises the following events:
            <tt>FieldDefaulting</tt>, <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowInserting</tt>,
            and <tt>RowInserted</tt>. See <a href="Insert.html">Inserting a Data Record</a> for
            the events chart.</para>
            <para>The method does not check if the data record exists in the
            database. The values provided in the dictionary are not readonly and
            can be updated during execution of the method. The method is typically
            used by the system when the values are received from the user
            interface. If the <tt>AllowInsert</tt> property is <tt>false</tt>, the
            data record is not inserted and the method returns 0.</para>
            <para>In case of successful insertion, the method marks the data
            record as <tt>Inserted</tt>, and it becomes accessible through the
            <tt>Inserted</tt> collection.</para>
            </remarks>
            <param name="values">The dictionary with values to initialize the data
            record fields. The dictionary keys are field names.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Insert(System.Object)">
            <summary>Inserts the provided data record into the cache. Returns the
            inserted data record or <tt>null</tt> if the data record wasn't
            inserted.</summary>
            <remarks>
            <para>The method raises the following events:
            <tt>FieldDefaulting</tt>, <tt>FieldUpdating</tt>,
            <tt>FieldVerifying</tt>, <tt>FieldUpdated</tt>, <tt>RowInserting</tt>,
            and <tt>RowInserted</tt>. See <a href="Insert.html">Inserting a Data Record</a> for
            the events chart.</para>
            <para>The method does not check if the data record exists in the
            database. The AllowInsert property does not affect this method unlike
            the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Collections.IDictionary)">Insert(IDictionary)</see>
            method.</para>
            <para>In case of successful insertion, the method marks the data
            record as <tt>Inserted</tt>, and it becomes accessible through the
            <tt>Inserted</tt> collection.</para>
            </remarks>
            <param name="data">The data record to insert into the cache.</param>
            <example>
            The code below initializes a new instance of the <tt>APInvoice</tt>
            data record and inserts it into the cache.
            <code>
            APInvoice newDoc = new APInvoice();
            newDoc.VendorID = Document.Current.VendorID;
            Document.Insert(newDoc);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Extend``1(``0)">
            <summary>Initializes a data record of the DAC type of the cache from
            the provided data record of the base DAC type and inserts the new data
            record into the cache. Returns the inserted data record.</summary>
            <param name="item">The data record of the base DAC type which field
            values are used to initialize the data record.</param>
            <example>
            See the <see
            cref="M:PX.Data.PXSelectBase`1.Extend``1(``0)">Extend&lt;Parent&gt;(Parent)</see>
            method of the <tt>PXSelectBase&lt;&gt;</tt> class.
            
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Insert">
            <summary>Initializes a new data record with default values and inserts
            it into the cache by invoking the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method. Returns the new data record inserted into the cache.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.CreateInstance">
            <summary>Returns a new data record of the DAC type of the cache. The
            method may be used to initialize a data record of the type appropriate
            for the <tt>PXCache</tt> instance when its DAC type is
            unknown.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ClearQueryCacheObsolete">
            <summary>Clears the internal cache of database query
            results.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Delete(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Initializes the data record with the provided key values and
            places it into the cache with the <tt>Deleted</tt> or
            <tt>InsertedDeleted</tt> status. The method assigns the
            <tt>InsertedDeleted</tt> status to the data record if it has the
            <tt>Inserted</tt> status when the method is invoked.</summary>
            <remarks>
            <para>The method raises the following events: <tt>FieldUpdating</tt>,
            <tt>FieldUpdated</tt>, <tt>RowDeleting</tt>, and <tt>RowDeleted</tt>
            events. See <a href="Delete.html">Deleting a Data Record</a> for the events
            flowchart.</para>
            <para>This method is typically used to process deletion initiated from
            the user interface. If the <tt>AllowDelete</tt> property is
            <tt>false</tt>, the data record is not marked deleted and the method
            returns 0. The method returns 1 if the data record is successfully
            marked deleted.</para>
            </remarks>
            <param name="keys">The values of key fields.</param>
            <param name="values">The values of all fields. The parameter is not
            used in the method.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Delete(System.Object)">
            <summary>Places the data record into the cache with the
            <tt>Deleted</tt> or <tt>InsertedDeleted</tt> status. The method
            assigns the <tt>InsertedDeleted</tt> status to the data record if it
            has the <tt>Inserted</tt> status when the method is invoked.</summary>
            <remarks>
            <para>The method raises the <tt>RowDeleting</tt> and
            <tt>RowDeleted</tt> events. See <a href="Delete.html" />
            for the events flowchart.</para>
            <para>The <tt>AllowDelete</tt> property does not affect this
            method.</para>
            </remarks>
            <param name="data">The data record to delete.</param>
            <example>
            The code below deletes the current data records through the
            <tt>Address</tt> and <tt>Contact</tt> data views on deletion of an
            <tt>INSite</tt> data record.
            <code>
            public PXSelect&lt;Address, Where&lt;Address.bAccountID, Equal&lt;Current&lt;Branch.bAccountID&gt;&gt;,
                And&lt;Address.addressID, Equal&lt;Current&lt;INSite.addressID&gt;&gt;&gt;&gt;&gt; Address;
            public PXSelect&lt;Contact, Where&lt;Contact.bAccountID, Equal&lt;Current&lt;Branch.bAccountID&gt;&gt;,
                And&lt;Contact.contactID, Equal&lt;Current&lt;INSite.contactID&gt;&gt;&gt;&gt;&gt; Contact;
            ...
            protected virtual void INSite_RowDeleted(PXCache cache, PXRowDeletedEventArgs e)
            {
                INSite row = (INSite)e.Row;
                Address.Cache.Delete(Address.Current);
                Contact.Cache.Delete(Contact.Current);
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Dirty">
            <summary>Gets the collection of updated, inserted, and deleted data
            records. The collection contains data records with the
            <tt>Updated</tt>, <tt>Inserted</tt>, or <tt>Deleted</tt>
            status.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Updated">
            <summary>Gets the collection of updated data records that exist in the
            database. The collection contains data records with the
            <tt>Updated</tt> status.</summary>
            <example>
            <code>
            // The defition of a data view
            public PXProcessing&lt;POReceipt&gt; Orders;
            ...
            // The optional delegate for the Orders data view
            public virtual IEnumerable orders()
            {
                // Iterating over all updated POReceipt data records
                foreach (POReceipt order in Orders.Cache.Updated)
                {
                    yield return order;
                }
                ...
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Inserted">
            <summary>Gets the collection of inserted data records that does not
            exist in the database. The collection contains data records with the
            <tt>Inserted</tt> status.</summary>
            <example>
            The code below modifies inserted <tt>Address</tt> data records on
            update of an <tt>EPEmployee</tt> data record.
            <code>
            protected virtual void EPEmployee_RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)
            {
                // Checking whether the ParentBAccountID has changed
                if (!sender.ObjectsEqual&lt;EPEmployee.parentBAccountID&gt;(e.Row, e.OldRow))
                {
                    // Iterating over all inserted and not saved Address data records
                    foreach (Address addr in Address.Cache.Inserted)
                    {
                        addr.BAccountID = ((EPEmployee)e.Row).ParentBAccountID;
                        addr.CountryID = company.Current.CountryID;
                    }
                    ...
                }
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Cached">
            <summary>Get the collection of all cached data records. The collection
            contains data records with any status. The developer should not rely
            on the presense of data records with statuses other than
            <tt>Updated</tt>, <tt>Inserted</tt>, and <tt>Deleted</tt> in this
            collection.</summary>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.Deleted">
            <summary>Gets the collection of deleted data records that exist in the
            database. The collection contains data records with the
            <tt>Deleted</tt> status.</summary>
            <example>
            The code below deletes <tt>EPActivity</tt> data records through
            a different graph.
            <code>
            public override void Persist()
            {
                CREmailActivityMaint graph = CreateInstance&lt;CREmailActivityMaint&gt;();
                // Iterating over all deleted EPActivity data records
                foreach (EPActivity item in Emails.Cache.Deleted)
                {
                    // Setting the current data record for the CREmailActivityMaint graph
                    graph.Message.Current = graph.Message.Search&lt;EPActivity.taskID&gt;(item.TaskID);
                    // Invoking the Delete action in the CREmailActivityMaint graph
                    graph.Delete.Press();
                    Emails.Cache.SetStatus(item, PXEntryStatus.Notchanged);
                }
                base.Persist();
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXModelExtension`1.IsInsertedUpdatedDeleted">
            <summary>Gets the value that indicates if the cache contains modified
            data records to be saved to database.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Persist(PX.Data.PXDBOperation)">
            <summary>Saves the modifications of a particular type from the cache
            to the database. Returns the number of saved data records.</summary>
            <remarks>
            <para>Using this method, you can update, delete, or insert all data
            records kept by the cache. You can also perform different operations
            at once by passing a combination of <tt>PXDBOperation</tt> values,
            such as <tt>PXDBOperation.Insert | PXDBOperation.Update</tt>.</para>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            </remarks>
            <param name="operation">The value that indicates the types of database
            operations to execute, either one of <tt>PXDBOperation.Insert</tt>,
            <tt>PXDBOperation.Update</tt>, and <tt>PXDBOperation.Delete</tt>
            values or their bitwise "or" (<tt>|</tt>) combination.</param>
            <example>
            The code below modifies a <tt>Vendor</tt> data record, updates it in
            the cache, saves changes to update <tt>Vendor</tt> data records to the
            database, and causes raising of the <tt>RowPersisted</tt> event with
            indication that the operation has completed successfully.
            <code>
            vendor.VStatus = VendorStatus.Inactive;
            Caches[typeof(Vendor)].Update(vendor);
            Caches[typeof(Vendor)].Persist(PXDBOperation.Update);
            Caches[typeof(Vendor)].Persisted(false);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Persist(System.Object,PX.Data.PXDBOperation)">
            <summary>Saves the modification of the specified type from the cache
            to the database for a particular data record.</summary>
            <param name="row">The data record to save to the database.</param>
            <param name="operation">The database operation to perform for the data
            record, either one of <tt>PXDBOperation.Insert</tt>,
            <tt>PXDBOperation.Update</tt>, and <tt>PXDBOperation.Delete</tt>
            values or their bitwise "or" (<tt>|</tt>) combination.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.PersistUpdated(System.Object,System.Boolean)">
            <summary>Updates the provided data record in the database. Returns
            <tt>true</tt> if the data record has been updated sucessfully, or
            <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to update in the database.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.PersistInserted(System.Object,System.Boolean)">
            <summary>Inserts the provided data record into the database. Returns
            <tt>true</tt> if the data record has been inserted sucessfully, or
            <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method throws an exception if the data record with such keys
            exists in the database.</para>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to insert into the database.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.PersistDeleted(System.Object,System.Boolean)">
            <summary>Deletes the provided data record from the database by the key
            fields. Returns <tt>true</tt> if the data record has been deleted
            sucessfully, or <tt>false</tt> otherwise.</summary>
            <remarks>
            <para>The method raises the following events: <tt>RowPersisting</tt>,
            <tt>CommandPreparing</tt>, <tt>RowPersisted</tt>,
            <tt>ExceptionHandling</tt>.</para>
            <para>The default behavior can be modified by the
            <tt>PXDBInterceptor</tt> attribute.</para>
            </remarks>
            <param name="row">The data record to deleted from the
            database.</param>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ResetPersisted(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Persisted(System.Boolean)">
            <summary>Completes saving changes to the database by raising the
            <tt>RowPersisted</tt> event for all persisted data records.</summary>
            <param name="isAborted">The value indicating whether the database
            operation has been aborted or completed.</param>
            <example>
            You need to call this method in the application only when you call the
            <tt>Persist()</tt>, <tt>PersistInserted()</tt>,
            <tt>PersistUpdated()</tt>, or <tt>PersistDeleted()</tt> method, as the
            following example shows.
            <code>
            // Opening a transaction and saving changes to the provided
            // new data record
            using (PXTransactionScope ts = new PXTransactionScope())
            {
                cache.PersistInserted(item);
                ts.Complete(this);
            }
            
            // Indicating successful completion of saving changes to the database
            cache.Persisted(false);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Load">
            <summary>Loads dirty items and other cache state objects from the
            session. The application does not typically use this method.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Clear">
            <summary>Clears the cache from all data.</summary>
            <example>
            The code below clears the cache of the <tt>POReceipt</tt> data
            records.
            <code>
            // Declaration of a data view in a graph
            public PXSelect&lt;POReceipt&gt; poreceiptslist;
            ...
            // Clearing the cache of POReceipt data records 
            poreceiptslist.Cache.Clear();</code>
            </example>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ClearItemAttributes">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.TrimItemAttributes(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.Unload">
            <summary>Serializes the cache to the session.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.ToString">
            <summary>Returns the string representing the current cache
            object.</summary>
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseCommandPreparing(System.String,System.Object,System.Object,PX.Data.PXDBOperation,System.Type,PX.Data.PXCommandPreparingEventArgs.FieldDescription@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseExceptionHandling(System.String,System.Object,System.Object,System.Exception)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseFieldDefaulting(System.String,System.Object,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseFieldSelecting(System.String,System.Object,System.Object@,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseFieldUpdated(System.String,System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseFieldUpdated``1(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseFieldVerifying(System.String,System.Object,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowDeleted(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowDeleting(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowInserted(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowPersisting(System.Object,PX.Data.PXDBOperation)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowSelected(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowSelecting(System.Object,PX.Data.PXDataRecord,System.Int32@,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowUpdated(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXModelExtension`1.RaiseRowUpdating(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXLongOperation">
            <summary>
            <para>A static class that is used to execute a long-running operation, such as processing data or releasing a document, asynchronously in a separate thread. This
            class manages the threads created on the Acumatica ERP server to process long-running operations.</para>
            </summary>
        </member>
        <member name="M:PX.Data.PXLongOperation.FlushState">
            <summary>Flushes current state.</summary>
            <remarks>
            <para>If you use this method in <tt>global.asax</tt>, please check for double usage. We recommend that you use this method in
            the <tt>Application_EndRequest</tt> method.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXLongOperation.StartOperation(System.Object,PX.Data.PXLongRunDelegate,System.Object[])">
            <summary>
            <para> Starts the delegate method specified in the <paramref name="method"/> parameter
            as a long-running operation in a separate thread. The method
            also uses the key specified in the <paramref name="key"/> parameter to assign
            the long-running operation ID and passes to the delegate the
            arguments that are defined by the <paramref name="arguments"/> parameter. </para>
            </summary>
            <param name="key">A <tt>PXSpecialLongOperationKey</tt> object that contains the ID of the long-running operation,
            or the GUID of the long-running operation.</param>
            <param name="method">The delegate method to be executed
            asynchronously in a separate thread as a long-running operation.</param>
            <param name="arguments">The list of arguments of the delegate
            method specified in the <paramref name="method"/> parameter.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.StartOperation(PX.Data.PXGraph,PX.Data.PXToggleAsyncDelegate)">
            <summary>
            	<para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running
            operation in a separate thread. The method uses the unique identifier (UID)
            of the graph specified in the <paramref name="graph"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="graph">A graph UID that is used as the ID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.StartOperation``1(PX.Data.PXGraphExtension{``0},PX.Data.PXToggleAsyncDelegate)">
            <summary>
            	<para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running
            operation in a separate thread. The method uses the unique identifier (UID) 
            of the graph extension specified in the <paramref name="graphExt"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="graphExt">A graph extension UID that is used as the ID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.StartOperation(System.Object,PX.Data.PXToggleAsyncDelegate)">
            <summary>
            <para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running
            operation in a separate thread. The method also uses the key specified
            in the <paramref name="key"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="key">A <tt>PXGraph</tt> object that contains the ID of the long-running operation,
            or the GUID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.AsyncAbort(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.SimulateOperation">
            <summary>
            Simulates operation for current thread
            </summary>
        </member>
        <member name="M:PX.Data.PXLongOperation.IsLongOperationContext">
            <summary>
            Returns true if long-running operation is in progress.
            </summary>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetStatus(System.Object)">
            <summary>
            <para>Returns the <see cref="T:PX.Data.PXLongRunStatus"/> status of the long-running operation specified by the <paramref name="key"/> parameter.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetStatus(System.Object,System.TimeSpan@,System.Exception@)">
            <summary>
            Returns the <see cref="T:PX.Data.PXLongRunStatus"/> status of the long-running operation specified by the <paramref name="key"/> parameter.
            The method also returns the duration of the long-running operation and the status message.
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="timestamp">The out parameter that is used to return the duration of the long-running operation.</param>
            <param name="message">The out parameter that is used to return the status message.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetStatus(System.Object,System.TimeSpan@,System.Exception@,System.Boolean@)">
            <summary>
            Returns the <see cref="T:PX.Data.PXLongRunStatus"/> status of the long-running operation specified by the <paramref name="key"/> parameter.
            The method also returns the duration of the long-running operation, the status message, and an indicator
            of whether the status message is of the <see cref="T:PX.Data.PXBaseRedirectException"/> exception type.
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="timestamp">The out parameter that is used to return the duration of the long-running operation.</param>
            <param name="message">The out parameter that is used to return the status message.</param>
            <param name="isRedirected">The out parameter that is used as an indicator of whether the status
            message is of the PXBaseRedirectException exception type.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.ClearStatus(System.Object)">
            <summary>Removes information about completed task</summary>
            <param name="key"></param>
        </member>
        <member name="M:PX.Data.PXLongOperation.ClearStatus(System.Object,System.Boolean)">
            <summary>
            removes information about task if task completed or abort is true
            </summary>
            <param name="key">local or remote task</param>
            <param name="abort"></param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCurrentItem">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfo">
            <summary>
            <para>From the custom information dictionary of the current long-running operation,
            returns the data object stored under the default key. </para>
            </summary>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfoForCurrentThread(System.String)">
            <summary>
            <para>From the custom information dictionary of the current long-running operation,
            returns the data object that is stored under the specified key. If the <paramref name="customInfoKey"/>
            value is null or empty, the method returns the data object that is stored under the default key.</para>
            </summary>
            <param name="customInfoKey">The key to access the data object in the dictionary.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfo(System.Object)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/>,
            returns the data object that is stored under the default key.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfo(System.Object,System.String)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified
            by the <paramref name="key"/> parameter, returns the data object that is stored under the key that
            is defined by the <paramref name="customInfoKey"/> parameter.
            If the <see cref="T:PX.Data.PXLongOperation"/> static class does not contain a long-running operation with the
            key specified in the <paramref name="key"/> parameter, the method returns null. Otherwise, the method does the following:</para>
            	<list type="bullet">
            		<item>If the <paramref name="customInfoKey"/> parameter is null or empty:
            		Returns the data object that is stored under the default key</item>
            		<item>Otherwise: Returns the data object that is stored under the key specified
            		in the <paramref name="customInfoKey"/> parameter</item>
            	</list>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="customInfoKey">The key to access the data object in the custom information dictionary of
            the long-running operation specified by the first parameter.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfo(System.Object,System.Object[]@)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/> parameter,
            returns the data object that is stored under the default key.
            In the <paramref name="processingList"/> parameter, this method returns the list of the records processed
            by the delegate of the long-running operation.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="processingList">The out parameter that is used to return the array of the data records that must
            be processed by the delegate of the long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfo(System.Object,System.String,System.Object[]@)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/> parameter,
            returns the data object that is stored under the key specified in the <paramref name="customInfoKey"/> parameter.
            In the <paramref name="processingList"/> parameter, this method returns the list of the records processed by the
            delegate of the long-running operation.
            If the PXLongOperation static class does not contain a long-running operation with the key specified
            in the <paramref name="key"/> parameter, the method returns null. Otherwise, the method does the following:</para>
            	<list type="bullet">
            		<item>If the <paramref name="customInfoKey"/> parameter is null or empty:
            		Returns the data object that is stored under the default key</item>
            		<item></item>Otherwise: Returns the data object that is stored under the key specified
            		in the <paramref name="customInfoKey"/> parameter
            	</list>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="customInfoKey">The key to access the data object in the custom information dictionary
            of the long-running operation specified by the first parameter.</param>
            <param name="processingList">The out parameter that is used to return the array of the data records
            that must be processed by the delegate of the long-running operation.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.Exists(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetCustomInfoPersistent(System.Object,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.SetCustomInfoPersistent(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.RemoveCustomInfoPersistent(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.SetCustomInfo(System.Object)">
            <summary>
            In the custom information dictionary of the current long-running operation, stores the specified data object under the default key.
            </summary>
            <param name="info">The data object to be stored in the dictionary.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.SetCustomInfo(System.Object,System.String)">
            <summary>
            In the custom information dictionary of the current long-running operation, stores the data object,
            which is specified in the <paramref name="info"/> parameter, under the key that is defined by the <paramref name="key"/> parameter.
            </summary>
            <param name="info">The data object to be stored in the dictionary.</param>
            <param name="key">The key to store and access in the dictionary the data object that is specified in the first parameter.</param>
        </member>
        <member name="M:PX.Data.PXLongOperation.SetCustomInfo(System.Object,System.Object[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.SetCustomInfo(System.Object,System.String,System.Object[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongOperation.AsyncExecute``1(System.String,PX.Common.Async.Method{``0},System.Int64)">
            <remarks>This method is used for dashboards (via direct call) and reports (via reflection).</remarks>
        </member>
        <member name="M:PX.Data.PXLongOperation.WaitCompletion(System.Object)">
            <summary>
            <para>Makes the current thread wait for the completion of the specified long-running operation.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <returns><c>true</c> if long-running operation was found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:PX.Data.PXLongOperation.GetTaskList">
            <summary>
            <para>Returns the collection of <see cref="T:PX.SM.RowTaskInfo"/> objects, which contain information about
            the long-running operations that are in progress. The information includes the name of the user
            that started the operation, the form on which the operation was started, the progress of the operation,
            the number of errors, and the time the operation has been processing.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXView">
            <summary>
            A controller that executes the BQL command and implements interfaces for sorting, searching, merging data with the cached changes, and caching the result set.
            </summary>
            <summary>A controller that executes the BQL command and implements
            interfaces for sorting, searching, merging data with the cached
            changes, and caching the result set.</summary>
        </member>
        <member name="T:PX.Data.PXView.Dummy">
            <summary>A <see cref="T:PX.Data.PXView" /> that always returns only a predefined set of rows</summary>
            <exclude />
        </member>
        <member name="P:PX.Data.PXView.SortColumns">
            <summary>Gets the names of the fields passed to the <tt>Select(...)</tt> method to filter and sort the data set.</summary>
        </member>
        <member name="P:PX.Data.PXView.Descendings">
            <summary>Gets the values passed to the <tt>Select(...)</tt> method to indicate whether ordering by the sort columns should be descending or ascending.</summary>
        </member>
        <member name="P:PX.Data.PXView.Searches">
            <summary>Gets the values passed to the <tt>Select(...)</tt> method to filter the data set by them.</summary>
        </member>
        <member name="P:PX.Data.PXView.CurrentGraph">
            <summary>Gets the graph within which the <tt>Select(...)</tt> method was invoked.</summary>
        </member>
        <member name="P:PX.Data.PXView.Filters">
            <summary>Gets the filtering conditions originated on the user interface and passed to the <tt>Select(...)</tt> method.</summary>
        </member>
        <member name="P:PX.Data.PXView.SearchColumns">
            <exclude />
        </member>
        <member name="P:PX.Data.PXView.Currents">
            <summary>Gets the current data records passed to the <tt>Select(...)</tt> method to process the <tt>Current</tt> and <tt>Optional</tt> parameters.</summary>
        </member>
        <member name="P:PX.Data.PXView.Parameters">
            <summary>Gets the values passed to the <tt>Select(...)</tt> method to process such parameters as <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>, and
            pre-processed by the <tt>Select(...)</tt> method.</summary>
        </member>
        <member name="P:PX.Data.PXView.StartRow">
            <summary>Gets or sets the value passed to the <tt>Select(...)</tt> method as the index of the first data record to retrieve.</summary>
        </member>
        <member name="P:PX.Data.PXView.MaximumRows">
            <summary>Gets the value passed to the <tt>Select(...)</tt> method as the number of data records to retrieve.</summary>
        </member>
        <member name="P:PX.Data.PXView.ReverseOrder">
            <summary>Gets the value indicating whether a negative value was passed as the index of the first data record to retrieve.</summary>
        </member>
        <member name="P:PX.Data.PXView.RetrieveTotalRowCount">
            <summary>Gets the value indicating whether a view delegate should retrieve total row count.</summary>
        </member>
        <member name="M:PX.Data.PXView.Sort(System.Collections.IEnumerable)">
            <summary>Sort the provided collection of <tt>PXResult&lt;&gt;</tt> instances by the conditions currently stored in the <tt>PXView</tt> context. This context exists only
            during execution of the <see cref="M:PX.Data.PXView.Select(System.Object[],System.Object[],System.Object[],System.String[],System.Boolean[],PX.Data.PXFilterRow[],System.Int32@,System.Int32,System.Int32@)">Select(...)</see> method. The <tt>Sort(IEnumerable)</tt> method may be called in the optional method of the data view to sort
            by the conditions that were provided to the <tt>Select(...)</tt> method, which invoked the optional method.</summary>
            <param name="list">The collection of <tt>PXResult&lt;&gt;</tt>
            instances to sort.</param>
        </member>
        <member name="M:PX.Data.PXView.SortClear">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXView.Filter(System.Collections.IEnumerable)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXView.GetExternalFilters">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXView.GetExternalSorts">
            <exclude />
        </member>
        <member name="M:PX.Data.PXView.GetExternalDescendings">
            <exclude />
        </member>
        <member name="M:PX.Data.PXView.RequestFiltersReset">
            <summary>Resets applied filters for all views in the data graph.</summary>
        </member>
        <member name="P:PX.Data.PXView.Graph">
            <summary>Gets or sets the parent business object.</summary>
        </member>
        <member name="F:PX.Data.PXView.Attributes">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXView.IsReadOnly">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that placing retrieved data records into the cache and merging them with the cache are allowed.</summary>
        </member>
        <member name="M:PX.Data.PXView.ToString">
            <summary>Returns the string with the SQL query corresponding to the underlying BQL command.</summary>
        </member>
        <member name="P:PX.Data.PXView.BqlDelegate">
            <summary>Gets the delegate representing the method (called <i>optional method</i> in this reference) which is invoked by the <tt>Select(...)</tt> method to retrieve the
            data. If this method is provided to the <tt>PXView</tt> object, the Select(...) method doesn't retrieve data from the database and returns the result returned
            by the optional method.</summary>
        </member>
        <member name="P:PX.Data.PXView.Cache">
            <summary>Gets the cache corresponding to the first DAC mentioned in the BQL command.</summary>
        </member>
        <member name="M:PX.Data.PXView.GetItemType">
            <summary>Returns the DAC type of the primary cache; that is, the first DAC referenced in the BQL command.</summary>
        </member>
        <member name="P:PX.Data.PXView.BqlSelect">
            <summary>Gets the underlying BQL command. If the current <tt>PXView</tt> object is associated with a variant of <tt>PXSelect&lt;&gt;</tt> object, the BQL command type
            has the the same type parameters as the type of this object, so it represents the same SQL query.</summary>
        </member>
        <member name="P:PX.Data.PXView.BqlTarget">
            <summary>Gets the class that defines the optional method of a data view. Typically, this class is the graph that defines both the data view and its optional method. The
            optional method is the method represented by <tt>BqlDelegate</tt> when a data view is defined as a member of a graph.</summary>
        </member>
        <member name="M:PX.Data.PXView.GetItemTypes">
            <summary>Returns all DAC types referenced in the BQL command.</summary>
        </member>
        <member name="M:PX.Data.PXView.GetParameterNames">
            <summary>Returns the names of the fields referenced by BQL parameters and the names of parameters of the optional method, if it is defined.</summary>
        </member>
        <member name="M:PX.Data.PXView.EnumParameters">
            <summary>Returns the information on the fields referenced by BQL parameters and parameters of the optional method, if it is defined for the data view.</summary>
        </member>
        <member name="M:PX.Data.PXView.Clear">
            <summary>Clears the results of BQL statement execution.</summary>
        </member>
        <member name="M:PX.Data.PXView.DetachCache">
            <summary>Initialize a new cache for storing the results of BQL statement execution.</summary>
        </member>
        <member name="M:PX.Data.PXView.#ctor(PX.Data.PXGraph,System.Boolean,PX.Data.BqlCommand)">
            <summary>Initializes an instance for executing the BQL command.</summary>
            <param name="graph">The graph with which the instance is associated.</param>
            <param name="isReadOnly">The value that indicates if updating the cache and merging data with the cache are allowed.</param>
            <param name="select">The BQL command as an instance of the type derived from the <tt>BqlCommand</tt> class.</param>
        </member>
        <member name="M:PX.Data.PXView.#ctor(PX.Data.PXGraph,System.Boolean,PX.Data.BqlCommand,System.Delegate)">
            <summary>Initializes an instance for executing the BQL command using the provided method to retrieve data.</summary>
            <param name="graph">The graph with which the instance is associated.</param>
            <param name="isReadOnly">The value that indicates if updating the cache and merging data with the cache are allowed.</param>
            <param name="select">The BQL command as an instance of the type derived from the <tt>BqlCommand</tt> class.</param>
            <param name="handler">Either PXPrepareDelegate or PXSelectDelegate.</param>
        </member>
        <member name="P:PX.Data.PXView.AllowSelect">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that selecting of data records of the view's main DAC type is allowed in the UI.</summary>
        </member>
        <member name="P:PX.Data.PXView.AllowInsert">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that insertion of data records of the view's main DAC type is allowed in the UI.</summary>
        </member>
        <member name="P:PX.Data.PXView.AllowUpdate">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that the update of data records of the view's main DAC type is allowed in the UI.</summary>
        </member>
        <member name="P:PX.Data.PXView.AllowDelete">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that deletion of data records of the view's main DAC type is allowed in the UI.</summary>
        </member>
        <member name="M:PX.Data.PXView.GetSortColumns">
            <summary>Returns pairs of the names of the fields by which the data view result will be sorted and values indicating if the sort by the field is descending.</summary>
        </member>
        <member name="M:PX.Data.PXView.prepareSorts(System.String[],System.Boolean[],System.Object[],System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            Generates sort columns. Analyze Bql command sort columns, override with external sort order, append primary key.
            as side effect can override _Select with OrderByNew() method.
            </summary>
            <param name="sortcolumns">External sort columns</param>
            <param name="needOverrideSort">Output if the Bql command need to be composed with the new sort expression</param>
            <returns>Sort columns</returns>
        </member>
        <member name="M:PX.Data.PXView.PrepareParameters(System.Object[],System.Object[])">
            <summary>Prepares parameters, formats input values, gets default values for the hidden and not supplied parameters. The method returns the values that will replace the
            parameters including and the parameters of the custom selection method if it is defined.</summary>
            <param name="currents">The objects to use as current data records when
            processing <tt>Current</tt> and <tt>Optional</tt> parameters.</param>
            <param name="parameters">The explicit values for such parameters as
            <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.RaiseCommandPreparingForFilterValue(PX.Data.PXCache,System.String,System.Object,PX.Data.PXDBOperation,System.Type,PX.Data.PXFieldState,PX.Data.PXCommandPreparingEventArgs.FieldDescription@)">
            <summary>
            Raises the cache command preparing field event for filter value with a special treatment for the <see cref="T:PX.Data.PXDBDateAttribute"/>. The <see cref="T:PX.Data.PXDBDateAttribute"/> may convert the date filter
            value from local time zone to UTC if its flags <see cref="P:PX.Data.PXDBDateAttribute.UseTimeZone"/> and
            <see cref="P:PX.Data.PXDBDateAttribute.PreserveTime"/> both are set. This results in a shift in the filter value and a value 01.09.2020 00:00 corresponding to the 1st of September 2020
            will be shifted to a 01.09.2020 05:00 which will return incorrect filtered results. Depending on the time zone it can even result in a different date. This is unwanted therefore for filter
            values these flags on  <see cref="T:PX.Data.PXDBDateAttribute"/> attribute are temporarily cleared to prevent time zone conversions.
            </summary>
            <param name="cache">The cache.</param>
            <param name="fieldName">Name of the field on which  cache command preparing event should be raised.</param>
            <param name="filterValue">The filter value.</param>
            <param name="operation">The operation.</param>
            <param name="table">The table to use for the command preparing event.</param>
            <param name="state">The field state.</param>
            <param name="fieldDescription">[out] Field description.</param>
        </member>
        <member name="M:PX.Data.PXView.GetResult(System.Object[],PX.Data.PXFilterRow[],System.Boolean,System.Int32,PX.Data.PXView.PXSearchColumn[],System.Boolean@,System.Boolean@)">
            <summary>Retrieves resultset out of the database</summary>
            <param name="parameters">Parameters for the command</param>
            <param name="searches">Search values</param>
            <param name="reverseOrder">If reversing of the sort expression is required</param>
            <param name="topCount">Number of rows required</param>
            <param name="sortcolumns">Sort columns</param>
            <param name="descendings">Descending flags</param>
            <param name="needOverrideSort">If the Bql command needs to be updated with the new sort expression</param>
            <returns>Resultset, if there is no empty parameters, otherwise empty list</returns>
        </member>
        <member name="M:PX.Data.PXView.StoreResult(PX.Data.IBqlTable,PX.Data.PXQueryParameters)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXView.StoreResult(PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXView.RemoveCached(PX.Data.PXCommandKey)">
            <summary>Removes a result set from the cache of the results of BQL statement execution.</summary>
            <param name="queryKey">Key to search</param>
            <returns>true if resultset is found and removed successfully</returns>
        </member>
        <member name="M:PX.Data.PXView.LookupCache(PX.Data.PXCommandKey,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>Looks for a resultset inside the internal cache, merges updated and deleted items, adjusts top count</summary>
            <param name="queryKey">Key to search</param>
            <param name="topCount">Number of rows required</param>
            <returns>Resultset if found in the cache, otherwise null</returns>
        </member>
        <member name="M:PX.Data.PXView.AppendTail(System.Object,System.Collections.Generic.List{System.Object},System.Object[])">
            <summary>Selects the data records joined with the provided data record by the underlying BQL command.</summary>
            <param name="item">First data item.</param>
            <param name="parameters">Parameters.</param>
            <returns>The first item plus joined rows.</returns>
        </member>
        <member name="F:PX.Data.PXView.SupressTailSelect">
            <summary>
             This flag keeps joined DACs (tail) during cache merge of updated main DAC instead of retrieving the tail
            </summary>
        </member>
        <member name="M:PX.Data.PXView.MergeCache(System.Collections.Generic.List{System.Object},System.Object[],System.Boolean,System.Boolean@)">
            <summary>Merges the result set with the updated/inserted/deleted items, stores the result set in the internal cache.</summary>
            <param name="list">Resultset</param>
            <param name="parameters">Query parameters</param>
            <param name="sortcolumns">Sort columns</param>
            <param name="descendings">Descending flags</param>
            <param name="reverseOrder">If reverse of the sort expression is required</param>
            <param name="queryKey">Key to store the result in the cache</param>
        </member>
        <member name="M:PX.Data.PXView.SortResult(System.Collections.Generic.List{System.Object},PX.Data.PXView.PXSearchColumn[],System.Boolean)">
            <summary>Sorts the result set.</summary>
            <param name="list">Resultset to sort</param>
            <param name="sortcolumns">Sort columns</param>
            <param name="descendings">Descending flags</param>
            <param name="reverseOrder">If reversing of the sort order is required</param>
        </member>
        <member name="M:PX.Data.PXView.SearchResult(System.Collections.Generic.List{System.Object},PX.Data.PXView.PXSearchColumn[],System.Boolean,System.Boolean,System.Int32@,System.Int32,System.Int32@,System.Boolean@)">
            <summary>Cuts the resultset by search values, starting row and number of rows required</summary>
            <param name="list">The result set.</param>
            <param name="searches">Values to search</param>
            <param name="sortcolumns">Sort columns</param>
            <param name="descendings">Descending flags</param>
            <param name="reverseOrder">If reversing of the sort expression is required</param>
            <param name="startRow">Index of row to start with</param>
            <param name="maximumRows">Maximum number of rows to return</param>
            <param name="totalRows">Total number of rows fetched</param>
            <param name="searchFound">If there is an item that meets search values</param>
            <returns>Filtered resultset</returns>
        </member>
        <member name="M:PX.Data.PXView.Select(System.Object[],System.Object[],System.Object[],System.String[],System.Boolean[],PX.Data.PXFilterRow[],System.Int32@,System.Int32,System.Int32@)">
            <summary>The main selection procedure.</summary>
            <param name="currents">Items to replace current values when retrieving Current and Optional parameters</param>
            <param name="parameters">Query parameters</param>
            <param name="searches">Search values</param>
            <param name="sortcolumns">Sort columns</param>
            <param name="descendings">Descending flags</param>
            <param name="startRow">Index of row to start with</param>
            <param name="maximumRows">Maximum rows to return</param>
            <param name="totalRows">Total rows fetched</param>
            <returns>Resultset requested</returns>
        </member>
        <member name="M:PX.Data.PXView.InvokeDelegate(System.Object[])">
            <summary>Invokes the manual method if provided in the constructor</summary>
            <param name="parameters">Query parameters</param>
            <returns>Either resultset or null, if the method is intended to override parameters only</returns>
        </member>
        <member name="M:PX.Data.PXView.Compare(System.Object,System.Object,PX.Data.PXView.compareDelegate[])">
            <summary>Compare two items</summary>
            <param name="a">First item, might be a dictionary</param>
            <param name="b">Second item, might be a dictionary</param>
            <param name="columns">Sort columns</param>
            <param name="descendings">Sort descendings</param>
            <returns>-1, 0, 1</returns>
        </member>
        <member name="M:PX.Data.PXView.SelectMulti(System.Object[])">
            <summary>Retrieves the whole data set corresponding to the BQL command.</summary>
            <param name="parameters">The explicit values for such parameters as <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.SelectSingle(System.Object[])">
            <summary>Retrieves the top data record from the data set corresponding to the BQL command.</summary>
            <param name="parameters">The explicit values for such parameters as
            <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.SelectSingleBound(System.Object[],System.Object[])">
            <summary>Retrieves the top data record from the data set corresponding to the BQL command.</summary>
            <param name="currents">The objects to use as current data records when
            processing <tt>Current</tt> and <tt>Optional</tt> parameters.</param>
            <param name="parameters">The explicit values for such parameters as
            <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>.</param>
            <returns>The resultset.</returns>
        </member>
        <member name="M:PX.Data.PXView.SelectMultiBound(System.Object[],System.Object[])">
            <summary>Retrieves the whole data set corresponding to the BQL command.</summary>
            <param name="currents">The objects to use as current data records when
            processing <tt>Current</tt> and <tt>Optional</tt> parameters.</param>
            <param name="parameters">The explicit values for such parameters as
            <tt>Required</tt>, <tt>Optional</tt>, and <tt>Argument</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.WhereAnd``1">
            <summary>Appends a filtering expression to the underlying BQL command
            via the logical "and". The additional filtering expression is provided
            in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXView.WhereAnd(System.Type)">
            <summary>Appends a filtering expression to the underlying BQL command
            via the logical "and". The additional filtering expression is provided
            in the type parameter.</summary>
            <param name="where">The additional filtering expression as the type
            derived from <tt>IBqlWhere</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.WhereOr``1">
            <summary>Appends a filtering expression to the BQL statement via the
            logical "or". The additional filtering expression is provided in the
            type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXView.WhereOr(System.Type)">
            <summary>Appends a filtering expression to the BQL statement via the
            logical "or".</summary>
            <param name="where">The additional filtering expression as the type
            derived from <tt>IBqlWhere</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.OrderByNew``1">
            <summary>Replaces the sorting expression with the new sorting
            expression. The sorting expressio is specified in the type
            parameter.</summary>
        </member>
        <member name="M:PX.Data.PXView.OrderByNew(System.Type)">
            <summary>Replaces the sorting expression with the new sorting
            expression.</summary>
            <param name="newOrderBy">The sorting expression as a type derived from
            <tt>IBqlOrderBy</tt>, such as <tt>OrderBy&lt;&gt;</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.Join``1">
            <summary>Appends the provided join clause to the BQL command. The join
            clause is specified in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXView.Join(System.Type)">
            <summary>Appends the provided join clause to the BQL
            command.</summary>
            <param name="join">The join clause as a type derived from
            <tt>IBqlJoin</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.JoinNew(System.Type)">
            <summary>Appends or sets the provided join clause to the BQL command.</summary>
            <param name="join">The join clause as a type derived from
            <tt>IBqlJoin</tt>.</param>
        </member>
        <member name="M:PX.Data.PXView.WhereNot">
            <summary>Adds logical "not" to the whole <tt>Where</tt> clause of the BQL statement, reversing the condition to the opposite.</summary>
        </member>
        <member name="M:PX.Data.PXView.WhereNew``1">
            <summary>Replaces the filtering expression in the BQL statement. The
            new filtering expression is provided in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXView.WhereNew(System.Type)">
            <summary>Replaces the filtering expression in the BQL
            statement.</summary>
            <param name="newWhere">The new filtering expression as the type
            derived from <tt>IBqlWhere</tt>.</param>
        </member>
        <member name="F:PX.Data.PXView.RefreshRequested">
            <summary>
            The event handler for the <tt>RefreshRequested</tt> event.
            </summary>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXView.RequestRefresh">
            <summary>Raises the <tt>RequestRefresh</tt> event defined within the
            <tt>PXView</tt> object.
            The method refreshes only grid control and may be called from RowSelected, RowInserted, RowUpdated and RowDeleted events.
            </summary>
        </member>
        <member name="P:PX.Data.PXView.Answer">
            <summary>Gets or sets the value indicating user's choice in the dialog window displayed through one of the <tt>Ask()</tt> methods.</summary>
        </member>
        <member name="M:PX.Data.PXView.GetAnswer(System.String)">
            <summary>Returns the result of the dialog window that was opened through one of the <tt>Ask()</tt> methods and saved in the <tt>PXView</tt> object.</summary>
            <param name="key">The identifier of the dialog window that was
            provided to the <tt>Ask()</tt> method or the name of the data
            view.</param>
        </member>
        <member name="M:PX.Data.PXView.SetAnswer(System.String,PX.Data.WebDialogResult)">
            <summary>Saves the result of the dialog window.</summary>
            <param name="key">The identifier of the dialog window.</param>
            <param name="answer">The result value.</param>
        </member>
        <member name="P:PX.Data.PXView.Answers">
            <summary>Allows to get or set the values indicating user's choice in the dialog window displayed through one of the <tt>Ask()</tt> methods.</summary>
        </member>
        <member name="P:PX.Data.PXView.AnswerIndexer.Item(System.String)">
            <summary>The result of the dialog window that was opened
            through one of the <tt>Ask()</tt> methods and saved in the
            <tt>PXView</tt> object.</summary>
            <param name="key">The identifier of the dialog window that was
            provided to the <tt>Ask()</tt> method or the name of the data
            view.</param>
        </member>
        <member name="M:PX.Data.PXView.SetAnswer(PX.Data.PXGraph,System.String,System.String,PX.Data.WebDialogResult)">
            <summary>Saves the result of the dialog window.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
            <param name="viewName">The name of the data view with which the dialog
            window is associated.</param>
            <param name="key">The identifier of the dialog window.</param>
            <param name="answer">The result value.</param>
        </member>
        <member name="M:PX.Data.PXView.ClearDialog">
            <summary>Clears the dialog information saved by the graph on last invocation of the <tt>Ask()</tt> method.</summary>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.Object,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.Object,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,System.String,PX.Data.MessageButtons,System.Collections.Generic.IReadOnlyDictionary{PX.Data.WebDialogResult,System.String},PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="buttonNames">Dialog buttons' labels.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,System.String,PX.Data.MessageButtons,System.Collections.Generic.IReadOnlyDictionary{PX.Data.WebDialogResult,System.String},PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="buttonNames">Dialog buttons' labels.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="repaintControls">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.Object,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.String,System.Object,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.Ask(System.Object,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXView.AskExt(System.String,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(System.String)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. The method requests repainting of the
            panel.</summary>
            <param name="key">The identifier of the panel.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement.</summary>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement. The method requests
            repainting of the panel.</summary>
        </member>
        <member name="M:PX.Data.PXView.AskExtWithHeader(System.String,System.Collections.Generic.List{System.String})">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. Header is displayed as a panel title</summary>
        </member>
        <member name="M:PX.Data.PXView.AskExtWithHeader(System.String,PX.Data.PXView.InitializePanel,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. Header is displayed as a panel title</summary>
        </member>
        <member name="M:PX.Data.PXView.AskExt(PX.Data.MessageButtons)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement. The method requests
            repainting of the panel.</summary>
        </member>
        <member name="M:PX.Data.PXView.AskExt(System.String,PX.Data.PXView.InitializePanel,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel to display.</param>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(System.String,PX.Data.PXView.InitializePanel)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel to display.</param>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(PX.Data.PXView.InitializePanel,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(PX.Data.PXView.InitializePanel)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
        </member>
        <member name="M:PX.Data.PXView.AskExt(PX.Data.PXGraph,System.String,System.String,PX.Data.PXView.InitializePanel)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="graph">The graph where the data view is defined.</param>
            <param name="viewName">The name of the data view with which the dialog
            is associated.</param>
            <param name="key">The identifier of the panel to display.</param>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
        </member>
        <member name="M:PX.Data.PXView.FieldGetValue(PX.Data.PXCache,System.Object,System.Type,System.String)">
            <summary>Gets the value of the specified field in the data record from the cache.</summary>
            <param name="sender">The cache object.</param>
            <param name="data">The data record.</param>
            <param name="sourceType">The DAC of the data record. The cache of this
            DAC type is obtained through the cache object provided in the
            parameter.</param>
            <param name="sourceField">The name of the field which value is
            returned.</param>
            <remarks>The method may raise the <tt>FieldDefaulting</tt> and
            <tt>FieldUpdating</tt> events.</remarks>
        </member>
        <member name="P:PX.Data.PXView.Name">
            <summary>View name in the graph.</summary>
        </member>
        <member name="M:PX.Data.PXView.CreateResult(System.Object[])">
            <exclude />
        </member>
        <member name="T:PX.Data.AuditSetup">
            <exclude/>
        </member>
        <member name="T:PX.Data.AuditSetup.AuTableOptions">
            <exclude/>
        </member>
        <member name="T:PX.Data.companySetting">
            <exclude/>
        </member>
        <member name="T:PX.Data.companySetting.companyFlag">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseProviderBase">
            <exclude/>
            <exclude/>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseProviderBase.ResetAllTables">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseProviderBase.SubscribersStamp">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseProviderBase.RequiredSubscriber">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDatabaseProviderBase.SlotClosing">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.fillCompanyNames">
            <summary> Determines which format companyID variable uses and call matching method </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.fillCompanyNames(System.Int32,System.Boolean)">
            <summary> Reads all companies from database, fills companyXXX dictionaries </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.fillCompanyNames(System.String)">
            <summary> parses company data from an entry in web.config </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.fillSelUpdCompanies(System.Nullable{System.Int32})">
            <summary> Fills dictionaries updatableCompanies, selectableCompanies, companySiblings, mainCompanies</summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.getRestriction(System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary> Builds restriction line to optionally filter out lines belonging to different companies/branches and deleted records </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProviderBase.getCompanyID(System.String,PX.Data.companySetting@)">
            <summary> Determines which per-company restrictions apply to given table </summary>
            <returns>0 if no restrictions apply</returns>
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider">
            <exclude/>
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.ExecuteReaderInternalAsync(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDbSchemaCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyCommand">
            <exclude/>
        </member>
        <member name="P:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyCommand.DbConnection">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataReader">
            <exclude/>
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection">
            <exclude/>
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.GetParameter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.GetParameter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.AddRange(System.Array)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyDataParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyConnection">
            <exclude/>
        </member>
        <member name="P:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyConnection.DataSource">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyConnection.ServerVersion">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.Database.Common.PXDatabaseDummyProvider.DummyTransaction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Database.ISqlErrorMessageParser">
            <summary>
            Deconstructing a sql error message by template
            </summary>
        </member>
        <member name="M:PX.Data.Database.ISqlErrorMessageParser.TryParse(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Parsing an error message and returns a list of patterns from template
            </summary>
            <param name="errorMessage">Sql exception message</param>
            <param name="template">Message template</param>
            <param name="messagePatterns">Message patterns</param>
            <returns>true when parsed successful, otherwise - false</returns>
        </member>
        <member name="M:PX.Data.Database.ISqlErrorMessageParser.TryGetMessageTemplate(System.Int32,System.Int32,System.String@)">
            <summary>
            Returns a message template for exception
            </summary>
            <param name="errorCode">Error message DB code</param>
            <param name="languageId">Language id (1033 - US-English)</param>
            <param name="template">Message template</param>
            <returns>true when the template was found, otherwise - false</returns>
        </member>
        <member name="M:PX.Data.Database.ISqlErrorMessageParser.TryGetPatternIndex(System.String,System.Int32)">
            <summary>
            Returns an index of pattern from template
            </summary>
            <param name="template">Message template</param>
            <param name="patternNumber">Pattern</param>
            <returns>index of pattern</returns>
            <remarks>
            Typically templates for most languages have a natural, obvious order of patterns in message template,
            but this order may be different for some languages. As an example:
             - de-de 1031 German - (natual order 1,2,3,4,5,6,7,8):
             - hu 1038 Hungarian - (order 1,3,2,4,5,6,7,8)
            </remarks>
        </member>
        <member name="T:PX.Data.Database.MsSql.MsSqlConstraintStatementErrorMessageHelper">
            <summary>
            Helper for parse errors with template
            "The %ls statement conflicted with the %ls constraint \"%.*ls\". The conflict occurred in database \"%.*ls\", table \"%.*ls\"%ls%.*ls%ls."
            or localized
            </summary>
            <remarks>
            Patterns "%6!%7!%8 optional and may be not present. Pattern %0 is error message itself
            </remarks>
        </member>
        <member name="M:PX.Data.Database.MsSql.MsSqlErrorMessageParser.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.String}})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.PXDataRecordExtension.Bind``1(System.Collections.Generic.IEnumerable{PX.Data.PXDataRecord},``0,System.ValueTuple{System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String}[])">
            <summary>
            Reuses <paramref name="obj"/> to populate data from <see cref="T:PX.Data.PXDataRecord"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows">Result of PXDatabase.Select()</param>
            <param name="obj">Reusable reference object</param>
            <param name="bindings">Sets mapping between <typeparamref name="T"/> properties and SQL column names (aliases). If binding.Name is null - column name is the same as property name</param>
            <returns><paramref name="rows"/></returns>
        </member>
        <member name="M:PX.Data.Database.PXDataRecordExtension.Bind``2(System.Collections.Generic.IEnumerable{PX.Data.PXDataRecord},System.Linq.Expressions.Expression{System.Func{``1,``0}})">
            <summary>
            This and other Bind method use convention: names of parameters in <paramref name="creator"/> corresponds to column names (aliases) in SQL query
            </summary>
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.GetDelayedQuery">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.GetCollection">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.#ctor(PX.Data.PXDelayedQuery,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.Expression">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.ElementType">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.System#Linq#IQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncQueryableResultset`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.Database.ResultSet.PXAsyncResultset`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncResultset`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncResultset`1.GetDelayedQuery">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncResultset`1.GetCollection">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncResultset`1.System#Collections#Generic#IEnumerable{PX#Data#PXResult{T0}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.ResultSet.PXAsyncResultset`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncResultset`1.Expression">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncResultset`1.ElementType">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncResultset`1.System#Linq#IQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.Database.ResultSet.PXAsyncResultset`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.SqlErrorMessageParserBase.TryParse(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.SqlErrorMessageParserBase.TryGetMessageTemplate(System.Int32,System.Int32,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.Database.SqlErrorMessageParserBase.TryGetPatternIndex(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.IDbSchemaCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.DbSchemaCache">
            <exclude/>
        </member>
        <member name="M:PX.Data.DbSchemaCache.getSpecificTableSetting(PX.DbServices.Model.Entities.TableHeader,System.Boolean)">
            <summary> Determines if table has predefined columns and returns that setting </summary>
        </member>
        <member name="T:PX.Data.FindIgnoreCase">
            <exclude/>
        </member>
        <member name="T:PX.Data.SqlDialectBase">
            <exclude/>
        </member>
        <member name="T:PX.Data.StringRoutines">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrepareDelegate`11">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectDelegate`11">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonDelegate`11">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`11">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`12">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`13">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`14">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`15">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`16">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`17">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`18">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`19">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`20">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`21">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`22">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`23">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`24">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResult`25">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXReportResultset">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXResultset`1.StoreResult(System.Collections.Generic.List{System.Object})">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXResultset`1.StoreResult(PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXResultset`1.ToQueryable``1">
            <summary>
            Useful when real type of PXResult have more type parameters than PXResultset declaration
            (for example PXSelectJoin.Select() produces such case) and you need missed types in your LINQ expression.
            </summary>
            <example>
            <code>
            var sel = PXSelectJoin&lt;SupplierProductTest,
            	InnerJoin&lt;SupplierTest, On&lt;SupplierTest.supplierID, Equal&lt;SupplierProductTest.supplierID&gt;&gt;,
            		InnerJoin&lt;ProductTest, On&lt;ProductTest.productID, Equal&lt;SupplierProductTest.productID&gt;&gt;&gt;&gt;&gt;(graph);
            
            var query = sel.Select().ToQueryable&lt;PXResult&lt;SupplierProductTest, SupplierTest, ProductTest&gt;&gt;().Where(...) 
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXResultset`1.Enumerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`11">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`12">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`13">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`14">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`15">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`16">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`17">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`18">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`19">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`20">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`21">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`22">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`23">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`24">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXResultset`25">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataField">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataField`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAliasedDataField`1">
            <summary>
            Automatically takes alias from declaring type.
            </summary>
        </member>
        <member name="T:PX.Data.PXAliasedDataFieldOrder`1">
            <summary>
            Automatically takes alias from declaring type.
            </summary>
        </member>
        <member name="T:PX.Data.PXAliasedDataFieldValue`1">
            <summary>
            Automatically takes alias from declaring type.
            </summary>
        </member>
        <member name="T:PX.Data.PXDataFieldMapping">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXComp">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCondition">
            <exclude/>
        </member>
        <member name="T:PX.Data.IFilterRow">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFilterRow">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXFilterRow.LocaleOverride">
             <summary>
            Use to override locale for demask filters in Export And Import scenarios
             </summary>
        </member>
        <member name="P:PX.Data.PXFilterRow.RequireRowForPrimary">
            <summary>
            Setting this property to <c>true</c> will make ETH honor this row restriction on primary view,
            meaning that if no rows on view match this filter, no row will be emitted in primary view.
            </summary>
        </member>
        <member name="T:PX.Data.PXFilterTuple">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldValue`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldOrder">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldOrder`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldParam">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataFieldRestrict">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDummyDataFieldRestrict">
            <summary>
            Special class to pass old values to pxdatabase.delete for push notifications. This restricts is not passed to database.
            </summary>
        </member>
        <member name="T:PX.Data.PXDataFieldAssign.AssignBehavior">
            <summary>
            Defines possible policies of assigning a value to a DAC field.
            </summary>
            <remarks>The enumeration is typically used in the methods of the
            <see cref="T:PX.Data.PXAccumulatorAttribute">PXAccumulator</see>
            attribute and its successors.</remarks>
        </member>
        <member name="F:PX.Data.PXDataFieldAssign.AssignBehavior.Replace">
            <summary>
            The new value is inserted into the data field, and the previous
            value is overwritten.
            </summary>
        </member>
        <member name="F:PX.Data.PXDataFieldAssign.AssignBehavior.Summarize">
            <summary>
            The new value is added to the value stored in the database.
            </summary>
        </member>
        <member name="F:PX.Data.PXDataFieldAssign.AssignBehavior.Maximize">
            <summary>
            The maximum of the new value and the value from the database is saved
            in the database.
            </summary>
        </member>
        <member name="F:PX.Data.PXDataFieldAssign.AssignBehavior.Minimize">
            <summary>
            The minimum of the new value and the value from the database is saved
            in the database.
            </summary>
        </member>
        <member name="F:PX.Data.PXDataFieldAssign.AssignBehavior.Initialize">
            <summary>
            The new value is saved in the database as the value if the field does not
            have a value in the database. If the data field is not null, the new value
            is discarded.
            </summary>
        </member>
        <member name="T:PX.Data.PXDataFieldAssign`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSPParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSPInParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSPOutParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSPInOutParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.ReportViewAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDialogButtons">
            <exclude/>
        </member>
        <member name="T:PX.Data.MessageButtons">
            <summary>Defines possible sets of standard buttons that can be
            displayed in a dialog window created by the <tt>Ask()</tt>
            method.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.OK">
            <summary>Only the OK button is displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.OKCancel">
            <summary>The OK and Cancel buttons are displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.AbortRetryIgnore">
            <summary>The Abort, Retry, and Ignore buttons are displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.YesNoCancel">
            <summary>The Yes, No, and Cancel buttons are displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.YesNo">
            <summary>The Yes and No buttons are displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.RetryCancel">
            <summary>The Retry and Cancel buttons are displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageButtons.None">
            <summary>No buttons are displayed.</summary>
        </member>
        <member name="T:PX.Data.MessageIcon">
            <summary>Defines possible icons that can be displayed beside the
            message in the dialog window opened by the <tt>Ask()</tt>
            method.</summary>
        </member>
        <member name="F:PX.Data.MessageIcon.None">
            <summary>No icon is displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageIcon.Error">
            <summary>The error sign is displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageIcon.Question">
            <summary>The question mark sign is displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageIcon.Warning">
            <summary>The warning sign is displayed.</summary>
        </member>
        <member name="F:PX.Data.MessageIcon.Information">
            <summary>The information sign is displayed.</summary>
        </member>
        <member name="T:PX.Data.WebDialogResult">
            <summary>Defines values that indicate which button the user cliked in
            the dialog opened by the <tt>Ask()</tt> method.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.None">
            <summary>None of the buttons was clicked.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.OK">
            <summary>The user clicked OK.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.Cancel">
            <summary>The user clicked Cancel.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.Abort">
            <summary>The user clicked Abort.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.Retry">
            <summary>The user clicked Retry.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.Ignore">
            <summary>The user clicked Ignore.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.Yes">
            <summary>The user clicked Yes.</summary>
        </member>
        <member name="F:PX.Data.WebDialogResult.No">
            <summary>The user clicked No.</summary>
        </member>
        <member name="T:PX.Data.WebDialogResultExtension">
            <summary>Determines whether the answer that a user provided in a dialog box is positive. 
            The positive answers are <see cref="F:PX.Data.WebDialogResult.OK" /> and <see cref="F:PX.Data.WebDialogResult.Yes" />.</summary>
        </member>
        <member name="T:PX.Data.DialogAnswer">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogAnswer.index">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogAnswer.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogAnswer.answer">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogManager">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogManager.InitializePanel">
            <exclude/>
        </member>
        <member name="T:PX.Data.DialogManager.DialogAnswerCache">
            <exclude/>
        </member>
        <member name="M:PX.Data.DialogManager.PositiveAnswerFor(PX.Data.MessageButtons)">
            <summary>
            Returns positive answer for a set of buttons.
            </summary>
        </member>
        <member name="T:PX.Data.DynamicFilterCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.DynamicFilterManager">
            <exclude/>
        </member>
        <member name="T:PX.Data.FilterModel">
            <exclude/>
        </member>
        <member name="T:PX.Data.FilterModelDictionary">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFilterableAttribute">
            <summary>Enables the <strong>Filter Settings</strong> dialog for the grid, in which the user can define and save custom filters and then use them every time this user
            opens the form.</summary>
            <remarks>
            <para>The attribute is placed on the view declaration.</para>
              <para>If you specify this view as the data member of a grid control, the grid will include a control which can be used to create reusable filters and save them in
            the database. A reusable filter is a set of conditions checked for the fields selected by the view. When a grid applies a filter it displays only the data
            records that satisfy the filter's conditions.</para>
              <para>Reusable filters are frequently enabled in the grid on inquiry and processing forms, so that users can customize these forms to show specific data that is
            most relevant to their needs and responsibilities.</para>
            </remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXFilterable]
            public PXSelect&lt;APInvoice&gt; APDocumentList;</code>
            </example>
        </member>
        <member name="F:PX.Data.PXFilterableAttribute.FilterHeaderName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXFilterableAttribute.FilterRowName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXFilterableAttribute.GlobalFilterRow">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the attribute. The parameter is optional and is not used in most cases. You can specify the DACs whose <tt>Current</tt> objects
            will be used to fill in the filter parameters before showing the data view to the user.</summary>
            <param name="autoFill">The DACs to be used to fill in the filter parameters.</param>
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.ViewCreated(PX.Data.PXGraph,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.AddFilterView(PX.Data.PXGraph,PX.Data.PXFilterView,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.AddFilterDetailView(PX.Data.PXGraph,PX.Data.PXFilterDetailView,System.String)">
            <exclude />
        </member>
        <member name="P:PX.Data.PXFilterableAttribute.NodeId">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.AddFilter(System.String,System.String,System.String,PX.Data.PXFilterRow[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.GetFilterRows(PX.Data.PXGraph,System.String,System.Guid,System.Boolean)">
            <summary>Retrieves the filter by the filter ID.</summary>
            <param name="graph">A graph instance.</param>
            <param name="viewName">The data view name to which the PXFilterable attribute is assigned.</param>
            <param name="filterId">The ID of the filter in Acumatica ERP.</param>
        </member>
        <member name="M:PX.Data.PXFilterableAttribute.EncloseAdvancedFilterRows(System.Collections.Generic.List{System.ValueTuple{PX.Data.PXFilterRow,PX.Data.FilterRow.FilterTypeEnum,System.Int32}})">
            <summary>
            Enclose advanced filters in brackets to be consistent with UI behavior (AC-234045)
            </summary>
            <remarks>
            When user creates both advanced (A1 OR A2) and quick filters (Q1 AND Q2), it will be saved as plain list without brackets as "A1 OR A2 AND Q1 AND Q2".
            When this filter is applied to the query, advanced filters will be surrounded with brackets to be consistent with the UI behavior: "(A1 OR A2) AND Q1 AND Q2".
            This method wraps advanced filters if the following conditions are met:
                1. More than one advanced filter in the set
                2. There is at least one non-advanced (quick) filter in the set
                3. Non-advanced (quick) filters are not placed between advanced filters</remarks>
        </member>
        <member name="T:PX.Data.FilterHeader">
            <summary>
            By default works with cache <see cref="T:PX.Data.PXFilterCache"/>.
            If you don't need this logic, create inheritor in your graph.
            </summary>
        </member>
        <member name="P:PX.Data.FilterRow.OpenBracketsAttribute.Labels">
            <summary>Get.</summary>
        </member>
        <member name="P:PX.Data.FilterRow.OpenBracketsAttribute.Values">
            <summary>Get.</summary>
        </member>
        <member name="P:PX.Data.FilterRow.CloseBracketsAttribute.Labels">
            <summary>Get.</summary>
        </member>
        <member name="P:PX.Data.FilterRow.CloseBracketsAttribute.Values">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.UserGroupLazyCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlFullTextRenderingMethod">
            <exclude/>
        </member>
        <member name="T:PX.Data.QueryHints">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSqlDatabaseProvider.ExecuteReaderInternalAsync(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.MsSqlDataRecord">
            <exclude/>
        </member>
        <member name="T:PX.Data.MsSqlDialect">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXConnectionList">
            <exclude/>
        </member>
        <member name="T:PX.Data.ICrossCompanyPrefetchable">
            <remarks>Requires an explicit <see cref="M:PX.Data.PXDatabase.SelectCrossCompanyTimeStamp"/> call before retrieving the value of the DB slot;
            otherwise, the value won't be invalidated if the table has been modified from another tenant.</remarks>
        </member>
        <member name="T:PX.Data.PXDbType">
            <summary>This enumeration specifies the SQL Server-specific data type
            of a field property for use in
            <tt>System.Data.SqlClient.SqlParameter.</tt></summary>
        </member>
        <member name="F:PX.Data.PXDbType.BigInt">
            <summary><tt>System.Int64</tt>. A 64-bit signed integer.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Binary">
            <summary><tt>System.Array</tt> of type <tt>System.Byte</tt>. A fixed-
            length stream of binary data ranging between 1 and 8000
            bytes.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Bit">
            <summary><tt>System.Boolean</tt>. An unsigned numeric value that can
            be 0, 1, or null.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Char">
            <summary><tt>System.String</tt>. A fixed-length stream of non-Unicode
            characters ranging between 1 and 8000 characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.DateTime">
            <summary><tt>System.DateTime</tt>. Date and time data ranging in value
            from January 1, 1753 to December 31, 9999 to an accuracy of 3.33
            milliseconds.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Decimal">
            <summary><tt>System.Decimal</tt>. A fixed precision and scale numeric
            value between -10<sup>38</sup>-1 and 10<sup>38</sup>-1.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Float">
            <summary><tt>System.Double</tt>. A floating point number within the
            range of -1.79E+308 through 1.79E+308.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Image">
            <summary><tt>System.Array</tt> of type <tt>System.Byte</tt>. A
            variable-length stream of binary data ranging from 0 to
            2<sup>31</sup>-1 (or 2,147,483,647) bytes.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Int">
            <summary><tt>System.Int32</tt>. A 32-bit signed integer.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Money">
            <summary><tt>System.Decimal</tt>. A currency value ranging from
            -2<sup>63</sup> (or -922,337,203,685,477.5808) to 2<sup>63</sup>-1 (or
            +922,337,203,685,477.5807) with an accuracy to a ten-thousandth of a
            currency unit.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.NChar">
            <summary><tt>System.String</tt>. A fixed-length stream of Unicode
            characters ranging between 1 and 4000 characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.NText">
            <summary><tt>System.String</tt>. A variable-length stream of Unicode
            data with a maximum length of 2<sup>30</sup>-1 (or 1,073,741,823)
            characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.NVarChar">
            <summary><tt>System.String</tt>. A variable-length stream of Unicode
            characters ranging between 1 and 4000 characters. Implicit conversion
            fails if the string is greater than 4000 characters. Explicitly set
            the object when you're working with strings longer than 4000
            characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Real">
            <summary><tt>System.Single</tt>. A floating point number within the
            range of -3.40E+38 through 3.40E+38.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.UniqueIdentifier">
            <summary><tt>System.Guid</tt>. A globally unique identifier
            (GUID).</summary>
        </member>
        <member name="F:PX.Data.PXDbType.SmallDateTime">
            <summary><tt>System.DateTime</tt>. Date and time data. Date value range is from January 1, 0001 AD through December 31, 9999
            with an accuracy of one second. <para> The data type for the underlying physical model is DateTime2(0) on Microsoft SQL Server and DateTime(0) on MySQL</para></summary>
        </member>
        <member name="F:PX.Data.PXDbType.SmallInt">
            <summary><tt>System.Int16</tt>. A 16-bit signed integer.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.SmallMoney">
            <summary><tt>System.Decimal</tt>. A currency value ranging from
            -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of
            a currency unit.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Text">
            <summary><tt>System.String</tt>. A variable-length stream of non-
            Unicode data with a maximum length of 2<sup>31</sup>-1 (or
            2,147,483,647) characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Timestamp">
            <summary><tt>System.Array</tt> of type <tt>System.Byte</tt>.
            Automatically generated binary numbers, which are guaranteed to be
            unique within a database. The timestamp is typically used as a
            mechanism for version- stamping table rows. The storage size is 8
            bytes.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.TinyInt">
            <summary><tt>System.Byte</tt>. An 8-bit unsigned integer.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.VarBinary">
            <summary><tt>System.Array</tt> of type <tt>System.Byte</tt>. A
            variable-length stream of binary data ranging between 1 and 8000
            bytes. Implicit conversion fails if the byte array is greater than
            8000 bytes. Explicitly set the object when you are working with byte
            arrays larger than 8000 bytes.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.VarChar">
            <summary><tt>System.String</tt>. A variable-length stream of non-
            Unicode characters ranging between 1 and 8000 characters.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Variant">
            <summary><tt>System.Object</tt>. A special data type that can contain
            numeric, string, binary, or date data, as well as the SQL Server
            values <tt>EMPTY</tt> and <tt>NULL</tt>, which is assumed if no other
            type is declared.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Xml">
            <summary>An XML value. Obtain the XML as a string by using the
            <tt>System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)</tt>
            method or the <tt>System.Data.SqlTypes.SqlXml.Value property</tt>, or
            as <tt>System.Xml.XmlReader</tt>&#8212;by calling the
            <tt>System.Data.SqlTypes.SqlXml.CreateReader()</tt> method.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Udt">
            <summary>An SQL Server user-defined type (UDT).</summary>
        </member>
        <member name="F:PX.Data.PXDbType.Unspecified">
            <summary>Unspecified value type that is implicitly converted by SQL
            Server into an appropriate database column type.</summary>
        </member>
        <member name="F:PX.Data.PXDbType.DirectExpression">
            <summary>A string constant containing a T-SQL statement being embedded
            into the final statement.</summary>
        </member>
        <member name="T:PX.Data.PXDbExceptions">
            <summary>
            Defines provider-independent exceptions that can occur (used by PXDatabaseException class)
            </summary>
        </member>
        <member name="T:PX.Data.PXDatabaseTableChanged">
            <summary>
            Delegate for handling SQL Server query notifications
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A SqlNotificationEventArgs object that contains the event data</param>
        </member>
        <member name="M:PX.Data.PXDatabase.Select``1">
            <summary>
            Returns <code>IQueryable&lt;T&gt; for the specified DAC. Event handlers such as CommandPreparing are omitted.</code>
            </summary>
            <typeparam name="T">DAC type</typeparam>
            <returns>LINQ query</returns>
        </member>
        <member name="M:PX.Data.PXDatabase.SelectRecords``1(PX.Data.PXDataField[])">
            <summary>
            Perform PXDatabase.SelectMulti for a table, selecting all the fields WITHOUT calling any event handlers.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.GetSlot``2(System.String,``1,System.Type[])">
            <summary>
            If the slots contain a valid <typeparamref name="ObjectType"/> object that is saved
            under the key <paramref name="key"/>, the method returns this object.
            Otherwise, the method creates a new <typeparamref name="ObjectType"/> object, invokes
            <tt>Prefetch(<paramref name="parameter"/>)</tt> for this <typeparamref name="ObjectType"/> object,
            saves this <typeparamref name="ObjectType"/> object in the slots under the key <paramref name="key"/>,
            and returns it.
            </summary>
            <typeparam name="ObjectType">The type of an object that is saved in a slot.</typeparam>
            <typeparam name="Parameter">The type of the parameter with which the <tt>Prefetch</tt>
            method is invoked.</typeparam>
            <param name="key">The key under which an <typeparamref name="ObjectType"/> object is saved.</param>
            <param name="parameter">The parameter with which the <tt>Prefetch</tt> method is invoked.</param>
            <param name="tables">The list of tables: if any of these tables change in the database,
            the cache is invalidated for <paramref name="key"/> and <typeparamref name="ObjectType"/>.</param>
            <returns>The object cached in the slots in case of success.
            If an unhandled exception is thrown during the prefetch operation, returns <see langword="null"/>.</returns>
        </member>
        <member name="M:PX.Data.PXDatabase.GetSlot``1(System.String,System.Type[])">
            <summary>
            If the slots contain a valid <typeparamref name="ObjectType"/> object
            that is saved under the key <paramref name="key"/>, the method returns this object.
            Otherwise, the method creates a new <typeparamref name="ObjectType"/> object, saves it in the slot
            under the key <paramref name="key"/>, and returns it. If <typeparamref name="ObjectType"/>
            inherits from <tt>IPrefetchable&lt;&gt;</tt>, this method invokes the <tt>Prefetch</tt> method
            for the <typeparamref name="ObjectType"/> object without a parameter
            before the <typeparamref name="ObjectType"/> object is saved in the slots.
            </summary>
            <typeparam name="ObjectType">The type of an object that is saved in a slot.</typeparam>
            <param name="key">The key under which an <typeparamref name="ObjectType"/> object is saved.</param>
            <param name="tables">The list of the table types: if any of these tables change in the database,
            the cache is invalidated for <paramref name="key"/> and <typeparamref name="ObjectType"/>.</param>
            <returns>The object cached in the slots in case of success.
            If an unhandled exception is thrown during the prefetch operation, returns <see langword="null"/>.</returns>
        </member>
        <member name="M:PX.Data.PXDatabase.Subscribe(System.Type,PX.Data.PXDatabaseTableChanged,System.String)">
            <summary>
            Allows to get notification when data in database table were changed
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.Subscribe(PX.Data.PXDatabaseTableChanged,System.String,System.Type[])">
            <summary>
            Allows to get notification when data in one of the specified database tables were changed.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.Subscribe(PX.Data.PXDatabaseTableChanged,System.Collections.Generic.IEnumerable{System.Type},System.String)">
            <summary>
            Allows to get notification when data in one of the specified database tables were changed.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.Subscribe``1(PX.Data.PXDatabaseTableChanged,System.String)">
            <summary>
            Allows to get notification when data in database table were changed
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.UnSubscribe(System.Type,PX.Data.PXDatabaseTableChanged,System.String)">
            <summary>
            Removes subscribtion created by Subscribe method
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabase.UnSubscribe``1(PX.Data.PXDatabaseTableChanged,System.String)">
            <summary>
            Removes subscribtion created by Subscribe method
            </summary>
        </member>
        <member name="T:PX.Data.DummyTable">
            <summary>
            Empty table with CompanyID column only and no data.
            Can be used in virtual slots to make them company-specific.
            </summary>
        </member>
        <member name="M:PX.Data.PXDatabaseProvider.Select(PX.Data.SQLTree.Query,System.Collections.Generic.IEnumerable{PX.Data.PXDataValue},System.Action{PX.Data.PXDatabaseProvider.ExecutionParameters})">
            <summary>
            Select collection of <see cref="T:PX.Data.PXDataRecord"/> from the database
            </summary>
            <remarks>
            Please use this method carefully because of its current default implementation in <see cref="T:PX.Data.PXDatabaseProviderBase"/>.
            It returns result with active data reader and you have to close it properly either by using default iterator implementation like "foreach" and so on or by disposing enumerator of this collection explicitly.
            Also you have to use returned <see cref="T:PX.Data.PXDataRecord"/> while iterator is not disposed.
            </remarks>
            <param name="query">Query to be executed</param>
            <param name="queryParameters">Query parameters</param>
            <param name="configurator">Delegate to configure additional query execution parameters</param>
            <returns>Collection of <see cref="T:PX.Data.PXDataRecord"/></returns>
        </member>
        <member name="M:PX.Data.PXDatabaseProvider.GetSlot``1(System.String,PX.Data.PrefetchDelegate{``0},System.Type[])">
            <remarks>
            <para>Will return <see langword="null"/> if an unhandled exception occurred during prefetch.</para>
            <para>If called from a background thread, an explicit <see cref="M:PX.Data.PXDatabaseProvider.SelectTimeStamp"/>
            or <see cref="M:PX.Data.PXDatabaseProvider.SelectCrossCompanyTimeStamp"/> call is required beforehand.</para>
            <para>If <typeparamref name="ObjectType"/> is <see cref="T:PX.Data.ICrossCompanyPrefetchable"/>
            or all <paramref name="tables"/> don't have the CompanyID column,
            <see cref="M:PX.Data.PXDatabaseProvider.SelectCrossCompanyTimeStamp"/> should be called before that.</para>
            </remarks>
        </member>
        <member name="T:PX.Data.PXConnectionScope">
            <summary>
            Objects of this class are connection scopes for executing BQL statements.
            </summary>
            <remarks>When a long database operation is being performed,
            you must create another connection scope to perform other operations with the database
            without waiting for the first operation to finish. For example, a separate
            connection scope is needed in the <tt>RowSelecting</tt> event handler to execute
            additional BQL statements.</remarks>
            <example>The <tt>PXConnectionScope</tt> class inherits <tt>IDisposable</tt>, so
            you can create a <tt>PXConnectionScope</tt> object in the <tt>using</tt> statement as follows.
            <code lang="CS">
            using (new PXConnectionScope())
            {
                ...
            }</code></example>
        </member>
        <member name="M:PX.Data.PXConnectionScope.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXConnectionScope.Dispose">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTransactionScope">
            <summary>
            This class allows you to implement some logic within a transaction.
            If a transaction cannot be completed, the performed actions will be rolled back.
            </summary>
            <remarks><para>We recommend that you create a <tt>PXTransactionScope</tt> object in
            a <tt>using</tt> statement, implement in the <tt>using</tt> body the logic
            that is necessary for a transaction, and call the <tt>Complete</tt> method
            as the last command of the <tt>using</tt> body.</para>
              <innovasys:widget type="Note Box" layout="block" xmlns:innovasys="http://www.innovasys.com/widgets">
                <innovasys:widgetproperty layout="block" name="Content">If you nest a transaction scope into another,
            the inner and outer transaction scopes will use the same database transaction. If the
            <tt>Complete</tt> method of the outer transaction scope is not executed, the transaction
            will be rolled back.</innovasys:widgetproperty>
              </innovasys:widget>
            </remarks>
            <example>
            <code description="Following is the usage pattern for the &lt;tt&gt;PXTransactionScope&lt;/tt&gt; class." lang="CS">
            using(var ts = new PXTransactionScope())
            {
                ...
                ts.Complete();
            }
            </code></example>
        </member>
        <member name="F:PX.Data.PXTransactionScope._Enlisted">
            <summary>
            If the transaction scope is enlisted then it's not the top most transaction scope.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:PX.Data.PXTransactionScope.ErpTranInfo.MaxDbKeyCountToLog_Debug" -->
        <member name="M:PX.Data.PXTransactionScope.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTransactionScope.Complete">
            <summary>
            Completes the transaction.
            </summary>
            <remarks>Run this method after all other operations within a transaction,
            but before the transaction scope object is destroyed.</remarks>
        </member>
        <member name="M:PX.Data.PXTransactionScope.Complete(PX.Data.PXGraph)">
            <summary>
            Completes the transaction.
            </summary>
            <remarks>Run this method after all other operations within a transaction,
            but before the transaction scope object is destroyed.</remarks>
            <param name="graph">If not <tt>null</tt>, the timestamp value is stored for
            this graph.</param>
        </member>
        <member name="M:PX.Data.PXTransactionScope.Restart">
            <summary>
            Clears the active scope and all its parent scopes.
            </summary>
        </member>
        <member name="M:PX.Data.PXTransactionScope.Dispose">
            <summary>
            This method performs the <tt>COMMIT</tt> operation if the <tt>Complete</tt>
            method was called; otherwise, the <tt>ROLLBACK</tt> operation is performed.
            </summary>
        </member>
        <member name="P:PX.Data.PXTransactionScope.IsScoped">
            <summary>
            Returns <tt>true</tt>, if a transaction scope is set. Otherwise, it returns <tt>false</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXTransactionScope.IsConnectionOutOfScope">
            <summary>
            Returns true if a transaction scope is set but the current connection was created in a separate PXConnectionScope.
            </summary>
        </member>
        <member name="M:PX.Data.PXTransactionScope.AddTranslationField(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTransactionScope.SetSkipMainTableEvent">
            <exclude/>
        </member>
        <member name="E:PX.Data.PXTransactionScope.OnBeforeCommit">
            <summary>
            The event is raised for the top most transaction before the <tt>COMMIT</tt>
            operation. Using this event, you can perform the <tt>ROLLBACK</tt> operation
            instead of the <tt>COMMIT</tt> operation.
            </summary>
        </member>
        <member name="T:PX.Data.PXConnectionStringScope">
            <summary>
            Redirects database operations to a remote database.
            </summary>
        </member>
        <member name="T:PX.Data.PXDatabaseSlot">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectAsyncResult">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXSelectAsyncResult.PXSelectResultAsyncEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PXSelectAsyncResult.PXSelectResultAsyncEnumerator.MoveNextAsync">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PXSelectAsyncResult.PXSelectResultAsyncEnumerator.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PXSelectAsyncResult.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PXSelectAsyncResult.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.PXSelectResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCommandKey">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXCommandKey.BadParamsQueryNotExecuted">
            <summary>
            PXView.GetResult returns empty result without executing real query because some parameters are invalid
            we do not need analyze query text and invalidate result based on depends tables
            </summary>
        </member>
        <member name="T:PX.Data.PXCreateInstanceKey">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataRecord">
            <summary>Wraps a single record of a result set obtained by executing a BQL statement. A record includes data fields of all joined tables.</summary>
        </member>
        <member name="M:PX.Data.PXDataRecord.#ctor(System.Data.IDataReader,System.Data.IDbCommand,PX.Data.PXDatabaseProvider,PX.Data.StringTable)">
            <summary>
            Initializes a new instance of the <tt>PXDataRecord</tt> class.
            </summary>
            <param name="reader">The reader object.</param>
            <param name="command">The database command object.</param>
            <param name="provider">The database provider object.</param>
            <param name="stringTable">Cache for string objects.</param>
        </member>
        <member name="P:PX.Data.PXDataRecord.FieldCount">
            <summary>Gets the number of columns in the current data record. If the
            <tt>PXDataRecord</tt> instance is not positioned in a valid data
            record, the value is <tt>0</tt>. The default value is
            <tt>-1</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXDataRecord.Item(System.String)">
            <summary>
            Returns the value of the specified field.
            Can cause performace issue because of <paramref name="name"/> finding.
            </summary>
            <param name="name">The name of the column to find.</param>
            <returns>Field value.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            No column with the specified name was found.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The 8-bit unsigned integer value of the specified column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetTimeStamp(System.Int32)">
            <summary>
            Reads 8 bytes from the specified column offset as an array of bytes.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The array of 8 bytes.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The character value of the specified column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer
            as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The data type information for the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The date and time data value of the spcified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The fixed-position numeric value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The double-precision floating point number of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetFieldType(System.Int32)">
            <summary>
            Gets the <tt>System.Type</tt> information corresponding to the type of <tt>System.Object</tt>
            that would be returned from <tt>System.Data.IDataRecord.GetValue(System.Int32)</tt>.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The <tt>System.Type</tt> information corresponding to the type of <tt>System.Object</tt>
            that would be returned from <tt>System.Data.IDataRecord.GetValue(System.Int32)</tt>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The single-precision floating point number of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 16-bit signed integer value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 32-bit signed integer value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The 64-bit signed integer value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns> The name of the field or the empty string (""),
            if there is no value to return.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.GetValue(System.Int32)">
            <summary>
            Returns the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The System.Object which will contain the field value.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            The index passed was outside the range from 0 to
            <tt>System.Data.IDataRecord.FieldCount</tt>.
            </exception>
        </member>
        <member name="M:PX.Data.PXDataRecord.IsDBNull(System.Int32)">
            <summary>
            Returns the value that indicates whether the specified field
            is set to <tt>null</tt>.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns><tt>true</tt> if the specified field is set to <tt>null</tt>.
            Otherwise, <tt>false</tt>.</returns>
        </member>
        <member name="T:PX.Data.PXDataRecord.SqlTimerDisposable">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDummyDataRecord">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataRecordMap">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDataRecordMap.FieldEntry">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAsyncResultsetEnumerator`1.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PXAsyncResultsetEnumerator`1.MoveNextAsync">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.PXAsyncResultsetEnumerator`1.Current">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.SequentialGuid">
            <exclude/>
        </member>
        <member name="T:PX.Data.SequentialGuid.RetUuidCodes">
            <exclude/>
        </member>
        <member name="T:PX.Data.UserRecords.DacModificationType">
            <summary>
            Values that represent the possible types of DAC modification. This type determines the type of synchronization operation performed on the user records 
            corresponding to the modified DAC when DB transaction commpletes.
            </summary>
        </member>
        <member name="F:PX.Data.UserRecords.DacModificationType.Delete">
            <summary>
            The DAC was deleted therefore all user records corresponding to it must be also removed from DB.
            </summary>
        </member>
        <member name="F:PX.Data.UserRecords.DacModificationType.Update">
            <summary>
            The DAC was updated therefore the cached content of all user records corresponding to it must be updated.
            </summary>
        </member>
        <member name="T:PX.Data.UserRecords.DummyUserRecordsDBUpdater">
            <summary>
            A dummy for user records database updater class. Used in unit tests as a substitute for a real user records updater <see cref="T:PX.Data.UserRecords.UserRecordsDBUpdater"/>.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.DummyUserRecordsDBUpdater.UpdateUserRecords(System.Collections.Generic.IReadOnlyCollection{PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate})">
            <summary>
            A dummy implementation for the update of user records in the database on a completion of the transaction scope. Does nothing.
            </summary>
            <param name="modifiedDacEntries">The modified DAC entries.</param>
        </member>
        <member name="T:PX.Data.UserRecords.IUserRecordsDBUpdater">
            <summary>
            An interface for the user records database updater. Updates a batch of user records in the database when <see cref="T:PX.Data.PXTransactionScope"/> completes. 
            This functionality works together with <see cref="T:PX.Data.PXSearchableAttribute"/> functionality. Inside the attribute on DAC's row persisted event we add an entry to 
            a special list inside the root transaction scope. This entry <see cref="T:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate"/> contains information required to update user records at the end of transaction, 
            similar to a mechanism Audit uses. The reason for a special treatment is a high number of DB deadlocks caused by the concurrent access to the VisitedRecord DB table
            when we process each record separately inside <see cref="T:PX.Data.PXSearchableAttribute"/>.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.IUserRecordsDBUpdater.UpdateUserRecords(System.Collections.Generic.IReadOnlyCollection{PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate})">
            <summary>
            Updates user records in database on a completion of the transaction scope.
            </summary>
            <param name="modifiedDacEntries">The modified DAC entries.</param>
        </member>
        <member name="T:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate">
            <summary>
            An entry with info regarding a modified DAC for user records update.
            </summary>
        </member>
        <member name="P:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate.ModificationType">
            <summary>
            Gets the type of the DAC modification.
            </summary>
            <value>
            The type of the DAC modification.
            </value>
        </member>
        <member name="P:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate.NoteID">
            <summary>
            Gets the NoteID value of the modified DAC.
            </summary>
            <value>
            The NoteID value of the modified DAC.
            </value>
        </member>
        <member name="P:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate.EntityType">
            <summary>
            Gets the type of the modified DAC.
            </summary>
            <value>
            The type of the modified DAC.
            </value>
        </member>
        <member name="P:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate.CachedContent">
            <summary>
            Gets the cached content.
            </summary>
            <value>
            The cached content.
            </value>
        </member>
        <member name="T:PX.Data.UserRecords.UserRecordsDBUpdater">
            <summary>
            A user records database updater class. Updates a batch of user records in the database when <see cref="T:PX.Data.PXTransactionScope"/> completes. 
            This functionality works together with <see cref="T:PX.Data.PXSearchableAttribute"/> functionality. Inside the attribute on DAC's row persisted event we add an entry to 
            a special list inside the root transaction scope. This entry <see cref="T:PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate"/> contains information required to update user records at the end of transaction, 
            similar to a mechanism Audit uses. The reason for a special treatment is a high number of DB deadlocks caused by the concurrent access to the VisitedRecord DB table
            when we process each record separately inside <see cref="T:PX.Data.PXSearchableAttribute"/>.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.UserRecordsDBUpdater.UpdateUserRecords(System.Collections.Generic.IReadOnlyCollection{PX.Data.UserRecords.ModifiedDacEntryForUserRecordsUpdate})">
            <summary>
            Updates user records in the database on a completion of the transaction scope.
            </summary>
            <param name="modifiedDacEntries">The modified DAC entries.</param>
        </member>
        <member name="T:PX.Data.UserRecords.IDtoBuilder">
            <summary>
            Interface the builder of user record.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.IDtoBuilder.CreateRecordDTO(PX.Data.UserRecords.IUserRecord,System.String)">
            <summary>
            Creates record DTO.
            </summary>
            <param name="userRecord">The user record.</param>
            <param name="screenID">Identifier for the screen.</param>
            <returns/>
        </member>
        <member name="T:PX.Data.UserRecords.IRecordCachedContentBuilder">
            <summary>
            Interface for the builder of user record's cached content.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.IRecordCachedContentBuilder.BuildCachedContent(PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Builds cached content.
            </summary>
            <param name="screenGraph">The screen graph.</param>
            <param name="entity">The entity.</param>
            <returns>
            A string with the cached entity content.
            </returns>
        </member>
        <member name="T:PX.Data.UserRecords.IUserRecord">
            <summary>
            Interface for user records of entities.
            </summary>
        </member>
        <member name="T:PX.Data.UserRecords.CachedContentConstants">
            <summary>
            A collection of constants used as tags and attributes names for user records cached XML content.
            </summary>
        </member>
        <member name="P:PX.Data.UserRecords.FavoriteRecords.FavoriteRecord.RecordContent">
            <summary>
            The pre-cached record content returned to user.
            </summary>
        </member>
        <member name="T:PX.Data.UserRecords.FavoriteRecords.FavoriteRecordsService">
            <summary>
            Implementation of favorite records service.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.FavoriteRecordsService.GetCurrentUserFavoriteRecords">
            <summary>
            Gets the current user favorite records.
            </summary>
            <returns>
            The current user favorite records.
            </returns>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.FavoriteRecordsService.AddToCurrentUserFavorites(System.Guid,System.String)">
            <summary>
            Adds record with NoteID <paramref name="refNoteID"/> to the current user favorites. Returns true if it succeeds, false if it fails.
            </summary>
            <param name="refNoteID">Entity's NoteID.</param>
            <param name="entityTypeName">Name of the entity's type.</param>
            <returns>
            True if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.FavoriteRecordsService.RemoveFromCurrentUserFavorites(System.Guid,System.String)">
            <summary>
            Removes record from current user favorites described by <paramref name="refNoteID"/>.
            </summary>
            <param name="refNoteID">Identifier for the reference note.</param>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="T:PX.Data.UserRecords.FavoriteRecords.IFavoriteRecordsService">
            <summary>
            Interface for favorite records service.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.IFavoriteRecordsService.AddToCurrentUserFavorites(System.Guid,System.String)">
            <summary>
            Adds record with NoteID <paramref name="refNoteID"/> to the current user favorites. Returns true if it succeeds, false if it fails.
            </summary>
            <param name="refNoteID">Entity's NoteID.</param>
            <param name="entityTypeName">Name of the entity's type.</param>
            <returns/>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.IFavoriteRecordsService.RemoveFromCurrentUserFavorites(System.Guid,System.String)">
            <summary>
            Removes record from current user favorites described by <paramref name="refNoteID"/>.
            </summary>
            <param name="refNoteID">Entity's NoteID.</param>
            <param name="entityTypeName">Name of the entity's type.</param>
        </member>
        <member name="M:PX.Data.UserRecords.FavoriteRecords.IFavoriteRecordsService.GetCurrentUserFavoriteRecords">
            <summary>
            Gets the current user favorite records.
            </summary>
        </member>
        <member name="P:PX.Data.UserRecords.RecentlyVisitedRecords.VisitedRecord.RecordContent">
            <summary>
            The pre-cached record content returned to user.
            </summary>
        </member>
        <member name="T:PX.Data.UserRecords.RecentlyVisitedRecords.IRecentlyVisitedRecordsService">
            <summary>
            Interface for recently visit records service.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.RecentlyVisitedRecords.IRecentlyVisitedRecordsService.RecordVisitedDocumentForCurrentUser(PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Record visited document for the current user.
            </summary>
            <param name="screenGraph">The screen graph.</param>
            <param name="document">The document.</param>
            <returns>
            True if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:PX.Data.UserRecords.RecentlyVisitedRecords.IRecentlyVisitedRecordsService.GetCurrentUserVisitedRecords">
            <summary>
            Gets the current user visited records.
            </summary>
        </member>
        <member name="T:PX.Data.UserRecords.RecentlyVisitedRecords.RecentlyVisitedRecordsService">
            <summary>
            A recently visited records provider service implementation. Will store <c>200</c> visited records per user.
            </summary>
        </member>
        <member name="M:PX.Data.UserRecords.RecentlyVisitedRecords.RecentlyVisitedRecordsService.GetCurrentUserVisitedRecords">
            <summary>
            Gets the current user visited records.
            </summary>
            <returns>
            The current user visited records.
            </returns>
        </member>
        <member name="M:PX.Data.UserRecords.RecentlyVisitedRecords.RecentlyVisitedRecordsService.RecordVisitedDocumentForCurrentUser(PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Record visited document for the current user.
            </summary>
            <param name="screenGraph">The graph of the screen.</param>
            <param name="document">The document.</param>
            <returns>
            True if it succeeds, false if it fails.
            </returns>
        </member>
        <member name="M:PX.Data.UserRecords.RecentlyVisitedRecords.RecentlyVisitedRecordsService.ShouldRecord(PX.Data.PXCache,PX.Data.IBqlTable)">
            <summary>
            Determine if the service should record <paramref name="document"/>.
            </summary>
            <param name="documentCache">The document cache.</param>
            <param name="document">The document.</param>
            <returns/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.UserRecords.RecordCachedContentBuilder" -->
        <member name="T:PX.Data.DbTemplateHelper.DbTemplateHelper">
            <summary>
            Helper class that removes all user-specific data from the tables keeping only system template.
            </summary>
        </member>
        <member name="T:PX.Data.DependencyInjection.CompositionRoot">
            <exclude/>
        </member>
        <member name="T:PX.Data.DependencyInjection.IDependencyInjector">
            <exclude/>
        </member>
        <member name="T:PX.Data.DependencyInjection.IGraphWithInitialization">
            <summary>The interface that is used only when you inject dependencies in a graph with <tt>InjectDependencyAttribute</tt> and you need to initialize the graph by using
            the dependencies.</summary>
        </member>
        <member name="M:PX.Data.DependencyInjection.IGraphWithInitialization.Initialize">
            <summary>Performs initialization of the graph that implements the interface.</summary>
        </member>
        <member name="T:PX.Data.DependencyInjection.ParameterResolutionHelper">
            <summary>
            An Autofac parameter resolution helper.
            </summary>
        </member>
        <member name="M:PX.Data.DependencyInjection.ParameterResolutionHelper.WithRegisteredDerivedTypeAsParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type,System.Type)">
            <summary>
            A registration helper that specifies registered derived type <paramref name="derivedParameter"/> as argument for constructor parameter with type <paramref name="baseParameter"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more arguments is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="derivedParameter"/> type can't be converted to <paramref name="baseParameter"/> type.</exception>
            <typeparam name="TLimit">Type of the limit.</typeparam>
            <typeparam name="TReflectionActivatorData">Type of the reflection activator data.</typeparam>
            <typeparam name="TStyle">Type of the style.</typeparam>
            <param name="registration">The registration to act on.</param>
            <param name="baseParameter">The base parameter type.</param>
            <param name="derivedParameter">
            The derived parameter type. Should be derived from <paramref name="baseParameter"/> or implement it in case <paramref name="baseParameter"/> is an interface.
            </param>
            <returns/>
        </member>
        <member name="T:PX.Data.DependencyInjection.PropertyDependencyInjector">
            <exclude/>
        </member>
        <member name="M:PX.Data.DependencyInjection.PropertyDependencyInjector.InjectDependencies(PX.Data.PXGraph,System.Type,System.String)">
            <param name="graph">Instance to inject to.</param>
            <param name="graphType">
            Corresponds to the first parameter of <see cref="M:PX.Data.PXGraph.CreateInstance(System.Type,System.String)"/>.
            Can be different from <paramref name="graph"/><c>.GetType()</c> when graph is customized.</param>
            <param name="prefix">Corresponds to the second parameter of <see cref="M:PX.Data.PXGraph.CreateInstance(System.Type,System.String)"/>.</param>
        </member>
        <member name="M:PX.Data.DependencyInjection.PropertyDependencyInjector.InjectDependencies(PX.Data.PXAction)">
            <param name="action">Instance to inject to.</param>
        </member>
        <member name="M:PX.Data.DependencyInjection.PropertyDependencyInjector.InjectDependencies(PX.Data.PXEventSubscriberAttribute,PX.Data.PXCache)">
            <param name="attribute">Instance to inject to.</param>
            <param name="cache"><tt>PXCache</tt> instance to which the <paramref name="attribute"/> is attached.</param>
        </member>
        <member name="M:PX.Data.DependencyInjection.PropertyDependencyInjector.InjectDependencies(PX.Data.PXSelectBase)">
            <param name="action">Instance to inject to.</param>
        </member>
        <member name="T:PX.Data.InjectDependencyAttribute">
            <summary>The attribute that is used in the <see cref="T:PX.Data.PXGraph" />, <see cref="T:PX.Data.PXAction" />, or <see cref="T:PX.Data.PXEventSubscriberAttribute" />-derived classes to create the properties that need to be injected via
            dependency injection.</summary>
            <example>
              <code title="Example" description="Suppose that dependency injection is defined as follows." lang="CS">
            using System;
            using Autofac;
            using PX.Data;
            namespace MyNamespace
            {
                //An interface that defines the service for dependency injection
                public interface IMyService
                {
                    void ProvideServiceFunctions();
                }
                //A class that implements IMyService
                public class MyService : IMyService
                {
                    public void ProvideServiceFunctions()
                    {
                        //An implementation
                    }
                }
                //A class that registers the implementation class with Autofac
                public class MyServiceRegistrarion : Module
                {
                    protected override void Load(ContainerBuilder builder)
                    {
                        builder.RegisterType&lt;MyService&gt;().As&lt;IMyService&gt;();
                    }
                }
            }</code>
              <code title="Example2" description="The following example shows dependency injection in a graph." lang="CS">
            namespace MyNameSpace
            {
                public class MyGraph : PXGraph&lt;MyGraph&gt;
                {
                    [InjectDependency]
                    private IMyService MyService { get; set; }
             
                    public PXAction&lt;MyDAC&gt; MyButton;
                    [PXButton]
                    protected void myButton()
                    {
                        MyService.ProvideServiceFunctions();
                    }
              
                    // Other code of the graph
                }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.InjectDependencyOnTypeLevelAttribute">
            <exclude/>
            <summary>The attribute that is used in the attribute classes derived from <see cref="T:PX.Data.PXEventSubscriberAttribute" /> class to create the properties that need to be injected via
            dependency injection, but do not directly depend on <see cref="T:PX.Data.PXGraph" /> or <see cref="T:PX.Data.PXCache" /> instances used by the attribute class.</summary>
        </member>
        <member name="T:PX.Data.PXLookupButtonAttribute">
            <summary>Sets up a button with the properties of the lookup
            button.</summary>
            <example>
            <code>
            public PXAction&lt;APInvoice&gt; newVendor;
            
            [PXUIField(DisplayName = "New Vendor",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXLookupButton]
            public virtual IEnumerable NewVendor(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXLookupButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the image.
            </summary>
        </member>
        <member name="T:PX.Data.PXProcessButtonAttribute">
            <summary>Sets up a button with the properties of buttons that are used
            on processing screens.</summary>
            <example>
            <code>
            public PXAction&lt;APInvoice&gt; createSchedule;
            
            [PXUIField(DisplayName = "Assign to Schedule",
                       MapEnableRights = PXCacheRights.Update,
                       MapViewRights = PXCacheRights.Update)]
            [PXProcessButton(ImageKey = PX.Web.UI.Sprite.Main.Shedule)]
            public virtual IEnumerable CreateSchedule(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXProcessButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute and sets the <tt>CommitChanges</tt>
            property of the <tt>PXButton</tt> attribute to true.
            </summary>
        </member>
        <member name="T:PX.Data.PXSaveButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Save</b>
            button.</summary>
            <example>
            <code>
            public PXAction&lt;INPIHeader&gt; save;
            
            [PXSaveButton]
            protected virtual IEnumerable Save(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXSaveButtonAttribute.#ctor">
            <summary>
              <para>Creates an instance of the attribute and sets the following properties of the <tt>PXButton</tt> attribute:</para>
              <list type="bullet">
                <item><tt>CommitChanges</tt> to <tt>true</tt></item>
                <item>
                  <tt>SpecialType</tt> to <tt>PXSpecialButtonType.Save</tt></item>
                <item>
                  <i>Ctrl + S</i> as the keyboard shortcut</item>
              </list>
              <para>Also the constructor sets the image and the tooltip.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXSaveCloseButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Save and
            Close</b> button.</summary>
        </member>
        <member name="M:PX.Data.PXSaveCloseButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute. In addition to properties that
            are set by the base <see cref="T:PX.Data.PXSaveButtonAttribute">PXSaveButton</see>
            attribute, extends the keyboard shortcut with <i>Shift</i> ans sets the
            different tooltip.
            </summary>
        </member>
        <member name="T:PX.Data.PXInsertButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Add New
            Record</b> button.</summary>
            <example>
            <code>
            public PXAction&lt;INPIHeader&gt; Insert;
            
            [PXInsertButton]
            protected virtual IEnumerable insert(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXInsertButtonAttribute.#ctor">
            <summary>
            	<para>Creates an instance of the attribute, setting the properties of the <tt>PXButton</tt> attribute:</para>
            	<list type="bullet">
            		<item>PopupVisible to <tt>false</tt>;</item>
            		<item>
            			<i>Ctrl + -</i> as the keyboard shortcut.</item>
            	</list>
            	<para>Also sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXCancelButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Cancel</b>
            button.</summary>
            <example>
            <code>
            public PXAction&lt;CashAccount&gt; cancel;
            
            [PXUIField(DisplayName = ActionsMessages.Cancel, MapEnableRights = PXCacheRights.Select)]
            [PXCancelButton]
            protected virtual IEnumerable Cancel(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCancelButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the properties of the
            <tt>PXButton</tt> attribute: <tt>ClosePopup</tt> to <tt>false</tt>;
            <tt>SpecialType</tt> to <tt>PXSpecialButtonType.Cancel</tt>; <tt>ConfirmationType</tt> to
            <tt>PXConfirmationType.IfDirty</tt>; <i>Ctrl + -</i> as the keyboard shortcut.
            Also sets the image, the tooltip, and the confirmation message.
            </summary>
        </member>
        <member name="T:PX.Data.PXCancelCloseButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Cancel and
            Close</b> button.</summary>
        </member>
        <member name="M:PX.Data.PXCancelCloseButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute. In addition to properties
            that are set by the base <see cref="T:PX.Data.PXCancelButtonAttribute">PXCancelButton</see>
            attribute, sets the different image, tooltip and shortcut.
            </summary>
        </member>
        <member name="T:PX.Data.PXDeleteButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Delete</b>
            button.</summary>
            <example>
            <code>
            public PXAction&lt;CARecon&gt; delete;
            
            [PXDeleteButton]
            [PXUIField]
            protected virtual IEnumerable Delete(PXAdapter a) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDeleteButtonAttribute.#ctor">
            <summary>
            	<para>Creates an instance of the attribute and sets the following properties of the <tt>PXButton</tt> attribute:</para>
            	<list type="bullet">
            		<item><tt>ClosePopup</tt> to <tt>true</tt></item>
            		<item>
            			<tt>ConfirmationType</tt> to <tt>PXConfirmationType.Always</tt></item>
            		<item>
            			<i>Ctrl + .</i> as the keyboard shortcut</item>
            	</list>
            	<para>Also the constructor sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXFirstButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Go to First
            Record</b> button.</summary>
            <example>
            <code>
            public PXAction&lt;CuryRateFilter&gt; first;
            
            [PXFirstButton]
            [PXUIField]
            protected virtual IEnumerable First(PXAdapter a) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXFirstButtonAttribute.#ctor">
            <summary>
            	<para>Creates an instance of the attribute, setting the properties of the <tt>PXButton</tt> attribute:</para>
            	<list type="bullet">
            		<item>PopupVisible to <tt>false</tt>;</item>
            		<item>
            			<i>Ctrl + !</i> as the keyboard shortcut. A</item>
            	</list>
            	<para>Also sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXLastButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Go to Last
            Record</b> button.</summary>
            <example>
            <code>
            public PXAction&lt;AP1099YearMaster&gt; lastVendor;
            
            [PXUIField(DisplayName = "Last",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXLastButton]
            public virtual IEnumerable LastVendor(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXLastButtonAttribute.#ctor">
            <summary>
            	<para>Creates an instance of the attribute, setting the properties of the <tt>PXButton</tt> attribute:</para>
            	<list type="bullet">
            		<item>PopupVisible to <tt>false</tt>;</item>
            		<item>
            			<i>Ctrl + "</i> as the keyboard shortcut.</item>
            	</list>
            	<para>Also sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXPreviousButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Go to Previous
            Record</b> button.</summary>
            <example>
            <code>
            public PXAction&lt;APDocumentFilter&gt; previousPeriod;
            
            [PXUIField(DisplayName = "Prev",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXPreviousButton]
            public virtual IEnumerable PreviousPeriod(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXPreviousButtonAttribute.#ctor">
            <summary>
            	<para>Creates an instance of the attribute and sets the following properties of the <tt>PXButton</tt> attribute:</para>
            	<list type="bullet">
            		<item><tt>PopupVisible</tt> to <tt>false</tt></item>
            		<item>
            			<i>!</i> as the keyboard shortcut</item>
            	</list>
            	<para>Also sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXNextButtonAttribute">
            <summary>Sets up a button with the properties of the <b>Go to Next
            Record</b> button.</summary>
            <example>
            <code>
            public PXAction&lt;APDocumentFilter&gt; nextPeriod;
            
            [PXUIField(DisplayName = "Next",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXNextButton]
            public virtual IEnumerable NextPeriod(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXNextButtonAttribute.#ctor">
            <summary>
              <para>Creates an instance of the attribute and sets the following properties of the <tt>PXButton</tt> attribute:</para>
              <list type="bullet">
                <item>PopupVisible to <tt>false</tt></item>
                <item>
                  <i>"</i> as the keyboard shortcut</item>
              </list>
              <para>Also the constructor sets the image, the tooltip, and the confirmation message.</para>
            </summary>
        </member>
        <member name="T:PX.Data.PXSendMailButtonAttribute">
            <summary>Sets up a button with the properties of the button that sends
            an email.</summary>
            <example>
            <code>
            public PXAction&lt;EPActivity&gt; Send;
            
            [PXUIField(DisplayName = Messages.Send,
                       MapEnableRights = PXCacheRights.Select)]
            [PXSendMailButton]
            protected virtual IEnumerable send(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXSendMailButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the specific tooltip.
            </summary>
        </member>
        <member name="T:PX.Data.PXForwardMailButtonAttribute">
            <summary>Sets up a button with the properties of the button that
            forwards an email.</summary>
            <example>
            <code>
            public PXAction&lt;EmailFilter&gt; Forward;
            
            [PXUIField(DisplayName = Messages.Forward)]
            [PXForwardMailButton]
            protected void forward() { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXForwardMailButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the specific tooltip.
            </summary>
        </member>
        <member name="T:PX.Data.PXReplyMailButtonAttribute">
            <summary>Sets up a button with the properties of the button that
            replies to an email.</summary>
            <example>
            <code>
            public PXAction&lt;EmailFilter&gt; Reply;
            
            [PXUIField(DisplayName = Messages.Reply)]
            [PXReplyMailButton]
            protected void reply() { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXReplyMailButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the specific tooltip.
            </summary>
        </member>
        <member name="T:PX.Data.PXTemplateMailButtonAttribute">
            <summary>Sets up a button with the specific properties.</summary>
        </member>
        <member name="M:PX.Data.PXTemplateMailButtonAttribute.#ctor">
            <summary>
            Creates an instance of the attribute, setting the image and the tooltip.
            </summary>
        </member>
        <member name="T:PX.Data.PXEditDetailButtonAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonAttribute">
            <summary>Sets up a button that is used to initiate the action in the
            user interface.</summary>
            <remarks>
            	<para>This attribute should be placed on the declaration of the method
            that implements the action.</para>
            	<para>Through attribute's parameters, you can configure some
            properties of the button, such <tt>ImageUrl</tt>,
            <tt>ShortcutChar</tt>, and <tt>Tooltip</tt>. To configure other layout
            properties, such as <tt>DisplayName</tt>, <tt>Visible</tt>, or
            <tt>Enabled</tt>, use the <see cref="T:PX.Data.PXUIFieldAttribute">PXUIField</see>
            attribute. Still some other properties can be set only on an
            ASPX page.</para>
            	<para>A number of other attributes derive from the <tt>PXButton</tt>
            attributes. These attribute do not implement additional logic and only
            set certain properties to specific values.</para>
            </remarks>
            <example>
            	<code title="Example" description="An example of using the attribute without parameters is given below." lang="CS">
            // Action declaration in a graph
            public PXAction&lt;ApproveBillsFilter&gt; ViewDocument;
                    
            // Action implementation in a graph
            [PXUIField(DisplayName = "View Document",
                       MapEnableRights = PXCacheRights.Update,
                       MapViewRights = PXCacheRights.Update)]
            [PXButton]
            public virtual IEnumerable viewDocument(PXAdapter adapter) { ... }</code>
            	<code title="Example2" description="In the example below the button is disabled by default (it can be enabled in code). Also, the ImageKey property sets a specific image to be displayed on the button." groupname="Example" lang="CS">
            public PXAction&lt;VendorR&gt; viewCustomer;
             
            [PXUIField(DisplayName = Messages.ViewCustomer,
                       Enabled = false, Visible = true,
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXButton(ImageKey = PX.Web.UI.Sprite.Main.Process)]
            public virtual IEnumerable ViewCustomer(PXAdapter adapter) { ... }</code>
            	<code title="Example3" description="In the example below, the attribute provides specific URLs of the images displayed on the button by default (ImageUrl) when it is disabled (DisabledImageUrl). The tooltip is also set." groupname="Example2" lang="CS">
            public PXAction&lt;EPActivity&gt; CancelSending;
             
            [PXUIField(DisplayName = EP.Messages.CancelSending, MapEnableRights = PXCacheRights.Select)]
            [PXButton(ImageUrl = "~/Icons/Cancel_Active.gif",
                      DisabledImageUrl = "~/Icons/Cancel_NotActive.gif",
                      Tooltip = EP.Messages.CancelSendingTooltip)]
            public virtual void cancelSending() { ... }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXButtonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <tt>PXButton</tt> attribute.
            </summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ShortcutCtrl">
            <summary>Gets or sets the value that indicates whether the keyboard
            shortcut for the button includes the <i>Ctrl</i> key.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ShortcutShift">
            <summary>Gets or sets the value that indicates whether the keyboard
            shortcut for the button includes the <i>Shift</i> key.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.SpecialType">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXSpecialButtonType">PXSpecialButtonType</see>
            value that indicates whether a button has a special type, such as
            <tt>Save</tt>, <tt>Cancel</tt>, or <tt>Refresh</tt>, or does not have.
            A button of a special type may be searched, for instance, by graph
            methods in special occassions (the <tt>PressSave()</tt> method
            searches visible buttons of <tt>Save</tt> type and selects the first
            of them). By default, the property is set to
            <tt>PXSpecialButtonType.Default</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.OnClosingPopup">
            <summary>Gets or sets the special type of the button that will be
            triggerred on closing of an application webpage that is opened in
            popup mode.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ClosePopup">
            <summary>Gets or sets the value that indicates whether the enclosing
            popup is closed once the button logic is executed.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.PopupVisible">
            <summary>Gets or sets the value that indicates whether the button is
            visible when the enclosing webpage is opened in popup mode.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.CommitChanges">
            <summary>Gets or sets the value that indicates whether a button press
            posts modifications to the server.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ShortcutChar">
            <summary>Gets or sets the character that is used as the keyboard
            shorcut for the button. Setting additionally the <tt>ShortcutCtrl</tt>
            and <tt>ShortcutShift</tt> properties adds or removes <i>Ctrl</i> and
            <i>Shift</i> keys to and from the shortcut.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ImageSet">
            <summary>Gets or sets the value that identifies the image set. Forms
            the first part of the button image URL.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ImageKey">
            <summary>Gets or sets the value that identifies the button image
            within the set specified by <tt>ImageSet</tt>. Forms the second part
            of the button image URL.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ImageUrl">
            <summary>Gets or sets the URL of the image displayed on the button
            when it is enabled.</summary>
            <example>In the example below, the attribute provides specific URLs
            of the images displayed on the button by default (<tt>ImageUrl</tt>)
            and when it is disabled (<tt>DisabledImageUrl</tt>).
            <code>
            public PXAction&lt;EPActivity&gt; CancelSending;
            
            [PXUIField(DisplayName = EP.Messages.CancelSending, MapEnableRights = PXCacheRights.Select)]
            [PXButton(ImageUrl = "~/Icons/Cancel_Active.gif",
                      DisabledImageUrl = "~/Icons/Cancel_NotActive.gif",
                      Tooltip = EP.Messages.CancelSendingTooltip)]
            public virtual void cancelSending() { ... }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.DisabledImageUrl">
            <summary>Gets or sets the URL of the image displayed on the button
            when it is disabled.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.HoverImageUrl">
            <summary>Gets or sets the URL of the image displayed on the enabled
            button on hover.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.Tooltip">
            <summary>Gets or sets the string displayed as a tooltip for the
            button.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ConfirmationType">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXConfirmationType">PXConfirmationType</see> value
            that indicates in what cases the confirmation message is shown to a
            user on a button press. By default, the property is set to
            <tt>PXConfirmationType.Unspecified</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.ConfirmationMessage">
            <summary>Gets or sets the confirmation message that can be shown to a
            user on a button press. The cases when the configramtion message is
            shown depend on <tt>ConfirmationType</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.MenuAutoOpen">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that a button click
            only expands the menu with other buttons. </summary>
            <value>If the value is <tt>true</tt>, the button
            click opens the menu and does not trigger a button's action.</value>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.DisplayOnMainToolbar">
            <summary>Indicates whether the action is visible on the main toolbar.</summary>
            <remarks>The following values can be assigned:
            <ul><li><c>true</c>: Makes the action visible on the main toolbar</li>
            <li><c>false</c>: Makes the action invisible on the main toolbar</li></ul>
            If no value is assigned, the action is visible on the main toolbar if it has not been used on the screen.</remarks>
        </member>
        <member name="P:PX.Data.PXButtonAttribute.VisibleOnProcessingResults">
            <summary>
            Gets or sets the value that indicates (if set to <tt>true</tt>) that the button appears in the <b>Processing</b> dialog box of a processing page.
            </summary>
            <value>By default, the value is <tt>false</tt> (the button does not appear in the <b>Processing</b> dialog box).</value>
        </member>
        <member name="T:PX.Data.ButtonMenu">
            <summary>Sets up a button with the properties of the lookup
            button.</summary>
            <example>
            <code>
            public PXAction&lt;APInvoice&gt; newVendor;
            
            [PXUIField(DisplayName = "New Vendor",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXLookupButton]
            public virtual IEnumerable NewVendor(PXAdapter adapter) { ... }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXSaveClose`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSave`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSavePerRow`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSavePerRow`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSavePerRow`2.KeyInterceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSavePerRow`2.KeyInterceptor.bypassHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDelete`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDeleteNoClose`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXInsert`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFlag`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCancel`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCancel`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCancelClose`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXWarnCancel`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNavigationHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFirstLastBase`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFirst`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFirst`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFirstOrderBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLast`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLast`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLastOrderBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrevNextBase`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrevious`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrevious`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPreviousOrderBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNext`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNext`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNextOrderBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSaveCancel`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.IGetSubscriber">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXViewLogAction`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBAction`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNamedAction">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNamedAction`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMenuAction`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMenuInquiry`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMenuReport`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXChangeID`2">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXChangeID`2.SetDuplicateKeyMessage(System.String)">
            <summary>
            Sets error message text to be raised when specified key already exists
            </summary>
            <param name="messageTemplate">Error message template with {0} placeholder for the field value</param>
        </member>
        <member name="T:PX.Data.PXImmediatelyChangeID`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.ChangeIDParam">
            <exclude/>
        </member>
        <member name="T:PX.Data.ChangeIDParam.cD">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNavigateToList`1">
            <summary>
            Navigates from the entry screen to the corresponding list.
            </summary>
            <typeparam name="TNode">Row t ype of a primary view.</typeparam>
        </member>
        <member name="T:PX.Data.PXCancelCloseToList`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSaveCloseToList`1">
            <summary>
            Navigates from the entry screen to the corresponding list.
            </summary>
            <typeparam name="TNode">Row t ype of a primary view.</typeparam>
        </member>
        <member name="T:PX.Data.PXCancelDirtyKeys`1">
            <summary>
            Sets IsDirty to true if key fields have been changed (to enable Save button without changing non-key fields).
            </summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="T:PX.Data.PXConfirmationType">
            <summary>Defines values that indicate cases when the confirmation
            message is shown on a button press. The message box typically asks a
            user to confirm the action.</summary>
        </member>
        <member name="F:PX.Data.PXConfirmationType.Always">
            <summary>Always show the message box.</summary>
        </member>
        <member name="F:PX.Data.PXConfirmationType.IfDirty">
            <summary>Show the message box when there are unsaved changes on the
            webpage.</summary>
        </member>
        <member name="F:PX.Data.PXConfirmationType.Unspecified">
            <summary>Whether to show the message box is not specified.</summary>
        </member>
        <member name="T:PX.Data.PXMassActionAttribute">
            <summary>
            Specifies if action is availiable for the mass operations (e.g. Mass Actions in GI).
            </summary>
            <remarks>Marker attribute. Can be placed either on an action or on the action's delegate.</remarks>
        </member>
        <member name="T:PX.Data.ProcessingResult">
            <summary>
            The result of processing with statistics - a number of errors, warnings and successfully processed items.
            </summary>
        </member>
        <member name="T:PX.Data.ScheduleParam">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScheduleParam.showLog">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScheduleParam.scheduleID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScheduleParam.fromDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScheduleParam.toDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingMessage">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingMessage`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingMessagesCollection`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingMessagesCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingMessagesCollection.ItemBox">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingInfo`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXProcessingView">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXProcessing">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXProcessingWithCustomDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXProcessingWithOuterViewCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessing">
            <summary>A helper class that provides methods for processing pages.</summary>
        </member>
        <member name="M:PX.Data.PXProcessing.ProcessItemsParallel``2(System.Collections.Generic.List{``1},System.Action{``0,``1,System.Threading.CancellationToken},System.Func{``0},PX.Data.PXParallelProcessingOptions,System.Threading.CancellationToken)">
            <summary>Initiates parallel processing of the specified list of records with the specified parallel processing options.</summary>
            <param name="list">The list of records for parallel processing.</param>
            <param name="action">The action to be used for processing.</param>
            <param name="parallelOpt">The parallel processing options.</param>
            <remarks>This method allows you to use custom error-handling logic.
            <inheritdoc cref="T:PX.Data.PXParallelProcessingOptions" path="/remarks"/>
            </remarks>
            <returns>The method returns <see langword="true"></see> if there were errors during the execution.</returns>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError(System.Int32,System.String)">
            <summary>Sets the error message on the data record with the specified
            index.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError(System.String)">
            <summary>Sets the provided string as the error message of the
            processing operation.</summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError(System.Int32,System.Exception)">
            <summary>Sets the provided exception as the error on the data record
            with the specified index.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError(System.Exception)">
            <summary>Sets the provided exception as the error of the processing
            operation.</summary>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning(System.Int32,System.String)">
            <summary>Sets the warning message on the data record with the
            specified index.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning(System.String)">
            <summary>Sets the warning message for the processing
            operation.</summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the warning-level error to
            the data record with the specified index.</summary>
            <param name="index">The index of the data record to which the
            exception is attached.</param>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning(System.Exception)">
            <summary>Sets the provided exceptiona as the warning-level error of
            the processing operation.</summary>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo(System.Int32,System.String)">
            <summary>Attaches the provided information message to the data record
            with the specified index.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo(System.String)">
            <summary>Sets the information message for the processing
            operation.</summary>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the information-level
            error to the data record with the specified index.</summary>
            <param name="index">The index of the data record that is marked with
            the exception.</param>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo(System.Exception)">
            <summary>Sets the provided exception as the information-level error
            for the processing operation.</summary>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetProcessed">
            <summary>Sets the information message confirming that a data record
            has been processed successfully</summary>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError``1(System.Int32,System.String)">
            <summary>Sets the error message on the data record with the specified
            index and specified type.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError``1(System.String)">
            <summary>Sets the provided string as the error message of the
            processing operation for the specified type.</summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError``1(System.Int32,System.Exception)">
            <summary>Sets the provided exception as the error on the data record
            with the specified index and specified type.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetError``1(System.Exception)">
            <summary>Sets the provided exception as the error of the processing
            operation for the specified type.</summary>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning``1(System.Int32,System.String)">
            <summary>Sets the warning message on the data record with the
            specified index and specified type.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning``1(System.String)">
            <summary>Sets the warning message for the processing
            operation for the specified type.</summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning``1(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the warning-level error to
            the data record with the specified index and specified type.</summary>
            <param name="index">The index of the data record to which the
            exception is attached.</param>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetWarning``1(System.Exception)">
            <summary>Sets the provided exceptiona as the warning-level error of
            the processing operation for the specified type.</summary>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo``1(System.Int32,System.String)">
            <summary>Attaches the provided information message to the data record
            with the specified index and specified type.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo``1(System.String)">
            <summary>Sets the information message for the processing
            operation for the specified type.</summary>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo``1(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the information-level
            error to the data record with the specified index and specified type.</summary>
            <param name="index">The index of the data record that is marked with
            the exception.</param>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetInfo``1(System.Exception)">
            <summary>Sets the provided exception as the information-level error
            for the processing operation for the specified type.</summary>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing.SetProcessed``1">
            <summary>Sets the information message confirming that a data record for the specified type
            has been processed successfully</summary>
        </member>
        <member name="M:PX.Data.PXProcessing.SetCurrentItem(System.Object)">
            <summary>Sets the current data record to process.</summary>
            <param name="currentItem">The data record to be set as the
            current.</param>
        </member>
        <member name="T:PX.Data.PXAction">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXAction.MenuAutoOpen">
            <summary>Gets or sets the value that indicates whether a button press
            only expands the menu with other buttons. If <tt>true</tt>, the button
            press opens the menu and does not trigger button's action.</summary>
        </member>
        <member name="M:PX.Data.PXAction.SetVisible(System.Boolean)">
            <summary>
            Show/Hide Action Button on PXDataSource.
            </summary>
            <param name="isVisible"></param>
        </member>
        <member name="M:PX.Data.PXAction.SetMenu(PX.Data.ButtonMenu[])">
            <summary>
            Appends child menu items to Action Button on PXDataSource.
            When child menu item is clicked by user, the same action handler is executed with distinct PXAdapter.Menu parameter.
            </summary>
            <param name="menus"></param>
        </member>
        <member name="P:PX.Data.PXAction.IsMass">
            <summary>
            Specifies if action is availiable for the mass operations (e.g. Mass Actions in GI). False by default.
            </summary>
        </member>
        <member name="P:PX.Data.PXAction.HasAdapterSupport">
            <summary>
            Determines if action has full PXAdapter support.
            </summary>
            <remarks>
            This property is used in Mass Process (GI).
            </remarks>
        </member>
        <member name="E:PX.Data.PXAction.StateSelectingEvents">
            <exclude />
        </member>
        <member name="T:PX.Data.PXWorkflowAction`1">
            <summary>The class that is rendered as a button on the page datasource.</summary>
            <typeparam name="TNode">The action is executed when the primary view of the TNode type is selected.</typeparam>
        </member>
        <member name="E:PX.Data.PXAction`1.ButtonTogglingEvents">
            <exclude />
        </member>
        <member name="M:PX.Data.PXAction`1.InsertAndGet(PX.Data.PXAdapter)">
            <summary>
            Calls PXAction.Insert(adapter) and then returns result of the adapter.Get() call.
            </summary>
        </member>
        <member name="P:PX.Data.PXAction`1.IsMass">
            <summary>
            Specifies if action is availiable for the mass operations (e.g. Mass Actions in GI).
            </summary>
        </member>
        <member name="T:PX.Data.PXButtonState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXButtonState.PostDataMode">
            <summary>
            Defines identifiers for the callback post data mode.
            </summary>
        </member>
        <member name="F:PX.Data.PXButtonState.PostDataMode.Self">
            <summary>
            Control State only
            </summary>
        </member>
        <member name="F:PX.Data.PXButtonState.PostDataMode.Content">
            <summary>
            Content of contol that initiated callback
            </summary>
        </member>
        <member name="F:PX.Data.PXButtonState.PostDataMode.Container">
            <summary>
            Content of parent container for contol that initiated callback
            </summary>
        </member>
        <member name="F:PX.Data.PXButtonState.PostDataMode.Page">
            <summary>
            Entire Page content
            </summary>
        </member>
        <member name="T:PX.Data.PXFilter`1">
            <summary>A data view that is used to provide parameters for data selection on pages.</summary>
            <typeparam name="Table">The DAC that provides the filtering parameters.</typeparam>
            <remarks>
              <para>The data view of this type always returns one record that consists of the filtering parameters specified by the user in the UI. The <tt>PXFilter</tt> data
            view never requests data from the database.</para>
            </remarks>
            <example>
              <code title="Example" description="The following code shows the definition of the &lt;tt&gt;SalesOrderFilter&lt;/tt&gt; DAC and the &lt;tt&gt;Filter&lt;/tt&gt; data view that uses this DAC." lang="CS">
            [Serializable]
            public class SalesOrderFilter : IBqlTable
            {
              #region CustomerID
              public abstract class customerID : PX.Data.BQL.BqlInt.Field&lt;customerID&gt;
              {
              }
              [PXInt]
              [PXDefault]
              [PXUIField(DisplayName = "Customer ID")]
              [PXSelector(
              typeof(Customer.customerID),
              typeof(Customer.customerCD),
              typeof(Customer.companyName),
              SubstituteKey = typeof(Customer.customerCD))]
              public virtual int? CustomerID { get; set; }
              #endregion
              #region Status
              public abstract class status : PX.Data.BQL.BqlString.Field&lt;status&gt;
              {
              }
              [PXString(1, IsFixed = true)]
              [PXUIField(DisplayName = "Status")]
              [PXStringList(
              new string[]
              {
                OrderStatus.Open,
                OrderStatus.Hold,
                OrderStatus.Approved,
                OrderStatus.Completed
              },
              new string[]
              {
                OrderStatus.UI.Open,
                OrderStatus.UI.Hold,
                OrderStatus.UI.Approved,
                OrderStatus.UI.Completed
              })]
              public virtual string Status { get; set; }
              #endregion
            }
             
            public PXFilter&lt;SalesOrderFilter&gt; Filter;</code>
            </example>
        </member>
        <member name="M:PX.Data.PXFilter`1.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.Get">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.Reset">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.VerifyRequired">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.AskExtRequired(PX.Data.WebDialogResult,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.AskExtRequired(PX.Data.PXView.InitializePanel,PX.Data.WebDialogResult,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.AskExtRequired(PX.Data.PXView.InitializePanel,PX.Data.DialogAnswerType,System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.AskExtFullyValid(PX.Data.PXView.InitializePanel,PX.Data.DialogAnswerType,System.Boolean)">
            <summary>Displays the dialog box, which is configured by the <tt>PXSmartPanel</tt> control, compares the answer returned by the dialog box with the <tt>resultType</tt>
            parameter, and returns the Boolean result of comparison. The method can initialize the values in the dialog box.</summary>
            <param name="initializeHandler">A handler for initialization of the data for the dialog box.</param>
            <param name="resultType">The value that is compared with the answer returned by the dialog box.</param>
            <param name="reset">A value that indicates (if set to <tt>true</tt>) that the data of the dialog box must be cleared before the dialog box is displayed. By default, the value
            is <tt>true</tt>.</param>
            <returns>A Boolean result of comparison of the dialog box answer and <tt>resultType</tt>.</returns>
            <example>
              <code title="Example" description="The following example shows calling of the dialog box and processing of the returned result." lang="CS">
            [PXUIField(DisplayName = "Create Ledger", MapEnableRights = PXCacheRights.Update, MapViewRights = PXCacheRights.Update)]
            [PXButton]
            public virtual IEnumerable CreateLedger(PXAdapter adapter)
            {
                if (OrganizationView.Current == null) return adapter.Get();
             
                if (CreateLedgerView.AskExtFullyValid(
                    (graph, viewName) =&gt;
                    {
                        CreateLedgerView.Current.OrganizationID = OrganizationView.Current.OrganizationID;
                        CreateLedgerView.Current.Descr = String.Format(Messages.ActualLedgerDescription, OrganizationView.Current.OrganizationCD.Trim());
                    },
                    DialogAnswerType.Positive))
                {
                    Save.Press();
                    CreateLeadgerProc(CreateLedgerView.Current);
                    throw new PXRefreshException();
                }
             
                return adapter.Get();
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXFilter`1.AskExtFullyValid(PX.Data.DialogAnswerType,System.Boolean)">
            <summary>Displays the dialog box, which is configured by the <tt>PXSmartPanel</tt> control, compares the answer returned by the dialog box with the <tt>resultType</tt>
            parameter, and returns the Boolean result of comparison.</summary>
            <param name="reset">A value that indicates (if set to <tt>true</tt>) that the data of the dialog box must be cleared before the dialog box is displayed.</param>
            <param name="resultType">The value that is compared with the answer returned by the dialog box.</param>
            <returns>A Boolean result of comparison of the dialog box answer and <tt>resultType</tt>.</returns>
        </member>
        <member name="M:PX.Data.PXFilter`1.HasError``1">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.HasError(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.VerifyRequired(System.Boolean)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.VerifyFullyValid">
            <exclude />
        </member>
        <member name="M:PX.Data.PXFilter`1.VerifyFullyValid(System.Boolean)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXFilter`1.swfilterview">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFilteredProcessing`2">
            <summary>
            Selects data records from one table and applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessing`3">
            <summary>
            Selects data records from one table filtered by the expression
            set in Where and applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessingOrderBy`3">
            <summary>
            Selects data records from one table filtered by the expression
            set in Where and applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessing`4">
            <summary>
            Selects data records from one table filtered by the expression
            set in Where and ordered by the fields specified in OrderBy and
            applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessingJoin`3">
            <summary>
            Selects data records from multiple tables linked by the Join
            clause and applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessingJoin`4">
            <summary>
            Selects data records from multiple tables linked by the Join
            clause and filtered according to the expression set in Where
            and applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessingJoin`5">
            <summary>
            Selects data records from multiple tables linked by the Join
            clause, filtered according to the expression set in Where,
            and ordered by the fields specified in OrderBy and applies
            the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXFilteredProcessingJoinGroupBy`5">
            <summary>
            Selects aggregated data records from multiple tables linked
            by the Join clause, filtered according to the expression set
            in Where, and ordered by the fields specified in OrderBy and
            applies the user filter.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="FilterTable">The DAC of the filter for the data
            records.</typeparam>
            <typeparam name="Join"></typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"></typeparam>
        </member>
        <member name="M:PX.Data.PXFPopupProcessing`3.SetPopupCancelCaption(System.String)">
            <summary>Sets the display name of the button that abort process.</summary>
            <param name="caption">The string used as the display name.</param>
        </member>
        <member name="M:PX.Data.PXFPopupProcessing`3.SetPopupCancelTooltip(System.String)">
            <summary>Sets the tooltip for the button that abort process.</summary>
            <param name="tooltip">The string used as the tooltip.</param>
        </member>
        <member name="M:PX.Data.PXFPopupProcessing`3.SetPopupOkCaption(System.String)">
            <summary>Sets the display name of the button that closes process result.</summary>
            <param name="caption">The string used as the display name.</param>
        </member>
        <member name="M:PX.Data.PXFPopupProcessing`3.SetPopupOkTooltip(System.String)">
            <summary>Sets the tooltip for the button that closes process result.</summary>
            <param name="tooltip">The string used as the tooltip.</param>
        </member>
        <member name="T:PX.Data.PXProcessing`1">
            <summary>
            	<para>Defines a special data view used on processing webpages, which are intended for mass processing of data records.</para>
            	<para>The <tt>PXProcessing&lt;Table&gt;</tt> type is used to define the data view in a graph bound to a processing webpage. A data view of this type includes
            definitions of two actions, <tt>Process</tt> and <tt>ProcessAll</tt>, which are added to the graph and are used to invoke the processing. You should set the
            processing method by invoking one of the <tt>SetProcessDelegate</tt> methods in the constructor of the graph.</para>
            </summary>
            <example>
            The code below shows definition of the graph that contains the
            processing data view.
            <code title="" description="" lang="CS">
            public class ARPaymentsProcessing : PXGraph&lt;ARPaymentsProcessing&gt;
            {
            // Definition of the data view to process
            public PXProcessing&lt;ARPaymentInfo&gt; ARDocumentList;
            // The constructor of the graph
            public ARPaymentsAutoProcessing()
            {
            // Specifying the field to mark data records for processing
            ARDocumentList.SetSelected&lt;ARPaymentInfo.selected&gt;();
            // Setting the processing method
            ARDocumentList.SetProcessDelegate(Process);
            }
            // The processing method (must be static)
            public static void Process(List&lt;ARPaymentInfo&gt; products)
            {
            ...
            }
            ...
            }</code></example>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetError(System.Int32,System.String)">
            <summary>Sets the error message on the data record with the specified
            index and specified type.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetError(System.String)">
            <summary>Sets the provided string as the error message of the
            processing operation for the specified type.</summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetError(System.Int32,System.Exception)">
            <summary>Sets the provided exception as the error on the data record
            with the specified index and specified type.</summary>
            <param name="index">The index of the data record marked with
            error.</param>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetError(System.Exception)">
            <summary>Sets the provided exception as the error of the processing
            operation for the specified type.</summary>
            <param name="e">The exception containing information about the
            error.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetWarning(System.Int32,System.String)">
            <summary>Sets the warning message on the data record with the
            specified index and specified type.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetWarning(System.String)">
            <summary>Sets the warning message for the processing
            operation for the specified type.</summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetWarning(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the warning-level error to
            the data record with the specified index and specified type.</summary>
            <param name="index">The index of the data record to which the
            exception is attached.</param>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetWarning(System.Exception)">
            <summary>Sets the provided exceptiona as the warning-level error of
            the processing operation for the specified type.</summary>
            <param name="e">The exception containing warning information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetInfo(System.Int32,System.String)">
            <summary>Attaches the provided information message to the data record
            with the specified index and specified type.</summary>
            <param name="index">The index of the data record to which the message
            is attached.</param>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetInfo(System.String)">
            <summary>Sets the information message for the processing
            operation for the specified type.</summary>
            <param name="message">The information message.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetInfo(System.Int32,System.Exception)">
            <summary>Attaches the provided exception as the information-level
            error to the data record with the specified index and specified type.</summary>
            <param name="index">The index of the data record that is marked with
            the exception.</param>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetInfo(System.Exception)">
            <summary>Sets the provided exception as the information-level error
            for the processing operation for the specified type.</summary>
            <param name="e">The exception containing information.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessed">
            <summary>Sets the information message confirming that a data record for the specified type
            has been processed successfully</summary>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetCurrentItem(System.Object)">
            <summary>Sets the current data record to process.</summary>
            <param name="currentItem">The data record to be set as the
            current.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.TrySetRefIdGetter(System.Func{PX.Data.PXCache,System.Object,System.Nullable{System.Guid}},System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessCaption(System.String)">
            <summary>Sets the display name of the button that processes the
            selected data records.</summary>
            <param name="caption">The string used as the display name.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessTooltip(System.String)">
            <summary>Sets the tooltip for the button that processes the selected
            data records.</summary>
            <param name="tooltip">The string used as the tooltip.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllCaption(System.String)">
            <summary>Sets the display name of the button that processes all data
            records selected by the data view.</summary>
            <param name="caption">The string used as the display name.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllTooltip(System.String)">
            <summary>Sets the tooltip for the button that processes all data
            records selected by the data view.</summary>
            <param name="tooltip">The string used as the tooltip.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessEnabled(System.Boolean)">
            <summary>Enables or disables the button that processes the selected
            data records.</summary>
            <param name="enabled">The value indicating whether the button is
            enabled.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllEnabled(System.Boolean)">
            <summary>Enables or disables the button that processes all data
            records selected by the data view.</summary>
            <param name="enabled">The value indicating whether the button is
            enalbed.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessVisible(System.Boolean)">
            <summary>Displays or hides the button that processes the selected data
            records.</summary>
            <param name="visible">The value indicating whether the button is
            visible.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllVisible(System.Boolean)">
            <summary>Displays or hides the button that processes all data records
            selected by the data view.</summary>
            <param name="visible">The value indicating whether the button is
            visible.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessDisplayOnMainToolbar(System.Boolean)">
            <summary>Indicates whether the action, that processes the selected data
            records, is  visible on the main toolbar</summary>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllDisplayOnMainToolbar(System.Boolean)">
            <summary>Indicates whether the action, that processes all data records
            selected by the data view, is  visible on the main toolbar</summary>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessIsLockedOnToolbar(System.Boolean)">
            <summary>Indicates whether the action, that processes the selected data
            records, is  locked on the main toolbar</summary>
        </member>
        <member name="M:PX.Data.PXProcessing`1.SetProcessAllIsLockedOnToolbar(System.Boolean)">
            <summary>Indicates whether the action, that processes all data records
            selected by the data view, is  locked on the main toolbar</summary>
        </member>
        <member name="M:PX.Data.PXProcessing`1.#ctor(PX.Data.PXGraph)">
            <summary>Initializes a new instance of a data view bound to the
            specified graph.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
        </member>
        <member name="M:PX.Data.PXProcessing`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to
            the specified graph and uses the provided method to retrieve
            data.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
            <param name="handler">The delegate of the method that is used to
            retrieve the data from the database (or other source).</param>
        </member>
        <member name="T:PX.Data.PXProcessing`2">
            <summary>
            Selects data records from one table filtered by the expression set in Where.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessing`3">
            <summary>
            Selects data records from one table filtered by the expression set in
            Where and ordered by the fields specified in OrderBy.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessingJoin`2">
            <summary>
            Selects data records from multiple tables linked by the Join clause.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessingJoin`3">
            <summary>
            Selects data records from multiple tables linked by the Join
            clause and filtered according to the expression set in Where.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessingJoin`4">
            <summary>
            Selects data records from multiple tables linked by the Join
            clause, filtered according to the expression set in Where,
            and ordered by the fields specified in OrderBy.
            </summary>
            <seealso cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;Table&gt;</seealso>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">The JOIN clause.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1">
            <summary>A base class for processing data views.</summary>
            <typeparam name="Table">A DAC.</typeparam>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.ParametersDelegate">
            <summary>
            The delegate for processing a list of data records.
            </summary>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.ProcessListDelegate">
            <summary>
            The delegate for processing a list of data records.
            </summary>
            <param name="list">The data records to process.</param>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.ProcessItemDelegate">
            <summary>
            The delegate of the method for processing a single data record.
            </summary>
            <param name="item">The data record to process.</param>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.ProcessItemDelegate`1">
            <summary>
            The delegate of the method for processing a single data record.
            The delegate allows you to receive the same instance of the
            provided graph type to each invocation of the processing method
            during the processing operation.
            </summary>
            <typeparam name="Graph">The graph type.</typeparam>
            <param name="graph">The graph instance shared between invocations
            of the method for different data records.</param>
            <param name="item">The data record to process.</param>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.FinallyProcessDelegate`1">
            <summary>
            The delegate of the method that is executed after all data records
            are processed. In the parameter, the method receives the graph that
            was passed to each invocation of the data record processing method
            during the processing operation.
            </summary>
            <typeparam name="Graph">The graph type.</typeparam>
            <param name="graph">The graph instance passed to invocations of the
            <tt>ProcessItemDelegate&lt;Graph&gt;(Graph, Table)</tt> delegate.</param>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.ParametrizedView">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProcessingBase`1.OuterView">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to
            the specified graph and uses the provided method to retrieve
            data.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
            <param name="handler">The delegate of the method that is used to
            retrieve the data from the database (or other source).</param>
        </member>
        <member name="F:PX.Data.PXProcessingBase`1.ParallelProcessingOptions">
            <summary>The parallel processing options.</summary>
            <remarks>
              <para>You should not add multiple delegates that modify the <strong>ParallelProcessingOptions</strong> delegate field and rely on .Net delegates chaining because
            the logic of their addition and execution can be random.</para>
            </remarks>
            <inheritdoc cref="T:PX.Data.PXParallelProcessingOptions" path="/remarks,/example"/>
        </member>
        <member name="P:PX.Data.PXProcessingBase`1.CustomViewDelegate">
            <summary>Gets or sets the delegate of the method that retrieves the
            data (the optional method of the data view).</summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetAdditionalFilters(PX.Data.PXFilterRow[])">
            <summary>
            Sets some additional filters if needed to the base select
            </summary>
            <param name="addFilters"></param>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetAutoPersist(System.Boolean)">
            <summary>Sets the value that indicates whether the changes in the
            graph should be automatically saved in the database before the data
            records are processed. By default, the changes are not saved
            automatically.</summary>
            <param name="autoPersist">The value indicating whether to save the
            changes.</param>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetSelected``1">
            <summary>Sets the DAC field by which the user can mark data records
            that should be processed. The method enables this field and disabled
            all other fields.</summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetParametersDelegate(PX.Data.PXProcessingBase{`0}.ParametersDelegate)">
            <summary>Provides conditional running of the processing method. If the method set by <tt>SetParametersDelegate</tt> returns <tt>true</tt>, the system runs the
            processing method that is set in <tt>SetProcessDelegate</tt>.</summary>
            <param name="handler">The delegate of the processing method.</param>
            <example>
            	<code title="Example" description="" lang="CS">
            using System.Collections.Generic;
            using PX.Data;
            using PX.Objects.IN;
            namespace IntroAEF
            {
                public class INDocumentReleaseExtension : PXGraphExtension&lt;INDocumentRelease&gt;
                {
                    public override void Initialize()
                    {
                        Base.INDocumentList.SetProcessAllEnabled(false);
                        Base.INDocumentList.SetParametersDelegate(
                            delegate(List&lt;INRegister&gt; documents)
                            {
                                return Base.INDocumentList.Ask("IN Document Release", "Are you sure?", MessageButtons.YesNo) == WebDialogResult.Yes;
                            });
                        Base.INDocumentList.SetProcessDelegate(delegate(INRegister doc)
                        {
                            INDocumentRelease.ReleaseDoc(new List&lt;INRegister&gt;(){doc},true);
                        });
                    }
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.OrderByNew``1">
            <summary>Replaces the sorting expression in the underlying BQL
            command.</summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.Join``1">
            <summary>Appends the join clause to the underlying BQL
            command.</summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1._SelectRecords">
            <summary>
            Selects actual records from view.
            </summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1._PendingList(System.Object[],System.String[],System.Boolean[],PX.Data.PXFilterRow[])">
            <summary>
            Returns all records as pending records (sets to true 'Selected' property)
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.GetSelectedItems(PX.Data.PXCache,System.Collections.IEnumerable)">
            <summary>
            Iterates over items and returns only items with "Selected" field set to true.
            </summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.FillInProcWithSelectedItemsOfOuterView">
            <summary>
            Fills processing resultset with items of an outer view whose "Selected" field set to true.
            </summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.FillInProcWithProcessingList(System.Collections.IEnumerable)">
            <summary>
            Fills processing resultset with items of provided collection.
            </summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.TryGetCurrentItemIndex(System.Collections.IList,System.Int32@)">
            <summary>
            Tries to get an index of the current item of PXLongOperation in a provided list.
            </summary>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.ProcessSelectedItems(PX.Data.PXCache,System.Collections.IEnumerable,System.Action{`0})">
            <summary>
            Iterates over items and performs an action on items with "Selected" field set to true.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXProcessingBase`1.InvokeAutomationActionInternal(PX.Data.PXGraph,System.String,System.String,System.Collections.Generic.List{PX.Data.PXAutomation.Step},System.String,System.String,System.Object,System.Collections.IEnumerable,System.Threading.CancellationToken)" -->
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessWorkflowAction(System.String)">
            <summary>Sets the workflow action that is invoked to process multiple data records.</summary>
            <param name="action">The name of the action.</param>
            <remarks>We recommend that you use this method after the graph has been already initialized.
            For example, the method can be used in a RowSelected event handler.</remarks>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessWorkflowAction(System.String,System.Object[])">
            <summary>Sets the workflow action that is invoked to process multiple data records.</summary>
            <param name="actionName">The name of the graph action.</param>
            <param name="parameters">The array of values that is used in the processing action.</param>
            <remarks>We recommend that you use this method after the graph has been already initialized.
            For example, the method can be used in a RowSelected event handler.</remarks>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessWorkflowAction(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Sets the workflow action that is invoked to process multiple data records.</summary>
            <param name="actionName">The name of the graph action.</param>
            <param name="parameters">The key-value pairs of parameters and their values that are used in the processing action.</param>
            <remarks>We recommend that you use this method after the graph has been already initialized.
            For example, the method can be used in a RowSelected event handler.</remarks>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessWorkflowAction``1(System.String)">
            <summary>Sets the workflow action that is invoked to process multiple data records.</summary>
            <typeparam name="TGraph">The type of the graph.</typeparam>
            <param name="actionName">The name of the graph action.</param>
            <remarks>We recommend that you use this method after the graph has been already initialized.
            For example, the method can be used in a RowSelected event handler.</remarks>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessWorkflowAction``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction}})">
            <summary>Sets the workflow action that is invoked to process multiple data records.</summary>
            <typeparam name="TGraph">The type of the graph.</typeparam>
            <param name="actionSelector">A function expression that returns the graph action.</param>
            <remarks>We recommend that you use this method after the graph has been already initialized.
            For example, the method can be used in a RowSelected event handler.</remarks>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessDelegate(System.Action{System.Collections.Generic.List{`0},System.Threading.CancellationToken})">
            <summary>Sets the method that is invoked to process multiple data
            records.</summary>
            <param name="handler">The delegate of the processing method.</param>
            <remarks>The method receives the list of the data records to process in
            the parameter. Depending on the buttion the user clicked to start
            processing, the data records are either the data records selected by
            the user in the grid or all data records selected by the data view.</remarks>
            <example>
            	<code title="Example" description="The code below sets the processing method for a processing data view in a graph." lang="CS">
            // Definition of the processing data view
            public PXProcessingJoin&lt;BalancedAPDocument, ... &gt; APDocumentList;
            ...
            // The constructor of the graph
            public APDocumentRelease()
            {
                ...
                // Setting the delegate of a processing method and defining the
                // processing method in place
                APDocumentList.SetProcessDelegate(
                    delegate(List&lt;BalancedAPDocument&gt; list)
                    {
                        List&lt;APRegister&gt; newlist = new List&lt;APRegister&gt;(list.Count);
                        foreach (BalancedAPDocument doc in list)
                        {
                            newlist.Add(doc);
                        }
                        ReleaseDoc(newlist, true);
                    }
                );
            }
            // Definition of the method that does actual processing
            public static void ReleaseDoc(List&lt;APRegister&gt; list, bool isMassProcess)
            {
                ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessDelegate(System.Action{`0,System.Threading.CancellationToken})">
            <summary>Sets the method that is invoked to process each data
            record.</summary>
            <remarks>The method receives the data records to process in the
            parameter. Depending on the buttion the user clicked to start
            processing, the method is invoked for each data record selected by the
            user in the grid, or for each data record selected by the data view.</remarks>
            <param name="handler">The delegate of the processing method.</param>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessDelegate``1(System.Action{``0,`0,System.Threading.CancellationToken})">
            <summary>Sets the method that is invoked to process each data
            record.</summary>
            <param name="handler">The delegate of the processing method.</param>
            <remarks>The method should have two parameters, the graph and the data
            record. When the user initiates processing, the data view initializes
            the instance of the specified graph type and passes it to the
            processing method while it is invoked for each data record.</remarks>
            <example>
            	<code title="Example" description="The code below sets the processing method, which will process each data record, for a processing data view in a graph." lang="CS">
            // Definition of the processing data view
            public PXFilteredProcessing&lt;ARPaymentInfo&gt; ARDocumentList;
            ...
            ARDocumentList.SetProcessDelegate&lt;ARPaymentCCProcessing&gt;(
                delegate(ARPaymentCCProcessing aGraph,ARPaymentInfo doc)
                {
                    ProcessPayment(aGraph, doc);
                }
            );</code>
            </example>
        </member>
        <member name="M:PX.Data.PXProcessingBase`1.SetProcessDelegate``1(System.Action{``0,`0,System.Threading.CancellationToken},System.Action{``0,System.Threading.CancellationToken})">
            <summary>Sets the method that is invoked to process each data record
            and the method that is invoked after all data records are
            processed.</summary>
            <remarks>
            <para>The processing method should have two parameters, the graph and
            the data record. When the user initiates processing, the data view
            initializes the instance of the specified graph type and passes it to
            the processing method while it is invoked for each data record.</para>
            <para>The second method has the only parameter, the graph. This method
            is invoked once when all data record are processed. The parameter of
            the method is set to the graph that was passed to the processing
            method for each data record.</para>
            </remarks>
            <param name="handler">The delegate of the processing method.</param>
            <param name="handlerFinally">The delegate of the method invoked when
            all data records are processed.</param>
        </member>
        <member name="T:PX.Data.PXRecords`1">
            <summary>A data view that is used to store multiple unbound data records (never requests data from the database).</summary>
            <typeparam name="Table">The DAC that provides the unbound data records.</typeparam>
        </member>
        <member name="M:PX.Data.PXRecords`1.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXRecords`1.Get">
            <exclude />
        </member>
        <member name="T:PX.Data.IPXNonUpdateable">
            <summary>
            If a data view is marked with this interface, its primary table will not be persisted
            by a <see cref="T:PX.Data.PXGraph"/> instance where the data view is declared.
            </summary>
            <remarks>
            If a graph includes multiple data views with the same primary table,
            and at least one data view is not marked with this interface, the primary table is still persisted by the <see cref="T:PX.Data.PXGraph"/> instance.
            </remarks>
            <example>
            	<code lang="CS">
            public class PXSetup&lt;Table&gt; : PXSelectReadonly&lt;Table&gt;, IPXNonUpdateable
            	</code>
            </example>
        </member>
        <member name="T:PX.Data.PXSetup`1">
            <summary>
            A data view intended for retrieving configuration data from the table.<br/>
            If a record with the configuration data exists in the DB, it is available in the <see cref="P:PX.Data.PXSelectBase`1.Current">Current</see> property;
            otherwise, <see cref="T:PX.Data.PXSetupNotEnteredException"/> is thrown that typically leads to a redirect to the corresponding configuration form.
            </summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <exception cref="T:PX.Data.PXSetupNotEnteredException"><typeparamref name="Table"/> is empty (the record is <see langword="null"/>).</exception>
            <exception cref="T:PX.Data.PXNotEnoughRightsException">The current user does not have enough access rights for <typeparamref name="Table"/>.</exception>
            <exception cref="T:PX.Data.PXSetPropertyException">Validation failed.</exception>
        </member>
        <member name="T:PX.Data.PXSetup`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetup`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetup`2.Watcher">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetupSelect`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSetupFromOptions`1">
            <summary>
            A special kind of the <see cref="T:PX.Data.PXSetup`1"/> data view that retrieves its value not from the DB
            but from the <see href="https://docs.microsoft.com/en-us/dotnet/core/extensions/options">Microsoft.Extensions.Options</see>
            infrastructure (from <see cref="T:Microsoft.Extensions.Options.IOptionsSnapshot`1"/>).
            </summary>
            <remarks>Since it is a helper view that allows using values from the Options infrastructure in BQL,
            access rights for <typeparamref name="Table"/> are not verified.</remarks>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <exception cref="T:PX.Data.PXException"><typeparamref name="Table"/> is a DB-bound DAC.</exception>
            <seealso href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options"/>
        </member>
        <member name="T:PX.Data.PXPersistingCheck">
            <summary>Defines different ways the <tt>PXDefault</tt> attribute
            checks the field value before a data record with this field is saved
            to the database.</summary>
        </member>
        <member name="F:PX.Data.PXPersistingCheck.Null">
            <summary>Check that the field value is not <tt>null</tt>.</summary>
            <remarks>Note that the user interface (UI) trims string values, so for
            fields displayed in the UI, values containing only whitespace
            characters will also be rejected.</remarks>
        </member>
        <member name="F:PX.Data.PXPersistingCheck.NullOrBlank">
            <summary>Check that the field value is not <tt>null</tt> and is not a
            string that contains only whitespace characters.</summary>
        </member>
        <member name="F:PX.Data.PXPersistingCheck.Nothing">
            <summary>Do not check the field value.</summary>
        </member>
        <member name="T:PX.Data.PXLocalizableDefaultAttribute">
            <summary>Allows you to have a multi-language field with a default value in a specific language.</summary>
            <remarks>Use this attribute instead of the <tt>PXDefault</tt> attribute and specify in its second parameter either a BQL field or a BQL select that provides language
            selection.</remarks>
            <example>
            	<code title="Example" description="For example, in Acumatica ERP, the SOLine line description defaulted to the appropriate InventoryItem description based on the language that is set for a customer. The TransactionDesr field of the SOLine DAC has the PXLocalizableDefault attribute with a second parameter that specifies the language as follows: typeof(Customer.languageName). " lang="CS">
            PXLocalizableDefault(typeof(Search&lt;InventoryItem.descr,
               Where&lt;InventoryItem.inventoryID, 
               Equal&lt;Current&lt;SOLine.inventoryID&gt;&gt;&gt;&gt;),
               typeof(Customer.languageName), 
               PersistingCheck = PXPersistingCheck.Nothing)]</code>
            </example>
        </member>
        <member name="M:PX.Data.PXLocalizableDefaultAttribute.#ctor(System.Type,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLocalizableDefaultAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDefaultAttribute">
            <summary>Sets the default value for a DAC field.</summary>
            <remarks>
              <para>The <tt>PXDefault</tt> attribute provides the default value for a DAC field. The default value is assigned to the field when the cache raises the
            <tt>FiedlDefaulting</tt> event. This happens when the a new row is inserted in code or through the user interface.</para>
              <para>A value specified as default can be a constant or the result of a BQL query. If you provide a BQL query, the attribute will execute it on the
            <tt>FieldDefaulting</tt> event. You can specify both, in which case the attribute first executes the BQL query and uses the constant if the BQL query returns
            an empty set. If you provide a DAC field as the BQL query, the attribute takes the value of this field from the cache object's <tt>Current</tt> property. The
            attribute uses the cache object of the DAC type in which the field is defined.</para>
              <para>The <tt>PXDefault</tt> attribute also checks that the field value is not <tt>null</tt> before saving to the database. You can adjust this behavior using the
            <tt>PersistingCheck</tt> property. Its value indicates whether the attribute should check that the value is not <tt>null</tt>, check that the value is not
            <tt>null</tt> or a blank string, or not check.</para>
              <para>The attribute can redirect the error that happened on the field to another field if you set the <tt>MapErrorTo</tt> property.</para>
              <para>You can use the static methods to change the attribute properties for a particular data record in the cache or for all data record in the cache.</para>
            </remarks>
            <example>
            The attribute below sets a constant as the default value.
            <code title="" description="" lang="CS">
            [PXDefault(false)]
            public virtural bool? IsActive { get; set; }</code><code title="Example" description="The attribute below provides a string constants that is converted to the default value of the specific type." lang="CS">
            [PXDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? AdjDiscAmt { get; set; }</code><code title="Example2" description="The attribute below will take the default value from the &lt;tt&gt;ARPayment&lt;/tt&gt; cache object and won't check the field value on saving of the changes to the database." lang="CS">
            [PXDefault(typeof(ARPayment.adjDate),
                       PersistingCheck = PXPersistingCheck.Nothing)]
            public virtual DateTime? TillDate { get; set; }</code><code title="Example3" description="The attribute below only prevents the field from being null and does not set a default value." lang="CS">
            [PXDefault]
            public virtual string BAccountAcctCD { get; set; }</code><code title="Example4" description="The attribute below will execute the Search BQL query and take the &lt;tt&gt;CAEntryType.ReferenceID&lt;/tt&gt; field value from the result." lang="CS">
            [PXDefault(typeof(
                Search&lt;CAEntryType.referenceID,
                    Where&lt;CAEntryType.entryTypeId,
                        Equal&lt;Current&lt;AddTrxFilter.entryTypeID&gt;&gt;&gt;&gt;))]
            public virtual int? ReferenceID { get; set; }</code><code title="Example5" description="The attribute below will execute the &lt;tt&gt;Select&lt;/tt&gt; BQL query and take the &lt;tt&gt;VendorClass.AllowOverrideRate&lt;/tt&gt; field value from the result or will use &lt;tt&gt;false&lt;/tt&gt; as the default value if the BQL query returns an empty set." lang="CS">
            [PXDefault(
                false,
                typeof(
                    Select&lt;VendorClass,
                        Where&lt;VendorClass.vendorClassID,
                              Equal&lt;Current&lt;Vendor.vendorClassID&gt;&gt;&gt;&gt;),
                SourceField = typeof(VendorClass.allowOverrideRate))]
            public virtual Boolean? AllowOverrideRate { get; set; }</code><code title="Example6" description="The following example illustrates setting of a new default value to a field at run time." lang="CS">
            // The view declaration in a graph
            public PXSelect&lt;ARAdjust&gt; Adjustments;
            ...
            // The code executed in some graph method
            PXDefaultAttribute.SetDefault&lt;ARAdjust.adjdDocType&gt;(Adjustments.Cache, "CRM");</code><code title="Example7" description="The following code shows how to change the way the attribute checks the field value on saving of the changes to the database." lang="CS">
            protected virtual void ARPayment_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
            {
                ARPayment doc = e.Row as ARPayment;
                ...
                PXDefaultAttribute.SetPersistingCheck&lt;ARPayment.depositAfter&gt;(
                    cache, doc,
                    isPayment &amp;&amp; (doc.DepositAsBatch == true)?
                        PXPersistingCheck.NullOrBlank : PXPersistingCheck.Nothing);
                ...
            }</code></example>
        </member>
        <member name="P:PX.Data.PXDefaultAttribute.SearchOnDefault">
            <summary>Gets or sets the value that indicates whether the BQL query
            specified calculate the default value is executed or ignored. By
            default, is <tt>true</tt> (the BQL query is executed).</summary>
        </member>
        <member name="P:PX.Data.PXDefaultAttribute.PersistingCheck">
            <summary>Gets or sets the <see cref="T:PX.Data.PXPersistingCheck">PXPersistingCheck</see> value
            that defines how to check the field value for null before saving a
            data record to the database. If a value doesn't pass a check, the
            attribute will throw the <tt>PXRowPersistingException</tt> exception.
            As a result, the save action will fail and the user will get an error
            message.</summary>
            <remarks>By default, the property equals <tt>PXPersistingCheck.Null</tt>, which disallows null values. Note that for fields that are displayed in the user interface,
            this setting also disallows blank values (containing only whitespce characters).</remarks>
        </member>
        <member name="P:PX.Data.PXDefaultAttribute.MapErrorTo">
            <summary>Gets or sets the value that redirects the error from the
            field the attribute is placed on (source field) to another field. If
            an error happens on the source field, the error message will be
            displayed over the input control of the other field. The property can
            be set to a type derived from <tt>IBqlField</tt>. The BQL query is set
            in a constructor.</summary>
        </member>
        <member name="P:PX.Data.PXDefaultAttribute.Constant">
            <summary>Gets or sets a constant value that will be used as the
            default value.</summary>
        </member>
        <member name="P:PX.Data.PXDefaultAttribute.SourceField">
            <summary>Gets or sets the field whose value will be taken from the BQL query result and used as the default value. (The BQL query is set in a constructor.)</summary>
            <value>The property can be set to a type derived from <tt>IBqlField</tt>.</value>
            <example>
              <code title="Example" description="" lang="CS">
            [PXDefault(
                typeof(
                    Select&lt;VendorClass,
                        Where&lt;VendorClass.vendorClassID,
                              Equal&lt;Current&lt;Vendor.vendorClassID&gt;&gt;&gt;&gt;),
                SourceField = typeof(VendorClass.allowOverrideRate))]
            public virtual Boolean? AllowOverrideRate { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance that calculates the default value
            using the provided BQL query.</summary>
            <param name="sourceType">The BQL query that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
            <example>
            The attribute below will take the default value from the <tt>ARPayment</tt>
            cache object and won't check the field value on saving of the changes to
            the database. In the second example, the attribute executes the <tt>Search</tt>
            BQL query and takes the <tt>CAEntryType.ReferenceID</tt> value from the result.
            <code>
            [PXDefault(typeof(ARPayment.adjDate),
                       PersistingCheck = PXPersistingCheck.Nothing)]
            public virtual DateTime? TillDate { get; set; }
            </code>
            <code>
            [PXDefault(typeof(
                Search&lt;CAEntryType.referenceID,
                    Where&lt;CAEntryType.entryTypeId,
                        Equal&lt;Current&lt;AddTrxFilter.entryTypeID&gt;&gt;&gt;&gt;))]
            public virtual int? ReferenceID { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor(System.Object)">
            <summary>Initializes a new instance that defines the default value as
            a constant value.</summary>
            <param name="constant">Constant value that is used as the default
            value.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor(System.Object,System.Type)">
            <summary>Initializes a new instance that calculates the default value
            using the provided BQL query and uses the constant value if the BQL
            query returns nothing. If the BQL query is of <tt>Select</tt> type,
            you should also explicitly set the <tt>SourceField</tt> property. If
            the BQL query is a DAC field, the attribute will take the value from
            the <tt>Current</tt> property of the cache object corresponding to the
            DAC.</summary>
            <param name="constant">Constant value that is used as the default
            value.</param>
            <param name="sourceType">The BQL query that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
            <example>
            The attribute below will execute the <tt>Select</tt> BQL query and take the
            <tt>VendorClass.AllowOverrideRate</tt> field value from the result or will use
            <tt>false</tt> as the default value if the BQL query returns an empty set.
            <code>
            [PXDefault(
                false,
                typeof(
                    Select&lt;VendorClass,
                        Where&lt;VendorClass.vendorClassID,
                              Equal&lt;Current&lt;Vendor.vendorClassID&gt;&gt;&gt;&gt;),
                SourceField = typeof(VendorClass.allowOverrideRate))]
            public virtual Boolean? AllowOverrideRate { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor">
            <summary>Initializes a new instance that does not provide the default
            value, but checks whether the field value is not null before saving to
            the database.</summary>
            <example>
            The attribute below only prevents the field from being null and does
            not set a default value.
            <code>
            [PXDefault]
            public virtual string BAccountAcctCD { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor(System.TypeCode,System.String)">
            <summary>Converts the provided string to a specific type and
            Initializes a new instance that uses the conversion result as the
            default value.</summary>
            <param name="converter">The type code that specifies the type to
            covert the string to.</param>
            <param name="constant">The string representation of the constant used
            as the default value.</param>
            <example>
            The attribute below provides a string constants that is converted to
            the default value of the specific type.
            <code>
            [PXDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? AdjDiscAmt { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.#ctor(System.TypeCode,System.String,System.Type)">
            <summary>Initializes a new instance that determines the default value
            using either the provided BQL query or the constant if the BQL query
            returns nothing.</summary>
            <param name="converter">The type code that specifies the type to
            convert the string constant to.</param>
            <param name="constant">The string representation of the constant used
            as the default value if the BQL query returns nothing.</param>
            <param name="sourceType">The BQL command that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetDefault(PX.Data.PXCache,System.Object,System.String,System.Object)">
            <summary>Sets the new default value of the field with the specified
            name for a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="field">The name of the field to set the default value
            to.</param>
            <param name="def">The new default value.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetDefault(PX.Data.PXCache,System.String,System.Object)">
            <summary>Sets the new default value of the field with the specified
            name for all data records in the cache.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="field">The name of the field to set the default value
            to.</param>
            <param name="def">The new default value.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetDefault``1(PX.Data.PXCache,System.Object,System.Object)">
            <summary>Sets the new default value of the specified field for a
            particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="def">The new default value.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetPersistingCheck``1(PX.Data.PXCache,System.Object,PX.Data.PXPersistingCheck)">
            <summary>Sets the <tt>PersistingCheck</tt> property for the specifed
            field in a particular data record.</summary>
            <typeparam name="Field">The field whose attribute is affected.</typeparam>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="check">The value that is set to the property.</param>
            <example>
            The code below changes the way the attribute checks the field value
            on saving of the changes to the database.
            <code>
            protected virtual void ARPayment_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
            {
                ARPayment doc = e.Row as ARPayment;
                ...
                PXDefaultAttribute.SetPersistingCheck&lt;ARPayment.depositAfter&gt;(
                    cache, doc,
                    isPayment &amp;&amp; (doc.DepositAsBatch == true)?
                        PXPersistingCheck.NullOrBlank : PXPersistingCheck.Nothing);
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetPersistingCheck(PX.Data.PXCache,System.String,System.Object,PX.Data.PXPersistingCheck)">
            <summary>Sets the <tt>PersistingCheck</tt> property for the field with
            the specified name in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="field">The field name.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="check">The value that is set to the property.</param>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.SetDefault``1(PX.Data.PXCache,System.Object)">
            <summary>Sets the new default value of the specified field for all
            data records in the cache.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDefault</tt> type.</param>
            <param name="def">The new default value.</param>
            <example>
            The code below sets a new default value to a field at run time.
            <code>
            // The view declaration in a graph
            public PXSelect&lt;ARAdjust&gt; Adjustments;
            ...
            // The code executed in some graph method
            PXDefaultAttribute.SetDefault&lt;ARAdjust.adjdDocType&gt;(Adjustments.Cache, "CRM");
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.Select(PX.Data.PXCache,PX.Data.PXDefaultAttribute,System.Object)">
            <exclude/>
            
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <summary>
            Provides the default value
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to set the NewValue</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <summary>
            Check if the value was set before saving the record to the database
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to retrive the value from the Row</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDefaultAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <summary>
            Provides the default value as a part of the field state
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to set the ReturnState</param>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUnboundDefaultAttribute">
            <summary>Sets the default value to an unbound DAC field. The value is
            assigned to the field when the data record is retrieved from the
            database.</summary>
            <remarks>This attributes is similar to the <tt>PXDefault</tt> attribute,
            but, unlike the <tt>PXDefault</tt> attribute, it assigns the provided
            default value to the field when a data record is retrieved from the
            database (on the <tt>RowSelecting</tt> event). The <tt>PXDefault</tt>
            attribute assigns the default value to the field when a data record is
            inserted to the cache object.</remarks>
            <example>
            The examples below show the definitions of two DAC fields.
            <code>
            [PXDecimal(4)]
            [PXUnboundDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? DocBal { get; set; }
            </code>
            <code>
            [PXBool]
            [PXUnboundDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
            [PXUIField(DisplayName = "Included")]
            public virtual bool? Included { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance that calculates the default value
            using the provided BQL query.</summary>
            <param name="sourceType">The BQL query that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor(System.Object)">
            <summary>Initializes a new instance that defines the default value as
            a constant value.</summary>
            <param name="constant">Constant value that is used as the default
            value.</param>
            <example>
            <code>
            [PXBool]
            [PXUnboundDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
            [PXUIField(DisplayName = "Included")]
            public virtual bool? Included { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor(System.Object,System.Type)">
            <summary>Initializes a new instance that calculates the default value
            using the provided BQL query and uses the constant value if the BQL
            query returns nothing. If the BQL query is of <tt>Select</tt> type,
            you should also explicitly set the <tt>SourceField</tt> property. If
            the BQL query is a DAC field, the attribute will take the value from
            the <tt>Current</tt> property of the cache object corresponding to the
            DAC.</summary>
            <param name="constant">Constant value that is used as the default
            value.</param>
            <param name="sourceType">The BQL query that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor">
            <summary>Initializes a new instance that does not provide the default
            value, but checks whether the field value is not null before saving to
            the database.</summary>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor(System.TypeCode,System.String)">
            <summary>Converts the provided string to a specific type and
            initializes a new instance that uses the conversion result as the
            default value.</summary>
            <param name="converter">The type code that specifies the type to
            covert the string to..</param>
            <param name="constant">The string representation of the constant used
            as the default value.</param>
            <example>
            <code>
            [PXDecimal(4)]
            [PXUnboundDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? DocBal { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.#ctor(System.TypeCode,System.String,System.Type)">
            <summary>Initializes a new instance that determines the default value
            using either the provided BQL query or the constant if the BQL query
            returns nothing.</summary>
            <param name="converter">The type code that specifies the type to
            convert the string constant to.</param>
            <param name="constant">The string representation of the constant used
            as the default value if the BQL query returns nothing.</param>
            <param name="sourceType">The BQL command that is used to calculate the
            default value. Accepts the types derived from: <tt>IBqlSearch</tt>,
            <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXUnboundDefaultAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <summary>
            Provides the default value
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments with a row reading</param>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionAttribute">
            <summary>Not used.</summary>
        </member>
        <member name="M:PX.Data.PXExtensionAttribute.#ctor(System.Type)">
            <summary>
            Creates an extension
            </summary>
            <param name="type">Referenced table. Should be either IBqlField or IBqlSearch</param>
        </member>
        <member name="T:PX.Data.PXVirtualSelectorAttribute">
            <summary>Suppress GUI selector, used in formula.</summary>
        </member>
        <member name="M:PX.Data.PXVirtualSelectorAttribute.#ctor(System.Type)">
            <summary>
            Creates an virtual selector
            </summary>
            <param name="type">Referenced table. Should be either IBqlField or IBqlSearch</param>
        </member>
        <member name="T:PX.Data.PXParentAttribute">
            <summary>Creates a reference to the parent record, establishing a parent-child relationship between two tables.</summary>
            <remarks>
            	<para>You can place the attribute on any field of the child DAC. The
            primary goal of the attribute is to perform cascade deletion of the
            child data records once a parent data record is deleted.</para>
            	<para>The parent data record is defined by a BQL query of
            <tt>Select&lt;&gt;</tt> type. Typically, the query includes a
            <tt>Where</tt> clause that adds conditions for the parent's key fields
            to equal child's key fields. In this case, the values of child data
            record key fields are specified using the <tt>Current</tt> parameter.
            The business logic controller that provides the interface for working
            with these parent and child data records should define a view
            selecting parent data records and a view selecting child data records.
            These views will againg be connected using the <tt>Current</tt>
            parameter.</para>
            	<para>You can use the static methods to retrieve a particular parent
            data record or child data records, or get and set some attribute
            parameters.</para>
            	<para>Once the <tt>PXParent</tt> attribute is added to some DAC field,
            you can use the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see>
            attribute to define set calculations for parent data record fields
            from child data record fields.</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute below specifies a query for selecting the parent Document data record for a given child DocTransaction data record." lang="CS">
            [PXParent(typeof(
                Select&lt;Document,
                    Where&lt;Document.docNbr, Equal&lt;Current&lt;DocTransaction.docNbr&gt;&gt;,
                        And&lt;Document.docType, Equal&lt;Current&lt;DocTransaction.docType&gt;&gt;&gt;&gt;&gt;))]
            public virtual string DocNbr { get; set; }</code>
            	<code title="Example2" description="Another example is given below." groupname="Example" lang="CS">
            [PXParent(typeof(
                Select&lt;ARTran,
                    Where&lt;ARTran.tranType, Equal&lt;Current&lt;ARFinChargeTran.tranType&gt;&gt;,
                        And&lt;ARTran.refNbr, Equal&lt;Current&lt;ARFinChargeTran.refNbr&gt;&gt;,
                        And&lt;ARTran.lineNbr, Equal&lt;Current&lt;ARFinChargeTran.lineNbr&gt;&gt;&gt;&gt;&gt;&gt;))]
            public virtual short? LineNbr { get; set; }</code>
            	<code title="Example3" description="The following code obtains the parent data record at run time." groupname="Example2" lang="CS">
            CR.Location child = (CR.Location)e.Row;
            BAccount parent =
                (BAccount)PXParentAttribute.SelectParent(sender, child, typeof(BAccount));</code>
            	<code title="Example4" description="The following example sets the parent data record at run time." groupname="Example3" lang="CS">
            // Views definitions in a graph
            public PXSelect&lt;INRegister&gt; inregister;
            public PXSelect&lt;INTran&gt; intranselect;
            ...
            // Code executed in some graph method
            INTran tran = (INTran)res;
            PXParentAttribute.SetParent(
                intranselect.Cache, tran, typeof(INRegister), inregister.Current);</code>
            </example>
        </member>
        <member name="P:PX.Data.PXParentAttribute.ParentCreate">
            <summary>Gets or sets the value that permits or forbids creation of
            the parent through the <see
            cref="M:PX.Data.PXParentAttribute.CreateParent(PX.Data.PXCache,System.Object,System.Type)">CreateParent(PXCache, object,
            Type)</see> method. In particular, the <tt>PXFormula</tt> attribute
            tries to create a parent data record if it doesn't exist, by invoking
            this method. By default, the property equals <tt>false</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXParentAttribute.LeaveChildren">
            <summary>Gets or sets the value that indicates whether the child data
            records are left or deleted on parent data record deletion. By
            default, the property equals <tt>false</tt>, which means that child
            data records are deleted.</summary>
        </member>
        <member name="P:PX.Data.PXParentAttribute.ParentType">
            <summary>Gets the DAC type of the parent data record. The type is
            determined in the constructor as the first table referenced in the
            <tt>Select</tt> query.</summary>
        </member>
        <member name="M:PX.Data.PXParentAttribute.GetParentCreate(PX.Data.PXCache,System.Type)">
            <summary>Returns the value of the <tt>ParentCreate</tt> property from
            the attribute instance that references the provided parent type or a
            type derived from it.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.CreateParent(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Creates the parent for the provided child data record for the
            attribute instance that references the provided parent type or a type
            derived from it. Does nothing if <tt>ParentCreate</tt> equals
            <tt>false</tt> in this attribute instance. If the parent is created,
            it is inserted into the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record for which the parent is
            created.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.LocateParent(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Locates the parent for the provided child data record for the
            attribute instance that references the provided parent type or a type
            derived from it.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record for which the parent is
            created.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SetLeaveChildren``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables cascade deletion of child data records
            for the attribute instance in a paricular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isLeaveChildren">The new value for the
            <tt>LeaveChildren</tt> property. If <tt>true</tt>, enables cascade
            deletion. Otherwise, disables it.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SetLeaveChildren(PX.Data.PXCache,System.Boolean,System.Type)">
            <summary>Enables or disables cascade deletion of child data records
            for the attribute instance.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="isLeaveChildren">The new value for the
            <tt>LeaveChildren</tt> property. If <tt>true</tt>, enables cascade
            deletion. Otherwise, disables it.</param>
            <param name="parentType">The parent type to search for the attribues.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.GetParentSelect(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.GetChildrenSelect(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.GetChildrenSelect(PX.Data.PXCache,System.Boolean)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXParentAttribute.UseCurrent">
            <summary>Gets or sets the value that indicates at run time whether to
            take the parent data record from the <tt>Current</tt> property or
            retrieve it from the database. In both cases the attribute uses the
            view corresponding to the <tt>Select</tt> query provided in the
            constructor.</summary>
        </member>
        <member name="M:PX.Data.PXParentAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance that defines the parent data record using the
            provided BQL query. To provide parameters to the BQL query, use <tt>Current</tt>
            to pass the values from the child data record that is <tt>Current</tt> for the
            cache object.
            </summary>
            <param name="selectParent">The BQL query that selects the parent record. Should be
            based on a class derived from <tt>IBqlSelect</tt>, such as <tt>Select&lt;&gt;</tt>.</param>
            <example>
            <code>
            [PXParent(typeof(
                Select&lt;ARTran,
                    Where&lt;ARTran.tranType, Equal&lt;Current&lt;ARFinChargeTran.tranType&gt;&gt;,
                        And&lt;ARTran.refNbr, Equal&lt;Current&lt;ARFinChargeTran.refNbr&gt;&gt;,
                        And&lt;ARTran.lineNbr, Equal&lt;Current&lt;ARFinChargeTran.lineNbr&gt;&gt;&gt;&gt;&gt;&gt;))]
            public virtual short? LineNbr { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.CheckThatConditionsAreParametrized">
            <example>
            <code title="Invalid example">
            [PXParent(typeof(Select&lt;ParentDAC, Where&lt;DAC.field, Equal&lt;DAC.field&gt;&gt;&gt;))]
            </code>
            <code title="Valid example">
            [PXParent(typeof(Select&lt;ParentDAC, Where&lt;DAC.field, Equal&lt;Current&lt;DAC.field&gt;&gt;&gt;&gt;))]
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.CheckThatThereAreNoBqlFieldsFromTheBaseType">
            <example>
            <code>
            class BaseDAC : IBqlTable { public abstract class field : IBqlField }
            class DAC : BaseDAC { }
            ...
            [PXParent(typeof(Select&lt;ParentDAC, Where&lt;ParentDAC.field, Equal&lt;Current&lt;DAC.field&gt;&gt;&gt;&gt;)]
            // DAC.field must be re-declared in the "DAC" class
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.CheckThatThereAreNoUnrelatedTablesInTheParentSelect">
            <example>
            <code>
            class A : IBqlTable
            {
                [PXParent(typeof(Select&lt;B, Where&lt;A.field, Equal&lt;Current&lt;C.field&gt;&gt;&gt;&gt;))]
                // C is neither the child nor the parent table
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.RowInserted(PX.Data.PXCache,PX.Data.PXRowInsertedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelfRowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.RowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelectSiblings(PX.Data.PXCache,System.Object)">
            <summary>Returns the child data records that have the same parent as
            the provided child data record. Returns an array of zero length if
            fails to retrieve the parent. Uses the first attribute instance found
            in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record for which the data records
            having the same parent are retrieved.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelectSiblings(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Returns the child data records that have the same parent as
            the provided child data record. Returns an array of zero length if
            fails to retrieve the parent. Uses the first attribute instance that
            references the provided parent type or a type derived from
            it.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record for which the data records
            having the same parent are retrieved.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelectChildren(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Returns child data records of the specified parent record.</summary>
            <param name="ParentType">The DAC that is used to access the parent record.</param>
            <param name="cache">The cache object.</param>
            <param name="parent">A parent data record.</param>
            <example>
            	<code title="Example2" description="In the example below you iterate through child data records whose parent type is SOLine. Then you validate required conditions and call the SetValueExt method to set the value for the SOLine.shipComplete field." groupname="Example" lang="CS">
            foreach (SOLineSplit split in PXParentAttribute.SelectChildren(splits.Cache, e.Row, typeof(SOLine)))
            {
                if (split.ShipmentNbr != null || split.ShippedQty &gt; 0m)
                    sender.SetValueExt&lt;SOLine.shipComplete&gt;(e.Row, SOShipComplete.BackOrderAllowed);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.GetParentType(PX.Data.PXCache)">
            <summary>Returns the parent type of the first attribute instance found
            in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SetParent(PX.Data.PXCache,System.Object,System.Type,System.Object)">
            <summary>Sets the provided data record of parent type as the parent of
            the child data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record for which the parent data
            record is set. Must not be <tt>null</tt>.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
            <param name="parent">The new parent data record.</param>
            <example>
            The code below sets the parent data record at run time.
            <code>
            // Views definitions in a graph
            public PXSelect&lt;INRegister&gt; inregister;
            public PXSelect&lt;INTran&gt; intranselect;
            ...
            // Code executed in some graph method
            INTran tran = (INTran)res;
            PXParentAttribute.SetParent(
                intranselect.Cache, tran, typeof(INRegister), inregister.Current);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.CopyParent(PX.Data.PXCache,System.Object,System.Object,System.Type)">
            <summary>Makes the parent of the provided data record be the parent of
            the other provided data record. Uses the first attribute instance that
            references the provided parent type or a type derived from
            it.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="item">The child data record whose parent data record is
            made the parent of another data record.</param>
            <param name="copy">The data record that becomes the child of the
            provided data record's parent.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelectParent(PX.Data.PXCache,System.Object)">
            <summary>Returns the parent data record of the provided child data
            record. Uses the first attribute instance found in the cache
            object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record whose parent data record is
            retireved.</param>
        </member>
        <member name="M:PX.Data.PXParentAttribute.SelectParent(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Returns the parent data record of the provided child data
            record. Uses the first attribute instance that references the provided
            parent type or a type derived from it.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXParent</tt> type.</param>
            <param name="row">The child data record whose parent data record is
            retireved.</param>
            <param name="ParentType">The DAC type of the parent data
            record.</param>
            <example>
            The code below obtains the parent data record at run time.
            <code>
            CR.Location child = (CR.Location)e.Row;
            BAccount parent =
                (BAccount)PXParentAttribute.SelectParent(sender, child, typeof(BAccount));
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXParentAttribute.Inverse(System.Type,System.Type,System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXParentAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXParentAttribute.ParentCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXParentAttribute.PendingCollection`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXParentAttribute.CurrentCollection`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUIFieldAttribute">
            <summary>Configures the properties of the input control representing a DAC field in the user interface, or the button representing an action. The attribute is mandatory
            for all DAC fields that are displayed in the user interface.</summary>
            <remarks>
              <para>You can use the static methods (such as <tt>SetEnabeled</tt>, <tt>SetRequired</tt>) to set the properties of the attribute at run time. The
            <tt>PXUIFieldAttribute</tt> static methods can be called either in the business logic container constructor or the <tt>RowSelected</tt> event handlers.</para>
              <para>If you want to modify the <tt>Visible</tt>, <tt>Enabled</tt>, and <tt>Required</tt> properties for all detail rows in a grid, you use the
            <tt>RowSelected</tt> event handler of the primary view DAC. If you wan to set the Enabled property of a field in particular row in a grid, you use the
            <tt>RowSelected</tt> event handler of the DAC that includes this field.</para>
              <para>If the grid column layout is configured at run time, you set the <tt>data</tt> parameter of the corresponding method to <tt>null</tt>. This indicates that
            the property should be set for all data records shown in the grid. If a specific data record is passed to the method rather than <tt>null</tt>, the method
            invocation has no effect.</para>
              <para>If you want to change the <tt>Visible</tt> or <tt>Enabled</tt> property of <tt>PXUIFieldAttribute</tt> for a button at run time, you use the corresponding
            static methods of <tt>PXAction</tt>. You usually use these methods in the <tt>RowSelected</tt> event handler of the primary view DAC.</para>
            </remarks>
            <example>
              <code title="Example1" description="The code below shows configuration of the input control for a DAC field." lang="CS">
            [PXDBDecimal(2)]
            [PXUIField(DisplayName = "Documents Total",
                       Visibility = PXUIVisibility.SelectorVisible,
                       Enabled = false)]
            public virtual decimal? CuryDocsTotal { get; set; }</code>
              <code title="Example2" description="The example below shows how to change layout configuration at run time. Note in the &lt;tt&gt;SetEnabled&lt;/tt&gt; method, the first parameter is set to the cache variable. This is a &lt;tt&gt;PXCache&lt;/tt&gt; object keeping &lt;tt&gt;APInvoice&lt;/tt&gt; data records. The second parameter is set to such a data record obtained from &lt;tt&gt;e.Row&lt;/tt&gt;.&#xD;&#xA;On the other hand, the &lt;tt&gt;SetVisible&lt;/tt&gt; method is called for the &lt;tt&gt;APTran&lt;/tt&gt; DAC field, and therefore a different cache object should be passed to the method. The appropriate cache is specified using the &lt;tt&gt;Cache&lt;/tt&gt; property of the &lt;tt&gt;Transactions&lt;/tt&gt; view." lang="CS">
            protected virtual void APInvoice_RowSelected(PXCache cache,
                                                         PXRowSelectedEventArgs)
            {
                APInvoice doc = e.Row as APInvoice;
            
                // Disable the field input control
                PXUIFieldAttribute.SetEnabled&lt;APInvoice.taxZoneID&gt;(
                    cache, doc, false);
            
                // Showing or hiding a 'required' mark beside a field input control
                PXUIFieldAttribute.SetRequired&lt;APInvoice.dueDate&gt;(
                    cache, (doc.DocType != APDocType.DebitAdj)); 
            
                // Making a field visible.
                // The data parameter is set to null to set the property for all
                // APTran data records. The cache object is obtained through the
                // Transactions data view
                PXUIFieldAttribute.SetVisible&lt;APTran.projectID&gt;(
                    Transactions.Cache, null, true);
            }
            
            // Definition of the Transactions data view in the same graph
            public PXSelect&lt;APTran,
                Where&lt;APTran.tranType, Equal&lt;Current&lt;APInvoice.docType&gt;&gt;,
                    And&lt;APTran.refNbr, Equal&lt;Current&lt;APInvoice.refNbr&gt;&gt;&gt;&gt;&gt;
                Transactions;</code>
              <code title="Example3" description="The following example shows how to use the attribute to configure actions." lang="CS">
            // The action declaration
            public PXAction&lt;APDocumentFilter&gt; viewDocument;
            // The action method declaration
            [PXUIField(DisplayName = "View Document",
                       MapEnableRights = PXCacheRights.Select,
                       MapViewRights = PXCacheRights.Select)]
            [PXButton]
            public virtual IEnumerable ViewDocument(PXAdapter adapter)
            {
                ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.MapErrorTo">
            <summary>Gets or sets the field to which the system should map 
            the error related to the field with the attribute. </summary>
            <value>If the value of the property is set to a field type, 
            the error is mapped to the specified field and the field with the attribute.
            If the value is <tt>null</tt>, the error is mapped to only the field with the attribute.
            By default, the value is <tt>null</tt>.
            </value>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.FieldClass">
            <summary>Gets or sets the value that indicates whether the field is
            shown or hidded depending on the features enabled or disabled. By
            default, the property is set to the segmented field name.</summary>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.Required">
            <summary>Gets or sets the value that indicates whether an asterisk
            sign is shown beside the field in the user interface. Note that this
            property <i>does not</i> check that the field value is specified and
            add any restriction of this kind. This is done by the <see
            cref="T:PX.Data.PXDefaultAttribute">PXDefault</see> attribute.</summary>
            <remarks>The default value is <tt>false</tt>.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.ErrorHandling">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXErrorHandling">PXErrorHandling</see> value that
            specifies the way the attribute treats an error related to the field.
            The error is either indicated only when the field is visible, always
            indicated, or never indicated.</summary>
            <remarks>The default value is
            <tt>PXErrorHandling.WhenVisible</tt>.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.MapViewRights">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXCacheRights">PXCacheRights</see> value that
            specifies the access on a cache for a cache to see the button in the
            user interface. The property is used when the <tt>PXUIField</tt>
            configures an action button.</summary>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.MapEnableRights">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXCacheRights">PXCacheRights</see> value that specifies
            the access rights on a cache to click the button in the user
            interface. The property is used when the <tt>PXUIField</tt> configures
            an action button.</summary>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.Enabled">
            <summary>Gets or sets the value that indicates whether the field input
            control is enabled. If the field is disabled, the control does not
            allow the user to edit and select the field value. Compare to the
            <tt>IsReadOnly</tt> property.</summary>
            <remarks>The default value is <tt>true</tt>.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.Visible">
            <summary>Get, set. Allows to show/hide field edit control or grid
            column in user interface. To control, whether form designer should
            generate template for this field, use Visibility property
            instead.</summary>
            <remarks>The default value is <tt>true</tt>.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.IsReadOnly">
            <summary>Gets or sets the value that indicates whether the field input
            control allows editing. If the property is set to <tt>true</tt>, the
            user cannot edit the value, but can still select and copy the value.
            Compare to the <tt>Enabled</tt> property.</summary>
            <remarks>The default value is <tt>false</tt>.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.DisplayName">
            <summary>Gets or sets the field name displayed in the user interface.
            This name is rendered as the input control label on a form or as the
            grid column header.</summary>
            <remarks>The default value is the field name.</remarks>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.IsLocalizable">
            <summary>Gets or sets the value that indicates whether the labels used
            by the attribute are localizable.</summary>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.Visibility">
            <summary>Gets or sets the <see
            cref="T:PX.Data.PXUIVisibility">PXUIVisibility</see> value that
            indicates whether the webpage layout designer should generate a
            template for this field. You can specify whether the template is
            generated for a form and grid, is generated for a form, grid, and
            lookup controls, or never appear in the user interface. The default
            value is <tt>PXUIVisibility.Visible</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXUIFieldAttribute.TabOrder">
            <summary>Gets or sets the order in which the field input control gets
            the focus when the user moves it by pressing the TAB key.</summary>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.ChangeNeutralDisplayName(System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetErrors(PX.Data.PXCache,System.Object,PX.Data.PXErrorLevel[])">
            <summary>Finds all fields with non-empty error strings and returns a
            dictionary with field names as the keys and error messages as the
            values.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record whose fields are checked for error
            strings. If <tt>null</tt>, the method takes into account all data
            records in the cache object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetError(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the error string to display as a tooltip for the field
            with the specified name.
            The value of the field will be cleared at UI.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="error">The string that is set as the error message
            string.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetError``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the error string to display as a tooltip for the
            specified field.
            The value of the field will be cleared at UI.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="error">The error string displayed as a tooltip on the
            field input control.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetError(PX.Data.PXCache,System.Object,System.String,System.String,System.String)">
            <summary>Sets the error string to display as a tooltip and the error
            value to display in the input control for the field with the specified
            name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="error">The error string displayed as a tooltip on the
            field input control.</param>
            <param name="errorValue">The string displayed in the field input
            control (is not assigned to the field).</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetError``1(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the error string to display as a tooltip and the error
            value to display in the input control for the specified field. The
            error level is set to <tt>PXErrorLevel.Error</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="error">The error string displayed as a tooltip on the
            field input control.</param>
            <param name="errorValue">The string displayed in the field input
            control (is not assigned to the field).</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetWarning(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the error string to display as a tooltip for the field
            with the specified name. The error level is set to
            <tt>PXErrorLevel.Warning</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="error">The error string displayed as a tooltip on the
            field input control.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetWarning``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the error string to display as a tooltip for the
            specified field. The error level is set to
            <tt>PXErrorLevel.Warning</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="error">The error string displayed as a tooltip on the
            field input control.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetError``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the error string displayed for the specified
            field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetError(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the error string displayed for the field with the
            specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetErrorOnly``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the error string (if error level is Error or RowError) displayed for the specified
            field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetErrorOnly(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the error string (if error level is Error or RowError) displayed for the field with the
            specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetWarning``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the warning string displayed for the specified
            field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetWarning(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the warning string displayed for the field with the
            specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Enables or disables the input control for the field with the
            specified name by setting the <tt>Enabled</tt> property.
            If <tt>Enabled</tt> is set to <tt>false</tt>, the method also clears 
            the required mark of the field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="isEnabled">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input controls for all fields in the
            specific data record or all data records by setting the
            <tt>Enabled</tt> property.
            If <tt>Enabled</tt> is set to <tt>false</tt>, the method also clears 
            the required mark of the field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input control for the specified field
            by setting the <tt>Enabled</tt> property.
            If <tt>Enabled</tt> is set to <tt>false</tt>, the method also clears 
            the required mark of the field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled(PX.Data.PXCache,System.Object,System.String)">
            <summary>Enables the input control for the field with the specified
            name by setting the <tt>Enabled</tt> property to
            <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled``1(PX.Data.PXCache,System.Object)">
            <summary>Enables the specified field of the specific data record in
            the cache object by setting the <tt>Enabled</tt> property to
            <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisible``1(PX.Data.PXCache,System.Object)">
            <summary>Makes the input control for the specified field visible in
            the user interface by setting the <tt>Visible</tt> property to
            <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisible``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Shows or hides the input control for the specified field in
            the user interface by setting the <tt>Visible</tt> property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isVisible">The value that is assigned to the
            <tt>Visible</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisible(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Shows or hides the input control for the field with the
            specified name in the user interface by setting the <tt>Visible</tt>
            property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="isVisible">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisible(PX.Data.PXCache,System.Object,System.String)">
            <summary>Makes the input control for the field with the specified name
            visible in the user interface by setting the <tt>Visible</tt> property
            to <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly``1(PX.Data.PXCache,System.Object)">
            <summary>Makes the input control for the specified field read-only by
            setting the <tt>IsReadOnly</tt> property to <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly(PX.Data.PXCache,System.Object,System.String)">
            <summary>Makes the input control for the field with the specified name
            read- only by setting the <tt>IsReadOnly</tt> property to
            <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly(PX.Data.PXCache,System.Object)">
            <summary>Makes the input controls for all fields read-only by setting
            the <tt>IsReadOnly</tt> property to <tt>true</tt>.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Makes the input controls for all field read-only or not read-
            only by setting the <tt>IsReadOnly</tt> property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isReadOnly">The value that is assigned to the
            <tt>IsReadOnly</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Makes the input control for the specified field read-only or
            not-read- only by setting the <tt>IsReadOnly</tt> property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isReadOnly">The value that is assigned to the
            <tt>IsReadOnly</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetReadOnly(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Makes the input control for the field with the specified name
            read- only or not-read-only by setting the <tt>IsReadOnly</tt>
            property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="isReadOnly">The value that is assigned to the
            <tt>IsReadOnly</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetEnabled(PX.Data.PXCache,System.String,System.Boolean)">
            <summary>Enables or disables the input control for the field with the
            specified name by setting the <tt>Enabled</tt> property.
            If <tt>Enabled</tt> is set to <tt>false</tt>, the method also clears 
            the required mark of the field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="isEnabled">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisible(PX.Data.PXCache,System.String,System.Boolean)">
            <summary>Shows or hides the input control for the field with the
            specified name in the user interface for all data record by setting
            the <tt>Visible</tt> property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="isVisible">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisibility``1(PX.Data.PXCache,System.Object,PX.Data.PXUIVisibility)">
            <summary>Sets the visibility status of the input control for the
            specified field by setting the <tt>Visibility</tt> property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="visibility">The value that is assigned to the
            <tt>Visibility</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisibility(PX.Data.PXCache,System.Object,System.String,PX.Data.PXUIVisibility)">
            <summary>Sets the visibility status of the input control for the field
            with the specified name by setting the <tt>Visibility</tt>
            property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="visibility">The value that is assigned to the
            <tt>Visibility</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetVisibility(PX.Data.PXCache,System.String,PX.Data.PXUIVisibility)">
            <summary>Sets the visibility status of the input control for the field
            with the specified name by setting the <tt>Visibility</tt>
            property.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="visibility">The value that is assigned to the
            <tt>Enabled</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetDisplayName``1(PX.Data.PXCache)">
            <summary>Returns the value of the <tt>DisplayName</tt> property for
            the specified field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetDisplayName(PX.Data.PXCache,System.String)">
            <summary>Returns the value of the <tt>DisplayName</tt> property for
            the field with the specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetNeutralDisplayName(PX.Data.PXCache,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetNeutralDisplayName(PX.Data.PXCache,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetDisplayName``1(PX.Data.PXCache,System.String)">
            <summary>Sets the display name of the specified field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="displayName">The new display name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetDisplayName(PX.Data.PXCache,System.String,System.String)">
            <summary>Sets the display name of the field with the specified
            name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="displayName">The new display name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetDisplayNameLocalized(PX.Data.PXCache,System.String,System.String)">
            <summary>Sets the localized display name of the field with the specified
            name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="displayName">The new display name.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetRequired``1(PX.Data.PXCache,System.Boolean)">
            <summary>Sets the <tt>Required</tt> property for the specified field
            for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="required">The value assigned to the <tt>Required</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.SetRequired(PX.Data.PXCache,System.String,System.Boolean)">
            <summary>Sets the <tt>Required</tt> property for the field with the
            specified name for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXUIField</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="required">The value assigned to the <tt>Required</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.ExceptionHandling(PX.Data.PXCache,PX.Data.PXExceptionHandlingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.FormatFieldName(System.String,System.String,System.String)">
            <summary>
            Replaces placeholders in the source string with the provided value.
            </summary>
            <param name="sourceText">Source string with placeholders. Valid placeholders are field name surrounded with square brackets ([myField]) or zero in curly brackets ({0})</param>
            <param name="fieldName">Field name</param>
            <param name="value">Value placeholders to be replaced with</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetItemName(PX.Data.PXCache)">
            <summary>Returns the user-friendly name of the specified cache object.
            The name is set using the <see
            cref="T:PX.Data.PXCacheNameAttribute">PXCacheName</see> attribute.</summary>
            <param name="cache">The cache object the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUIFieldAttribute.GetFieldSourceType(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtraKeyAttribute">
            <summary>Indicates that the field implements a relationship between
            two tables in a projection. The use of this attribute enables update
            of the referenced table on update of the projection.</summary>
            <remarks>You can place the attribute on the field declaration in the DAC
            that represents a <see cref="T:PX.Data.PXProjectionAttribute">projection</see>.
            The attribute is required when the projection combines data from
            joined tables and more than one table needs to be updated on update of
            the projection. In this case the attribute should be placed on all
            fields that implement the relationship between the main and the joined
            tables.</remarks>
            <example>
            The following example shows the declaration of a projection that can
            update data in two tables.
            Note that the <tt>Select</tt> commands retrieves data from two tables,
            <tt>CRCampaignMembers</tt> and <tt>Contact</tt>. To make the
            projection updatable, you set the <tt>Persistent</tt> property to
            <tt>true</tt>. The projection field that implements relationship between the
            tables is marked with the <tt>PXExtraKey</tt> attribute.
            <code>
            // Projection declaration
            [PXProjection(
            typeof(
                Select2&lt;CRCampaignMembers,
                    RightJoin&lt;Contact,
                        On&lt;Contact.contactID, Equal&lt;CRCampaignMembers.contactID&gt;&gt;&gt;&gt;
            ),
            Persistent = true)]
            [Serializable]
            public partial class SelCampaignMembers : CRCampaignMembers, IPXSelectable
            {
                ...
                // The field connecting the current DAC with the Contact DAC
                [PXDBInt(BqlField = typeof(Contact.contactID))]
                [PXExtraKey]
                public virtual int? ContactContactID { get; set; }
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXUnboundKeyAttribute">
            <summary>Marks the property as a key one.</summary>
        </member>
        <member name="M:PX.Data.PXUnboundKeyAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXUnboundKeyAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXStringAttribute">
            <summary>Indicates a DAC field of <tt>string</tt> type that is not
            mapped to a database column.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</para>
            <para>It is possible to specify the maximum length and input
            validation mask for the string.</para>
            <para>You can modify the <tt>Length</tt> and <tt>InputMask</tt>
            properties at run time by calling the static methods.</para>
            </remarks>
            <example>
            The attribute below defines an unbound field taking as a value Unicode
            strings of 5 uppercase characters that are strictly aphabetical
            letters.
            <code>
            [PXString(5, IsUnicode = true, InputMask = "&gt;LLLLL")]
            public virtual String FinChargeCuryID { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXStringAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXStringAttribute.Length">
            <summary>Gets the maximum length of the string value. If a string
            value exceeds the maximum length, it will be trimmed. If
            <tt>IsFixed</tt> is set to <tt>true</tt> and the string length is less
            then the maximum, it will be extended with spaces. By default, the
            property is &#8211;1, which means that the string length is not
            limited.</summary>
        </member>
        <member name="P:PX.Data.PXStringAttribute.InputMask">
            <summary>Gets or sets the pattern that indicates the allowed
            characters in a field value. The user interface will not allow the
            user to enter other characters in the input control associated with
            the field.</summary>
            <remarks>
            <para>The default value for the key fields is
            '<tt>&gt;aaaaaa</tt>'.</para>
            <para><i>Control characters:</i></para>
            <list type="bullet">
            <item><description>'&gt;': the following chars to
            upper case</description></item>
            <item><description>'&lt;': the
            following chars to lower
            case</description></item>
            <item><description>'<tt>&amp;</tt>',
            '<tt>C</tt>': any character or a
            space</description></item>
            <item><description>'<tt>A</tt>',
            '<tt>a</tt>': a letter or
            digit</description></item>
            <item><description>'<tt>L</tt>',
            '<tt>?</tt>': a
            letter</description></item>
            <item><description>'<tt>#</tt>',
            '<tt>0</tt>', '<tt>9</tt>': a digit</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:PX.Data.PXStringAttribute.IsFixed">
            <summary>Gets or sets an indication that the string has a fixed
            length. This property should be set to <tt>true</tt> if the database
            column has a fixed length type (<tt>char</tt> or <tt>nchar</tt>). The
            default value is <tt>false</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXStringAttribute.IsUnicode">
            <summary>Gets or sets an indication that the string consists of
            Unicode characters. This property should be set to <tt>true</tt> if
            the database column has a Unicode string type (<tt>nchar</tt> or
            <tt>nvarchar</tt>). The default value is <tt>false</tt>.</summary>
        </member>
        <member name="M:PX.Data.PXStringAttribute.#ctor">
            <summary>Initializes a new instance with default parameters.</summary>
        </member>
        <member name="M:PX.Data.PXStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum length of a
            field value.</summary>
            <param name="length">The maximum length value assigned to the
            <tt>Length</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetLength(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <summary>Sets the maximum length for the string field with the
            specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetLength``1(PX.Data.PXCache,System.Object,System.Int32)">
            <summary>Sets the maximum length for the specified string
            field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetLength(PX.Data.PXCache,System.String,System.Int32)">
            <summary>Sets the maximum length for the string field with the
            specified name for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetLength``1(PX.Data.PXCache,System.Int32)">
            <summary>Sets the maximum length for the specified string field for
            all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetInputMask(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the input mask for the string field with the specified
            name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetInputMask``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the input mask for the specified string field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetInputMask(PX.Data.PXCache,System.String,System.String)">
            <summary>Sets the input mask for the string field with the specified
            name for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.SetInputMask``1(PX.Data.PXCache,System.String)">
            <summary>Sets the input mask for the specified string field for all
            data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXString</tt> type.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXStringAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXShortAttribute">
            <summary>Indicates a DAC field of <tt>short?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXShort()]
            [PXDefault((short)0)]
            [PXUIField(DisplayName = "Overdue Days", Enabled = false)]
            public virtual short? OverdueDays { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXShortAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXShortAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXShortAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXShortAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXShortAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXShortAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXShortAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXByteAttribute">
            <summary>Indicates a DAC field of <tt>byte?</tt> type that is not mapped
            to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            The code below shows how the <tt>PXByte</tt> attribute is used in the
            definition of a DAC field.
            <code>
            [PXByte()]
            public virtual byte? MyByteField { get; set;}
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXByteAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXByteAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXByteAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXByteAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXByteAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXByteAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXByteAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGuidAttribute">
            <summary>Indicates a DAC field of <tt>Guid?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXGuid]
            [PXSelector(typeof(EPEmployee.userID),
                        SubstituteKey = typeof(EPEmployee.acctCD),
                        DescriptionField = typeof(EPEmployee.acctName))]
            [PXUIField(DisplayName = "Custodian")]
            public virtual Guid? Custodian { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXGuidAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="M:PX.Data.PXGuidAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGuidAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGuidAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGuidAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXBoolAttribute">
            <summary>Indicates a DAC field of <tt>bool?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXBool()]
            [PXDefault(false)]
            public virtual bool? Selected { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXBoolAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.ConvertValue(PX.Data.PXFieldUpdatingEventArgs)">
            <summary>
            Converts the <tt>e.NewValue</tt> property of the parameter from string
            to boolean and sets <tt>e.NewValue</tt> to the converted value.
            </summary>
            <param name="e">Event arguments of the <tt>FieldUpdating</tt> event.</param>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.CheckSingleRow(PX.Data.PXCache,PX.Data.PXView,System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXBoolAttribute.CheckSingleRow``1(PX.Data.PXCache,PX.Data.PXView,System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXIntAttribute">
            <summary>Indicates a DAC field of <tt>int?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXInt()]
            [PXUIField(DisplayName = "Documents", Visible = true)]
            public virtual int? DocCount { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXIntAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXIntAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXIntAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXIntAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLongAttribute">
            <summary>Indicates a DAC field of <tt>long?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXLong(IsKey = true)]
            [PXUIField(DisplayName = "Transaction Num.")]
            public virtual Int64? TranID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXLongAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXLongAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXLongAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXLongAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLongAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDateAttribute">
            <summary>Indicates a DAC field of <tt>DateTime?</tt> type that is not mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field is not bound to a table column.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDate()]
            public virtual DateTime? NextEffDate { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDateAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXDateAttribute.InputMask">
            <summary>Gets or sets the format string that defines how a field value
            inputted by a user should be formatted.</summary>
            <value>If the property is set to a one-character string, the corresponding <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">standard date and time
            format string</see> is used. If the property value is longer, it is treated as a <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">custom date and time format
            string</see>. A particular pattern depends on the culture set by the application.</value>
        </member>
        <member name="P:PX.Data.PXDateAttribute.DisplayMask">
            <summary>Gets or sets the format string that defines how a field value is displayed in the input control.</summary>
            <value>If the property is set to a one-character string, the corresponding <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">standard date and time
            format string</see> is used. If the property value is longer, it is treated as a <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">custom date and time format
            string</see>. A particular pattern depends on the culture set by the application.</value>
        </member>
        <member name="P:PX.Data.PXDateAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDateAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDateAttribute.UseTimeZone">
            <summary>Gets or sets the value that indicates whether the attribute
            should convert the time to UTC, using the local time zone. If
            <tt>true</tt>, the time is converted.</summary>
        </member>
        <member name="M:PX.Data.PXDateAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDoubleAttribute">
            <summary>Indicates a DAC field of <tt>double?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            <code>
            [PXDouble]
            [PXUIField(Visible = false)]
            public virtual Double? OriginalShift { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDoubleAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXDoubleAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDoubleAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.#ctor">
            <summary>Initializes a new instance of the attribute with default
            parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the attribute with the given
            precision. The precision is the number of digits after the comma. If a
            user enters a value with greater number of fractional digits, the
            value will be rounded.</summary>
            <param name="precision">The value to use as the precision.</param>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <summary>
            Sets the precision in the attribute instance that marks the
            field with the specified name in a particular data record.
            </summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDouble</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that is marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.SetPrecision``1(PX.Data.PXCache,System.Object,System.Int32)">
            <summary>
            Sets the precision in the attribute instance that marks the
            specified field in a particular data record.
            </summary>
            <typeparam name="Field">The field that is marked with the attribute.</typeparam>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDouble</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Int32)">
            <summary>Sets the precision in the attribute instance that marks the
            field with the specified name in all data records in the cache
            object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDouble</tt> type.</param>
            <param name="name">The name of the field that is marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.SetPrecision``1(PX.Data.PXCache,System.Int32)">
            <summary>Sets the precision in the attribute instance that marks the
            specified field in all data records in the cache
            object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDouble</tt> type.</param>
            <param name="precision">The new precision value.</param>
            <typeparam name="Field">The field that is marked with the attribute.</typeparam>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDoubleAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFloatAttribute">
            <summary>Indicates a DAC field of <tt>float?</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
        </member>
        <member name="P:PX.Data.PXFloatAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXFloatAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXFloatAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.#ctor">
            <summary>Initializes a new instance of the attribute with default
            parameters.</summary>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the attribute with the given
            precision. The precision is the number of digits after the comma. If a
            user enters a value with greater number of fractional digits, the
            value will be rounded.</summary>
            <param name="precision">The value to use as the precision.</param>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.SetPrecision``1(PX.Data.PXCache,System.Object,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.SetPrecision``1(PX.Data.PXCache,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFloatAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDecimalAttribute">
            <summary>Indicates a DAC field of <tt>decimal?</tt> type that is not mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field is not bound to a table column.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDecimal(0)]
            [PXUIField(DisplayName = "SignBalance")]
            public virtual Decimal? SignBalance { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDecimalAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field.</summary>
        </member>
        <member name="P:PX.Data.PXDecimalAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDecimalAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.#ctor">
            <summary>Initializes a new instance with the default precision, which
            equals 2.</summary>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given
            precision.</summary>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance with the precision calculated at
            runtime using a BQL query.</summary>
            <param name="type">A BQL query based on a class derived from
            <tt>IBqlSearch</tt> or <tt>IBqlField</tt>. For example, the parameter
            can be set to <tt>typeof(Search&lt;...&gt;)</tt>, or
            <tt>typeof(Table1.field)</tt>.</param>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            field with the specified name in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDecimal</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that is be marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.SetPrecision``1(PX.Data.PXCache,System.Object,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            specified field in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            field with the specified name in all data records in the cache
            object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
            <param name="name">The name of the field that is be marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.SetPrecision``1(PX.Data.PXCache,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            specified field in all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDecimalAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXStringListAttribute">
            <summary>Sets a drop-down list as the input control for a DAC field.
            In this control, a user selects from a fixed set of strings or
            enters a value manually.</summary>
            <remarks>
            	<para>The attribute configures a drop-down list that represents the
            DAC field in the user interface. You should provide the list of
            possible string values and the list of the corresponding labels in the
            attribute constructor.</para>
            	<para>You can reconfigure the drop-down list at run time by calling the
            static methods. You can set a different list of values or labels or
            extend the list.</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute is added to the DAC field definition as follows." lang="CS">
            [PXStringList(
                new[] { "N", "P", "I", "F" },
                new[] { "New", "Prepared", "Processed", "Partially Processed" }
            )]
            [PXDefault("N")]
            public virtual string Status { get; set; }</code>
            	<code title="Example2" description="The attribute below obtains the list of values from the provided string." groupname="Example" lang="CS">
            [PXStringList("Dr.,Miss,Mr,Mrs,Prof.")]
            public virtual string TitleOfCourtesy { get; set; }</code>
            	<code title="Example3" description="The attribute below obtains the lists of values and labels from the provided string. The user will select from Import and Export. While the field will be set to I or E." groupname="Example2" lang="CS">
            [PXStringList("I;Import,E;Export")]
            public virtual string TitleOfCourtesy { get; set; }</code>
            	<code title="Example4" description="The example below demonstrates an invocation of a PXStringListAttribute static method. The method called in the example will set the new lists of values and labels for all data records in the cache object that the Schedule.Cache variable references. The method will assign the lists to the PXStringList attribute instances attached to the ActionName field." groupname="Example3" lang="CS">
            List&lt;string&gt; values = new List&lt;string&gt;();
            List&lt;string&gt; labels = new List&lt;string&gt;();
            ... // Fill the values and labels lists
            // Specify as arrays of values and labels of the drop-down list
            PXStringListAttribute.SetList&lt;AUSchedule.actionName&gt;(
                Schedule.Cache, null, values.ToArray(), labels.ToArray());</code>
            </example>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.IsLocalizable">
            <summary>Gets or sets the value that indicates whether the values and
            labels used by the attribute are localizable.</summary>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.IsLocalized">
            <summary>
            Gets or sets the value that indicates whether the values and
            labels real localized
            </summary>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.ExclusiveValues">
            <summary>Gets or sets the value that indicates whether a user can
            input a value not present in the list of allowed values. If
            <tt>true</tt>, it is prohibited. By default, the property is set to
            <tt>true</tt>, which means that the user can select only from the
            values in the dropdown list.</summary>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.BqlField">
            <summary>Returns <tt>null</tt> on get. Sets the BQL field representing
            the field in BQL queries.</summary>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.ValueLabelDic">
            <summary>Gets the dictionary of allowed value-label pairs.</summary>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.GetAllowedValues(PX.Data.PXCache)">
            <summary>Retrieves the list of allowed values from cache.</summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXStringList</tt> type.</param>
        </member>
        <member name="P:PX.Data.PXStringListAttribute.DBProperties">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.#ctor">
            <summary>Initializes a new instance with empty lists of possible values
            and labels.</summary>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.#ctor(System.String[],System.String[])">
            <summary>Initializes a new instance with the specified lists of
            possible values and corresponding labels. The two lists must be of the same
            length.</summary>
            <param name="allowedValues">The list of values assigned to the field
            when a user selects the corresponding labels.</param>
            <param name="allowedLabels">The list of labels displayed in the user
            interface when a user expands the control.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.#ctor(System.String)">
            <summary>Initializes a new instance with the list of possible values
            obtained from the provided string. The string should contain either
            values separated by a comma, or value-label pairs where the value and
            label are separated by a semicolon and different pairs are separated
            by a comma. In the first case, labels are set to value
            strings.</summary>
            <param name="list">The string that contains the list of values or value-
            label pairs.</param>
            <example>
            In the code pieces below, the attribute obtains the list of values from
            the provided string. In the second example, the user will select from <i>Import</i>
            and <i>Export</i>. While the field will be set to <i>I</i> or <i>E</i>.
            <code>
            [PXStringList("Dr.,Miss,Mr,Mrs,Prof.")]
            public virtual string TitleOfCourtesy { get; set; }
            </code>
            <code>
            [PXStringList("I;Import,E;Export")]
            public virtual string TitleOfCourtesy { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.#ctor(System.Tuple{System.String,System.String}[])">
            <summary>Initializes a new instance with the specified list of
            tuples of possible values and corresponding labels. </summary>
            <param name="valuesToLabels">The list of tuples. In each tuple, 
            the first item is a value assigned to the field when a user selects the corresponding label,
            the second item is a label displayed in the user interface when a user expands the control.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.#ctor(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance with the specified list of pairs of possible values and corresponding labels. 
            </summary>
            <param name="valuesToLabels">
            The list of pairs. The first item in each pair is a value assigned to the field when a user selects the corresponding labels.
            The second item in each pair is a label displayed in the user interface when a user expands the control.
            </param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.GetLocalizedLabel``1(PX.Data.PXCache,System.Object)">
            <summary>Retrieves the localized label from the attribute instance that marks the specified field in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXStringList</tt> type.</param>
            <param name="row">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <typeparam name="TField">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.GetLocalizedLabel``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Retrieves the localized label for the specified value from the attribute instance that marks the specified field in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXStringList</tt> type.</param>
            <param name="row">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <typeparam name="TField">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetLocalizable``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Sets the value of the <see cref="P:PX.Data.PXStringListAttribute.IsLocalizable">IsLocalizable</see> property of the attribute instance that marks the specified field in a
            particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <param name="isLocalizable">A Boolean value that indicates (if set to true) that the attribute labels are localizable.</param>
            <typeparam name="Field">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList``1(PX.Data.PXCache,System.Object,PX.Data.PXStringListAttribute)">
            <summary>Assigns the possible values and labels from the specified
            attribute instance to the attribute instance that marks the specified field in a
            particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="listSource">The attribute instance from which the lists
            of possible values and labels are obtained.</param>
            <typeparam name="Field">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList``1(PX.Data.PXCache,System.Object,System.String[],System.String[])">
            <summary>Assigns the specified lists of possible values and labels
            to the attribute instance that marks the specified field in a
            particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="allowedValues">The new list of values.</param>
            <param name="allowedLabels">The new list of labels.</param>
            <typeparam name="Field">The field of the data record.</typeparam>
            <example>
            The code below shows how to modify the lists of values and labels
            of a drop-down control at run time.
            The method sets the new lists of values and labels for all data
            records in the cache object that the <tt>Schedule.Cache</tt> variable references. The
            method assigns the lists to the <tt>PXStringList</tt> attribute instances
            attached to the <tt>ActionName</tt> field.
            <code title="" description="" lang="CS">
            List&lt;string&gt; values = new List&lt;string&gt;();
            List&lt;string&gt; labels = new List&lt;string&gt;();
            // Fill the values and labels lists
            // Specify as arrays of values and labels of the drop-down list
            PXStringListAttribute.SetList&lt;AUSchedule.actionName&gt;(
                Schedule.Cache, null, values.ToArray(), labels.ToArray());</code></example>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList``1(PX.Data.PXCache,System.Object,System.Tuple{System.String,System.String}[])">
            <summary>Assigns the specified list of tuples of possible values and labels to the attribute
            instance that marks the field with the specified name in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="valuesToLabels">The new list of pairs. In this list, 
            the first item is a value assigned to the field when a user selects the corresponding labels, 
            the second item is a label displayed in the user interface when a user expands the control.</param>
            <typeparam name="Field">The field of the data record.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXStringListAttribute.SetList``1(PX.Data.PXCache,System.Object,System.ValueTuple{System.String,System.String}[])" -->
        <member name="M:PX.Data.PXStringListAttribute.SetList(PX.Data.PXCache,System.Object,System.String,System.String[],System.String[])">
            <summary>Assigns the specified lists of possible values and labels to the attribute
            instance that marks the field with the specified name in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="field">The name of the field that is be marked with the
            attribute.</param>
            <param name="allowedValues">The new list of values.</param>
            <param name="allowedLabels">The new list of labels.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList(PX.Data.PXCache,System.Object,System.String,PX.Data.PXStringListAttribute)">
            <summary>Assigns the possible values and labels from the specified
            attribute instance to the attribute instance that marks the field with the
            specified name in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="field">The name of the field that is marked with the
            attribute.</param>
            <param name="listSource">The attribute instance from which the lists
            of possible values and labels are obtained.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList(PX.Data.PXCache,System.Object,System.String,System.Tuple{System.String,System.String}[])">
            <summary>Assigns the specified list of tuples of possible values and labels to the attribute
            instance that marks the field with the specified name in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="field">The name of the field that is marked with the
            attribute.</param>
            <param name="valuesToLabels">The new list of pairs. In each pair, 
            the first item is a value assigned to the field when a user selects the corresponding labels, 
            the second item is a label displayed in the user interface when a user expands the control.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.SetList(PX.Data.PXCache,System.Object,System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Assigns the specified list of pairs of possible values and labels to the attribute instance that marks the field with the specified name in a particular data record.
            </summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. 
            				   If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <param name="field">The name of the field that is marked with the attribute.</param>
            <param name="valuesToLabels">
            The new list of pairs. In each pair, the first item is a value assigned to the field when a user selects the corresponding labels, 
            the second item is a label displayed in the user interface when a user expands the control.
            </param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.AppendList``1(PX.Data.PXCache,System.Object,System.ValueTuple{System.String,System.String}[])">
            <summary>
            In the attribute instance that marks the specified field in a particular data record, extends the lists of possible values and labels with the specified pairs of possible values and labels.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <param name="valuesToLabels">
            The list of pairs that are appended to the existing list. In each pair, the first item is a value assigned to the field when a user selects the corresponding labels,
            the second item is a label displayed in the user interface when a user expands the control.
            </param>
            <typeparam name="Field">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.AppendList``1(PX.Data.PXCache,System.Object,System.String[],System.String[])">
            <summary>In the
            attribute instance that marks the specified field in a particular data
            record, extends the lists of possible values and labels with the specified lists of possible values and labels.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="allowedValues">The list of values that is appended to the
            existing list of values.</param>
            <param name="allowedLabels">The list of labels that is appended to the
            existing list of labels.</param>
            <typeparam name="Field">The field of the data record.</typeparam>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.AppendList(PX.Data.PXCache,System.Object,System.String,System.String[],System.String[])">
            <summary>In the
            attribute instance that marks the field with the specified name in a
            particular data record, extends the lists of possible values and labels with the specified lists of possible values and labels.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXStringList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="allowedValues">The list of values that is appended to the
            existing list of values.</param>
            <param name="allowedLabels">The list of labels that is appended to the
            existing list of labels.</param>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.OrderByCommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXStringListAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXStringListAttribute.Pair(System.String,System.String)">
            <summary>Pairs the value with its label.</summary>
            <exclude />
            <param name="value">The value.</param>
            <param name="label">The label.</param>
        </member>
        <member name="T:PX.Data.PXImagesListAttribute">
            <summary>
            Sets a drop-down list as the input control for a DAC field.
            In this control, a user selects a value from a fixed set of strings.
            Every possible value is accompanied by an image in the drop-down list.
            </summary>
        </member>
        <member name="P:PX.Data.PXImagesListAttribute.IsLocalizable">
            
        </member>
        <member name="M:PX.Data.PXImagesListAttribute.#ctor">
            
        </member>
        <member name="M:PX.Data.PXImagesListAttribute.#ctor(System.String[],System.String[],System.String[])">
            <summary>
            Creates a drop-down list with images displayed for each item.
            </summary>
            <param name="allowedValues">Specifies possible values to select.</param>
            <param name="allowedLabels">Specifies the text labels of the list items.</param>
            <param name="allowedImages">Specifies the images for the list items as the members
            of the <tt>PX.Web.UI.Sprite</tt> class.</param>
        </member>
        <member name="T:PX.Data.PXAutomationMenuAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXAutomationMenuAttribute.DisplayName">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXAutomationMenuAttribute.Visible">
            <summary>Get, set.</summary>
        </member>
        <member name="T:PX.Data.PXAutomationMenuAttribute.AutomationActionMenuItem">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAutomationMenuAttribute.AutomationActionMenuItem.Comparer">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAutomationMenuAttribute.undefinded">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXIntListAttribute">
            <summary>Sets a drop-down list as the input control for a DAC field.
            In this control, a user selects from a fixed set of integer values, which are
            represented in the drop-down list by string labels.</summary>
            <remarks>
            <para>The attribute configures a drop-down list that represents the
            DAC field in the user interface. In the attribute constructor, you should provide the list of
            possible integer values and the list of the corresponding labels.</para>
            <para>You can reset the lists of values and labels at run time by
            calling the <tt>SetList&lt;&gt;</tt> static method.</para>
            </remarks>
            <example>
            <code>
            [PXIntList(
                new int[] { 0, 1 },
                new string[] { "Apply Credit Hold", "Release Credit Hold" })]
            public virtual int? Action { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXIntListAttribute.IsLocalizable">
            <summary>Gets or sets the value that indicates whether the labels used
            by the attribute are localizable.</summary>
        </member>
        <member name="P:PX.Data.PXIntListAttribute.ExclusiveValues">
            <summary>Gets or sets the value that indicates whether a user can
            input a value not available in the list of allowed values. By default, the property is set to
            <tt>true</tt>, which means that the user can select only from the
            values in the drop-down list.</summary>
        </member>
        <member name="P:PX.Data.PXIntListAttribute.ValueLabelDic">
            <summary>Gets the dictionary of allowed value-label pairs.</summary>
        </member>
        <member name="P:PX.Data.PXIntListAttribute.DBProperties">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor">
            <summary>Initializes a new instance with empty lists of possible values
            and labels.</summary>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor(System.String)">
            <summary>Initializes a new instance with the list of possible values
            obtained from the provided string. The string should contain either
            values separated by a comma, or value-label pairs where the value and
            label are separated by a semicolon and different pairs are separated
            by a comma. In the first case, labels are set to value strings. Values
            are converted from strings to integers.</summary>
            <param name="list">The string that contains the list of values separated
            by comma.</param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor(System.Int32[],System.String[])">
            <summary>Initializes a new instance with the specified lists of
            possible values and corresponding labels. The two lists must be of the same
            length.</summary>
            <param name="allowedValues">The list of values assigned to the field
            when a user selects the corresponding labels..</param>
            <param name="allowedLabels">The list of labels displayed in the user
            interface when a user expands the control.</param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor(System.Type,System.Boolean)">
            <summary>Initializes a new instance, extracting the list of possible
            values and labels from the provided enumeration. Uses the enumeration
            values as possible values and enumeration values names as the
            corresponding labels.</summary>
            <param name="enumType">The <tt>enum</tt> type that defines the lists
            of possible values and labels.</param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor(System.Tuple{System.Int32,System.String}[])">
            <summary>Initializes a new instance with the specified collection of tuples
            of possible values and corresponding labels.</summary>
            <param name="valuesToLabels">The list of pairs where 
            first item is a value assigned to the field when a user selects the corresponding labels, and
            second item is a label displayed in the user interface when a user expands the control.</param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.#ctor(System.ValueTuple{System.Int32,System.String}[])">
            <summary>
            Initializes a new instance with the specified list of pairs of allowed values and corresponding labels. 
            </summary>
            <param name="valuesToLabels">
            The list of pairs where first item is a value assigned to the field when a user selects the corresponding labels, 
            and second item is a label displayed in the user interface when a user expands the control.
            </param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.SetList``1(PX.Data.PXCache,System.Object,System.Int32[],System.String[])">
            <summary>Assigns the provided lists of possible values and labels
            to the attribute instance that marks the specified field in a
            particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXIntList</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="allowedValues">The new list of values.</param>
            <param name="allowedLabels">The new list of labels.</param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.SetList``1(PX.Data.PXCache,System.Object,System.ValueTuple{System.Int32,System.String}[])">
            <summary>
            Assigns the list of pairs of possible values and labels to the attribute instance 
            that marks the specified field in a particular data record.
            </summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXIntList</tt> type.</param>
            <param name="data">The data record the method is applied to. 
            				   If <tt>null</tt>, the method is applied to all data records kept in the cache object.</param>
            <param name="valuesToLabels">
            The new list of pairs. The first item in each pair is a value assigned to the field when a user selects the corresponding label. 
            The second item in each pair is a label displayed in the user interface when a user expands the control.
            </param>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXIntListAttribute.Pair(System.Int32,System.String)">
            <summary>
            Pairs value to its label
            </summary>
        </member>
        <member name="T:PX.Data.PXDisplaySelectorAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRestrictorAttribute">
            <summary>Adds a restriction to a BQL command that selects data for a
            lookup control and displays the error message when the value entered
            does not fit the restriction.</summary>
            <remarks>
            <para>The attribute is used on DAC fields represented by lookup
            controls in the user interface. For example, such fields can have the
            <see cref="T:PX.Data.PXSelectorAttribute">PXSelector</see> attribute attached
            to them. The attribute adds the <tt>Where&lt;&gt;</tt> clause to the
            BQL command that selects data for the control. As a result, the
            control lists the data records that satisfy the BQL command and the
            new restriction. If the user enters a value that is not in the list,
            the error message configured by the attribute is displayed.</para>
            <para>A typical example of attribute's usage is specifiying condition
            that checks whether a referenced data record is active. This condition
            could be specified in the <tt>PXSelector</tt> attribute. But in this
            case, if an active data record once selected through the lookup
            control becomes inactive, saving the data record that includes this
            lookup field will result in an error. Adding the condition through
            <tt>PXRestrictor</tt> attribute prevents this error. The lookup field
            can still hold a reference to the inactive data record. However, the
            new value can be selected only among the active data records.</para>
            </remarks>
            <example>
            The code below shows the use of the attribute on a lookup field.
            Notice that the message includes <i>{0}</i> that is replaced
            with the value of the <tt>TaxCategoryID</tt> field when the error message
            is displayed.
            <code>
            [PXDBString(10, IsUnicode = true)]
            [PXUIField(DisplayName = "Tax Category")]
            [PXSelector(
                typeof(TaxCategory.taxCategoryID),
                DescriptionField = typeof(TaxCategory.descr))]
            [PXRestrictor(
                typeof(Where&lt;TaxCategory.active, Equal&lt;True&gt;&gt;),
                "Tax Category '{0}' is inactive",
                typeof(TaxCategory.taxCategoryID))]
            public virtual string TaxCategoryID { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXRestrictorAttribute.ReplaceInherited">
            <summary>Gets or sets the value indicating whether the current
            <tt>PXRestrictor</tt> attribute should override the inherited
            <tt>PXRestrictor</tt> attributes.</summary>
        </member>
        <member name="P:PX.Data.PXRestrictorAttribute.ShowWarning">
            <summary>Gets or sets the value indicating whether 
            warning message will be displayed on a field if the
            referenced record does not satisfy <tt>PXRestrictor</tt> 
            attribute condition.</summary>
        </member>
        <member name="P:PX.Data.PXRestrictorAttribute.SuppressVerify">
            <summary>Gets or sets the value indicating whether 
            FieldVerifying event handler will be executed.</summary>
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.#ctor(System.Type,System.String,System.Type[])">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="where">The <tt>Where&lt;&gt;</tt> BQL clause used as the
            additional restriction for a BQL command.</param>
            <param name="message">The error message that is displayed when a value
            violating the restriction is entered. The error message can reference the
            fields specified in the third parameter, as <i>{0}пїЅ{N}</i>. The attribute
            will take the values of these fields from the data record whose identifier
            was entered as the value of the current field.</param>
            <param name="pars">The types of fields that are referenced by the error message.</param>
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.WhereAnd(PX.Data.PXCache,PX.Data.PXSelectorAttribute,System.Type)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.GetItem(PX.Data.PXCache,PX.Data.PXRestrictorAttribute,System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXRestrictorAttribute.Verify(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUnboundFormulaAttribute">
            <summary>Calculates the value from the child data record fields and
            computes the aggregation of such values over all child data
            records.</summary>
            <remarks>
            	<para>Unlike the <tt>PXFormula</tt> attribute, this attribute does not
            assign the computed value to the field the attribute is attached to.
            The value is only used for aggregated calculation of the parent data
            record field. Hence, you can place this attribute on declaration of
            any child DAC field.</para>
            	<para>The <tt>PXParent</tt> attribute must be added to some field of
            the child DAC.</para>
            </remarks>
            <example>
            	<code title="Example" description="" lang="CS">
            [PXUnboundFormula(
                typeof(Mult&lt;APAdjust.adjgBalSign, APAdjust.curyAdjgAmt&gt;),
                typeof(SumCalc&lt;APPayment.curyApplAmt&gt;))]
            public virtual decimal? CuryAdjgAmt { get; set; }</code>
            	<code title="Example2" description="Several UnboundFormula attributes can be placed on the same DAC field definition, as shown in the example below." groupname="Example" lang="CS">
            [PXUnboundFormula(
                typeof(Switch&lt;
                    Case&lt;WhereExempt&lt;APTaxTran.taxID&gt;, APTaxTran.curyTaxableAmt&gt;,
                    decimal0&gt;),
                typeof(SumCalc&lt;APInvoice.curyVatExemptTotal&gt;))]
            [PXUnboundFormula(
                typeof(Switch&lt;
                    Case&lt;WhereTaxable&lt;APTaxTran.taxID&gt;, APTaxTran.curyTaxableAmt&gt;,
                    decimal0&gt;),
                typeof(SumCalc&lt;APInvoice.curyVatTaxableTotal&gt;))]
            public override Decimal? CuryTaxableAmt { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXUnboundFormulaAttribute.FormulaFieldName">
            <summary>Gets the name of the field the attribute is attached
            to.</summary>
        </member>
        <member name="M:PX.Data.PXUnboundFormulaAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance that calculates the value of the field
            the attribute is atached to and sets an aggregate function to calculate
            the value of a field in the parent data record. The aggregation
            function is applied to the values calculated by the first parameter
            for all child data records.
            </summary>
            <param name="formulaType">The formula to calculate the field value from
            other fields of the same data record; an expression built from BQL functions
            such as <tt>Add</tt>, <tt>Sub</tt>, <tt>Mult</tt>, <tt>Div</tt>, <tt>Switch</tt> and other functions.
            If null, the aggregation function takes into account the field value
            inputted by the user.</param>
            <param name="aggregateType">The aggregation formula to calculate the parent
            data record field from the child data records fields.</param>
        </member>
        <member name="M:PX.Data.PXUnboundFormulaAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUnboundFormulaAttribute.RowUpdated(PX.Data.PXCache,PX.Data.PXRowUpdatedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUnboundFormulaAttribute.RowInserted(PX.Data.PXCache,PX.Data.PXRowInsertedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUnboundFormulaAttribute.RowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFormulaAttribute">
            <summary>Calculates a field from other fields of the same data record
            and sets an aggregation formula to calculate a parent data record
            field from child data record fields.</summary>
            <remarks>
            	<para>The attribute assigns the computed value to the field the
            attribute is attached to. The value is also used for aggregated
            calculation of the parent data record field (if the aggregate
            expression has been specified in the attribute parameter).</para>
            	<para>The <tt>PXParent</tt> attribute must be added to some field of
            the child DAC.</para>
            	<para>The attribute can be used on both bound and unbound DAC fields.
            For unbound fields, the attribute dynamically adds the <tt>RowSelecting</tt>
            event handler which tries to calculate the field value when the data
            record is retrieved from the database. For bound fields, the attribute
            doesn't calculate the field value when the data record is retrieved
            from the database. Also, if the <tt>Persistent</tt> property is set
            to <tt>true</tt>, the attribute recalculates the field value on
            the <tt>RowPersisted</tt> event (for bound and unbound fields).</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute below sums two fields and assigns it the field the attribute is attached to. The second example shows a more complex calculation with the Switch class." lang="CS">
            [PXFormula(typeof(
                Add&lt;SOOrder.curyPremiumFreightAmt, SOOrder.curyFreightAmt&gt;))]
            public virtual Decimal? CuryFreightTot { get; set; }</code>
            	<code title="Example2" description="The attribute below performs more complex calculation." groupname="Example" lang="CS">
            [PXFormula(typeof(
                Switch&lt;
                    Case&lt;Where&lt;Add&lt;SOOrder.releasedCntr, SOOrder.billedCntr&gt;,
                               Equal&lt;short0&gt;&gt;,
                        SOOrder.curyOrderTotal&gt;,
                    Add&lt;SOOrder.curyUnbilledOrderTotal, SOOrder.curyFreightTot&gt;&gt;))]
            public decimal? CuryDocBal { get; set; }</code>
            	<code title="Example3" description="The attribute below multiplies the TranQty and UnitPrice fields and assigns the result to the ExtPrice field. The attribute also calculates the sum of the computed ExtPrice values over all child DocTransaction data records and assigns the result to the parent's TotalAmt field." groupname="Example2" lang="CS">
            [PXUIField(DisplayName = "Line Total", Enabled = false)]
            [PXFormula(
                typeof(Mult&lt;DocTransaction.tranQty, DocTransaction.unitPrice&gt;),
                typeof(SumCalc&lt;Document.totalAmt&gt;))]
            public virtual decimal? ExtPrice { get; set; }</code>
            	<code title="Example4" description="A common practice is to disable the input control for a calculated field. In the example above, the control is disabled using the PXUIField attribute.
            The attribute below does not provide a formula for calculating the TranQty property. The value inputted by a user is assigned to the field. The attribute only sets the formula to calculate the TotalQty field in the parent data record as the sum of TranQty values over all related child data records." groupname="Example3" lang="CS">
            [PXFormula(null, typeof(SumCalc&lt;Document.totalQty&gt;))]
            public virtual decimal? TranQty { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.FormulaFieldName">
            <summary>Get the name of the field the attribute is attached
            to.</summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.Formula">
            <summary>Gets or sets the BQL query that is used to calculate the
            value of the field the attribute is attached to. The value should
            derive from <tt>Constant&lt;&gt;</tt>, <tt>IBqlField</tt>, or
            <tt>IBqlCreator</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.ParentField">
            <summary>Gets or sets the parent data record field the aggregation
            result is assigned to. The value should derive from
            <tt>IBqlField</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.Aggregate">
            <summary>Gets or sets the BQL query that represents the aggregation
            formula used to calculate the parent data record field from the child
            data records fields. The value should derive from
            <tt>IBqlAggregateCalculator</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.Persistent">
            <summary>Gets or sets the value that indicates whether the attribute
            recalculates the formula for the child field after a saving of changes
            to the database. You may need recalculation if the fields the formula
            depends on are updated on the <tt>RowPersisting</tt> event. By
            default, the property equals <tt>false</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.CancelCalculation">
            <summary>
            Gets or sets a value indicating whether the formula should
            not recalculate during defaulting, insertion, dependent
            field updating etc.
            </summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.CancelParentUpdate">
            <summary>
            Gets or sets a value indicating whether the formula should
            not raise RowUpdated event on updating parent record.
            </summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.ForceAggregateRecalculation">
            <summary>
            Gets or sets a value indicating that aggregate field will be
            recalculated from scratch on every change of child records.
            </summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.SkipZeroUpdates">
            <summary>
            Gets or sets a value indicating that zero updates of parent records will be skipped.
            </summary>
        </member>
        <member name="P:PX.Data.PXFormulaAttribute.KeepIdleSelfUpdates">
            <summary>
            Gets or sets a value indicating that SetValueExt call (and following it
            FieldVerifying and FieldUpdated events) will be performed even if the
            newly calculated formula value equals to the previous one.
            </summary>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.GetDependencies(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance that calculates the value of the
            field the attribute is atached to, by the provided formula.</summary>
            <param name="formulaType">The formula to calculate the field value
            from other fields of the same data record. The formula can be an
            expression built from BQL functions such as <tt>Add</tt>,
            <tt>Sub</tt>, <tt>Mult</tt>, <tt>Div</tt>, <tt>Switch</tt> and <a
            href="BQL_Functions_For_Formulas.html">other
            functions</a>.</param>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.#ctor(System.Type,System.Type)">
            <summary>Initializes a new instance that calculates the value of the
            field the attribute is atached to and sets an aggregate function to
            calculate the value of a field in the parent data record. The
            aggregation function is applied to the values calculated by the first
            parameter for all child data records.</summary>
            <param name="formulaType">The formula to calculate the field value
            from other fields of the same data record. The formula can be an
            expression built from BQL functions such as <tt>Add</tt>,
            <tt>Sub</tt>, <tt>Mult</tt>, <tt>Div</tt>, <tt>Switch</tt> and <a
            href="BQL_Functions_For_Formulas.html">other functions</a>. If
            <tt>null</tt>, the aggregation function takes into account the field
            value inputted by the user.</param>
            <param name="aggregateType">The aggregation formula to calculate the
            parent data record field from the child data records fields. Use an <a
            href="BQL_Formulas.html">aggregation function</a> such as
            <tt>SumCalc</tt>, <tt>CountCalc</tt>, <tt>MinCalc</tt>, and
            <tt>MaxCalc</tt>.</param>
            <example>
            <para>The attribute below multiplies the <tt>TranQty</tt> and
            <tt>UnitPrice</tt> fields and assigns the result to the
            <tt>ExtPrice</tt> field. The attribute also calculates the sum of the computed
            <tt>ExtPrice</tt> values over all child <tt>DocTransaction</tt> data
            records and assigns the result to the parent's <tt>TotalAmt</tt> field.
            A common practice is to disable the input control for a calculated field. In the example
            below, the control is disabled using the <see cref="T:PX.Data.PXUIFieldAttribute">PXUIField</see>
            attribute.</para>
            <para>In the second example, the attribute does not provide a formula for calculating
            the <tt>TranQty</tt> property. The value inputted by a user is assigned to the field.
            The attribute only sets the formula to calculate the <tt>TotalQty</tt> field in the
            parent data record as the sum of <tt>TranQty</tt> values over all related child data
            records.</para>
            <code>
            [PXUIField(DisplayName = "Line Total", Enabled = false)]
            [PXFormula(
                typeof(Mult&lt;DocTransaction.tranQty, DocTransaction.unitPrice&gt;),
                typeof(SumCalc&lt;Document.totalAmt&gt;))]
            public virtual decimal? ExtPrice { get; set; }
            </code>
            <code>
            [PXFormula(null, typeof(SumCalc&lt;Document.totalQty&gt;))]
            public virtual decimal? TranQty { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.InitFormula(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.SetAggregate``1(PX.Data.PXCache,System.Type,System.Type)">
            <summary>Sets the new aggregation formula in the attribute instances
            that mark the specified field, for all data records in the cache
            object.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXFormula</tt> type.</param>
            <param name="aggregateType">The new aggregation formula that will be
            used to calculate the parent data record field from the child data
            records fields.</param>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.CalcAggregate``1(PX.Data.PXCache,System.Object)">
            <summary>Calculates the fields of the parent data record using the
            aggregation formula from the attribute instance that marks the
            specified field. The calculation is applied to the child data records
            merged with the modifications kept in the session.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXFormula</tt> type.</param>
            <param name="parent">The parent data record.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXFormulaAttribute.CalcAggregate``1(PX.Data.PXCache,System.Object,System.Boolean)" -->
        <member name="M:PX.Data.PXFormulaAttribute.RowUpdated(PX.Data.PXCache,PX.Data.PXRowUpdatedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.RowInserted(PX.Data.PXCache,PX.Data.PXRowInsertedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.RowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.FormulaDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.CalcAggregate(PX.Data.PXCache,System.Object[],System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFormulaAttribute.Graph_RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRateSyncAttribute">
            <summary>Synchronizes CuryRateID with the field to which this
            attribute is applied.</summary>
        </member>
        <member name="T:PX.Data.PXVariantAttribute">
            <summary>Indicates a DAC field of <tt>byte[]</tt> type that is not
            mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            The code belows the definition of a data field in the DAC.
            <code>
            [PXVariant]
            [PXUIField(Visible = false)]
            public object TargetTable { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXVariantAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXVariantAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXVariantAttribute.GetValue(System.Byte[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXVariantAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPhoneValidationAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXPhoneValidationAttribute.PhoneValidationField">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXPhoneValidationAttribute.PhoneMask">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXPhoneValidationAttribute.CountryIdField">
            <summary>Get, set.</summary>
        </member>
        <member name="M:PX.Data.PXPhoneValidationAttribute.Clear``1">
            
        </member>
        <member name="T:PX.Data.PXPhoneValidationAttribute.Definition">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXZipValidationAttribute">
            <summary>Implements validation of a value for DAC fields that hold a
            ZIP postal code.</summary>
            <example>
            The code below shows a typical usage of the attribute. The constructor
            with two parameters, which are set to the fields from the
            <tt>Country</tt> DAC, is used. The <tt>CountryIdField</tt> property is
            set to a field from the <tt>ARAddress</tt> DAC where the
            <tt>PostalCode</tt> is defined.
            <code>
            [PXDBString(20)]
            [PXUIField(DisplayName = "Postal Code")]
            [PXZipValidation(typeof(Country.zipCodeRegexp),
            typeof(Country.zipCodeMask),
            CountryIdField = typeof(ARAddress.countryID))]
            public virtual string PostalCode { ... }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXZipValidationAttribute.ZipValidationField">
            <summary>Gets or sets the DAC field that holds the ZIP validation
            information in a country data record.</summary>
        </member>
        <member name="P:PX.Data.PXZipValidationAttribute.CountryIdField">
            <summary>
            Gets or sets the DAC field that holds the identifier of a
            country data record. In case this field is set, zip code verification
            will also be performed each time the country ID field is updated.
            </summary>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.Clear``1">
            <summary>Clears the internal slots that are used to keep ZIP
            definitions and ZIP mask definitions.</summary>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the attribute that does not
            know the field that holds the ZIP mask.</summary>
            <param name="zipValidationField">The field that holds country's ZIP validation information.</param>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.#ctor(System.Type,System.Type)">
            <summary>Initializes a new instance of the attribute that does not
            know the field that holds the ZIP mask.</summary>
            <param name="zipValidationField">The field that holds country's ZIP validation information.</param>
            <param name="zipMaskField">The field that holds the country's ZIP mask.</param>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>Initializes a new instance of the attribute that uses the
            specified fields to retrieve the ZIP validation information and ZIP
            masks per country, and optionally performs re-validation of ZIP code
            upon each update of the specified Country ID field.</summary>
            <param name="zipMaskField">The field that holds the country's ZIP mask.</param>
            <param name="zipValidationField">The field that holds the country's ZIP validation information.</param>
            <param name="countryIdField">
            Optional field holding the Country ID. If not <c>null</c>, the <see cref="T:PX.Data.PXZipValidationAttribute"/> 
            will re-validate the ZIP code each time the <paramref name="countryIdField"/> is updated.
            </param>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXZipValidationAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXZipValidationAttribute.DefinitionZip">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXZipValidationAttribute.DefinitionMask">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDynamicMaskAttribute">
            <summary>Indicates that the input values of the field are restricted by the dynamic mask that is specified in <see cref="T:PX.Data.BqlCommand" /> in constructor. For the UI, the attribute
            restricts entering of the symbols that doesn't match the mask. For the contact-based API, the mask could be disabled, enabled for field selecting, or checked
            during row persisting as specified by the <see cref="P:PX.Data.PXDynamicMaskAttribute.CBApiValidationType" /> property.</summary>
            <example>
              <code title="Example" description="" lang="C#">
            [PXDBString(20)] 
            [PXUIField(DisplayName = "Postal Code")] 
            [PXDynamicMask(typeof(Search&lt;Country.zipCodeMask, Where&lt;Country.countryID, Equal&lt;Current&lt;Address.countryID&gt;&gt;&gt;&gt;))] 
            public virtual string PostalCode { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDynamicMaskAttribute.ValidationType">
            <summary>
            Specifies how the mask validation works for the contact-based API import
            (that is, for the graphs with <see cref="F:PX.Data.PXGraph.IsContractBasedAPI"/> set to <see langword="true"/>)
            or for the copy-paste context (that is, for the graphs with <see cref="F:PX.Data.PXGraph.IsCopyPasteContext"/> set to <see langword="true"/>).
            </summary>
        </member>
        <member name="F:PX.Data.PXDynamicMaskAttribute.ValidationType.None">
            <summary>
            The mask validation doesn't work.
            </summary>
        </member>
        <member name="F:PX.Data.PXDynamicMaskAttribute.ValidationType.FieldSelecting">
            <summary>
            The mask validation works during <see cref="M:PX.Data.IPXFieldSelectingSubscriber.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)"/>.
            </summary>
        </member>
        <member name="F:PX.Data.PXDynamicMaskAttribute.ValidationType.RowPersisting">
            <summary>
            The mask validation works during <see cref="M:PX.Data.IPXRowPersistingSubscriber.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)"/>.
            </summary>
        </member>
        <member name="P:PX.Data.PXDynamicMaskAttribute.DefaultMask">
            <summary>Gets or sets the default mask that is used if the dynamic mask returns nothing.</summary>
            <value>The default value is <see cref="F:System.String.Empty" />, which means that no mask is applied.</value>
        </member>
        <member name="P:PX.Data.PXDynamicMaskAttribute.CBApiValidationType">
            <summary>Specifies how the mask validation works for the contact-based API import (that is, for the graphs with <see cref="F:PX.Data.PXGraph.IsContractBasedAPI" /> set to <see langword="true"></see>).</summary>
            <value>The default value is <see cref="F:PX.Data.PXDynamicMaskAttribute.ValidationType.RowPersisting" />.</value>
        </member>
        <member name="P:PX.Data.PXDynamicMaskAttribute.CopyPasteValidationType">
            <summary>Specifies how the mask validation works for the copied-and-pasted values (that is, for the graphs with <see cref="F:PX.Data.PXGraph.IsCopyPasteContext" /> set to <see langword="true"></see>).</summary>
            <value>The default value is <see cref="F:PX.Data.PXDynamicMaskAttribute.ValidationType.None" />.</value>
        </member>
        <member name="M:PX.Data.PXDynamicMaskAttribute.#ctor(System.Type)">
            <summary>Creates an instance of the attribute.</summary>
            <param name="maskSearch">A search BQL command that specifies a mask for the attribute.</param>
        </member>
        <member name="M:PX.Data.PXDynamicMaskAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDynamicMaskAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDynamicMaskAttribute.TryGetMask(PX.Data.PXGraph,System.Object,System.String@)">
            <summary>Tries to get the mask for the specified field.</summary>
            <param name="graph">A graph instance.</param>
            <param name="row"></param>
            <param name="mask">The found validation mask, or <see cref="P:PX.Data.PXDynamicMaskAttribute.DefaultMask" />, depending on the returned value.</param>
            <returns>Returns <see langword="true"></see> if the mask is found, otherwise returns <see langword="false"></see>, which means that <see cref="P:PX.Data.PXDynamicMaskAttribute.DefaultMask" /> is used.</returns>
        </member>
        <member name="M:PX.Data.PXDynamicMaskAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXEntityNameAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBScalarAttribute">
            <summary>Defines the SQL subrequest that will be used to retrieve the
            value for the DAC field.</summary>
            <remarks>
            <para>You place this attribute on the DAC field that is not bound to
            any particular database column, but to multiple database columns.
            Fields marked with this attribute are considered bound to the database.</para>
            <para>The attribute will translate the provided BQL <tt>Search</tt>
            command into the SQL subrequest and insert it into the SELECT
            statement that retrieves data records of this DAC. In the BQL command,
            you can reference any bound field of any DAC.</para>
            <para>Note that you should also mark the field with an attribute
            that usually indicates an unbound
            field of a particular data type. Otherwise, the field may be
            displayed incorrectly in the user interface.</para>
            <para>You should not use fields marked with the <tt>PXDBScalar</tt>
            attribute in BQL parameters (<tt>Current</tt>, <tt>Optional</tt>, and
            <tt>Required</tt>).</para>
            </remarks>
            <example>
            The attribute below selects the <tt>AcctName</tt> value from the
            <tt>Vendor</tt> table as the <tt>VendorName</tt> value.
            <code>
            [PXString(50, IsUnicode = true)]
            [PXDBScalar(typeof(
            Search&lt;Vendor.acctName,
            Where&lt;Vendor.bAccountID, Equal&lt;RQRequestLine.vendorID&gt;&gt;&gt;))]
            public virtual string VendorName { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBScalarAttribute.CacheKey">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBScalarAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance that uses the provided <tt>Search</tt> command
            to retrieve the value of the field the attribute is attached to.
            </summary>
            <param name="search">The BQL query based on the <tt>Search</tt> class or
            other class derived from <tt>IBqlSearch</tt>.</param>
        </member>
        <member name="P:PX.Data.PXDBScalarAttribute.Forced">
            <summary>
            Returns or sets the value indicating that the DAC field is subquery and must be used as is
            </summary>
        </member>
        <member name="M:PX.Data.PXDBScalarAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBScalarAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBScalarAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDatetimeScalarAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRSACryptStringAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXRSACryptStringAttribute.#ctor">
            
        </member>
        <member name="M:PX.Data.PXRSACryptStringAttribute.#ctor(System.Int32)">
            
        </member>
        <member name="T:PX.Data.PXRSACryptDataProviderPasswordParameterAttribute">
            <summary>
            Encryption is used for value of Password parameter for Data Providers.
            isEncryptedField is used to store current state of field - encrypted or not.
            </summary>
            <param name="nameField">BQL field</param>
            <param name="isEncryptedField">BQL field</param>
        </member>
        <member name="T:PX.Data.PXEnumDescriptionAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXEnumDescriptionAttribute.Category">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXEnumDescriptionAttribute.EnumType">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXEnumDescriptionAttribute.Field">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXEnumDescriptionAttribute.DisplayName">
            <summary>Get.</summary>
        </member>
        <member name="M:PX.Data.PXEnumDescriptionAttribute.GetNames(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXEnumDescriptionAttribute.GetInfo(System.Type,System.Object)">
            
        </member>
        <member name="T:PX.Data.PXDBDataLengthAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDataLengthAttribute.#ctor(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXDBDataLengthAttribute.#ctor(System.String)">
            
        </member>
        <member name="T:PX.Data.DashboardTypeAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.DashboardTypeAttribute.Type">
            <exclude/>
        </member>
        <member name="T:PX.Data.DashboardVisibleAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.DashboardVisibleAttribute.#ctor(System.Boolean)">
            
        </member>
        <member name="M:PX.Data.DashboardVisibleAttribute.#ctor">
            
        </member>
        <member name="P:PX.Data.DashboardVisibleAttribute.Visible">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.PXEMailAccountIDSelectorAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCustomizationAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDateAndTimeAttribute">
            <summary>Indicates a DAC field of <tt>DateTime?</tt> type that is not mapped to a database column and is represented in the user interface by two controls to input date
            and time values separately.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field is not bound to a table column.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDateAndTime]
            public virtual DateTime? StartDate { get; set; }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXDateAndTimeAttribute.DATE_FIELD_POSTFIX">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDateAndTimeAttribute.TIME_FIELD_POSTFIX">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.Date_FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.Time_FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.Date_FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.Time_FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.CombineDateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Combines the provided data and time values in a single <tt>DateTime</tt>
            object.
            </summary>
            <param name="date">The date value.</param>
            <param name="time">The time value.</param>
            <returns>The combined <tt>DateTime</tt> value or <tt>null</tt> if the
            <tt>date</tt> value is <tt>null</tt>.</returns>
            <example>
            <code>
            ...
            return PXDateAndTimeAttribute.CombineDateTime(date, new DateTime(2008, 1, 1, 9, 0, 0));
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.SetDateEnabled``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            date part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
            <typeparam name="Field">The field the attribute is attached to.</typeparam>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.SetDateEnabled(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            date part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.SetTimeEnabled``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            time part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
            <typeparam name="Field">The field the attribute is attached to.</typeparam>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.SetTimeEnabled(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            time part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDateAndTimeAttribute.GetAttribute(PX.Data.PXCache,System.Object,System.String)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDateAndTimeAttribute.now">
            <summary>Represents the current local date and time in BQL.</summary>
        </member>
        <member name="T:PX.Data.PXVerifyEndDateAttribute">
            <summary>Verifies the integrity of a date range. That is, the start date of the range must be less than or equal to the end date.</summary>
            <remarks>
            <para>It can be applied to only the DAC-field that defines the end date of the range. This field should be of the <tt>DateTime</tt> type.</para>
            <para>When a user changes the range incorrectly (sets the start date greater than the end date), the attribute either 
            displays an error message or the start date is set equal to the end date. The behavior depends on the attribute settings.</para>
            <para>It is assumed that the field of start date is declared in the DAC-class before the field of the end date. 
            Otherwise, the attribute may work incorrectly.</para>
            </remarks>
            <example>
            <code>
            [PXDBDate]
            [PXUIField(DisplayName = "Expiration Date", Visibility = PXUIVisibility.SelectorVisible)]
            [PXVerifyEndDate(typeof(Contract.startDate), AllowAutoChange = false)]
            public virtual DateTime? ExpireDate { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXVerifyEndDateAttribute.AllowAutoChange">
            <summary>
            Gets or sets the flag of the date range autocorrection.
            If this flag is set, the start date becomes equal to the end date after it was changed by a user incorrectly. 
            Otherwise, an error message appears on the changed field.
            </summary>
        </member>
        <member name="P:PX.Data.PXVerifyEndDateAttribute.AutoChangeWarning">
            <summary>
            Gets or sets the flag of information about the autocorrection.
            If this flag is set, a warning message appears on the changed field.
            </summary>
        </member>
        <member name="M:PX.Data.PXVerifyEndDateAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="startDateField">Type of the start date DAC-field. This field should be of the <tt>DateTime</tt> type 
            and declared before current (the end date) field in the DAC-class.</param>
        </member>
        <member name="M:PX.Data.PXVerifyEndDateAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="T:PX.Data.TimeSpanFormatType">
            <summary>Defines data format types for the
            <see cref="T:PX.Data.PXDBTimeSpanLongAttribute">PXDBTimeSpanLong</see>
            and <see cref="T:PX.Data.PXTimeSpanLongAttribute">PXTimeSpanLong</see>
            attributes.</summary>
        </member>
        <member name="F:PX.Data.TimeSpanFormatType.DaysHoursMinites">
            <summary>
            Time span in format "dddhhmm", where "ddd" represents days, "hh" represents
            hours (with leading zeros), "mm" represents minutes (with leading zeros).
            </summary>
        </member>
        <member name="F:PX.Data.TimeSpanFormatType.DaysHoursMinitesCompact">
            <summary>
            Time span in format "dddhhmm", where "ddd" represents days, "hh" represents
            hours (with leading zeros), "mm" represents minutes (with leading zeros).
            </summary>
        </member>
        <member name="F:PX.Data.TimeSpanFormatType.LongHoursMinutes">
            <summary>
            Time span in format "HHHHmm", where "HHHH" represents
            hours (recalculated to include days), "mm" represents minutes (with leading zeros).
            </summary>
        </member>
        <member name="F:PX.Data.TimeSpanFormatType.ShortHoursMinutes">
            <summary>
            Time span in format "hhmm", where "hh" represents
            hours, "mm" represents minutes (with leading zeros).
            </summary>
        </member>
        <member name="F:PX.Data.TimeSpanFormatType.ShortHoursMinutesCompact">
            <summary>
            Time span in format "hhmm", where "hh" represents
            hours (with leading zeros), "mm" represents minutes (with leading zeros).
            </summary>
        </member>
        <member name="T:PX.Data.PXTimeSpanLongAttribute">
            <summary>Indicates a DAC field of the <tt>int?</tt> type that represents the duration (in minutes)
            and that is not mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field is not bound to a table column.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXTimeSpanLong(Format = TimeSpanFormatType.LongHoursMinutes)]
            public virtual int? InitResponse { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXTimeSpanLongAttribute.Format">
            <summary>Gets or sets the data format type. Possible values are
            defined by the <see
            cref="T:PX.Data.TimeSpanFormatType">TimeSpanFormatType</see>
            enumeration.</summary>
        </member>
        <member name="P:PX.Data.PXTimeSpanLongAttribute.InputMask">
            <summary>Gets or sets the pattern that indicates the allowed
            characters in a field value. By default, the property is null, and the
            attribute determines the input mask by the <tt>Format</tt>
            value.</summary>
        </member>
        <member name="M:PX.Data.PXTimeSpanLongAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXTimeSpanLongAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTimeSpanLongAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTimeSpanAttribute">
            <summary>Indicates a DAC field of <tt>int?</tt> type that represents a date value as minutes passed from 01/01/1900 and that is not mapped to a database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field is not bound to a table column.</remarks>
            <example>
            The code below shows a full definition of a DAC field not bound to any database columns.
            <code title="" description="" lang="CS">
            public abstract class timeOnly : PX.Data.BQL.BqlInt.Field&lt;timeOnly&gt; { }
            [PXUIField(DisplayName = "Time")]
            [PXTimeSpan]
            public virtual int? TimeOnly
            {
                get
                {
                    return (int?)Date.Value.TimeOfDay.TotalMinutes;
                }
            }</code></example>
        </member>
        <member name="P:PX.Data.PXTimeSpanAttribute.InputMask">
            <summary>Gets or sets the pattern that indicates the allowed
            characters in a field value. The user interface will not allow the
            user to enter other characters in the input control associated with
            the field.</summary>
        </member>
        <member name="P:PX.Data.PXTimeSpanAttribute.DisplayMask">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXTimeSpanAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXTimeSpanAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXTimeSpanAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXTimeSpanAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTimeSpanAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImageAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXImageAttribute.HeaderImage">
            <summary>Get, set.</summary>
        </member>
        <member name="T:PX.Data.PXHeaderImageAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.ReadOnlyScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.ReplaceCurrentScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.RestoreScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNoUpdateAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCheckUnique">
            <summary>Ensures that a DAC field has distinct values in all data records in a given context.</summary>
            <remarks>
              <para>The attribute is placed on the declaration of a DAC field, and ensures that this field has a unique value within the current context.</para>
              <para>The functionality of the attribute can be implemented through other ways. The use of the attribute for imposing constraint of a key field is obsolete. You
            should use the <tt>IsKey</tt> property of the data type attribute for this purpose.</para>
            </remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDBString(30, IsKey = true)]
            [PXUIField(DisplayName = "Mailing ID")]
            [PXCheckUnique]
            public override string NotificationCD { get; set; }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXCheckUnique.Where">
            <summary>
            The additional <tt>Where</tt> clause that filters the data records
            that are selected to check uniqueness of the field value among them.
            </summary>
        </member>
        <member name="M:PX.Data.PXCheckUnique.#ctor(System.Type[])">
            <summary>Initializes a new instance of the attribute.</summary>
            <param name="fields">Fields. The parameter is optional.</param>
        </member>
        <member name="P:PX.Data.PXCheckUnique.IgnoreNulls">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXCheckUnique.ClearOnDuplicate">
            <summary>
            Gets of sets the value that indicates whether the field value
            is cleared when it duplicates a value in another data record.
            By default, the property equals <tt>true</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXCheckUnique.ErrorMessage">
            <summary>
            Gets or sets the value of custom error message.
            If message is not set, then default message will be shown.
            </summary>
        </member>
        <member name="M:PX.Data.PXCheckUnique.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCheckUnique.RowInserting(PX.Data.PXCache,PX.Data.PXRowInsertingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCheckUnique.RowUpdating(PX.Data.PXCache,PX.Data.PXRowUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCheckUnique.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCheckUnique.CheckEquals(System.Object,System.Object)">
            <summary>
            Checks whether the provided objects are equal, ignoring the case
            if the provided objects are strings.
            </summary>
            <param name="v1">The first object to compare.</param>
            <param name="v2">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.HotKeyInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXShortCutAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXShortCutAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,PX.Export.KeyCodes)">
            
        </member>
        <member name="M:PX.Data.PXShortCutAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Char[])">
            
        </member>
        <member name="P:PX.Data.PXShortCutAttribute.HotKey">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.PXDefaultValidateAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCustomStringListAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXCustomStringListAttribute.AllowedValues">
            <summary>Get.</summary>
        </member>
        <member name="P:PX.Data.PXCustomStringListAttribute.AllowedLabels">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.PXDependsOnFieldsAttribute">
            <summary>Used for calculated DAC fields that contain references to other fields in their property getters. The attribute allows such fields to work properly in reports
            and Integration Services.</summary>
            <example>
            The code below shows definition of a calculated DAC field. The property getter involves two fields, <tt>DocBal</tt> and <tt>TaxWheld</tt>. These two fields
            should be specified as parameters of the <tt>PXDependsOnFields</tt> attribute.
            <code title="" description="" lang="CS">
            [PXDefault(TypeCode.Decimal, "0.0")]
            [PXUIField(DisplayName = "Balance")]
            public virtual Decimal? ActualBalance
            {
                [PXDependsOnFields(typeof(docBal), typeof(taxWheld))]
                get
                {
                    return this.DocBal - this.TaxWheld;
                }
            }</code><code title="Example" description="The following code displays two values in one box in the UI: the number of rejected requests and the percent of this number in all requests." lang="CS">
            [PXString]
            [PXUIField(DisplayName = "Nbr. of Declined Web Services API Requests (% of All)")]
            [PXDependsOnFields(typeof(UsrSMLicenseStatistic.rejectedAPICount), typeof(UsrSMLicenseStatistic.rejectedAPICountP))]
            public virtual string RejectedAPICountPW
            {
                get
                {
                    return (string.Format("{0} ({1}%)", RejectedAPICount, RejectedAPICountP));
            }
            }</code></example>
        </member>
        <member name="M:PX.Data.PXDependsOnFieldsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes an instance of the attribute that makes the field the
            attribute is attached to depend on the provided DAC fields.
            </summary>
            <param name="fields">The fields to depend to.</param>
        </member>
        <member name="T:PX.Data.IPXReportRequiredField">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDecimalListAttribute">
            <summary>Sets a dropdown list as the input control for a DAC field of
            <tt>decimal</tt> type.</summary>
            <remarks>
            <para>The user will be able to select a value from the predefined
            values list. Values are specified in the constructor as strings,
            because the attribute derives from <tt>PXStringList</tt>. The
            attribute converts a selected value to the <tt>decimal</tt> type that
            is assigned to the field.</para>
            <para>The DAC field data type must be defined using the <see
            cref="T:PX.Data.PXDBDecimalAttribute">PXDBDecimalString</see>
            attribute.</para>
            </remarks>
            <example>
            <code>
            [PXDecimalList(
                new string[] { "0.1", "0.5", "1.0", "10", "100" },
                new string[] { "0.1", "0.5", "1.0", "10", "100" })]
            public virtual decimal? InvoicePrecision { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDecimalListAttribute.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance with the provided lists of allowed values
            and labels. When a user selects a label in the user interface, the
            corresponding value is converted to <tt>decimal</tt> type and assigned to the
            field marked by the instance. The two lists must be of the same length.
            </summary>
            <param name="allowedValues">The array of string values the user will be able
            to select from. A string value is converted by the attribute to the decimal
            value.</param>
            <param name="allowedLabels">The array of labels corresponding to values and
            displayed in the user interface.</param>
        </member>
        <member name="M:PX.Data.PXDecimalListAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDateListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAttributeFamilyAttribute">
            <summary>Allows to specify rules, which attributes can not be combined
            together.</summary>
        </member>
        <member name="M:PX.Data.PXAttributeFamilyAttribute.#ctor(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXAttributeFamilyAttribute.GetRoots(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXAttributeFamilyAttribute.FromType(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXAttributeFamilyAttribute.CheckAttributes(PX.Data.PXCache.DACFieldDescriptor,PX.Data.PXEventSubscriberAttribute[])">
            
        </member>
        <member name="T:PX.Data.PXValidationWriter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFeatureAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDynamicButtonAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUniqueAttribute">
            <summary>
            Applies application-side unique constraint on a field.
            </summary>
        </member>
        <member name="F:PX.Data.PXUniqueAttribute._allowNulls">
            <summary>
            Determines if need to skip nulls. False to treat null as unique value.
            True by default.
            </summary>
        </member>
        <member name="M:PX.Data.PXUniqueAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXGenerateAfterAttribute">
            <summary>
            When we generate controls based on the DAC fields we can use this attribute to establish controls order. 
            Fields marked with PXGenerateAfterAttribute will come right after the field passed as an argument to PXGenerateAfterAttribute
            </summary>
        </member>
        <member name="M:PX.Data.PXEventSubscriberAttribute.GetBaseCacheWithTableAttr(System.Type)">
            <summary>
            Returns the first cache extension in <see cref="T:PX.Data.PXCacheExtension"/> extension chain, that 
            has <see cref="T:PX.Data.PXTableAttribute"/> or <see cref="T:PX.Data.PXTableNameAttribute"/> applied.
            </summary>
            <param name="cache">Cache to start the attribute search from.</param>
        </member>
        <member name="M:PX.Data.PXEventSubscriberAttribute.InjectAttributeDependencies(PX.Data.PXCache)">
            <summary>
            Injects dependencies of a certain level inside the attribute's instance using registered <see cref="!:IDependencyInjector">dependency injector</see>.
            </summary>
            <param name="cache"><see cref="T:PX.Data.PXCache"/> instance that is used to resolve
            <see cref="T:PX.Data.PXCache"/>- and <see cref="T:PX.Data.PXGraph"/>-bound parameters during the injection into cache-level attributes;
            <see langword="null"/> for dependencies that are injected into type-level attributes.</param>
        </member>
        <member name="T:PX.Data.IPXCommandPreparingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>CommandPreparing</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowSelectingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowSelecting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowSelectedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowSelected</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowInsertingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowInserting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowInsertedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowInserted</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowUpdatingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowUpdating</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowUpdatedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowUpdated</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowDeletingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowDeleting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowDeletedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowDeleted</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowPersistingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowPersisting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXRowPersistedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>RowPersisted</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXFieldDefaultingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>FieldDefaulting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXFieldUpdatingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>FieldUpdating</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXFieldVerifyingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>FieldVerifying</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXFieldUpdatedSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>FieldUpdated</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXFieldSelectingSubscriber">
            <summary>
            Indicates that an attribute that implements this interface subscribes
            to the <tt>FieldSelecting</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXExceptionHandlingSubscriber">
            <summary>
            Indicates that an attribute that implemets this interface subscribes
            to the <tt>ExceptionHandling</tt> event.
            </summary>
        </member>
        <member name="T:PX.Data.IPXUIControlFieldAttribute">
            <summary>
            Marks attributes used in new UI ExposedView
            </summary>
        </member>
        <member name="T:PX.Data.PXAggregateAttribute">
            <summary>The base class for classes that combine multiple attributes
            into one. By creating a derived class, you can reuse the same set of attributes
            with similar properties of different classes.</summary>
            <remarks>Some DACs contain the same fields, which have the same attributes.
            You can combine multiple attributes into one by creating a class
            derived from <tt>PXAggregateAttribute</tt> and assigning these attributes
            to the created class.</remarks>
            <example>
            <code description="The original definitions of the &lt;tt&gt;ARInvoice&lt;/tt&gt; and &lt;tt&gt;SOOrder&lt;/tt&gt;
            classes contain long definitions of the &lt;tt&gt;CustomerID&lt;/tt&gt; fields." lang="CS">
            public class ARInvoice : IBqlTable
            {
                [PXDBInt()]
                [PXUIField(DisplayName = "Customer")]
                [PXDefault()]
                [PXSelector(typeof(Search&lt;BAccountR.bAccountID,
                    Where&lt;BAccountR.status, Equal&lt;BAccount.status.active&gt;&gt;&gt;))]
                public override Int32? CustomerID
            }
            public class SOOrder : IBqlTable
            {
                [PXDBInt()]
                [PXUIField(DisplayName = "Customer")]
                [PXDefault()]
                [PXSelector(typeof(Search&lt;BAccountR.bAccountID,
                    Where&lt;BAccountR.status, Equal&lt;BAccount.status.active&gt;&gt;&gt;))]
                public override Int32? CustomerID
            }</code>
            <code description="A set of attributes is combined into a single class as follows." lang="CS">
            [PXDBInt()]
            [PXUIField(DisplayName = "Customer")]
            [PXDefault()]
            [PXSelector(typeof(Search&lt;BAccountR.bAccountID,
                Where&lt;BAccountR.status, Equal&lt;BAccount.status.active&gt;&gt;&gt;))]
            public class CustomerActiveAttribute : PXAggregateAttribute { }
            
            public class ARInvoice : IBqlTable
            {
                [CustomerActive]
                public override Int32? CustomerID { get; set; }
            }
            
            public class SOOrder : IBqlTable
            {
                [CustomerActive]
                public override Int32? CustomerID { get; set; }
            }
            </code></example>
        </member>
        <member name="F:PX.Data.PXAggregateAttribute._Attributes">
            <summary>The collection of the attributes combined in the current attribute.</summary>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.#ctor">
            <summary>
            Initializes a new instance of the attribute; pulls the
            <tt>PXEventSubscriberAttribute</tt>-derived attributes placed on the
            current attribute and adds them to the collection of aggregated attributes.
            </summary>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.GetAttributes">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.GetAggregatedAttributes">
            <exclude />
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.GetAttribute``1">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.Clone(PX.Data.PXAttributeLevel)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.InjectAttributeDependencies(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXAggregateAttribute.BqlTable">
            <summary>Gets or sets the DAC associated with the attribute. The
            setter also sets the provided value as <tt>BqlTable</tt> in all
            attributes combined in the current attribute.</summary>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.SetBqlTable(System.Type)">
            <exclude />
        </member>
        <member name="P:PX.Data.PXAggregateAttribute.FieldName">
            <summary>Gets or sets the name of the field associated with the attribute. The setter also sets the provided value as <tt>FieldName</tt> in all attributes combined in
            the current attribute.</summary>
        </member>
        <member name="P:PX.Data.PXAggregateAttribute.FieldOrdinal">
            <summary>Gets or sets the index of the field associtated with the
            attribute. The setter also sets the provided value as
            <tt>FieldOrdinal</tt> in all attributes combined in the current
            attribute.</summary>
        </member>
        <member name="M:PX.Data.PXAggregateAttribute.GetSubscriber``1(System.Collections.Generic.List{``0})">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTableAttribute">
            <summary>Binds a DAC that derives from another DAC to the table having
            the name of the derived DAC. Without the attribute, the derived DAC
            will be bound to the same table as the DAC that starts the inheritance
            hierarchy.</summary>
            <remarks>
            	<para>The attribute is placed on the declaration of a DAC.</para>
            	<para>The attribute can be used in customizations. You place it on the
            declaration of a DAC extension to indicate that the extension fields
            are bound to a separate table.</para>
            </remarks>
            <example>
            	<code title="Example" description="The PXTable attribute below indicates that the APInvoice DAC is bound to the APInvoice table. Without the attribute, it would be bound to the APRegister table." lang="CS">
            [System.SerializableAttribute()]
            [PXTable()]
            public partial class APInvoice : APRegister, IInvoice
            {
                ...
            }</code>
            	<code title="Example2" description="The PXTable attribute below indicates that the FSxLocation extension of the Location DAC is bound to a separate table and the Location DAC can include data records that do not have the corresponding data records in the extension table. Here, you specify the key fields of the Location DAC, because it includes a surrogate-natural pair of key fields, LocationID (which is the database key as well) and LocationCD (human-readable value). In the PXTable attribute, you specify the surrogate LocationID field.
            " groupname="Example" lang="CS">
            [PXTable(typeof(Location.bAccountID),
                     typeof(Location.locationID),
                     IsOptional = true)]
            public class FSxLocation : PXCacheExtension&lt;Location&gt;
            {
                ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXTableAttribute.IsOptional">
            <summary>Gets or sets the value that indicates whether the base DAC
            data record can exist without the extension DAC data record. This
            situation corresponds to the use of the attribute on the extension DAC
            that is bound to a separate database table. By default, the value is
            <tt>false</tt>, and the data record in the extension table is always
            created for a data record of the base table.</summary>
        </member>
        <member name="M:PX.Data.PXTableAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.GetRowCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.GetRowByNoteIdCommand">
            <exclude />
        </member>
        <member name="M:PX.Data.PXTableAttribute.GetTableCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.KeysCommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.#ctor">
            <summary>Initializes a new instance of the attribute.</summary>
        </member>
        <member name="M:PX.Data.PXTableAttribute.#ctor(System.Type[])">
            <summary>Initializes a new instance of the attribute when the base DAC
            has a pair of surrogate and natural keys. In this case, in the
            parameters, you should specify all key fields of the base DAC. From
            the pair of the surrogate and natural keys, you include only the
            surrogate key.</summary>
            <param name="links">The list of key fields of the base DAC.</param>
            <example>
            <para>The <tt>PXTable</tt> attribute below indicates that the <tt>FSxLocation</tt> extension
            of the <tt>Location</tt> DAC is bound to a separate table and the <tt>Location</tt> DAC
            can include data records that do not have the corresponding data record
            in the extension table.</para>
            <para>You specify the key fields of the <tt>Location</tt> DAC, because it
            includes a surrogate-natural pair of key fields, <tt>LocationID</tt> (which is the
            database key as well) and <tt>LocationCD</tt> (human-readable value). In the
            <tt>PXTable</tt> attribute, you specify the surrogate
            <tt>LocationID</tt> field.</para>
            <code>
            [PXTable(typeof(Location.bAccountID),
                     typeof(Location.locationID),
                     IsOptional = true)]
            public class FSxLocation : PXCacheExtension&lt;Location&gt;
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXTableAttribute.BypassOnDelete(System.Type[])">
            <param name="tables">Tables that should be bypassed on delete operation.</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.PersistInserted(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.PersistUpdated(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.PersistDeleted(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTableAttribute.IsBypassedOnDelete(System.Type)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProjectionAttribute">
            <summary>Binds the DAC to an arbitrary data set defined by the
            <tt>Select</tt> command. The attribute thus defines a named view, but
            implemented by the server side rather then the database.</summary>
            <remarks>
            	<para>You can place the attribute on the DAC declaration. The
            framework doesn't bind such DAC to a database table (that is,
            doesn't select data from the table having the same name as the DAC).
            Instead, you specify an arbitrary BQL <tt>Select</tt> command that is
            executed to retrieve data for the DAC. The <tt>Select</tt> command can
            select data from one or several comands and include any BQL
            clauses.</para>
            	<para>By default, the projection is readonly, but you can make it
            updatable by setting the <tt>Persistent</tt> property to
            <tt>true</tt>. The attribute will use the <tt>Select</tt> command to
            determine which tables needs updating. However, only the first table
            referenced by the <tt>Select</tt> command is updated by default. If
            the data should be committed not only into main table, but also to the
            joined tables, the fields that connect the tables must be marked with
            the <see cref="T:PX.Data.PXExtraKeyAttribute">PXExtraKey</see> attribute.
            Additionally, you can use the constructor with two parameters to
            provide the list of table explicitly. This list should include the
            tables referenced in the <tt>Select</tt> command. This constructor
            will also set the <tt>Persistent</tt> property to
            <tt>true</tt>.</para>
            	<para>You should explicitly map the projection fields to the column
            retrieved by the <tt>Select</tt> command. To map a field, set the
            <tt>BqlField</tt> property of the attribute that binds the field to
            the database (such as <tt>PXDBString</tt> and <tt>PXDBDecimal</tt>) to
            the type that represents the column, as follows.</para>
            	<code>[PXDBString(15, IsUnicode = true, BqlField = typeof(Supplier.accountCD))]</code>
            </remarks>
            <seealso cref="T:PX.Data.PXExtraKeyAttribute"></seealso>
            <example>
            	<code title="Example" description="In the following example, the attribute joins data from two table and projects it to the single DAC." lang="CS">
            [Serializable]
            [PXProjection(typeof(
                Select2&lt;Supplier,
                    InnerJoin&lt;SupplierProduct,
                        On&lt;SupplierProduct.accountID, Equal&lt;Supplier.accountID&gt;&gt;&gt;&gt;))]
            public partial class SupplierPrice : IBqlTable
            {
                public abstract class accountID : PX.Data.BQL.BqlInt.Field&lt;accountID>
                {
                }
                // The field mapped to the Supplier field (through setting of BqlField)
                [PXDBInt(IsKey = true, BqlField = typeof(Supplier.accountID))]
                public virtual int? AccountID { get; set; }
                public abstract class productID : PX.Data.BQL.BqlInt.Field&lt;productID>
                {
                }
                // The field mapped to the SupplierProduct field
                // (through setting of BqlField)
                [PXDBInt(IsKey = true, BqlField = typeof(SupplierProduct.productID))]
                [PXUIField(DisplayName = "Product ID")]
                public virtual int? ProductID { get; set; }
                ...
            }</code>
            	<code title="Example2" description="Note how the DAC declares the fields. The projection defined in the example is readonly. To make it updatable, you should set the Persistent property to true, changing the attribute declaration to the following one." groupname="Example" lang="CS">
            [PXProjection(
                typeof(Select2&lt;Supplier,
                    InnerJoin&lt;SupplierProduct,
                        On&lt;SupplierProduct.accountID, Equal&lt;Supplier.accountID&gt;&gt;&gt;&gt;),
                Persistent = true
            )]</code>
            	<code title="Example3" description="If the projection should be able to update both tables, you should place the PXExtraKey attribute on the field that relates the tables (the AccountID property) as follows." groupname="Example2" lang="CS">
            [PXDBInt(IsKey = true, BqlField = typeof(Supplier.accountID))]
            [PXExtraKey]
            public virtual int? AccountID { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXProjectionAttribute.Persistent">
            <summary>Gets or sets the value that indicates whether the instances
            of the DAC that represents the projection can be saved to the
            database. If the property equals <tt>true</tt>, the attribute will
            parse the <tt>Select</tt> command and determine the tables that should
            be updated. Alternatively, you can specify the list of tables in the
            constructor. If the property equals <tt>false</tt>, the DAC is
            readonly.</summary>
            <example>
            The projection defined below can update the <tt>Supplier</tt> table.
            <code>
            [Serializable]
            [PXProjection(
                typeof(Select2&lt;Supplier,
                    InnerJoin&lt;SupplierProduct,
                        On&lt;SupplierProduct.accountID, Equal&lt;Supplier.accountID&gt;&gt;&gt;&gt;),
                Persistent = true
            )]
            public partial class SupplierPrice : IBqlTable
            { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance that binds the DAC to the data set
            defined by the provided <tt>Select</tt> command.</summary>
            <param name="select">The BQL command that defines the data set, based
            on the <tt>Select</tt> class or any other class that implements
            <tt>IBqlSelect</tt>.</param>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance that binds the DAC to the
            specified data set and enables update saving of the DAC instances to
            the database. The tables that should be updated during update of the
            current DAC.</summary>
            <param name="select">The BQL command that defines the data set, based
            on the <tt>Select</tt> class or any other class that implements
            <tt>IBqlSelect</tt>.</param>
            <param name="persistent">The list of DACs that represent the tables to
            update during update of the current DAC.</param>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.GetTables">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.GetRowCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.GetRowByNoteIdCommand">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXProjectionAttribute.CanSelectByNoteId">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.GetTableCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.PersistInserted(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.PersistUpdated(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXProjectionAttribute.PersistDeleted(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccumulatorAttribute">
            <summary>Updates values of a data record in the database according to
            specified policies. You can derive a custom attribute from this
            attribute and override the <tt>PrepareInsert()</tt> method to set
            other assignment behavior for target values (such as taking the
            maximum instead of summarizing).</summary>
            <remarks>
              <para>You can use the attribute on its own or derive a custom attribute. Both a successor of <tt>PXAccumulator</tt> and the <tt>PXAccumulator</tt> attribute
            itself should be placed on the definition of a DAC.</para>
              <para>To define custom policy for fields of the specified DAC, you should derive a custom class from this attribute and override the <tt>PrepareInsert()</tt>
            method. The method is called within the <tt>PersistInserted()</tt> method of the <tt>PXAccumulator</tt>. You can override the <tt>PersistInserted()</tt> method
            as well.</para>With default settings, the attribute doesn't work with tables that contain an identity column. To use the attribute on these tables, you should set
            to true the <tt>UpdateOnly</tt> property of the <tt>columns</tt> parameter in the <tt>PrepareInsert()</tt> method.
            <para>The logic of the <tt>PXAccumulator</tt> attribute works on saving of the inserted data records to the database. This process is implemented in the
            PersistInserted() method of the cache. This methods detects the <tt>PXAccumulator</tt>-derived attribute and calls the <tt>PersistInserted()</tt> method
            defined in this attribute.</para><para>When you update a data record using the attribute, you typically initialize a new instance of the DAC, set the key fields to the key values of the data
            record you need to update, and insert it into the cache. When a user saves changes on the webpage, or you save changes from code, your custom attribute
            processes these inserted data records in its own way, updating database records instead of inserting new records and applying the policies you specify.</para><para>By deriving from this attribute, you can implement an attribute that will prevent certain fields from further updates once they are initialized with
            values.</para></remarks>
            <example>
              <code title="Example" description="The code below shows how the attribute can be used directly. When a data record is saved, value of every field from the first array will be added to the previously saved value of the corresponding field from the second array. That is, FinYtdBalance values will be accumulated in the FinBegBalance value, TranYtdBalance values in the TranBegBalance value, and so on." lang="CS">
            [PXAccumulator(
                new Type[] {
                    typeof(CuryAPHistory.finYtdBalance),
                    typeof(CuryAPHistory.tranYtdBalance),
                    typeof(CuryAPHistory.curyFinYtdBalance),
                    typeof(CuryAPHistory.curyTranYtdBalance)
                },
                new Type[] {
                    typeof(CuryAPHistory.finBegBalance),
                    typeof(CuryAPHistory.tranBegBalance),
                    typeof(CuryAPHistory.curyFinBegBalance),
                    typeof(CuryAPHistory.curyTranBegBalance)
                }
            )]
            [Serializable]
            public partial class CuryAPHist : CuryAPHistory
            { ... }</code>
              <code title="Example2" description="In the next xample, the class derived from PXAccumulatorAttribute overrides the PrepareInsert() method and specifies the assignment behavior for several fields." lang="CS">
            public class SupplierDataAccumulatorAttribute : PXAccumulatorAttribute
            {
                public SupplierDataAccumulatorAttribute()
                {
                    base._SingleRecord = true;
                }
             
                protected override bool PrepareInsert(PXCache sender, object row,
                                                      PXAccumulatorCollection columns)
                {
                    if (!base.PrepareInsert(sender, row, columns))
                        return false;
             
                    SupplierData bal = (SupplierData)row;
                    columns.Update&lt;SupplierData.supplierPrice&gt;(
                        bal.SupplierPrice, PXDataFieldAssign.AssignBehavior.Initialize);
                    columns.Update&lt;SupplierData.supplierUnit&gt;(
                        bal.SupplierUnit, PXDataFieldAssign.AssignBehavior.Initialize);
                    columns.Update&lt;SupplierData.conversionFactor&gt;(
                        bal.ConversionFactor, PXDataFieldAssign.AssignBehavior.Initialize);
                    columns.Update&lt;SupplierData.lastSupplierPrice&gt;(
                        bal.LastSupplierPrice, PXDataFieldAssign.AssignBehavior.Replace);
                    columns.Update&lt;SupplierData.lastPurchaseDate&gt;(
                        bal.LastPurchaseDate, PXDataFieldAssign.AssignBehavior.Replace);
             
                    return true;
                }
            }
            ...
            // Applying the custom attribute to a DAC
            [System.SerializableAttribute()]
            [SupplierDataAccumulator]
            public class SupplierData : PX.Data.IBqlTable
            { ... }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXAccumulatorAttribute.rowselection">
            <exclude />
        </member>
        <member name="F:PX.Data.PXAccumulatorAttribute._Source">
            <exclude />
        </member>
        <member name="F:PX.Data.PXAccumulatorAttribute._Destination">
            <exclude />
        </member>
        <member name="F:PX.Data.PXAccumulatorAttribute._SingleRecord">
            <exclude />
        </member>
        <member name="F:PX.Data.PXAccumulatorAttribute._BqlTable">
            <exclude />
        </member>
        <member name="P:PX.Data.PXAccumulatorAttribute.CacheSelected">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXAccumulatorAttribute.SingleRecord">
            <summary>The value that indicates (if set to <tt>true</tt>) that the attribute always updates only a single data record.</summary>
        </member>
        <member name="P:PX.Data.PXAccumulatorAttribute.BqlTable">
            <summary>The DAC the cache is associated with.</summary>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.#ctor">
            <summary>Empty default constructor.</summary>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.#ctor(System.Type[],System.Type[])">
            <summary>The constructor that initializes an instance of the attribute with the source fields and destination fields.</summary>
            <param name="source">Fields whose values are summarized in the
            corresponding destination fields.</param>
            <param name="destination">Fields that store sums of source fields from
            the data records inserted into the database previously to the current
            data record.</param>
            <remarks>For example, a source field may be the transaction amount and
            the destination field the current balance.</remarks>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.GetRowCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.GetTableCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.PrepareInsert(PX.Data.PXCache,System.Object,PX.Data.PXAccumulatorCollection)">
            <summary>
            The method to override in a successor of the <tt>PXAccumulator</tt>
            attribute and set policies for fields.
            </summary>
            <param name="sender">The cache object into which the data record is inserted.</param>
            <param name="row">The data record to insert into the cache.</param>
            <param name="columns">The object representing columns.</param>
            <remarks>
              <para>The method is invoked by the <tt>PersistInserted(...)</tt> method
            of the <tt>PXAccumulator</tt> attribute.</para>
              <para>Typically, when you override this method, you call the base version
            of the method and set the policies for fields by calling the
            <tt>Update&lt;&gt;()</tt> method of the columns parameter.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.PersistInserted(PX.Data.PXCache,System.Object)">
            <summary>
            The method that will be executed by the cache instead of the cache's
            <see cref="M:PX.Data.PXCache`1.PersistInserted(System.Object,System.Boolean)">PersistInserted()</see> method.
            If the attribute is attached to the cache, the cache will discover
            that a successor of the <tt>PXInterceptor</tt> attribute is attached,
            invoke the attribute's method from the standard method, and quit the
            standard method.
            </summary>
            <remarks>
            If you only need to set insertion policies for some DAC field, you should override only the
            <tt>PrepareInsert()</tt> method. Overriding the <tt>PersistInserted()</tt>
            method is needed to tweak the persist operation, such as to catch and
            process errors.
            </remarks>
            <param name="sender">The cache object into which the data record is inserted.</param>
            <param name="row">The inserted data record to be saved to the database.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.PersistUpdated(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.PersistDeleted(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXAccumulatorAttribute.Insert(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAccumulatorCollection">
            <summary>Represents a collection of settings for individual fields
            processed by the <see cref="T:PX.Data.PXAccumulatorAttribute">PXAccumulator</see>
            attribute.</summary>
            <remarks>The type is used by the <tt>PXAccumulator</tt> attribute in the <see cref="M:PX.Data.PXAccumulatorAttribute.PrepareInsert(PX.Data.PXCache,System.Object,PX.Data.PXAccumulatorCollection)"> PrepareInsert</see>
            method. You can use the columns parameters to set updating policies and restrictions.</remarks>
        </member>
        <member name="F:PX.Data.PXAccumulatorCollection._Exceptions">
            <exclude />
        </member>
        <member name="F:PX.Data.PXAccumulatorCollection._InsertOnly">
            <exclude />
        </member>
        <member name="P:PX.Data.PXAccumulatorCollection.InsertOnly">
            <summary>Gets or sets the value that indicates whether the attribute
            is allowed only to insert new data records in the database table and
            is not allowed to update them.</summary>
        </member>
        <member name="F:PX.Data.PXAccumulatorCollection._UpdateOnly">
            <exclude />
        </member>
        <member name="P:PX.Data.PXAccumulatorCollection.UpdateOnly">
            <summary>Gets or sets the value that indicates whether the attribute
            is allowed only to update existing data records in the database table
            and is not allowed to insert new.</summary>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Add``1">
            <summary>Adds a node for the specified field into the collection. The
            field is specified through the type parameter.</summary>
            <param name="bqlField">The BQL type of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Add(System.Type)">
            <summary>Adds a node for the specified field into the
            collection.</summary>
            <param name="bqlField">The BQL type of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Add(System.String)">
            <summary>Adds a node for the specified field into the
            collection.</summary>
            <param name="bqlField">The BQL type of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Remove``1">
            <summary>Remove the setting for the specified field from the
            collection. The field is specified through the type
            parameter.</summary>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Remove(System.Type)">
            <summary>Remove the setting for the specified field from the
            collection.</summary>
            <param name="bqlField">The BQL type of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Remove(System.String)">
            <summary>Remove the setting for the specified field from the
            collection.</summary>
            <param name="field">The name of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update``1(System.Object)">
            <summary>Configures update of the specified field as addition of the
            new value to the value kept in the database. The field is specified
            through the type parameter.</summary>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update``1(System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <summary>The field is specified through the type parameter.</summary>
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior"/>
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update(System.Type,System.Object)">
            <summary>Configures update of the specified field as addition of the
            new value to the value kept in the database.</summary>
            <param name="bqlField">The BQL type of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update(System.Type,System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior"/>
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update(System.String,System.Object)">
            <summary>Configures update of the specified field as addition of the
            new value to the value kept in the database.</summary>
            <param name="field">The name of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Update(System.String,System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <param name="field">The name of the field.</param>
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior"/>
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture``1(System.Object)">
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture``1(System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior" />
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture(System.Type,System.Object)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture(System.Type,System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior"/>
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture(System.String,System.Object)">
            <param name="field">The name of the field.</param>
            <param name="value">The new value of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.UpdateFuture(System.String,System.Object,PX.Data.PXDataFieldAssign.AssignBehavior)">
            <param name="field">The name of the field.</param>
            <param name="value">The new value of the field.</param>
            <param name="behavior">The <see cref="T:PX.Data.PXDataFieldAssign.AssignBehavior"/>
            value that specifies how the new value of the field is combined with
            the database value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Restrict``1(PX.Data.PXComp,System.Object)">
            <summary>
            Adds a value restriction for the field.
            </summary>
            <remarks>If the restriction is violated, the <tt>PXLockViolationException</tt> exception is thrown.
            You must handle the exception in the overridden <tt>PXAccumulatorAttribute.PersistInserted()</tt> method.</remarks>
            <typeparam name="Field">The field for which the restriction is added.</typeparam>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Restrict(System.Type,PX.Data.PXComp,System.Object)">
            <summary>
            Adds a value restriction for the field.
            </summary>
            <remarks>If the restriction is violated, the <tt>PXLockViolationException</tt> exception is thrown.
            You must handle the exception in the overridden <tt>PXAccumulatorAttribute.PersistInserted()</tt> method.</remarks>
            <param name="bqlField">The field for which the restriction is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.Restrict(System.String,PX.Data.PXComp,System.Object)">
            <summary>
            Adds a value restriction for the field.
            </summary>
            <remarks>If the restriction is violated, the <tt>PXLockViolationException</tt> exception is thrown.
            You must handle the exception in the overridden <tt>PXAccumulatorAttribute.PersistInserted()</tt> method.</remarks>
            <param name="field">The field for which the restriction is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictPast``1(PX.Data.PXComp,System.Object)">
            <summary>
            Sets the minimum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or greater than this minimum.
            The <tt>RestrictPast</tt> generic method is used when single-record mode is off.
            </summary>
            <typeparam name="Field">The field for which the minimum value is added.</typeparam>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <example>This code prescribes the PXAccumulatorAttribute.PersistInserted method
            to affect records whose EPHistory.FinPeriodID field value is related to the same year
            as the record being inserted (financial periods from 01 to 99).
            <code title="Example" desciption="" lang="CS">
            protected override bool PrepareInsert(PXCache sender, object row, PXAccumulatorCollection columns)
            {
                if (!base.PrepareInsert(sender, row, columns))
                {
                    return false;
                }
                EPHistory hist = (EPHistory)row;
                columns.RestrictPast&lt;EPHistory.finPeriodID>(PXComp.GE, hist.FinPeriodID.Substring(0, 4) + "01");
                columns.RestrictFuture&lt;EPHistory.finPeriodID>(PXComp.LE, hist.FinPeriodID.Substring(0, 4) + "99");
            
                return true;
            }
            </code>
            </example>
            <seealso cref="M:PX.Data.PXAccumulatorCollection.RestrictFuture``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictPast(System.Type,PX.Data.PXComp,System.Object)">
            <summary>
            Sets the minimum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or greater than this minimum.
            The <tt>RestrictPast</tt> method is used when single-record mode is off.
            </summary>
            <param name="bqlField">The field for which the minimum value is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <see cref="M:PX.Data.PXAccumulatorCollection.RestrictPast``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictPast(System.String,PX.Data.PXComp,System.Object)">
            <summary>
            Sets the minimum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or greater than this minimum.
            The <tt>RestrictPast</tt> method is used when single-record mode is off.
            </summary>
            <param name="field">The field for which the minimum value is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <see cref="M:PX.Data.PXAccumulatorCollection.RestrictPast``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictFuture``1(PX.Data.PXComp,System.Object)">
            <summary>
            Sets the maximum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or less than this maximum.
            The <tt>RestrictFuture</tt> generic method is used when single-record mode is off.
            </summary>
            <example>This code prescribes the PXAccumulatorAttribute.PersistInserted method
            to affect records whose EPHistory.FinPeriodID field value is related to the same year
            as the record being inserted (financial periods from 01 to 99).
            <code title="Example" desciption="" lang="CS">
            protected override bool PrepareInsert(PXCache sender, object row, PXAccumulatorCollection columns)
            {
                if (!base.PrepareInsert(sender, row, columns))
                {
                    return false;
                }
                EPHistory hist = (EPHistory)row;
                columns.RestrictPast&lt;EPHistory.finPeriodID>(PXComp.GE, hist.FinPeriodID.Substring(0, 4) + "01");
                columns.RestrictFuture&lt;EPHistory.finPeriodID>(PXComp.LE, hist.FinPeriodID.Substring(0, 4) + "99");
            
                return true;
            }
            </code>
            </example>
            <typeparam name="Field">The field for which the maximum value is added.</typeparam>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <seealso cref="M:PX.Data.PXAccumulatorCollection.RestrictPast``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictFuture(System.Type,PX.Data.PXComp,System.Object)">
            <summary>
            Sets the maximum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or less than this maximum.
            The <tt>RestrictFuture</tt> method is used when single-record mode is off.
            </summary>
            <param name="bqlField">The field for which the maximum value is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <see cref="M:PX.Data.PXAccumulatorCollection.RestrictFuture``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.RestrictFuture(System.String,PX.Data.PXComp,System.Object)">
            <summary>
            Sets the maximum for the values of the specified field: Only those records are
            affected by the <tt>PXAccumulatorAttribute.PersistInserted()</tt> method whose
            field value is equal to or less than this maximum.
            The <tt>RestrictFuture</tt> method is used when single-record mode is off.
            </summary>
            <param name="field">The field for which the maximum value is added.</param>
            <param name="comparison">A <tt>PXComp</tt> constant that indicates the restriction condition.</param>
            <param name="value">The value to be compared to.</param>
            <see cref="M:PX.Data.PXAccumulatorCollection.RestrictFuture``1(PX.Data.PXComp,System.Object)"/>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeFrom``2">
            <summary>The targer field and the source fields are specified through
            the type parameters.</summary>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeFrom``1(System.Type)">
            <summary>The field is specified through the type parameter.</summary>
            <param name="bqlField">The BQL type of the field.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeFrom(System.Type,System.Type)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="source"></param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeFrom(System.String,System.String)">
            <param name="field">The name of the field.</param>
            <param name="source"></param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeWith``1(System.Object)">
            <summary>The field is specified through the type parameter.</summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeWith(System.Type,System.Object)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.InitializeWith(System.String,System.Object)">
            <param name="field">The name of the field.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.OrderBy``1(System.Boolean)">
            <param name="ascending">The value indicating whether data records are
            sorted in the ascending order.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.OrderBy(System.Type,System.Boolean)">
            <param name="bqlField">The BQL type of the field.</param>
            <param name="ascending">The value indicating whether data records are
            sorted in the ascending order.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.OrderBy(System.String,System.Boolean)">
            <param name="field">The name of the field.</param>
            <param name="ascending">The value indicating whether data records are
            sorted in the ascending order.</param>
        </member>
        <member name="M:PX.Data.PXAccumulatorCollection.AppendException(System.String,PX.Data.PXAccumulatorRestriction[])">
            <param name="message"></param>
            <param name="params exceptionexception"></param>
        </member>
        <member name="T:PX.Data.PXDisableCloneAttributesAttribute">
            <summary>
            Disables cloning of the cache-level attributes for a DAC.
            </summary>
            <remarks>
            <para>The attribute is placed on a DAC to prevent creation of
            item-level attributes of a cache. The cache creates item-level
            attributes by copying cache-level attributes, for example,
            when an attribute is modified for a specific data record.</para>
            <para>The attribute is not used with DACs whose instances
            (data records) can be modified in the UI. Typically, you place
            the attribute on DACs representing history and status tables
            used in processing operations and accumulator attributes.</para>
            </remarks>
            <example>
            The code below shows the usage of the <tt>PXDisableCloneAttributes</tt>
            attribute on a DAC.
            <code>
            [ItemStatsAccumulator()]
            [PXDisableCloneAttributes()]
            [Serializable]
            public partial class ItemStats : INItemStats
            { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDisableCloneAttributesAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBAttributeAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBAttributeAttribute.DescriptionField">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBAttributeAttribute.ControlTypeField">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBAttributeAttribute.EntryMaskField">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBAttributeAttribute.ListField">
            <summary>Get, set.</summary>
        </member>
        <member name="M:PX.Data.PXDBAttributeAttribute.#ctor(System.Type,System.Type)">
            
        </member>
        <member name="M:PX.Data.PXDBAttributeAttribute.#ctor(System.Type,System.Type,System.Type)">
            
        </member>
        <member name="T:PX.Data.PXDBAttributeAttribute.DefinitionParams">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBAttributeAttribute.AttributeIDPlaceholder">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBAttributeAttribute.Definition">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBAttributeAttribute.DefaultVisible">
            <summary>Get, set.</summary>
        </member>
        <member name="T:PX.Data.PXDBAttributeAttribute.AttrGraph">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDefaultAttribute">
            <summary>Sets the default value for a DAC field. Use to assign a value
            from the auto-generated key field.</summary>
            <example>
            	<code title="Eaxmple" description="Setting the default value that will be taken from the current POReceipt cache object and reassigned only on insertion of the data record to the database." lang="CS">
            public partial class LandedCostTran : PX.Data.IBqlTable
            {
            ...
            [PXDBString(3, IsFixed = true)]
            [PXDBDefault(typeof(POReceipt.receiptType),
            DefaultForUpdate = false)]
            public virtual string POReceiptType { get; set; }
            ...
            }</code>
            	<code title="Example1" description="Changing the SetDefaultForUpdate property. The method sets the property for the ShipAddressID field in all data records in the cache object associated with the OrderList view." groupname="Example" lang="CS">
            XDBDefaultAttribute.SetDefaultForUpdate&lt;SOOrderShipment.shipAddressID&gt;(
                OrderList.Cache, null, false);</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBDefaultAttribute.PersistingCheck">
            <summary>Gets or sets the <see cref="T:PX.Data.PXPersistingCheck">PXPersistingCheck</see>
            value that defines how to check the field value before saving a data record
            to the database. The attribute either checks that the value is not
            <tt>null</tt>, checks that the value is <tt>null</tt> or a blank
            string (contains only whitespace characters), or doesn't check the
            value. If the attribute discovers that the value is in fact
            <tt>null</tt> or blank, it will throw the
            <tt>PXRowPersistingException</tt> exception. As a result, the save
            action will fail and the user will get an error message.</summary>
        </member>
        <member name="P:PX.Data.PXDBDefaultAttribute.DefaultForUpdate">
            <summary>Gets or sets the value that indicates whether the default
            value is reassigned on a database update operation.</summary>
        </member>
        <member name="P:PX.Data.PXDBDefaultAttribute.DefaultForInsert">
            <summary>Gets or sets the value that indicates whether the default
            value is reassigned on a database insert operation.</summary>
        </member>
        <member name="T:PX.Data.PXDBDefaultAttribute.FlagHandler">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the attribute. Obtains the default value using the provided BQL query.
            </summary>
            <param name="sourceType">The BQL query that is used to calculate the default value. Accepts the types derived from: <tt>IBqlSearch</tt>IBqlSearch, <tt>IBqlSelect</tt>, <tt>IBqlField</tt>, <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <summary>
            Provides the default value
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to set the NewValue</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <summary>
            Re-default the value. Check if the value was set before saving the record to the database
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to retrive the value from the Row</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <summary>
            Rollback changes if the record was not saved to the database
            </summary>
            <param name="sender">Cache</param>
            <param name="e">Event arguments to check operation and get the row to process</param>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetDefaultForUpdate``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Sets the <tt>DefaultForUpdate</tt> property for a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDefault</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="def">The new value for the property.</param>
            <example>
            The code below changes the <tt>SetDefaultForUpdate</tt> property at
            run time. The method sets the property for the <tt>ShipAddressID</tt> field in all data
            records in the cache object associated with the <tt>OrderList</tt> data view.
            <code>
            PXDBDefaultAttribute.SetDefaultForUpdate&lt;SOOrderShipment.shipAddressID&gt;(
                OrderList.Cache, null, false);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetDefaultForInsert``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Sets the <tt>DefaultForInsert</tt> property for a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PDBXDefault</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="def">The new value for the property.</param>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetSourceType(PX.Data.PXCache,System.String,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetSourceType``1(PX.Data.PXCache,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetSourceType(PX.Data.PXCache,System.Object,System.String,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.SetSourceType``1(PX.Data.PXCache,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDefaultAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBFieldAttribute">
            <summary>The base class for attributes that map DAC fields to database
            columns. The attribute should not be used directly.</summary>
        </member>
        <member name="P:PX.Data.PXDBFieldAttribute.DatabaseFieldName">
            <summary>Gets or sets the name of the database column that is
            represented by the field. By default, equals the field name.</summary>
        </member>
        <member name="P:PX.Data.PXDBFieldAttribute.IsKey">
            <summary>Gets or sets the value that indicates whether the field is a
            key field. Key fields must uniquely identify a data record. The key
            fields defined in the DAC should not necessarily be the same as the
            keys in the database.</summary>
        </member>
        <member name="P:PX.Data.PXDBFieldAttribute.IsImmutable">
            <summary>Gets or sets the values that indicates that the field is
            immutable.</summary>
        </member>
        <member name="P:PX.Data.PXDBFieldAttribute.BqlField">
            <summary>Returns <tt>null</tt> on get. Sets the BQL field representing
            the field in BQL queries.</summary>
        </member>
        <member name="M:PX.Data.PXDBFieldAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFieldAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFieldAttribute.ToString">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFieldAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBStringAttribute">
            <summary>Maps a DAC field of <tt>string</tt> type to the database field of <tt>char</tt>, <tt>varchar</tt>, <tt>nchar</tt>, or <tt>nvarchar</tt> type.</summary>
            <remarks>
              <para>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name.</para>
              <para>It is possible to specify the maximum length and input validation mask for the string.</para>
              <para>You can modify the <tt>Length</tt> and <tt>InputMask</tt> properties at run time by calling the static methods.</para>
            </remarks>
            <example>
              <code title="Example2" description="The attribute below maps a string field to the database column (defines a bound field) and sets a limit for the value length to 50." lang="CS">
            [PXDBString(50)]
            public virtual string Fax { get; set; }</code>
            	<code title="Example" description="The attribute below defines a bound field taking as a value strings of any 8 characters. In the user interface, the input control will show the mask that splits the value into four groups separated by dots." lang="CS">
            [PXDBString(8, InputMask = "CC.CC.CC.CC")]
            public virtual string ReportID { get; set; }</code>
            	<code title="Example3" description="The attribute below defines a bound field taking as a value Unicode strings of 5 uppercase characters that are strictly aphabetical letters." groupname="Example2" lang="CS">
            [PXDBString(5, IsUnicode = true, InputMask = "&gt;LLLLL")]
            public virtual string CuryID { get; set; }</code>
            	<code title="Example4" description="The example below shows a complex definition of a string key field represented in the user interface by a lookup control. In this example, the RefNbr field is mapped to the nvarchar(15) RefNbr column from the APRegister table." groupname="Example3" lang="CS">
            [PXDBString(15, IsUnicode = true, IsKey = true, InputMask = "")]
            [PXDefault]
            [PXUIField(DisplayName = "Reference Nbr.",
                       Visibility = PXUIVisibility.SelectorVisible,
                       TabOrder = 1)]
            [PXSelector(typeof(
                Search&lt;APRegister.refNbr,
                    Where&lt;APRegister.docType, Equal&lt;Optional&lt;APRegister.docType&gt;&gt;&gt;&gt;),
                Filterable = true)]
            public virtual string RefNbr { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBStringAttribute.Length">
            <summary>Gets the maximum length of the string value. If a string
            value exceeds the maximum length, it will be trimmed. If
            <tt>IsFixed</tt> is set to <tt>true</tt> and the string length is less
            then the maximum, it will be extended with spaces.</summary>
            <remarks>The default value is -1 (the string length is not limited). A
            different value can be set in the constructor.</remarks>
        </member>
        <member name="P:PX.Data.PXDBStringAttribute.InputMask">
            <summary>Gets or sets the pattern that indicates the allowed
            characters in a field value. The user interface will not allow the
            user to enter other characters in the input control associated with
            the field.</summary>
            <remarks>
            <para>The default value for the key fields is
            '<tt>&gt;aaaaaa</tt>'.</para>
            <para><i>Control characters:</i></para>
            <list type="bullet">
            <item><description>'&gt;': the following chars to
            upper case</description></item>
            <item><description>'&lt;': the
            following chars to lower
            case</description></item>
            <item><description>'<tt>&amp;</tt>',
            '<tt>C</tt>': any character or a
            space</description></item>
            <item><description>'<tt>A</tt>',
            '<tt>a</tt>': a letter or
            digit</description></item>
            <item><description>'<tt>L</tt>',
            '<tt>?</tt>': a
            letter</description></item>
            <item><description>'<tt>#</tt>',
            '<tt>0</tt>', '<tt>9</tt>': a digit</description></item>
            </list>
            </remarks>
            <example>
            The attribute below defines a bound field taking as a value Unicode
            strings of 5 uppercase characters that are strictly aphabetical letters.
            <code>
            [PXDBString(5, IsUnicode = true, InputMask = "&gt;LLLLL")]
            public virtual string CuryID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBStringAttribute.IsUnicode">
            <summary>Gets or sets an indication that the string consists of
            Unicode characters. This property should be set to <tt>true</tt> if
            the database column has a Unicode string type (<tt>nchar</tt> or
            <tt>nvarchar</tt>). The default value is <tt>false</tt>.</summary>
            <example>
            The example below shows a complex definition of a string key field
            represented in the user interface by a lookup control.
            In this example, the <tt>RefNbr</tt> field is mapped to the
            <tt>nvarchar(15)</tt> column from the <tt>APRegister</tt> table.
            <code>
            [PXDBString(15, IsUnicode = true, IsKey = true, InputMask = "")]
            [PXDefault]
            [PXUIField(DisplayName = "Reference Nbr.",
                       Visibility = PXUIVisibility.SelectorVisible,
                       TabOrder = 1)]
            [PXSelector(typeof(
                Search&lt;APRegister.refNbr,
                    Where&lt;APRegister.docType, Equal&lt;Optional&lt;APRegister.docType&gt;&gt;&gt;&gt;),
                Filterable = true)]
            public virtual string RefNbr { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBStringAttribute.IsFixed">
            <summary>Gets or sets an indication that the string has a fixed
            length. This property should be set to <tt>true</tt> if the database
            column has a fixed length type (<tt>char</tt> or <tt>nchar</tt>). The
            default value is <tt>false</tt>.</summary>
        </member>
        <member name="T:PX.Data.PXDBStringAttribute.MaskMode">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.#ctor">
            <summary>Initializes a new instance of the attribute.</summary>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum length of a
            field value.</summary>
            <param name="length">The maximum length value assigned to the
            <tt>Length</tt> property.</param>
            <example>
            The attribute below maps a string field to the database column
            (defines a bound field) and sets a limit for the value length to 50.
            <code>
            [PXDBString(50)]
            public virtual string Fax { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetLength(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <summary>Sets the maximum length for the string field with the
            specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetLength``1(PX.Data.PXCache,System.Object,System.Int32)">
            <summary>Sets the maximum length for the specified string
            field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetLength(PX.Data.PXCache,System.String,System.Int32)">
            <summary>Sets the maximum length for the string field with the
            specified name for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetLength``1(PX.Data.PXCache,System.Int32)">
            <summary>Sets the maximum length for the specified string field for
            all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="length">The value that is assigned to the <tt>Length</tt>
            property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetInputMask(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the input mask for the string field with the specified
            name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The field name.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetInputMask``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the input mask for the specified string field.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetInputMask(PX.Data.PXCache,System.String,System.String)">
            <summary>Sets the input mask for the string field with the specified
            name for all data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="name">The field name.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.SetInputMask``1(PX.Data.PXCache,System.String)">
            <summary>Sets the input mask for the specified string field for all
            data records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBString</tt> type.</param>
            <param name="mask">The value that is assigned to the
            <tt>InputMask</tt> property.</param>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLocalizableStringAttribute">
             <summary>Allows you to configure a DAC field to have values in multiple languages.</summary>
             <remarks>The <tt>PXDBLocalizableString</tt> attribute works similarly to the <tt>PXDBString</tt> attribute, but unlike the  <tt>PXDBString</tt> attribute,
             the <tt>PXDBLocalizableString</tt> attribute can be used instead of the <tt>PXDBText</tt> and PXString attributes.</remarks>
             <example>
             	<code title="Example" description="The general declaration example
             " lang="CS">
             public abstract class noteID : PX.Data.BQL.BqlGuid.Field&lt;noteID> { }
            
             [PXNote]
             [PXDBLocalizableString(60, IsUnicode = true)]
             public virtual Guid? NoteID { get; set; }</code>
             	<code title="Example2" description="If you need to configure a field that has the PXString attribute, which is used in conjunction with the PXDBCalced attribute, replace the PXString attribute with the PXDBLocalizableString attribute and set the value of the NonDB parameter to true, as shown in the following example." groupname="Example" lang="CS">
             PXDBLocalizableString(255, IsUnicode = true, NonDB = true,
                BqlField = typeof(PaymentMethod.descr))]
             [PXDBCalced(typeof(Switch&lt;Case&lt;Where&lt;PaymentMethod.descr, IsNotNull&gt;,
                PaymentMethod.descr&gt;, CustomerPaymentMethod.descr&gt;), typeof(string))]</code>
             	<code title="Example3" description="If you want to obtain the value of a multi-language field in the current locale, use the PXDatabase.SelectSingle() or PXDatabase.SelectMulti() method, and pass to it the return value of the PXDBLocalizableStringAttribute.GetValueSelect() static method instead of passing a new PXDataField object to it. " groupname="Example2" lang="CS">
             foreach (PXDataRecord record in PXDatabase.SelectMulti&lt;Numbering&gt;(
                newPXDataField&lt;Numbering.numberingID&gt;(),
                PXDBLocalizableStringAttribute.GetValueSelect("Numbering",
                   "NewSymbol", false),
                newPXDataField&lt;Numbering.userNumbering&gt;()))
             {
                ...
             }</code>
             	<code title="Example4" description="If you want to obtain the value of a multi-language field in a specific language, use the PXDBLocalizableStringAttribute.GetTranslation() method. Pass to the method as input parameters a DAC cache, a DAC instance, a field name, and the ISO code of the language.
             The following code shows an example of use of the PXDBLocalizableStringAttribute.GetTranslation() method." groupname="Example3" lang="CS">
             tran.TranDesc =
                PXDBLocalizableStringAttribute.GetTranslation(
                   Caches[typeof(InventoryItem)], item, typeof(InventoryItem.descr).Name,
                   customer.Current?.LanguageName);</code>
             </example>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.DefaultTranslationsFromMessage(PX.Data.PXCache,System.Object,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.GetTranslation(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>
            If <paramref name="language"/> is defined, returns the translation of the specified field for the specified record;
            otherwise, returns the current value of the field.
            </summary>
            <param name="cache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type.</param>
            <param name="data">The record from which the translation is retrieved.</param>
            <param name="fieldName">The name of the field for which translation is requested.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</param>
            <param name="language">A predefined System.Globalization.CultureInfo name, System.Globalization.CultureInfo.Name
            of an existing System.Globalization.CultureInfo, or Windows-only culture name.
            The name is not case-sensitive.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.GetTranslation``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>
            If <paramref name="language"/> is defined, returns the translation of the
            field of the specified type for the specified record;
            otherwise, returns the current value of the field.
            </summary>
            <typeparam name="TField">The type of the field for which translation is requested.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <param name="cache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type.</param>
            <param name="data">The record from which the translation is retrieved.</param>
            <param name="language">A predefined System.Globalization.CultureInfo name, System.Globalization.CultureInfo.Name
            of an existing System.Globalization.CultureInfo, or Windows-only culture name.
            The name is not case-sensitive.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.GetTranslation``1(PX.Data.PXCache,System.Object)">
            <summary>
            Returns the translation of the field of the specified type for the specified record for current locale.
            </summary>
            <typeparam name="TField">The type of the field for which translation is requested.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <param name="cache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type.</param>
            <param name="data">The record from which the translation is retrieved.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.CopyTranslations``2(PX.Data.PXCache,System.Object,PX.Data.PXCache,System.Object)">
            <summary>
            Copies all translations from the specified field of the source record
            to the specified field of the destination record.
            </summary>
            <typeparam name="TSourceField">The type of the source field.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <typeparam name="TDestinationField">The type of the destination field.
            Translations are copied to this field.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <param name="sourceCache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type
            on the <typeparamref name="TSourceField"/> field.</param>
            <param name="sourceData">The record from which translations are retrieved.</param>
            <param name="destinationCache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type
            on the <typeparamref name="TDestinationField"/> field.</param>
            <param name="destinationData">The record to which translations are copied.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.CopyTranslations``2(PX.Data.PXGraph,System.Object,System.Object)">
            <summary>
            Copies all translations from the specified field of the source record
            to the specified field of the destination record.
            </summary>
            <typeparam name="TSourceField">The type of the source field.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <typeparam name="TDestinationField">The type of the destination field.
            Translations are copied to this field.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <param name="graph">PXGraph which contains source and destination caches.</param>
            <param name="sourceData">The record from which translations are retrieved.</param>
            <param name="destinationData">The record to which translations are copied.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.SetTranslationsFromMessage``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>
            Fills in translations for the specified field of the specified record.
            Translations are collected from <paramref name="message"/> .
            </summary>
            <typeparam name="TField">The type of the destination field.
            Translations are filled in for this field.
            The field must have <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/>.</typeparam>
            <param name="cache">The cache object that is used to search for the attributes of
            the <see cref="T:PX.Data.PXDBLocalizableStringAttribute"/> type.</param>
            <param name="data">The record for which translations are filled in.</param>
            <param name="message">The message from which translations are collected.
            The message should be translated in <see cref="T:PX.SM.TranslationMaint"/>. </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXDBLocalizableStringAttribute.SetTranslationsFromMessageFormatNLA``1(PX.Data.PXCache,System.Object,System.String,System.String[])" -->
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.EnsureTranslations(System.Func{System.String,System.Boolean})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.GetValueSelect(System.String,System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLocalizableStringAttribute.Definition">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.GetSubscriber``1(System.Collections.Generic.List{``0})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLocalizableStringAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTextAttribute">
            <summary>Maps a DAC field of <tt>string</tt> type to the database
            column of <tt>nvarchar</tt> or <tt>varchar</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBText(IsUnicode = true)]
            [PXUIField(DisplayName = "Activity Details")]
            public virtual string Body { ... }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBTextAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLocalStringAttribute">
            <summary>Maps a string DAC field to a localized string column in the
            database.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database columns that have the culture
            information specified in their names. For example, for the
            <tt>Description</tt> field, the English-specific column is
            <tt>DescriptionenGB</tt>, the Russian-specific column is
            <tt>DescriptionruRU</tt>.</remarks>
            <example>
            <code>
            [PXDBLocalString(255, IsUnicode = true)]
            [PXUIField(Visibility = PXUIVisibility.SelectorVisible)]
            public virtual String Title { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBLocalStringAttribute.#ctor">
            <summary>Initializes a new instance with the default
            parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBLocalStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the specified maximum
            length.</summary>
            <param name="Length">The maximum length of the field value.</param>
        </member>
        <member name="M:PX.Data.PXDBLocalStringAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBByteAttribute">
            <summary>Maps a DAC field of <tt>byte?</tt> type to the database
            column of <tt>tinyint</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            	<code title="Example" description="The code below shows the CacheAttached event handler, which is defined in a graph and replaces attributes of the FilterRow.Condition field within the current graph." lang="CS">
            [PXDefault]
            [PXDBByte]
            [PXUIField(DisplayName = "Condition")]
            protected virtual void FilterRow_Condition_CacheAttached(PXCache sender)
            {
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBByteAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBByteAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBByteAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBByteAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBByteAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBByteAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBShortAttribute">
            <summary>Maps a DAC field of <tt>short?</tt> type to the database
            column of <tt>smallint</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBShort(MaxValue = 9, MinValue = 0)]
            public virtual short? TaxReportPrecision { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBShortAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBShortAttribute.MaxValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBShortAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBShortAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBShortAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBShortAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBUShortAttribute">
            <summary>Maps a DAC field of <tt>ushort?</tt> type to the database
            column of <tt>int</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBUShort()]
            public virtual ushort LineNbr { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBUShortAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBUShortAttribute.MaxValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBUShortAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBUShortAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBUShortAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBUShortAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBGuidAttribute">
            <summary>Map a DAC field of <tt>Guid?</tt> type to the database column
            of <tt>uniqueidentifier</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            	<code title="Example" description="The attribute below binds the field to the unique identifier column and assigns a default value to the field." lang="CS">
            [PXDBGuid(true)]
            public virtual Guid? SetupID { get; set; }</code>
            	<code title="Example1" description="The attribute below binds the field to the unique identifier column. The field becomes a key field." groupname="Example" lang="CS">
            [PXDBGuid(IsKey = true)]
            public virtual Guid? SetupID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="withDefaulting">Indicates whether the default
            value should be set for the field.</param>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBGuidAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBSequentialGuidAttribute">
            <summary>
            GUID, defaulting by "old" algorithm (timestamp + ethernet MAC address)
            </summary>
        </member>
        <member name="T:PX.Data.PXDBGuidMaintainDeletedAttribute">
            <summary>
            This attribute is equivalent to the PXDBGuidAttribute but doesn't update Guid when restoring deleted record.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBBoolAttribute">
            <summary>Maps a DAC field of <tt>bool?</tt> type to the database
            column of <tt>bit</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBBool()]
            [PXDefault(false)]
            public virtual Boolean? Scheduled { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBBoolAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBBoolAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBBoolAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBBoolAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBIntAttribute">
            <summary>Maps a DAC field of <tt>int?</tt> type to the database column of <tt>int</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name.</remarks>
            <example>
              <code title="Example" description="The attribute below maps a field to the database column and explicitly sets the minimum and maximum values for the field." lang="CS">
            [PXDBInt(MinValue = 0, MaxValue = 365)]
            public virtual int? ReceiptTranDaysBefore { get; set; }</code>
            	<code title="Example2" description="The attribute below maps a field to the database column and sets the properties inherited from the PXDBField attribute." groupname="Example" lang="CS">
            [PXDBInt(IsKey = true, BqlField = typeof(CuryARHistory.branchID))]
            [PXSelector(typeof(Branch.branchID),
                        SubstituteKey = typeof(Branch.branchCD))]
            public virtual int? BranchID { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBIntAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
            <example>
            The attribute below maps a field to the database column and
            explicitly sets the minimum and maximum values for the field.
            <code>
            [PXDBInt(MinValue = 0, MaxValue = 365)]
            public virtual int? ReceiptTranDaysBefore { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBIntAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBIntAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIntAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIntAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIntAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLongAttribute">
            <summary>Maps a DAC field of <tt>int64?</tt> type to the database
            column of <tt>bigint</tt> type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBLong()]
            public virtual long? CuryInfoID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBLongAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBLongAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBLongAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLongAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLongAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLongAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBFloatAttribute">
            <summary>Maps a DAC field of <tt>float?</tt> type to the 4-bytes floating point column in the database.</summary>
        </member>
        <member name="P:PX.Data.PXDBFloatAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBFloatAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.#ctor">
            <summary>Initializes a new instance with default parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the attribute with the given
            precision. The precision is the number of digits after the comma. If a
            user enters a value with greater number of fractional digits, the
            value will be rounded.</summary>
            <param name="precision">The value to use as the precision.</param>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBFloatAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDoubleAttribute">
            <summary>Maps a DAC field of <tt>double?</tt> type to the 8-bytes
            floating point column in the database.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
        </member>
        <member name="P:PX.Data.PXDBDoubleAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBDoubleAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.#ctor">
            <summary>Initializes a new instance of the attribute with default
            parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the attribute with the given
            precision. The precision is the number of digits after the comma. If a
            user enters a value with greater number of fractional digits, the
            value will be rounded.</summary>
            <param name="precision">The value to use as the precision.</param>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDoubleAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDecimalAttribute">
            <summary>Maps a DAC field of <tt>decimal?</tt> type to the database
            column of <tt>decimal</tt> type.</summary>
            <remarks>
            	<para>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name. A minimum value, maximum
            value, and precision can be specified. The precision can be calculated at runtime using BQL. The default precision is 2.</para>
            </remarks>
            <example>
            	<code title="Example" description="Declaration of a DAC field with a specific precision is shown below." lang="CS">
            [PXDBDecimal(6, MinValue = 0, MaxValue = 100)]
            public virtual decimal? Price { get; set; }</code>
            	<code title="Example1" description="Declaration of a DAC field with a precision calculated at runtime. The BQL query in this example will search for the Currency data record that satisfies the specified Where condition. The field precision will be set to the DecimalPlaces value from this data record." groupname="Example" lang="CS">
            [PXDBDecimal(typeof(
                Search&lt;Currency.decimalPlaces,
                    Where&lt;Currency.curyID, Equal&lt;Current&lt;POCreateFilter.vendorID&gt;&gt;&gt;&gt;
            ))]
            public virtual decimal? OrderTotal { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBDecimalAttribute.DBDecimalProperties">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBDecimalAttribute.DBProperties">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBDecimalAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBDecimalAttribute.MaxValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBDecimalAttribute.SignFormula">
            <exclude />
        </member>
        <member name="F:PX.Data.PXDBDecimalAttribute.SignSuffix">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.#ctor">
            <summary>Initializes a new instance with the default precision, which
            equals 2.</summary>
            <example>
            <code>
            [PXDBDecimal(MaxValue = 100, MinValue = 0)]
            [PXDefault(TypeCode.Decimal, "50.0")]
            [PXUIField(DisplayName = "Group/Document Discount Limit (%)")]
            public virtual Decimal? DiscountLimit { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given
            precision.</summary>
            <param name="precision">The precision value.</param>
            <example>
              <code title="" description="" lang="CS">
            [PXDBDecimal(4)]
            [PXDefault(TypeCode.Decimal, "0.0")]
            public virtual Decimal? TaxTotal { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance with the precision calculated at runtime with a BQL query.</summary>
            <param name="type">A BQL query based on a class derived from
            <tt>IBqlSearch</tt> or <tt>IBqlField</tt>. For example, the parameter
            can be set to <tt>typeof(Search&lt;...&gt;)</tt>, or
            <tt>typeof(Table1.field)</tt>.</param>
            <example>
            The code below shows declaration of a DAC field with a precision calculated at runtime. The BQL query in this example will search for the <tt>Currency</tt>
            data record that satisfies the specified <tt>Where</tt> condition. The field precision will be set to the <tt>DecimalPlaces</tt> value from this data record.
            <code title="" description="" lang="CS">
            [PXDBDecimal(typeof(
                Search&lt;Currency.decimalPlaces,
                    Where&lt;Currency.curyID, Equal&lt;Current&lt;POCreateFilter.vendorID&gt;&gt;&gt;&gt;
            ))]
            public virtual decimal? OrderTotal { get; set; }</code></example>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.SetPrecision(PX.Data.PXCache,System.Object,System.String,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            field with the specified name in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that is be marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
            <example>
            The code below shows the <tt>RowSelected</tt> event handler (used to
            configure the UI at run time), in which you set the precision for the
            <tt>Qty</tt> field in the provided data record.
            <code>
            protected virtual void LotSerOptions_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
            {
                LotSerOptions opt = (LotSerOptions)e.Row;
                ...
                PXDBDecimalAttribute.SetPrecision(sender, opt, "Qty", (opt.IsSerial == true ? 0 : INSetupDecPl.Qty));
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.SetPrecision(PX.Data.PXCache,System.String,System.Nullable{System.Int32})">
            <summary>Sets the precision in the attribute instance that marks the
            field with the specified name in all data records in the cache
            object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
            <param name="name">The name of the field that is be marked with the
            attribute.</param>
            <param name="precision">The new precision value.</param>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.EnsurePrecision(PX.Data.PXCache)">
            <summary>Retrieves the precision value if it is set by a BQL query specified in the constructor, and sets its to all attribute instances in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXDBDecimal</tt> type.</param>
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBDecimalAttribute.GetSubscriber``1(System.Collections.Generic.List{``0})">
            <exclude />
        </member>
        <member name="T:PX.Data.PXDBDateAttribute">
            <summary>Maps a DAC field of <tt>DateTime?</tt> type to the database column of <tt>datetime</tt> or <tt>smalldatetime</tt> type, depending on the
            <tt>UseSmallDateTime</tt> flag.</summary>
            <remarks>
              <para>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name.</para>
              <para>The attribute defines a field represented by a single input control in the user interface.</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute below binds the field to the database column and sets the minimum and maximum values for a field value." lang="CS">
            [PXDBDate(MinValue = "01/01/1900")]
            public virtual DateTime? OrderDate { get; set; }</code>
            	<code title="Example2" description="The attribute below binds the field to the database column and sets the input and display masks. A field value will be displayed using the long date pattern. That is, for en-US culture the 6/15/2009 1:45:30 PM value will be converted to Monday, June 15, 2009." groupname="Example" lang="CS">
            [PXDBDate(InputMask = "d", DisplayMask = "d")]
            public virtual DateTime? StartDate { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.InputMask">
            <summary>Gets or sets the format string that defines how a field value
            inputted by a user should be formatted.</summary>
            <value>If the property is set to a one-character string, the corresponding <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">standard date and time
            format string</see> is used. If the property value is longer, it is treated as a <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">custom date and time format
            string</see>. A particular pattern depends on the culture set by the application.</value>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.DisplayMask">
            <summary>Gets or sets the format string that defines how a field value is displayed in the input control.</summary>
            <value>If the property is set to a one-character string, the corresponding <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings">standard date and time
            format string</see> is used. If the property value is longer, it is treated as a <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">custom date and time format
            string</see>. A particular pattern depends on the culture set by the application.</value>
            <example>
            The attribute below binds the field to the database column and sets the input and display
            masks. A field value will be displayed using the long date pattern. That is, for en-US
            culture the <i>6/15/2009 1:45:30 PM</i> value will be converted to <i>Monday, June 15,
            2009</i>.
            <code title="" description="" lang="CS">
            [PXDBDate(InputMask = "d", DisplayMask = "d")]
            public virtual DateTime? StartDate { get; set; }</code></example>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.PreserveTime">
            <summary>Gets or sets the value that indicates whether the time part
            of a field value is preserved. If <tt>false</tt>, the time part is
            removed.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.UseSmallDateTime">
            <summary>
              <para>Gets or sets the value that indicates the database column data type.</para>
            </summary>
            <remarks>
              <para>The following table shows the difference in using the property for MS SQL and MySQL.</para>
            	<table>
            		<tbody>
            			<tr>
            				<td>
            					<para align="center">
            						<strong>Value</strong>
            					</para>
            				</td>
            				<td>
            					<para align="center">
            						<strong>MS SQL</strong>
            					</para>
            				</td>
            				<td>
            					<para align="center">
            						<strong>MySQL</strong>
            					</para>
            				</td>
            			</tr>
            			<tr>
            				<td>false</td>
            				<td>datetime</td>
            				<td>datetime(6)</td>
            			</tr>
            			<tr>
            				<td>true</td>
            				<td>datetime2(0)</td>
            				<td>datetime(0)</td>
            			</tr>
            		</tbody>
            	</table>
              <para></para>
            </remarks>
            <value>
            	<para>By default, a value is set to <code>true.</code></para>
            </value>
        </member>
        <member name="P:PX.Data.PXDBDateAttribute.UseTimeZone">
            <summary>Gets or sets the value that indicates whether the attribute
            should convert the time to UTC, using the local time zone. If
            <tt>true</tt>, the time is converted. By default,
            <tt>true</tt>.</summary>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAttribute.GetAttribute(PX.Data.PXCache,System.Object,System.String)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDateWithTimezoneAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTimestampAttribute">
            <summary>Maps a DAC field of <tt>byte[]</tt> type to the database
            column of <tt>timestamp</tt> type.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>The attribute binds the field to a timestamp column in the
            database. The database timestamp is a counter that is incremented for
            each insert or update operation performed on a table with a
            <tt>timestamp</tt> column. The counter tracks a relative time within a
            database (not an actual time that can be associated with a clock). You
            can use the <tt>timestamp</tt> column of a data record to easily
            determine whether any value in the data record has changed since the
            last time it was read.</para>
            </remarks>
            <example>
            <code>
            [PXDBTimestamp()]
            public virtual byte[] tstamp { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBTimestampAttribute.RecordComesFirst">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTimestampAttribute.PXTimeStampEmptyException">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimestampAttribute.ToString(System.Byte[])">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTimeAttribute">
            <summary>Maps a DAC field of <tt>DateTime?</tt> type to the database
            column of <tt>smalldatetime</tt> type. The field value holds only time
            without date.</summary>
            <remarks>
              <para>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name. </para>
              <para>The field values keep only time without date. On the user interface, the field is represented by a control allowing a user to enter only a time value.</para>
              <para>The attribute inherits properties of the PXDBDate attribute.</para>
            </remarks>
            <example>
              <code title="Example" description="The code below binds the &lt;tt&gt;SunStartTime&lt;/tt&gt; DAC field to the database column with the same name and sets the default value for the field. Notice the setting of the &lt;tt&gt;DisplayMask&lt;/tt&gt; property inherited from the %PXDBDate:PX.Data.PXDBDateAttribute% attribute." lang="CS">
            [PXDBTime(DisplayMask = "t", UseTimeZone = false)]
            [PXDefault(TypeCode.DateTime, "01/01/2008 09:00:00")]
            public virtual DateTime? SunStartTime { ... }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBTimeAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="P:PX.Data.PXDBTimeAttribute.PreserveTime">
            <summary>Gets the value that indicates whether the time part of a
            field value is preserved. Since the constructor sets this value to
            <tt>true</tt>, this property always returns <tt>true</tt>.</summary>
        </member>
        <member name="M:PX.Data.PXDBTimeAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimeAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimeAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBIdentityAttribute">
            <summary>Maps an auto-incremented integer DAC field of <tt>int?</tt>
            type to the <tt>int</tt> database column.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>The field value is auto-incremented by the attribute.</para>
            <para>A field with this attribute typically is a key field. To declare a key field,
            set the <tt>IsKey</tt> parameter to <tt>true</tt>.</para>
            </remarks>
            <example>
            <code>
            [PXDBIdentity(IsKey = true)]
            [PXUIField(DisplayName = "Contact ID", Visible = false)]
            public virtual int? ContactID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBIdentityAttribute.LastDefault">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.GetLastInsertedIdentity(System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIdentityAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLongIdentityAttribute">
            <summary>Maps an 8-byte auto-incremented integer DAC field of
            <tt>int64?</tt> type to the <tt>bigint</tt> database column.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same name. The
            field value is auto-incremented by the database.</para>
            <para>A field of this type is typically declared a key field. To do
            this, set the <tt>IsKey</tt> parameter to <tt>true</tt>.</para>
            </remarks>
            <example>
            <code>
            [PXDBLongIdentity(IsKey = true)]
            public virtual Int64? RecordID { ... }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBLongIdentityAttribute.LastDefault">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBForeignIdentityAttribute">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBForeignIdentityAttribute._typeDiscriminatorField">
            <summary>
            Represents the field of the foreign table that holds the name of the DAC,
            which uses that table as a source of its identity.
            Such field of the identity providing table should be marked with the <see cref="T:PX.Data.PXDBForeignIdentityTypeAttribute"/>.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBForeignIdentityTypeAttribute">
            <summary>
            Indicates that the target field holds the name of a DAC,
            which would use the table as a source of its identity (see the <see cref="T:PX.Data.PXDBForeignIdentityAttribute"/>).
            </summary>
        </member>
        <member name="T:PX.Data.PXDBCalcedAttribute">
            <summary>Defines the SQL expression that calculates a field
            from the fields of the same DAC whose values are taken from the
            database.</summary>
            <remarks>
            	<para>You place this attribute on the field that is not bound to
            any particular database column, but to multiple database columns.
            Fields marked with this attribute are considered bound to the database.</para>
            	<para>The attribute will translate the provided BQL query into the SQL
            code and insert it into the SELECT statement that retrieves data
            records of this DAC. In the BQL query, you can reference any bound
            field of the same DAC, including those marked with <see cref="T:PX.Data.PXDBScalarAttribute">PXDBScalar</see>. You can also use BQL
            constants, arithmetic operations, equivalents of SQL function (such as
            <tt>SUBSTRING</tt> and <tt>REPLACE</tt>), and the <tt>Switch</tt>
            expression.</para>
            	<para>If, in contrast, you need to calculate the field on the server
            side at runtime, use the <see cref="T:PX.Data.PXFormulaAttribute">PXFormula</see> attribute.</para>
            	<para>Note that you should also mark the field with an attribute
            that usually indicates an unbound
            field of a particular data type. Otherwise, the field may be
            displayed incorrectly in the user interface.</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute below defines the expression to calculate the field of decimal type." lang="CS">
            [PXDBCalced(typeof(Sub&lt;POLine.curyExtCost, POLine.curyOpenAmt&gt;),
                        typeof(decimal))]
            public virtual decimal? CuryClosedAmt { get; set; }</code>
            	<code title="Example2" description="See the following example with the Switch expression." groupname="Example" lang="CS">
            [PXDBCalced(
                typeof(Switch&lt;Case&lt;Where&lt;INUnit.unitMultDiv, Equal&lt;MultDiv.divide&gt;&gt;,
                    Mult&lt;INSiteStatus.qtyOnHand, INUnit.unitRate&gt;&gt;,
                    Div&lt;INSiteStatus.qtyOnHand, INUnit.unitRate&gt;&gt;),
                typeof(decimal))]
            public virtual decimal? QtyOnHandExt { get; set; }</code>
            	<code title="Example3" description="See the following example with the more complex BQL expression." groupname="Example2" lang="CS">
            [Serializable]
            public class Product : PX.Data.IBqlTable
            {
                ...
                [PXDecimal(2)]
                [PXDBCalced(typeof(
                    Minus&lt;Sub&lt;Sub&lt;IsNull&lt;Product.availQty, decimal_0&gt;,
                                  IsNull&lt;Product.bookedQty, decimal_0&gt;&gt;,
                          Product.minAvailQty&gt;&gt;),
                    typeof(decimal))]
                public virtual decimal? Discrepancy { get; set; }
                ...
            }</code>
            	<code title="Example4" description="This example also shows the enclosing declaration of the Product DAC. You can retrieve the records from the Product table by executing the following code in some graph." groupname="Example3" lang="CS">
            PXSelect&lt;Product&gt;.Select(this);</code>
            	<code title="Example5" description="This BQL statement will be translated into the following SQL query." groupname="Example4" lang="SQL">
            SELECT [other fields],
                    -((ISNULL(Product.AvailQty, .0) - ISNULL(Product.BookedQty, .0))
                      - Product.MinAvailQty) as Product.Discrepancy
            FROM Product</code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBCalcedAttribute.Persistent">
            <summary>Gets or sets the value that indicates whether the field the
            attribute is attached to is updated after a database commit
            operation.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXDBCalcedAttribute.#ctor(System.Type,System.Type)" -->
        <member name="M:PX.Data.PXDBCalcedAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.Calculate``1(PX.Data.PXCache,System.Object)">
            <summary>Calculates the field value of the data record using the
            formula from the attribute instance that marks the
            specified field. </summary>
            <param name="Field">The field to calculate.</param>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXDBCalced</tt> type.</param>
            <param name="row">The data record.</param>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.Calculate(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCalcedAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBBaseIDAttribute">
            <summary>Base class for PXDB***ByID attributes</summary>
        </member>
        <member name="P:PX.Data.PXDBBaseIDAttribute.BqlField">
            <summary>Returns <tt>null</tt> on get. Sets the BQL field representing
            the field in BQL queries.</summary>
        </member>
        <member name="P:PX.Data.PXDBBaseIDAttribute.DontOverrideValue">
            <summary>Gets or sets the value that indicates whether a field update
            is allowed after the field value is set for the first time.</summary>
        </member>
        <member name="M:PX.Data.PXDBBaseIDAttribute.GetSubscriber``1(System.Collections.Generic.List{``0})">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the ID of the user who created the data
            record.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>Guid?</tt>.</para>
            <para>The attribute aggregates the <see cref="T:PX.Data.PXDBGuidAttribute">PXDBGuid</see> and
            <tt>PXDisplaySelector</tt> (derives from
            <see cref="T:PX.Data.PXSelectorAttribute">PXSelector</see>).</para>
            </remarks>
            <example>
            <code>
            [PXDBCreatedByID()]
            public virtual Guid? CreatedByID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute.Creator">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute.Creator.pKID">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute.Creator.username">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute.Creator.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBCreatedByIDAttribute.Creator.mailSignature">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCreatedByIDAttribute.#ctor">
            <summary>
            Initializes a new unparameterized instance of the
            <tt>PXDBCreatedByID</tt> attribute.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the ID of the user who was the last to modify
            the data record.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>Guid?</tt>.</remarks>
            <example>
            <code>
            [PXDBLastModifiedByID()]
            [PXUIField(DisplayName = "Last Modified By")]
            public virtual Guid? LastModifiedByID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.Modifier">
            <summary>Is used internally to represent the user who modified the data record.</summary>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.Modifier.pKID">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.Modifier.username">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.Modifier.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.Modifier.mailSignature">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByIDAttribute.DisplayFieldNames">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLastModifiedByIDAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the ID of the user who made the last workflow transition
            for the data record.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>Guid?</tt>.</remarks>
            <example>
            <code>
            [PXDBStateChangedByID()]
            [PXUIField(DisplayName = "State Changed By")]
            public virtual Guid? LastModifiedByID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByIDAttribute.StateChanger">
            <summary>Is used internally to represent the user who changed workflow state for the data record.</summary>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByIDAttribute.StateChanger.pKID">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByIDAttribute.StateChanger.username">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByIDAttribute.StateChanger.displayName">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStateChangedByIDAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBBaseScreenIDAttribute">
            <summary>Base class for PXDB***ByScreenID attributes</summary>
        </member>
        <member name="M:PX.Data.PXDBBaseScreenIDAttribute.#ctor">
            <summary>
            Initializes a new instance of the <tt>PXDBCreatedByScreenID</tt>
            attribute. Limits the maximum value length and sets the input mask.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBCreatedByScreenIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the string ID of the application screen that
            created the data record.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>string</tt>.</remarks>
            <example>
            <code>
            [PXDBCreatedByScreenID()]
            public virtual string CreatedByScreenID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedByScreenIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the string ID of the application screen on
            which the data record was modified the last time.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>string</tt>.</remarks>
            <example>
            <code>
            [PXDBLastModifiedByScreenID()]
            public virtual string LastModifiedByScreenID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBStateChangedByScreenIDAttribute">
            <summary>Maps a DAC field to the database column and automatically
            sets the field value to the string ID of the application screen on
            which the data record performed last workflow transition.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>string</tt>.</remarks>
            <example>
            <code>
            [PXDBStateChangedByScreenID()]
            public virtual string StateChangedByScreenID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBBaseDateTimeAttribute">
            <summary>
            Base class for PXDB***DateTime attributes
            </summary>
        </member>
        <member name="M:PX.Data.PXDBBaseDateTimeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <tt>PXDBCreatedDateTime</tt> attribute.
            </summary>
        </member>
        <member name="P:PX.Data.PXDBBaseDateTimeAttribute.UseTimeZone">
            <summary>Gets or sets the value that indicates (if set to <tt>true</tt>) that the attribute should convert the time to UTC, using the local time zone.</summary>
            <value>
            By default, the value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.Data.PXDBCreatedDateTimeAttribute">
            <summary>Maps a DAC field to the database column and automatically sets the field value to the data record's creation date and time in UTC.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDBCreatedDateTime()]
            public virtual DateTime? CreatedDateTime { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedDateTimeAttribute">
            <summary>Maps a DAC field to the database column and automatically sets the field value to the data record's last modification date and time in UTC.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="Example" description="" lang="CS">
            [PXDBLastModifiedDateTime]
            [PXUIField(DisplayName = "Last Modified Date", Enabled = false)]
            public virtual DateTime? LastModifiedDateTime { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBStateChangedDateTimeAttribute">
            <summary>Maps a DAC field to the database column and automatically sets the field value to the data record's last workflow transition date and time in UTC.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="Example" description="" lang="CS">
            [PXDBStateChangedDateTime]
            [PXUIField(DisplayName = "Last Modified Date", Enabled = false)]
            public virtual DateTime? StateChangedDateTime { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBBinaryAttribute">
            <summary>Maps a DAC field of <tt>byte[]</tt> type to the binary
            database column of either fixed or variable length.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBBinary]
            [PXUIField(Visible = false)]
            public virtual byte[] NewValue { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBBinaryAttribute.IsFixed">
            <summary>Gets or sets an indication that the binay value has a fixed
            length. This property should be set to <tt>true</tt> if the database
            column has a fixed length type (<tt>binary</tt>) and to <tt>false</tt>
            if the database column has a variable length type
            (<tt>varbinary</tt>). The default value is <tt>false</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXDBBinaryAttribute.Length">
            <summary>Gets the maximum length of the binary value.</summary>
            <remarks>The default value is -1 (the length is not limited). A different
            value can be set in the constructor.</remarks>
        </member>
        <member name="M:PX.Data.PXDBBinaryAttribute.#ctor">
            <summary>Initializes a new unparameterized instance of the attribute.</summary>
        </member>
        <member name="M:PX.Data.PXDBBinaryAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum
            length.</summary>
            <param name="length">The maximum length of the field value.</param>
            <example>
            The code below shows the value definition of a DAC field.
            <code>
            [PXDBBinary(500)]
            public byte[] CommonValues { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBBinaryAttribute.PrepareCommandImpl(System.String,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBBinaryAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBBinaryStringAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBPackedIntegerArrayAttribute">
            <summary>
            Maps a DAC field of <tt>ushort[]</tt> type to the binary database column of variable length, using the One Hot encoding.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBGroupMaskAttribute">
            <summary>Marks a DAC field of <tt>byte[]</tt> type that holds the
            group mask value.</summary>
            <example>
            	<code title="Example" description="The code below shows definition of a DAC field tha holds a group mask value." lang="CS">
            [PXDBGroupMask()]
            public virtual Byte[] GroupMask { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBGroupMaskAttribute.#ctor">
            <summary>Initializes an instance of the attribute with default
            parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBGroupMaskAttribute.#ctor(System.Int32)">
            <summary>Initializes an instance of the attribute with the specified
            maximum length of the value.</summary>
        </member>
        <member name="M:PX.Data.PXDBGroupMaskAttribute.securedFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBGroupMaskAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBVariantAttribute">
            <summary>Maps a DAC field of <tt>byte[]</tt> type to the database
            column of a variant type.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBVariant]
            [PXUIField(DisplayName = "Value")]
            public virtual byte[] Value { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.#ctor">
            <summary>Initializes a new instance of the attribute
            with default parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum
            length.</summary>
            <param name="length">The maximum length of the value.</param>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.GetValue(System.Byte[])">
            <summary>
            Gets a typed value from an array of bytes. The first byte
            in the array is converted to <tt>Typecode</tt> to determine
            the data type of the value.
            </summary>
            <param name="val">The array of bytes to convert to a typed value.</param>
            <returns>The typed value.</returns>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBVariantAttribute.SetValue(System.Object)">
            <summary>
            Convert a typed value to an array of bytes.
            </summary>
            <param name="value">The data value to convert.</param>
            <returns>The array of bytes representing the provided value.</returns>
        </member>
        <member name="T:PX.Data.PXDBWeblinkAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBEmailAttribute">
            <summary>Maps a <tt>string</tt> DAC field representing email addresses
            to the database column of <tt>nvarchar</tt> type.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>The field value must be a Unicode string. The field value length
            is limited by 255.</para>
            </remarks>
            <example>
            <code>
            [PXDBEmail]
            [PXUIField(DisplayName = "Email",
                       Visibility = PXUIVisibility.SelectorVisible)]
            public virtual string Email { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBEmailAttribute.IEmailValidator">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBEmailAttribute.DotNetEmailValidator">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBEmailAttribute.FieldList">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.#ctor">
            <summary>
            Initializes a new instance of the attribute. The maximum string length is set to 255. The string is marked as Unicode.
            </summary>
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.GetEMailFields(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.FormatAddressesWithoutDisplayName(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.FormatAddressesWithSingleDisplayName(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.AppendAddresses(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.ToString(System.Collections.Generic.IEnumerable{System.Net.Mail.MailAddress})">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.ToRFC(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBEmailAttribute.Distinct(System.String)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXDBCryptStringAttribute">
            <summary>The attribute is added to the value declaration of a DAC field. The field becomes bound to the database column with the same name.</summary>
        </member>
        <member name="P:PX.Data.PXDBCryptStringAttribute.IsViewDecrypted">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBCryptStringAttribute.ViewAsString">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBCryptStringAttribute.ViewAsField">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.PXDBCryptStringAttribute.IsEncryptionRequired">
            <summary>Get, set.</summary>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.#ctor">
            <summary>Initializes a new instance with default parameters.</summary>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum
            length.</summary>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetDecrypted(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Overrides the visible state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetDecrypted(PX.Data.PXCache,System.String,System.Boolean)">
            <summary>Overrides the visible state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetDecrypted``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Overrides the visible state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetDecrypted``1(PX.Data.PXCache,System.Boolean)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs(PX.Data.PXCache,System.String,System.String)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs``1(PX.Data.PXCache,System.String)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs(PX.Data.PXCache,System.Object,System.String,System.Type)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs(PX.Data.PXCache,System.String,System.Type)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs``1(PX.Data.PXCache,System.Object,System.Type)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.SetViewAs``1(PX.Data.PXCache,System.Type)">
            <summary>Overrides the view as state for the particular data
            item.</summary>
            <param name="cache">Cache containing the data item.</param>
            <param name="def">Default value.</param>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBCryptStringAttribute.RowUpdating(PX.Data.PXCache,PX.Data.PXRowUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDB3DesCryphStringAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDB3DesCryphStringAttribute.#ctor">
            
        </member>
        <member name="M:PX.Data.PXDB3DesCryphStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given maximum
            length.</summary>
        </member>
        <member name="M:PX.Data.PXDB3DesCryphStringAttribute.Encrypt(System.String)">
            
        </member>
        <member name="T:PX.Data.PXDBLiteDefaultAttribute">
            <summary>Provides the default value for a property or parameter. The attribute is used for
            defaulting from an auto-generated key field.</summary>
            <remarks>This attribute is obsolete and will be removed in future versions. Use <see cref="T:PX.Data.PXDBDefaultAttribute"/> instead.</remarks>
        </member>
        <member name="M:PX.Data.PXDBLiteDefaultAttribute.#ctor(System.Type)">
            <summary>
            Defines the default from the item of the <tt>sourceType</tt> type.
            </summary>
            <param name="sourceType">The type to get the default value from. If the type implements IBqlField and is nested, the parameter defines the source field as well.</param>
        </member>
        <member name="T:PX.Data.PXDBChildIdentityAttribute">
            <summary>Indicates that a DAC field references an auto-generated key
            field from another table and ensures the DAC field's value is correct
            after changes are committed to the database.</summary>
            <remarks>The attribute updates the field value once the source field is
            assigned a real value by the database.</remarks>
            <example>
            <code>
            [PXDBInt()]
            [PXDBChildIdentity(typeof(Address.addressID))]
            public virtual int? DefPOAddressID { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance that takes the value for the field
            the attribute is attached to from the provided source field.
            </summary>
            <param name="sourceType">The source field type to get the value from, should
            be nested (defined in a DAC) and implement <tt>IBqlField</tt>.</param>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.SourceRowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.SourceRowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBChildIdentityAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTimeSpanLongAttribute">
            <summary>Maps a DAC field of the <tt>int?</tt> type that represents the
            duration (in minutes) to an <tt>int</tt> database column.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</remarks>
            <example>
            <code>
            [PXDBTimeSpanLong(Format = TimeSpanFormatType.LongHoursMinutes)]
            [PXUIField(DisplayName = "Estimation")]
            public virtual Int32? TimeEstimated { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanLongAttribute.Format">
            <summary>Gets or sets the data format type. Possible values are
            defined by the <see
            cref="T:PX.Data.TimeSpanFormatType">TimeSpanFormatType</see>
            enumeration.</summary>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanLongAttribute.InputMask">
            <summary>Gets or sets the pattern that indicates the allowed
            characters in a field value. By default, the property is null, and the
            attribute determines the input mask by the <tt>Format</tt>
            value.</summary>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanLongAttribute.#ctor">
            <summary>
            Initializes a new value with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanLongAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanLongAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDateAndTimeAttribute">
            <summary>Maps a DAC field of <tt>DateTime?</tt> type to the database
            column of <tt>datetime</tt> or <tt>smalldatetime</tt> type. Defines
            the DAC field that is represented in the UI by two input controls: one
            for date, the other for time.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>Unlike the <see cref="T:PX.Data.PXDBDateAttribute">PXDBDate</see>
            attribute, this attribute defines the field that is represented in the
            UI by two input controls to specify date and time values
            separately.</para>
            </remarks>
            <example>
            <code>
            [PXDBDateAndTime]
            [PXUIField(DisplayName = "Start Time")]
            public virtual DateTime? StartDate { get; set; }
            </code>
            </example>
        </member>
        <member name="F:PX.Data.PXDBDateAndTimeAttribute.DATE_FIELD_POSTFIX">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDBDateAndTimeAttribute.TIME_FIELD_POSTFIX">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBDateAndTimeAttribute.DateDisplayNamePostfix">
            <summary>
            Gets the localized additional label for the date part
            of the field.
            </summary>
        </member>
        <member name="P:PX.Data.PXDBDateAndTimeAttribute.TimeDisplayNamePostfix">
            <summary>
            Gets the localized additional label for the time part
            of the field.
            </summary>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.#ctor">
            <summary>Initializes a new instance of the attribute with default
            parameters.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAndTimeAttribute.WithoutDisplayNames">
            <summary>Gets or sets the value that indicates whether the display
            names of the input controls for date and time are appended with
            <i>(Date)</i> and <i>(Time)</i>, respectively.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAndTimeAttribute.DisplayNameDate">
            <summary>Gets or sets the display name for the input control that
            represents date.</summary>
        </member>
        <member name="P:PX.Data.PXDBDateAndTimeAttribute.DisplayNameTime">
            <summary>Gets or sets the display name for the input control that
            represents time.</summary>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.Date_FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.Time_FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.Date_FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.Time_FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.CombineDateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Combines the provided data and time values in a single <tt>DateTime</tt>
            object.
            </summary>
            <param name="date">The date value.</param>
            <param name="time">The time value.</param>
            <returns>The combined <tt>DateTime</tt> value or <tt>null</tt> if the
            <tt>date</tt> value is <tt>null</tt>.</returns>
            <example>
            <code>
            ...
            switch (date.Value.DayOfWeek)
            {
               case DayOfWeek.Monday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.MonStartTime);
               case DayOfWeek.Tuesday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.TueStartTime);
               case DayOfWeek.Wednesday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.WedStartTime);
               case DayOfWeek.Thursday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.ThuStartTime);
               case DayOfWeek.Friday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.FriStartTime);
               case DayOfWeek.Saturday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.SatStartTime);
               case DayOfWeek.Sunday: return PXDBDateAndTimeAttribute.CombineDateTime(date, cal.SunStartTime);
            }
            ...
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateEnabled``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            date part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateEnabled(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            date part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeEnabled``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            time part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeEnabled(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Enables or disables the input control that represents the
            time part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isEnabled">The value indicating whether the input control
            is enabled.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateDisplayName``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the display name of the input control that represents
            the date part of the field value. The field is specified as the type
            parameter.</summary>
            <typeparam name="Field">The field.</typeparam>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="displayName">The string to set as the display
            name.</param>
            <example>
            The code below shows the constructor of the <tt>CRTaskMaint</tt> graph,
            in which you set new display names for the input control representing
            the date values of <tt>StartDate</tt> and <tt>EndDate</tt>.
            <code>
            public CRTaskMaint()
                : base()
            {
                ...
                PXDBDateAndTimeAttribute.SetDateDisplayName&lt;EPActivity.startDate&gt;(Tasks.Cache, null, "Start Date");
                PXDBDateAndTimeAttribute.SetDateDisplayName&lt;EPActivity.endDate&gt;(Tasks.Cache, null, "Due Date");
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateDisplayName(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the display name of the input control that represents
            the date part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="displayName">The string to set as the display
            name.</param>
            <seealso cref="M:PX.Data.PXDBDateAndTimeAttribute.SetDateDisplayName``1(PX.Data.PXCache,System.Object,System.String)"/>
            <example>
            <code>
            PXDBDateAndTimeAttribute.SetDateDisplayName(Tasks.Cache, null, "StartDate", "Start Date");
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeDisplayName``1(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the display name of the input control that represents
            the time part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="displayName">The string to set as the display
            name.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeDisplayName(PX.Data.PXCache,System.Object,System.String,System.String)">
            <summary>Sets the display name of the input control that represents
            the time part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="displayName">The string to set as the display
            name.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateVisible``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Makes visible or hides the input control that represents the
            data part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isVisible">The value indicating whether the input control
            is visible on the user interface.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetDateVisible(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Makes visible or hides the input control that represents the
            data part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isVisible">The value indicating whether the input control
            is visible on the user interface.</param>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeVisible``1(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>Makes visible or hides the input control that represents the
            data part of the field value. The field is specified as the type
            parameter.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="isVisible">The value indicating whether the input control
            is visible on the user interface.</param>
            <example>
            The code below shows the <tt>RowSelected</tt> event handler, in which you
            configure the visibility of the input controls that represent time value
            of the <tt>StartDate</tt> and <tt>EndDate</tt> fields.
            <code>
            protected virtual void EPActivity_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
            {
                ...
                var showMinutes = EPSetupCurrent.RequireTimes == true;
                PXDBDateAndTimeAttribute.SetTimeVisible&lt;EPActivity.startDate&gt;(cache, row, true);
                PXDBDateAndTimeAttribute.SetTimeVisible&lt;EPActivity.endDate&gt;(cache, row, showMinutes &amp;&amp; row.TrackTime == true);
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeVisible(PX.Data.PXCache,System.Object,System.String,System.Boolean)">
            <summary>Makes visible or hides the input control that represents the
            time part of the field value.</summary>
            <param name="cache">The cache object to search for
            <tt>PXDBDateAndTime</tt> attributes.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records in the cache
            object.</param>
            <param name="name">The name of the field the attribute is attached
            to.</param>
            <param name="isVisible">The value indicating whether the input control
            is visible on the user interface.</param>
            <seealso cref="M:PX.Data.PXDBDateAndTimeAttribute.SetTimeVisible``1(PX.Data.PXCache,System.Object,System.Boolean)"/>
            <example>
            <code>
            PXDBDateAndTimeAttribute.SetTimeVisible(cache, row, "StartDate", true);
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBTimeSpanAttribute">
            <summary>Maps a DAC field of <tt>int?</tt> type to the <tt>int</tt>
            database column. The field value represents a date as a number of
            minutes passed from 01/01/1900.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>The field value stores a date as a number of minutes. In the UI,
            the string is typically represented by a control allowing a selection
            from the list of time values with half-hour interval.</para>
            </remarks>
            <example>
            <code>
            [PXDBTimeSpan]
            [PXUIField(DisplayName = "Run Time")]
            public virtual int? RunTime { get; set; ]
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanAttribute.InputMask">
            <summary>Gets or sets the input mask for date and time values that can
            be entered as value of the current field. By default, the proprty
            equals <i>HH:mm</i>.</summary>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanAttribute.DisplayMask">
            <summary>Gets or sets the display mask for date and time values that
            can be entered as value of the current field. By default, the proprty
            equals <i>HH:mm</i>.</summary>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanAttribute.MinValue">
            <summary>Gets or sets the minimum value for the field. The value
            should be a valid string representation of a date.</summary>
        </member>
        <member name="P:PX.Data.PXDBTimeSpanAttribute.MaxValue">
            <summary>Gets or sets the maximum value for the field. The value
            should be a valid string representation of a date.</summary>
        </member>
        <member name="F:PX.Data.PXDBTimeSpanAttribute.Zero">
            <summary>
            The "00:00" constant.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBTimeSpanAttribute.zero">
            <summary>
            The BQL constant representing string "00:00".
            </summary>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBTimeSpanAttribute.FromMinutes(System.Int32)">
            <summary>Returns the date obtained by adding the specified number of
            minutes to 01/01/1900.</summary>
            <param name="minutes">The minutes to add to the default date.</param>
        </member>
        <member name="T:PX.Data.PXDBImageAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDBImageAttribute.HeaderImage">
            <summary>Get, set.</summary>
        </member>
        <member name="T:PX.Data.PXDBCreatedDateTimeUtcAttribute">
            <summary>
              <para>This attribute is obsolete. Use <see cref="T:PX.Data.PXDBCreatedDateTimeAttribute">PXDBCreatedDateTimeAttribute</see> instead.</para>
              <para>Maps a DAC field to the database column and automatically sets the field value to the data record's creation UTC date and time.</para>
            </summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDBCreatedDateTimeUtc]
            [PXUIField(DisplayName = "Date Created", Enabled = false)]
            public virtual DateTime? CreatedDateTime { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBCreatedDateTimeUtcAttribute.#ctor">
            <summary>
            Initializes a new instance of the <tt>PXDBCreatedDateTimeUtc</tt> attribute.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBLastModifiedDateTimeUtcAttribute">
            <summary>
              <para>This attribute is obsolete. Use <see cref="T:PX.Data.PXDBLastModifiedDateTimeAttribute">PXDBLastModifiedDateTimeAttribute Class</see> instead.</para>
              <para>Maps a DAC field to the database column and automatically sets the field value to the data record's last modification date and time in UTC.</para>
            </summary>
            <remarks>The attribute is added to the value declaration of a DAC field.
            The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXDBLastModifiedDateTimeUtc]
            [PXUIField(DisplayName = "Last Modified Date", Enabled = false)]
            public virtual DateTime? LastModifiedDateTime { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBLastModifiedDateTimeUtcAttribute.#ctor">
            <summary>
            Initializes a new instance with default parameters.
            </summary>
        </member>
        <member name="T:PX.Data.PXDBDecimalStringAttribute">
            <summary>Maps a DAC field of <tt>decimal?</tt> type to the database
            column of <tt>decimal</tt> type. The mapped DAC field can be
            represented in the UI by a dropdown list using the <see
            cref="T:PX.Data.PXDecimalListAttribute">PXDecimalList</see>
            attribute.</summary>
            <remarks>
            <para>The attribute is added to the value declaration of a DAC field.
            The field becomes bound to the database column with the same
            name.</para>
            <para>In the UI, the field can be represented by a drop-down list with
            specific values. The UI control is configured using the
            <tt>PXDecimalList</tt> attribute.</para>
            </remarks>
            <example>
            <code>
            // A mapping of the DAC field to the database column
            [PXDBDecimalString(1)]
            // UI control configuration.
            // The first list configures values assigned to the field,
            // the second one configures displayed labels.
            [PXDecimalList(new string[] { "0.1", "0.5", "1.0", "10", "100" },
                           new string[] { "0.1", "0.5", "1.0", "10", "100" })]
            [PXDefault(TypeCode.Decimal, "0.1")]
            [PXUIField(DisplayName = "Invoice Amount Precision")]
            public virtual decimal? InvoicePrecision { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDBDecimalStringAttribute.#ctor">
            <summary>Initializes a new instance with the default precision, which
            equals 2.</summary>
        </member>
        <member name="M:PX.Data.PXDBDecimalStringAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance with the given decimal value
            precision.</summary>
        </member>
        <member name="M:PX.Data.PXDBDecimalStringAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBDecimalStringAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBDateStringAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBLastChangeDateTimeAttribute">
            <summary>Maps a DAC field to the database column and automatically sets the field value to the last modification date and time (in UTC) of the specified field.</summary>
            <remarks>The attribute is added to the value declaration of a DAC field. The field data type should be <tt>DateTime?</tt>.</remarks>
            <example>
              <code title="Example" description="In the following code, the modification date and time of the &lt;tt&gt;StatusDate&lt;/tt&gt; field is updated each time &lt;tt&gt;CRCase.status&lt;/tt&gt; is updated." lang="CS">
            [PXDBLastChangeDateTime(typeof(CRCase.status))]
            public virtual DateTime? StatusDate { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBLastChangeDateTimeAttribute.SelectedValue">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBLastChangeDateTimeAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the attribute that monitors the specified field. On each modification of the monitored field, the attribute updates the
            modification date and time of the field that is marked with the attribute.</summary>
            <param name="monitoredField">The field to monitor. You specify a type that implements IBqlField.</param>
        </member>
        <member name="M:PX.Data.PXDBLastChangeDateTimeAttribute.GetDate">
            <exclude />
        </member>
        <member name="P:PX.Data.PXDBLastChangeDateTimeAttribute.UseTimeZone">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDBLastChangeDateTimeAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXDBRevision">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXUserAttribute.GetFields(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXPhoneAttribute.GetFields(System.Type)">
            <exclude/>
        </member>
        <member name="T:PX.Data.DimensionLookupMode">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDimensionAttribute">
            <summary>Sets up the input control for a DAC field that holds a
            segmented value. The control formats the input as a segmented key
            value and displays the list of allowed values for each key segment
            when the user presses F3 on a keyboard.</summary>
            <example>
            <code>
            [PXDimension("SUBACCOUNT", ValidComboRequired = false)]
            public virtual string SubID { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.SetSegmentDelegate(System.Delegate)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDimensionAttribute.ValidComboRequired">
            <summary>Gets or sets the value that indicates whether the user can
            specify only one of the predefined values as a segment or the user can
            input arbitrary values.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionAttribute.Wildcard">
            <summary>Gets or sets the one-character-long string that is
            treated as a wildcard (that is, a character that matches any symbols).
            Typically, the property is set when the field to which the attribute
            is attached is used for filtering. See also the <see
            cref="T:PX.Data.PXDimensionWildcardAttribute">PXDimensionWildcard</see>
            attribute.</summary>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.GetLength(System.String)">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXDimensionAttribute.NoMaxLength">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.GetMaxLength(System.String)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDimensionAttribute.ParentSelect">
            <summary>
            A BQL select that defines the data set that is available
            for selectint parent records for lookup mode "By Segments: Child Segment Values".
            </summary>
        </member>
        <member name="P:PX.Data.PXDimensionAttribute.ParentValueField">
            <summary>
            Field that is used for "Child Segment Values" lookup mode to retrieve segment's value from a parent record.
            </summary>
        </member>
        <member name="P:PX.Data.PXDimensionAttribute.DimensionLookupModeState">
            <exclude />
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.#ctor(System.String)">
            <summary>
            Creates an instance to work with the provided segmented key.
            </summary>
            <param name="dimension">The string identifier of the segmented key.</param>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.FindValueBySegmentDelegate(PX.Data.PXCache,System.Object,System.String,System.Int16,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.MatchMask``1(PX.Data.PXCache,System.String)">
            <summary>
            Validates if passed value correlates with current segment key rules
            </summary>
            <typeparam name="TField">Field with segmented key</typeparam>
            <param name="sender">Cache</param>
            <param name="value">Tested value</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.SelfRowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs,PX.Data.PXSegment[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionAttribute.SegmentSelect(System.Nullable{System.Int16},System.String)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDimensionSelectorAttribute">
            <summary>Sets up the lookup control for a DAC field that holds a
            segmented key value or references a data record identified by a
            segmented key. The attribute combines the <tt>PXDimension</tt> and
            <tt>PXSelector</tt> attributes.</summary>
            <example>
            	<code title="Example" description="The attribute below sets up the control for input of the BIZACCT segmented key's values. Since the AcctCD field itself is specified as the substitute key it will keep the segmented key value." lang="CS">
            [PXDimensionSelector(
                "BIZACCT",
                typeof(BAccount.acctCD),   // BQL query for lookup
                typeof(BAccount.acctCD))]  // Substitute key
            public virtual string AcctCD { get; set; }</code>
            	<code title="Example2" description="In the following example the RunRateItemID field references the data records from" groupname="Example" lang="CS">
            [PXDimensionSelector(
                InventoryAttribute.DimensionName,
                typeof(
                    Search&lt;InventoryItem.inventoryID,
                        Where&lt;InventoryItem.itemType, Equal&lt;INItemTypes.nonStockItem&gt;,
                            And&lt;Match&lt;Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt;&gt;),
                typeof(InventoryItem.inventoryCD),
                DescriptionField = typeof(InventoryItem.descr))]
            public virtual int? RunRateItemID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.SetSegmentDelegate(System.Delegate)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.SegmentSelect(System.Nullable{System.Int16},System.String)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.ValidComboRequired">
            <summary>Gets or sets the value that indicates whether only the values
            from the combobox are allowed in segments.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.DescriptionField">
            <summary>Gets or sets the field from the referenced table that
            contains the description.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.FilterEntity">
            <summary>
            Gets or sets the type that is used as a key for saved filters.
            </summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.CacheGlobal">
            <summary>Gets or sets the value that indicates whether the attribute
            should cache the data records retrieved from the database to show in
            the lookup control. By default, the attribute does not cache the data
            records.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.Filterable">
            <summary>Gets or sets the value that indicates whether the filters
            defined by the user should be stored in the database.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.DirtyRead">
            <summary>Gets or sets a value that indicates whether the attribute
            should take into account the unsaved modifications when displaying
            data records in control. If <tt>false</tt>, the data records are taken
            from the database and not merged with the cache object. If
            <tt>true</tt>, the data records are merged with the modification
            stored in the cache object.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.Headers">
            <summary>Gets or sets the list of labels for column headers that are
            displayed in the lookup control. By default, the attribute uses
            display names of the fields.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.SelectorMode">
            <summary>
            Gets or sets the value that determines the value displayed by
            the selector control in the UI and some aspects of
            attribute's behavior. You can assign a combination of
            <see cref="T:PX.Data.PXSelectorMode">PXSelectorMode</see> values joined
            by bitwise or ("|").
            </summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.ValidateValue">
            <summary>
            Allows to control validation process.
            </summary>
        </member>
        <member name="P:PX.Data.PXDimensionSelectorAttribute.Field">
            <summary>Gets the field that identifies a referenced data record
            (surrogate key) and is assigned to the field annotated with the
            <tt>PXSelector</tt> attribute. Typically, it is the first parameter of
            the BQL query passed to the attribute constructor.</summary>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.GetSelect">
            <summary>
            Returns Bql command used for selection of referenced records.
            </summary>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance to reference the data records that
            are identified by the specified segmented key. Uses the provided BQL
            query to retrieve the data records.</summary>
            <param name="dimension">The string identifier of the segmented
            key.</param>
            <param name="type">A BQL query that defines the data set that is shown
            to the user along with the key field that is used as a value. Set to a
            field (type part of a DAC field) to select all data records from the
            referenced table. Set to a BQL command of <tt>Search</tt> type to
            specify a complex select statement.</param>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.#ctor(System.String,System.Type,System.Type)">
            <summary>Initializes a new instance to reference the data records that
            are identified by the specified segmented key. Uses the provided BQL
            query to retrieve the data records and substitutes the field value
            (surrogate key) with the provided field (natural key).</summary>
            <param name="dimension">The string identifier of the segmented
            key.</param>
            <param name="type">A BQL query that defines the data set that is shown
            to the user along with the key field that is used as a value. Set to a
            field (type part of a DAC field) to select all data records from the
            referenced table. Set to a BQL command of <tt>Search</tt> type to
            specify a complex select statement.</param>
            <param name="substituteKey">The field to sustitute the surrogate
            field's value in the user interface.</param>
            <example>
            <code>
            [PXDimensionSelector(
                InventoryAttribute.DimensionName,
                typeof(
                    Search&lt;InventoryItem.inventoryID,
                        Where&lt;InventoryItem.itemType, Equal&lt;INItemTypes.nonStockItem&gt;,
                            And&lt;Match&lt;Current&lt;AccessInfo.userName&gt;&gt;&gt;&gt;&gt;),
                typeof(InventoryItem.inventoryCD),
                DescriptionField = typeof(InventoryItem.descr))]
            public virtual int? RunRateItemID { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.#ctor(System.String,System.Type,System.Type,System.Type[])">
            <summary>Initializes a new instance to reference the data records that
            are identified by the specified segmented key. Uses the provided BQL
            query to retrieve the data records and substitutes the field value
            (surrogate key) with the provided field (natural key).</summary>
            <param name="dimension">The string identifier of the segmented
            key.</param>
            <param name="type">A BQL query that defines the data set that is shown
            to the user along with the key field that is used as a value. Set to a
            field (type part of a DAC field) to select all data records from the
            referenced table. Set to a BQL command of <tt>Search</tt> type to
            specify a complex select statement.</param>
            <param name="substituteKey">The field to sustitute the surrogate
            field's value in the user interface.</param>
            <param name="fieldList">Fields to display in the control.</param>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.FieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.SubstituteRowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.SubstituteRowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDimensionSelectorAttribute.GetSubscriber``1(System.Collections.Generic.List{``0})">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDimensionWildcardAttribute">
            <summary>Sets up the lookup control for a DAC field that holds a
            segmented key value and allows the <i>?</i> wildcard character. The
            attribute combines the <tt>PXDimension</tt> and <tt>PXSelector</tt>
            attributes.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionWildcardAttribute.DescriptionField">
            <summary>Gets or sets the field from the referenced table that
            contains the description.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionWildcardAttribute.Wildcard">
            <summary>Gets or sets the wildcard string that matches any symbol in
            the segment.</summary>
        </member>
        <member name="P:PX.Data.PXDimensionWildcardAttribute.Headers">
            <summary>Gets or sets the list of labels for column headers that are
            displayed in the lookup control. By default, the attribute uses
            display names of the fields.</summary>
        </member>
        <member name="M:PX.Data.PXDimensionWildcardAttribute.#ctor(System.String,System.Type)">
            <summary>Creates a selector.</summary>
            <param name="type">Referenced table. Should be either IBqlField or
            IBqlSearch.</param>
        </member>
        <member name="M:PX.Data.PXDimensionWildcardAttribute.#ctor(System.String,System.Type,System.Type[])">
            <summary>Creates a selector overriding the columns.</summary>
            <param name="type">Referenced table. Should be either IBqlField or
            IBqlSearch.</param>
            <param name="fieldList">Fields to display in the selector.</param>
            <param name="headerList">Headers of the selector columns.</param>
        </member>
        <member name="T:PX.Data.PXCustomDimensionSelectorAttribute">
            <summary>The base class for custom dimension selector attributes.
            Derive the attribute class from this class and implement the
            <tt>GetRecords()</tt> method.</summary>
        </member>
        <member name="M:PX.Data.PXCustomDimensionSelectorAttribute.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the attribute.</summary>
        </member>
        <member name="M:PX.Data.PXCustomDimensionSelectorAttribute.#ctor(System.String,System.Type,System.Type)">
            <summary>Initializes a new instance of the attribute.</summary>
        </member>
        <member name="M:PX.Data.PXCustomDimensionSelectorAttribute.#ctor(System.String,System.Type,System.Type,System.Type[])">
            <summary>Initializes a new instance of the attribute.</summary>
        </member>
        <member name="T:PX.Data.FilterListAttribute">
            <summary>
            Displays a list of shared filters for the defined screen.
            </summary>
        </member>
        <member name="T:PX.Data.LanguageSelectorAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNoteAttribute">
            <summary>Binds the <tt>NoteID</tt> DAC field of <tt>Guid?</tt> type to the database column that keeps note identifiers and enables attachment of text comments, files, and activity items
            to a data record.</summary>
            <remarks>
              <para>The attribute should be placed on the DAC field that will hold the identifier of the related note. A note is a data record in the <tt>Note</tt> database
            table. A note data record contains the note identifier, the text comment, the DAC name of the related data record, and some other fields.</para>
              <para>Only one data record can reference a note. So the identifier of this note can be used as the global identifier of the data record. Thanks to this fact, in
            addition to adding text comments to a data record notes are used to implement:</para>
              <list type="bullet">
                <item>
                  <i>Full-text search of data records</i>: A note can be used to store the specified fields of the related data record, which can be found by these
                fields through the website search.</item>
                <item>
                  <i>File attachments</i>: The relationships between files and notes are kept in a separate table, <tt>NoteDoc</tt>, as pairs of a file identifier and
                note identifier. The <tt>UploadFile</tt> stores general information about files, and the <tt>UploadRevision</tt> stores specific revisions of files.</item>
                <item>
                  <i>Association of activity items with a data record</i>.</item>
                <item>
                  <i>Multi-language fields</i>: For more information about how to create fields with localizable values, see <see cref="!:https://help.acumatica.com/(W(8))/Main?ScreenId=ShowWiki&amp;amp;amp;amp;amp;pageid=a1de7d38-cd06-4497-a5b7-61b1a01b7d16">To Work with Multi-Language
                Fields</see>.</item>
              </list>
              <para>For any of these features to work, the given DAC should define a field marked with the <tt>PXNote</tt> attribute.</para>
            </remarks>
            <example>
              <para></para>
              <code title="Example" description="The attribute below indicates that the DAC field references a note. Here, new Type[0] as parameter is used to force creation of the note on saving of a data record even if the used did not create a note manually. " lang="CS">
            [PXNote(new Type[0])]
            public virtual Guid? NoteID { get; set; }</code>
              <code title="Example2" description="&lt;para&gt;The attribute below indicates that the DAC field holds note identifier, sets the lists of fields (from different tables) that will be saved in the note, and allows association of a data record with activity items. It will be possible to find the &lt;tt&gt;Vendor&lt;/tt&gt; data record through the application website search by the values of these fields. &lt;/para&gt;&#xD;&#xA;&lt;para&gt;The first few parameters specify fields to save in the note. The &lt;tt&gt;ForeignRelations&lt;/tt&gt; property specifies the &lt;tt&gt;Vendor&lt;/tt&gt; fields that reference the related &lt;tt&gt;Contact&lt;/tt&gt; and &lt;tt&gt;Address&lt;/tt&gt; data records. Fields from these tables are also provided among the field to save in the note. &lt;/para&gt;&#xD;&#xA;&lt;para&gt;The &lt;tt&gt;ShowInReferenceSelector&lt;/tt&gt; allows attaching activity items to &lt;tt&gt;Vendor&lt;/tt&gt; data records. On the activity webpage, the lookup field for selecting a related data record will display the &lt;tt&gt;Vendor.AcctCD&lt;/tt&gt; (configured by &lt;tt&gt;DescriptionField&lt;/tt&gt;) when a &lt;tt&gt;Vendor&lt;/tt&gt; data record is selected and use the same field (due to &lt;tt&gt;Selector&lt;/tt&gt;) as the reference value.&lt;/para&gt;" groupname="Example" lang="CS">
            [PXNote(
                typeof(Vendor.acctCD),
                typeof(Vendor.acctName),
                typeof(Contact.eMail),
                typeof(Contact.phone1),
                typeof(Contact.fax),
                typeof(Address.addressLine1),
                typeof(Address.city),
                typeof(Address.countryID),
                typeof(Address.postalCode),
                ForeignRelations =
                    new Type[] { typeof(Vendor.defContactID),
                                 typeof(Vendor.defAddressID) },
                ExtraSearchResultColumns =
                    new Type[] { typeof(CR.Contact) },
             
                ShowInReferenceSelector = true,
                DescriptionField = typeof(Vendor.acctCD),
                Selector = typeof(Vendor.acctCD)
            )]
            public virtual Guid? NoteID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.#ctor">
            <summary>Initializes a new instance of the attribute that will be used
            to attach notes to data record but won't save values of the fields in
            a note.</summary>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the attribute that is used to attach notes to a data record.
            </summary>
            <remarks> This constructor is the same as the parameterless one. The <paramref name="searches"/> parameter is ignored.</remarks>
            <param name="searches">This parameter is ignored.</param>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ParentNoteID">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ShowInReferenceSelector">
            <summary>Gets or sets the value that indicates whether activity items
            can be associated with the DAC where the <tt>PXNote</tt> attribute is
            used. If the property equals <tt>true</tt>, the DAC will appear in the
            list of types in the lookup that selects the related data record for
            an activity. If the property equals <tt>false</tt>, activity
            attributes cannot be associated with data records of the DAC. By
            default the property equals <tt>false</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.SuppressActivitiesCount">
            <summary>Gets or sets the value that indicates whether the calculation
            of activities will be suppressed for object
            </summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ActivitiesCountByParent">
            <summary>Gets or sets the value that indicates whether the calculation
            of activities will be calculated by parent link
            </summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ExtraSearchResultColumns">
            <summary>Gets or sets the list of fields that will be displayed in a
            separate column when rendering search results.</summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ForeignRelations">
            <summary>Gets or sets the list of fields that connect the current
            table with foreign tables. The fields from the foreign tables can be
            specified along with current table fields in the <tt>Searches</tt>
            list.</summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.ForceFileCorrection">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteID(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the identifier of the note attached to the provided
            object and inserts a new note into the cache if the note does not
            exist.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that stores note identifier.
            If <tt>null</tt>, the method will search attributes on all fields and
            use the first <tt>PXNote</tt> attribute it finds.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteIDIfExists(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the identifier of the note attached to the provided
            object if note exists/
            </summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that stores note identifier.
            If <tt>null</tt>, the method will search attributes on all fields and
            use the first <tt>PXNote</tt> attribute it finds.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteIDIfExists(PX.Data.PXCache,System.Object)">
            <summary>Returns the identifier of the note attached to the provided
            object if note exists/
            </summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.NoteExists(PX.Data.PXGraph,System.Nullable{System.Guid})">
            <summary>
            Checks if note id record actually exists in the database
            </summary>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteID``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the identifier of the note attached to the provided
            object and inserts a new note into the cache if the note does not
            exist. The field that stores note identifier is specified in the type
            parameter.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteIDReadonly(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the identifier of the note attached to the provided
            object or <tt>null</tt> if the note does not exist.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="name">The name of the field that stores note identifier.
            If <tt>null</tt>, the method will search attributes on all fields and
            use the first <tt>PXNote</tt> attribute it finds.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteIDReadonly``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the identifier of the note attached to the provided
            object or <tt>null</tt> if the note does not exist. The field that
            stores note identifier is specified in the type parameter.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.UpdateEntityType(PX.Data.PXCache,System.Object,System.String,System.Type)">
            <summary>Sets the DAC type of the data record to which the note is
            attached. The full name of the DAC is saved in the database in the
            note record. This information is used, for example, to determine the
            webpage to open to show full details of the data record associated
            with a note.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="noteFieldName">The name of the field that stores note
            identifier.</param>
            <param name="newEntityType">New DAC type to associate with the
            note.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetParentNoteID``1(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.ForcePassThrow``1(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.ForcePassThrow(PX.Data.PXCache,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.ForceRetain``1(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.ForceRetain(PX.Data.PXCache,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNoteIDNow(PX.Data.PXCache,System.Object)">
            <summary>Returns the identifier of the note attached to the provided
            object and inserts a new note into the database if the note does not
            exist.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetTextFilesActivitiesRequired(PX.Data.PXCache,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the flags to behavior control of extended virtual fields selecting
            </summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records in the cache object.</param>
            <param name="fieldName">The field name.</param>
            <param name="isTextRequired">Flag of selecting 'NoteText' fields</param>
            <param name="isFilesRequired">Flag of selecting 'NoteDoc' fields</param>
            <param name="isActivitiesRequired">Flag of selecting 'NoteActivity' fields</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetTextFilesActivitiesRequired``1(PX.Data.PXCache,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the flags to behavior control of extended virtual fields selecting
            </summary>
            <param name="cache">The cache object to search for the attributes of <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to. If <tt>null</tt>, the method is applied to all data records in the cache object.</param>
            <param name="isTextRequired">Flag of selecting 'NoteText' fields</param>
            <param name="isFilesRequired">Flag of selecting 'NoteDoc' fields</param>
            <param name="isActivitiesRequired">Flag of selecting 'NoteActivity' fields</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetFileNotes(PX.Data.PXCache,System.Object,System.Guid[])">
            <summary>Sets the list of identifiers of files that are shown in the
            <b>Files</b> pop-up window.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="fileIDs">The indetifiers of files to display.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetFileNotes(PX.Data.PXCache,System.Object)">
            <summary>Returns the list of identifiers of files that are shown in
            the <b>Files</b> pop-up window.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.GetNote(PX.Data.PXCache,System.Object)">
            <summary>Returns the text comment of the note attached to the provided
            object.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetNote(PX.Data.PXCache,System.Object,System.String)">
            <summary>Sets the text of the note attached to the provided data
            record.</summary>
            <param name="sender">The cache object to search for the attributes of
            <tt>PXNote</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="note">The text to place in the note.</param>
        </member>
        <member name="T:PX.Data.PXNoteAttribute.IPXCopySettings">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.CopyNoteAndFiles(PX.Data.PXCache,System.Object,PX.Data.PXCache,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <exclude />
        </member>
        <member name="M:PX.Data.PXNoteAttribute.CopyNoteAndFiles(PX.Data.PXCache,System.Object,PX.Data.PXCache,System.Object,PX.Data.PXNoteAttribute.IPXCopySettings)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteTextFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.NormalizeNoteText(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteTextFieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.RowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.RowPersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXNoteAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteFilesFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.UnescapeComment(System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteImagesFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteFilesFieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteActivityFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.InsertNoteRecord(PX.Data.PXCache,System.Guid,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.InsertNoteRecord(PX.Data.PXCache,System.String,System.Guid,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.InsertNoteRecord(System.String,System.String,System.Guid,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.UpdateNoteRecord(PX.Data.PXCache,System.Guid,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.UpdateNoteRecord(PX.Data.PXCache,System.String,System.Guid,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.UpdateNoteRecord(PX.Data.PXGraph,System.String,System.String,System.Guid,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.noteActivityFieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.DescriptionField">
            <summary>Gets or set the field whose value will be displayed as value
            in the lookup that selects the related data record for an
            activity.</summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.Selector">
            <summary>Gets or sets the BQL expression that selects the data records
            to be displayed in the pop-up window of the lookup that selects the
            related data record for an activity. As the BQL expression, you can
            specify a <tt>Search&lt;&gt;</tt> command or just a field. This field,
            or the main field of the <tt>Search&lt;&gt;</tt> command, will be the
            value that identifies a data record in the activity item.</summary>
        </member>
        <member name="P:PX.Data.PXNoteAttribute.FieldList">
            <summary>Gets or set the list of columns that will be displayed in the
            pop-up window of the lookup that selects the related data record for
            an activity.</summary>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetFilesExists(PX.Data.PXCache,System.Object,System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetActivitiesFound(PX.Data.PXCache,System.Object,System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetNoteTextExists(PX.Data.PXCache,System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.SetPopupNoteTextExists(PX.Data.PXCache,System.Object,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.RowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNoteAttribute.AttachFile(PX.Data.PXCache,System.Object,PX.SM.FileInfo)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXNoteAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNoteTextAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRefNoteAttribute">
            <summary>
            Marks a DAC field that holds a reference to a data record
            of any DAC type through the note ID.
            </summary>
            <remarks>
            <para>The field marked with the <tt>PXRefNote</tt> attribute is typically
            represented by the <tt>PXRefNoteSelector</tt> control on the ASPX page.
            Through this control, a user can select a data records from any table.
            A data record is referenced through its <tt>NoteID</tt> field, whose
            value is written to the field associated with the <tt>PXRefNoteSelector</tt> control
            (and marked with the <tt>PXRefNote</tt> attribute). The field should
            be of the <tt>Guid?</tt> data type.</para>
            <para>In the UI, the <tt>PXRefNoteSelector</tt> control displays the
            selected data record's description, which is composed of the fields
            that are marked with the
            <see cref="T:PX.Data.EP.PXFieldDescriptionAttribute">PXFieldDescription</see>
            attribute.</para>
            </remarks>
            <seealso cref="T:PX.Data.PXNoteAttribute"/>
            <seealso cref="T:PX.Data.EP.PXFieldDescriptionAttribute"/>
            <example>
            The code below shows the usage of the <tt>PXRefNote</tt> attribute in
            the defition of a DAC field.
            <code>
            [PXRefNote]
            [PXUIField(DisplayName = "References Nbr.")]
            public virtual Guid? RefNoteID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXRefNoteAttribute.FullDescription">
            <summary>Get, set.</summary>
        </member>
        <member name="M:PX.Data.PXRefNoteAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXRefNoteAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXRefNoteAttribute.CommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXUniqueNoteAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSequentialNoteAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSequentialSelfRefNoteAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.CRActivity">
            <exclude/>
        </member>
        <member name="T:PX.Data.PrimaryViewFieldsListAttribute">
            <summary>
            Implements PXStringList attribute with values from screen's primary view fields list.
            </summary>
        </member>
        <member name="P:PX.Data.PrimaryViewFieldsListAttribute.KeysOnly">
            <summary>
            If screen is an entry screen, shows only key fields in the list.
            </summary>
        </member>
        <member name="T:PX.Data.PrimaryViewValueListAttribute">
            <summary>
            Provides correct value type and list for specified field.
            </summary>
            <remarks>
            This attribute inherits from PXAggregateAttribute because it have to specify strict order
            of calls to event handlers in List and PXDBString attributes.
            </remarks>
        </member>
        <member name="T:PX.Data.PrimaryViewValueListAttribute.GIListInternal">
            <exclude/>
        </member>
        <member name="M:PX.Data.PrimaryViewValueListAttribute.GIListInternal.#ctor(System.Type,System.Type)">
            <param name="screenIdFieldType">Screen node id.</param>
            <param name="dataFieldType">Field that need to be provided with value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Data.PXActionRestrictionAttribute" -->
        <member name="T:PX.Data.ProjectDefinition.Attributes.PXActionsAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.ProjectDefinition.Workflow.AUWorkflowFormsEngine.AskExt(PX.Data.PXGraph,PX.Data.ProjectDefinition.Workflow.FormDefinition)">
            <remarks>Use this method only to show test form</remarks>
        </member>
        <member name="M:PX.Data.ProjectDefinition.Workflow.IAUWorkflowFormsEngine.AskExt(PX.Data.PXGraph,PX.Data.ProjectDefinition.Workflow.FormDefinition)">
            <remarks>Use this method only to show test form</remarks>
        </member>
        <member name="T:PX.Data.PXContextCopyingRequiredAttribute">
            <summary>
            Objects of all classes decorated by this attribute will be copied from PXContext slots to another threads.
            </summary>
            <remarks>
            Bug 41770:
            When QueueUserWorkItem is called, several settings are placed in arguments and later PerformOperation method restores them on background thread.
            We have introduced this attribute, and inside StartOperation method, before QueueUserWorkItem call, iterating through all pxcontext slots,
            and if an  object stored is decorated with this attribute, passing it via parameters and then restoring it on the background thread that will execute operation.
            </remarks>
        </member>
        <member name="T:PX.Data.PXDefaultGuidAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXEntryScreenRightsAttribute">
            <summary>Is used for actions on Lists as Entry Points screens (substitute forms) if it is necessary to explicitly define inheritance of access rights.</summary>
            <remarks>
              <para>If there is a List as Entry Point form for an entry form in an instance of Acumatica ERP, the access rights to an action on the list screen are
            automatically inherited from the entry screen if both of the following conditions are met:</para>
              <list type="bullet">
                <item>The actions in both the list and entry screens are defined on the same primary DAC.</item>
                <item>The actions in both the list and entry screens are defined with the same name.</item>
              </list>
              <para>If any of the conditions is not fulfilled, to inherit the access right, on the list screen, you have to define the <tt>PXEntryScreenRights</tt> attribute
            and specify the name and the DAC type of the appropriate action on the entry screen.</para>
            </remarks>
            <example>
              <code title="Example" description="The code below shows how the &lt;tt&gt;PXEntryScreenRights&lt;/tt&gt; attribute is used in the &lt;tt&gt;PX.Objects.EP.TimecardPrimary&lt;/tt&gt; graph to bind the DAC type and the action name defined in the entry screen for the &lt;tt&gt;Create&lt;/tt&gt; action." lang="CS">
            public PXFilter&lt;TimecardFilter&gt; Filter;
            [PXFilterable()]
            public PXSelectJoin&lt;TimecardWithTotals, ...&gt; Items;
             
              public PXAction&lt;TimecardFilter&gt; create;
              [PXButton(SpecialType = PXSpecialButtonType.Insert, Tooltip = "Add New Timecard", 
                        ImageKey = PX.Web.UI.Sprite.Main.AddNew)]
              [PXUIField]
              [PXEntryScreenRights(typeof(EPTimeCard), nameof(TimeCardMaint.Insert))]
              protected virtual void Create()
              {
                …
              }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXEntryScreenRightsAttribute.#ctor(System.Type)">
            <summary>Initializes an instance of the attribute and specifies the DAC type on which <tt>PXAction</tt> is declared in the entry screen.</summary>
            <param name="cacheType">The DAC type from which access rights must be inherited.</param>
        </member>
        <member name="M:PX.Data.PXEntryScreenRightsAttribute.#ctor(System.Type,System.String)">
            <summary>Initializes an instance of the attribute and specifies the DAC type on which PXAction is declared in the entry screen and the name of the corresponding action
            in the entry screen from which the access rights should be inherited.</summary>
            <param name="cacheType">The DAC type on which the action is declared in the entry screen.</param>
            <param name="memberName">The name of the action of the entry screen from which the access rights should be inherited.</param>
        </member>
        <member name="T:PX.Data.PXFieldNamesListAttribute">
            <summary>Implements PXStringList attribute with fixed set of fields from any view of the specified graph.</summary>
        </member>
        <member name="M:PX.Data.PXFieldNamesListAttribute.#ctor(System.Type,System.Type[])">
            <param name="graphType">Graph that contains caches with specified fields.</param>
            <param name="fieldTypes">Fields those names will form the list of allowed values.</param>
        </member>
        <member name="T:PX.Data.PXFieldValuesListAttribute">
            <summary>Provides correct value type and list for the field in a cache of the specified graph.</summary>
            <remarks>This attribute inherits from PXAggregateAttribute because it have to specify
            strict order of calls to event handlers in List and PXDBString attributes.</remarks>
        </member>
        <member name="T:PX.Data.PXFieldValuesListAttribute.PXFieldValuesListInternal">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXFieldValuesListAttribute.PXFieldValuesListInternal.#ctor(System.Type,System.Type)">
            <param name="graphType">Graph that contains cache with the field.</param>
            <param name="fieldType">Field that need to be provided with value.</param>
        </member>
        <member name="M:PX.Data.PXFieldValuesListAttribute.#ctor(System.Int32,System.Type,System.Type)">
            <param name="length">The maximum length of a field value.</param>
            <param name="graphType">Graph that contains cache with the field.</param>
            <param name="fieldType">Field that need to be provided with value.</param>
        </member>
        <member name="T:PX.Data.PXOEMVersionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXParentUserAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.INotable">
            <summary>
            Represents a document that has a link to the <see cref="T:PX.Data.Note"/> record,
            which means that a document may have additional notes.
            </summary>
        </member>
        <member name="P:PX.Data.INotable.NoteID">
            <summary>
            The identifier of the <see cref="T:PX.Data.Note">Note</see> object associated with the document.
            </summary>
            <value>
            Corresponds to the <see cref="P:PX.Data.Note.NoteID">Note.NoteID</see> field. 
            </value>
        </member>
        <member name="T:PX.Data.PXTimeListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXBaseConditionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUIRequiredAttribute">
            <summary>This attribute conditionally puts a required field marker
            and checks for a null value when you save the object.</summary>
            <remarks>This field attribute combines the functionality of
            <tt>PXUIFieldAttribute.SetRequired</tt> and <tt>PXDefaultAttribute.SetPersistingCheck</tt>
            functions. Since <tt>PXUIRequiredAttribute</tt> implies a dynamic change
            of the mandatory, it should be used in conjunction with the ASPX property
            <tt>MarkRequired = "Dynamic"</tt>.
            <para>This attribute subscribes to the <tt>RowSelected</tt> event handler
            of the attribute level. It is applicable when the field mandatory
            depends on the state of the object only.</para>
            <para>You must use this attribute together with the <tt>PXDefaultAttribute</tt>
            attribute. You do not need to specify any value to the
            <tt>PXDefaultAttribute.PersistingCheck</tt> property, because its value
            is set automatically.</para>
            <para>Make sure that you do not use this attribute and the
            <tt>PXUIFieldAttribute.SetRequired</tt> method at the same time.</para>
            </remarks><seealso cref="T:PX.Data.PXUIEnabledAttribute"/>
            <example>
            <code lang="CS">
            [PXDBString(5, IsUnicode = false, IsFixed = true)]
            [PXDefault("W", PersistingCheck = PXPersistingCheck.Nothing)]
            [PXUIField(DisplayName = "Default Time Activity Type", Visibility = PXUIVisibility.SelectorVisible)]
            // ...
            [PXUIRequired(typeof(FeatureInstalled&lt;FeaturesSet.timeReportingModule&gt;))] // IBqlCreator used
            public virtual string DefaultActivityType { get; set; }
            [ContactDisplayName(typeof(Contact.lastName), typeof(Contact.firstName), typeof(Contact.midName),
                typeof(Contact.title), true)]
            [PXDependsOnFields(typeof(Contact.lastName), typeof(Contact.firstName), typeof(Contact.midName),
                typeof(Contact.title))]
            [PXUIField(DisplayName = "Display Name", Visibility = PXUIVisibility.SelectorVisible, Enabled = false)]
            [PXDefault]
            // ...
            [PXUIRequired(typeof(Where&lt;Contact.contactType, Equal&lt;ContactTypesAttribute.lead&gt;,
                Or&lt;Contact.contactType, Equal&lt;ContactTypesAttribute.person&gt;&gt;&gt;))] // IBqlWhere used
            public virtual String DisplayName { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXUIEnabledAttribute">
            <summary>This attribute manages whether the field is editable at runtime.</summary>
            <remarks>This attribute subscribes to the <tt>RowSelected</tt> event handler of the attribute level. It is applicable when the field editability depends on the state of
            the object only. The constructor of the attribute takes a type that represents the condition for enabling or disabling the field as the first parameter. This
            type should be the same as for <tt>PXFormulaAttribute</tt> (<tt>IBqlCreator</tt>, <tt>IBqlField</tt> or <tt>Constant</tt>). As a syntactic sugar, types that
            implement <tt>IBqlWhere</tt> interface may be used as well.
            <para>You must use this attribute together with the <tt>PXUIFieldAttribute</tt> attribute.</para><para>Make sure that you do not use this attribute and the <tt>PXUIFieldAttribute.SetEnabled</tt> method at the same time.</para></remarks>
            <example>
            In the example below, the <tt>AveragingConvention</tt> field is enabled
            if <tt>Depreciate</tt> is <tt>true</tt> for the same record. The <tt>Depreciable</tt> field
            is enabled if the record does not represent a particular asset (<tt>RecordType != AssetType</tt>),
            the asset is not acquired (<tt>IsAcquired != true</tt>), or the record was just inserted
            (<tt>EntryStatus = Inserted</tt>).
            <code title="" description="" lang="CS">
            [PXDBString(2, IsFixed = true)]
            [PXUIField(DisplayName = "Averaging Convention")]
            [FAAveragingConvention.List]
            // ...
            [PXUIEnabled(typeof(FABookSettings.depreciate))] // IBqlField used.
            public virtual string AveragingConvention { get; set; }
            [PXDBBool]
            [PXUIField(DisplayName = "Depreciate", Visibility = PXUIVisibility.SelectorVisible)]
            // ...
            [PXUIEnabled(typeof(Where&lt;FixedAsset.recordType, NotEqual&lt;FARecordType.assetType&gt;, // IBqlWhere used
                Or&lt;FixedAsset.isAcquired, NotEqual&lt;True&gt;,
                Or&lt;EntryStatus, Equal&lt;EntryStatus.inserted&gt;&gt;&gt;&gt;))]
            public virtual bool? Depreciable { get; set; }</code></example>
        </member>
        <member name="T:PX.Data.PXUIVisibleAttribute">
            <summary>This attribute manages the field visibility at runtime.</summary>
            <remarks>This attribute subscribes to the <tt>RowSelected</tt> event handler
            of the attribute level. It is applicable when the field visibility
            depends on the state of the object only.
            <para>Make sure that you do not use this attribute and the
            <tt>PXUIFieldAttribute.SetVisible</tt> method at the same time.</para></remarks>
            <seealso cref="T:PX.Data.PXUIEnabledAttribute"/>
        </member>
        <member name="T:PX.Data.TriggerPoints">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUIVerifyAttribute">
            <summary>This attribute enables verifying a field at runtime.</summary>
            <remarks>A field is verified when one of the following events occur:
            <tt>RowInserted</tt>, <tt>RowPersisting</tt>, <tt>FieldVerifying</tt>. You can also specify that the
            verification of a field is performed when the <tt>RowSelected</tt> event occurs;
            you can do it by assigning <tt>true</tt> to the <tt>OnSelectingVerify</tt>
            parameter of the constructor.</remarks>
            <seealso cref="T:PX.Data.PXUIEnabledAttribute"/>
            <example>
            <code lang="CS">
            [PXDBString(15, IsUnicode = true, IsKey = true, BqlField = typeof(POReceiptLine.receiptNbr))]
            [PXUIField(DisplayName = "Receipt Nbr.", Visibility = PXUIVisibility.SelectorVisible)]
            // ...
            [PXUIVerify(typeof(Where&lt;receiptCuryID, Equal&lt;Current&lt;APInvoice.curyID>>>),  // IBqlWhere used
                PXErrorLevel.RowWarning,
                Messages.APDocumentCurrencyDiffersFromSourceDocument,
                true /* also validate on RowSelected */)]
            public virtual String ReceiptNbr { get; set; }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXUIVerifyAttribute.MessageArgumentsAreFieldNames">
            <summary>
            Gets or sets a value indicating whether BQL fields specified by 
            <see cref="F:PX.Data.PXUIVerifyAttribute._args"/> should be converted to field names, not field values,
            when composing the error message.
            </summary>
        </member>
        <member name="T:PX.Data.PXWindowModeAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXWindowModeAttribute.WindowMode">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScreenType">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScreenMetadata">
            <exclude/>
        </member>
        <member name="T:PX.Data.ScreenInfoListAttribute">
            <summary>
            Base class for all string list attributes that depend on screen meta information.
            </summary>
        </member>
        <member name="M:PX.Data.ScreenInfoListAttribute.#ctor(System.Type)">
            <param name="nodeIdFieldType">Screen node id.</param>
        </member>
        <member name="T:PX.Data.PXSearchableAttribute">
            <summary>
            Adds fields to the search index and configures the search result.
            </summary>
            <remarks><para>This attribute is assigned to the <tt>NoteID</tt> DAC field.
            A search is performed in the fields that are specified in this attribute
            (in the fourth parameter of the constructor) and
            in the key fields.</para>
            <para>After you change the set of searchable fields of a DAC
            in its <tt>PXSearchable</tt> attribute, rebuild the search indexes for this DAC
            on the Rebuild Full-Text Entity Index (SM209500) form.</para>
            <para>We also strongly recommend that you rebuild the search indexes of all DACs
            after every database upgrade.</para></remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.Line1Format">
            <summary>
            The format of the first line of the search result that is displayed.
            Numbers in curly braces reference to the fields listed in <tt>Line1Fields</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.Line2Format">
            <summary>
            The format of the second line of the search result that is displayed.
            Numbers in curly braces reference to the fields listed in <tt>Line2Fields</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.Line1Fields">
            <summary>
            The fields that are referenced from <tt>Line1Format</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.Line2Fields">
            <summary>
            The fields that are referenced from <tt>Line2Format</tt>.
            </summary>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.NumberFields">
            <summary>
            List of the fields to be indexed that contain numbers with prefixes (for example, <tt>"CT00000040"</tt>).
            </summary>
            <remarks>If a field contains a number with a prefix (like <tt>"CT00000040"</tt>), then searching for <tt>"0040"</tt>
            can pose a problem. All fields that are listed in <tt>NumberFields</tt> will get special treatment
            and will be indexed both with a prefix and without one (<tt>"CT00000040"</tt>, <tt>"00000040"</tt>).</remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.SelectDocumentUser">
            <summary>
            The <tt>Select&lt;&gt;</tt> construction that selects the users of the documents
            which must be available in the search result.
            </summary>
            <remarks>If this <tt>Select&lt;&gt;</tt> construction is specified,
            then only those records or documents are shown that were
            created either by the current user or by a user from the returned set.
            The company tree hierarchy is not traversed.
            For example, you can use this setting to filter expense claims, timecards, etc.
            </remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.WhereConstraint">
            <summary>
            Constraint that defines whether the given DAC instance is searchable or not.
            </summary>
            <remarks>For example, the <tt>Contact</tt> DAC is used to represent different types of records:
            the <tt>lead</tt> contacts are searchable, while the <tt>accountProperty</tt> contacts are not.</remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.MatchWithJoin">
            <summary>
            When a <tt>MatchWith</tt> type is used, the <tt>MatchWithJoin</tt> property
            must contain a join for the entity containing the <tt>GroupMask</tt> column.
            </summary>
            <remarks>For example, the graph that manages <tt>ARInvoice</tt> objects
            contains the following <tt>Match</tt> operator in the <tt>Document</tt> object:
            <para><tt>Match&lt;Customer, Current&lt;AccessInfo.userName&gt;&gt;</tt></para>
            <para>So the <tt>MatchWithJoin</tt> property must contain a join to the <tt>Customer</tt> table:</para>
            <para><tt>typeof(InnerJoin&lt;Customer, On&lt;Customer.bAccountID, Equal&lt;ARInvoice.customerID&gt;&gt;&gt;)</tt></para></remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.SelectForFastIndexing">
            <summary>
            The <tt>SelectForFastIndexing</tt> request is used to define the relationship
            between the searchable fields and thus make it possible to rebuild the Full Text Search index
            and to use fields from other DACs in LineFields.
            </summary>
            <remarks>A search can involve additional joined tables, so that all searchable fields
            are retrieved by a single select request, and this prevents lazy loading of rows using the selector.</remarks>
        </member>
        <member name="P:PX.Data.PXSearchableAttribute.ForeignDacFieldRetrievalInfos">
            <summary>
            The information for a complex search result creation regarding retrieval of values for fields from other DACs which don't have a selector attribute declared on them.
            </summary>
            <value>
            The information for a complex search result creation regarding retrieval of values for fields from other DACs which don't have a selector attribute declared on them.
            </value>
        </member>
        <member name="M:PX.Data.PXSearchableAttribute.#ctor(System.Int32,System.String,System.Type[],System.Type[])">
            <summary>
            Initializes the search parameters.
            </summary>
            <param name="category">The search category. This is one of the integer
            constants defined in the <tt>PX.Objects.SM.SearchCategory</tt> class.</param>
            <param name="titlePrefix">The format of the search result title.</param>
            <param name="titleFields">The fields whose values are used in the search result title.
            These fields are referenced from <tt>titlePrefix</tt>.</param>
            <param name="fields">The fields for which the index will be built.</param>
        </member>
        <member name="M:PX.Data.PXSearchableAttribute.GetSearchableFields(PX.Data.PXCache)">
            <summary>
            Returns all searchable fields including dependent fields and key fields.
            </summary>
            <remarks>For example, since <tt>Contact.DisplayName</tt> depends on <tt>FirstName</tt>,
            <tt>LastName</tt>, and other fields, all these fields will also be returned.</remarks>
            <returns>All searchable fields.</returns>
        </member>
        <member name="M:PX.Data.PXSearchableAttribute.GetAllSearchableFields(PX.Data.PXCache)">
            <summary>
            Gets all searchable fields from <see cref="T:PX.Data.PXSearchableAttribute"/> including fields in <see cref="P:PX.Data.PXSearchableAttribute.Line1Fields"/>, <see cref="P:PX.Data.PXSearchableAttribute.Line2Fields"/> and <see cref="P:PX.Data.PXSearchableAttribute.NumberFields"/>.
            </summary>
            <param name="cache">The cache.</param>
            <returns/>
        </member>
        <member name="M:PX.Data.PXSearchableAttribute.GetSearchableFieldsForUserRecords">
            <summary>
            Gets searchable fields for user records features - recently visited records and favorite records.
            </summary>
            <returns/>
        </member>
        <member name="T:PX.Data.PXSearchableAttribute.RecordInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSearchableAttribute.UserRecordsUpdater">
            <summary>
            A user records updater class. Adds entries to the transaction scope for changed DACs on row persisted event to update user records cached content when transaction completes.
            This functionality is integrated with <see cref="T:PX.Data.PXSearchableAttribute"/> because there will be too much overhead to introduce a new attribute. 
            The functionality of user records is related to the search since user records uses fields declared in <see cref="T:PX.Data.PXSearchableAttribute"/> constructor in DAC 
            to build information displayed to the user.
            </summary>
        </member>
        <member name="M:PX.Data.PXSearchableAttribute.UserRecordsUpdater.UpdateUserRecordsCachedContentOnRowPersisted(PX.Data.PXGraph,PX.Data.PXRowPersistedEventArgs,System.Guid,PX.Data.UserRecords.IRecordCachedContentBuilder,Serilog.ILogger)">
            <summary>
            Updates row's user records cached content on row persisted event. This functionality is integrated with <see cref="T:PX.Data.PXSearchableAttribute"/> because it will be too much overhead to avoid
            introduction of new attribute. The functionality is a bit related since user records uses <see cref="T:PX.Data.PXSearchableAttribute"/> to build information displayed to the user.
            </summary>
            <param name="screenGraph">The screen graph.</param>
            <param name="e">The row persisted event information.</param>
            <param name="noteID">Note ID.</param>
            <param name="contentBuilder">The cached content builder.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:PX.Data.SearchIndex">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.indexID">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.category">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.content">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.entityType">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.Tstamp">
            <exclude/>
        </member>
        <member name="T:PX.Data.SearchIndex.top">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute">
            <summary>Configures the lookup control for a DAC field that references a data record from a particular table by holding its key field.See</summary>
            <remarks>
              <para>The attribute configures the input control for a DAC field that references a data record from a particular table. Such field holds a key value that
            identifies the data record in this table.</para>
              <para>The input control will be of "lookup" type (may also be called a "selector"). A user can either input the value for the field manually or select from the
            list of the data records. If a value is inserted manually, the attribute checks if it is included in the list. You can specify a complex BQL query to define
            the set of data records that appear in the list.</para>
              <para>The key field usually represents a database identity column that may not be user-friendly (surrogate key). It is possible to substitute its value with the
            value of another field from the same data record (natural key). This field should be specified in the <tt>SubstituteKey</tt> property. In this case, the table,
            and the DAC, have two fields that uniquely identify a data record from this table. For example, the <tt>Account</tt> table may have the numeric
            <tt>AccountID</tt> field and the user-friendly string <tt>AccountCD</tt> field. On a field that references <tt>Account</tt> data records in another DAC, you
            should place the <tt>PXSelector</tt> attribute as follows.</para>
              <code>[PXSelector(typeof(Search&lt;Account.accountID&gt;), SubstituteKey =
            typeof(Account.accountCD))]</code>
              <para>The attribute will automatically convert the stored numeric value to the displayed string value and back. Note that only the <tt>AccountCD</tt> property
            should be marked with <tt>IsKey</tt> property set to <tt>true</tt>.</para>
              <para>It is also possible to define the list of columns to display. You can use an appropriated constructor and specify the types of the fields. By default, all
            fields that have the <tt>PXUIField</tt> attribute's <tt>Visibility</tt> property set to <tt>PXUIVisibility.SelectorVisible</tt>.</para>
              <para>Along with a key, some other field can be displayed as the description of the key. This field should be specified in the <tt>DescriptionField</tt> property.
            The way the description is displayed in the lookup control is configured in the webpage layout through the <tt>DisplayMode</tt> property of the
            <tt>PXSelector</tt> control. The default display format is <i>ValueField – DescriptionField</i>. It can be changed to display the description only.</para>
              <para>To achieve better performance, the attribute can be configured to cache the displayed data records.</para>
            </remarks>
            <example>
            	<para></para>
            	<code title="Example" description="The example below shows the simplest PXSelector attribute declaration. All Category data records will be available for selection. Their CategoryCD field values will be inserted without conversion." lang="CS">
            [PXSelector(typeof(Category.categoryCD))]
            public virtual string CategoryCD { get; set; }</code>
            	<code title="Example2" description="The attribute below configures the lookup control to let the user select from the Customer data records retrieved by the Search BQL query. The displayed columns are specified explicitly: AccountCD and CompanyName." groupname="Example" lang="CS">
            [PXSelector(
                typeof(Search&lt;Customer.accountCD, 
                           Where&lt;Customer.companyType, Equal&lt;CompanyType.customer&gt;&gt;&gt;),
                new Type[] 
                {
                    typeof(Customer.accountCD),
                    typeof(Customer.companyName)
                })]
            public virtual string AccountCD { get; set; }</code>
              <code title="Example3" description="The Customer.accountCD field data will be inserted as a value without conversion. The attribute below let the user select from the Branch data records. The attribute displays the Branch.BranchCD field value in the user interface, but actually assigns the Branch.BranchID field value to the field." groupname="Example2" lang="CS">
            [PXSelector(typeof(Branch.branchID),
                        SubstituteKey = typeof(Branch.branchCD))]
            public virtual int? BranchID { get; set; }</code>
            	<code title="Example4" description="The example below shows the PXSelector attribute in combination with other attributes. Here, the PXSelector attribute configures a lookup field that will let a user select from the data set defined by the Search query. The lookup control will display descriptions the data records, taking them from CRLeadClass.description field. The attribute will cache records in memory to reduce the number of database calls." groupname="Example3" lang="CS">
            [PXDBString(10, IsUnicode = true, InputMask = "&gt;aaaaaaaaaa")]
            [PXUIField(DisplayName = "Class ID")]
            [PXSelector(
                typeof(Search&lt;CRLeadClass.cRLeadClassID,
                           Where&lt;CRLeadClass.isActive, Equal&lt;True&gt;&gt;&gt;),
                DescriptionField = typeof(CRLeadClass.description),
                CacheGlobal = true)]
            public virtual string ClassID { get; set; }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetSelect">
            <summary>
            Returns Bql command used for selection of referenced records.
            </summary>
            <exclude/>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.CacheGlobal">
            <summary>Gets or sets the value that indicates whether the attribute
            should cache the data records retrieved from the database to show in
            the lookup control. By default, the attribute does not cache the data
            records.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.DescriptionField">
            <summary>Gets or sets the field from the referenced table that
            contains the description.</summary>
            <example>
            In the code below, the <apiname>PXSelector</apiname> attribute configures
            a lookup field that will let a user select from the data set defined
            by the <tt>Search</tt> query. The lookup control will display descriptions
            of the data records taken from <tt>CRLeadClass.description</tt> field.
            <code>
            [PXDBString(10, IsUnicode = true, InputMask = "&gt;aaaaaaaaaa")]
            [PXUIField(DisplayName = "Class ID")]
            [PXSelector(
                typeof(Search&lt;CRLeadClass.cRLeadClassID,
                           Where&lt;CRLeadClass.isActive, Equal&lt;True&gt;&gt;&gt;),
                DescriptionField = typeof(CRLeadClass.description))]
            public virtual string ClassID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.FilterEntity">
            <summary>
            Gets or sets the type that is used as a key for saved filters.
            </summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.SubstituteKey">
            <summary>Gets or sets the field from the referenced table that
            substitutes the key field used as internal value and is displayed as a
            value in the user interface (natural key).</summary>
            <example>
            The attribute below let the user select from the <tt>Branch</tt> data records.
            The attribute displays the <tt>Branch.BranchCD</tt> field value in the user
            interface, but actually assigns the <tt>Branch.BranchID</tt> field value to the
            field.
            <code>
            [PXSelector(typeof(Branch.branchID),
                        SubstituteKey = typeof(Branch.branchCD))]
            public virtual int? BranchID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.Field">
            <summary>Gets the field that identifies a referenced data record
            (surrogate key) and is assigned to the field annotated with the
            <tt>PXSelector</tt> attribute. Typically, it is the first parameter of
            the BQL query passed to the attribute constructor.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.DirtyRead">
            <summary>Gets or sets a value that indicates whether the attribute
            should take into account the unsaved modifications when displaying
            data records in control. If <tt>false</tt>, the data records are taken
            from the database and not merged with the cache object. If
            <tt>true</tt>, the data records are merged with the modification
            stored in the cache object.</summary>
        </member>
        <member name="F:PX.Data.PXSelectorAttribute.ValidateValue">
            <summary>
            Allows to control validation process.
            </summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.Filterable">
            <summary>Gets or sets the value that indicates whether the filters
            defined by the user should be stored in the database.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.Headers">
            <summary>Gets or sets the list of labels for column headers that are
            displayed in the lookup control. By default, the attribute uses
            display names of the fields.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.ValueField">
            <summary>
             Gets the referenced data record field whose value is
             assigned to the current field (marked with the <tt>PXSelector</tt>
             attribute).
            </summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.SelectorMode">
            <summary>
            Gets or sets the value that determines the value displayed by
            the selector control in the UI and some aspects of
            attribute's behavior. You can assign a combination of
            <see cref="T:PX.Data.PXSelectorMode">PXSelectorMode</see> values joined
            by bitwise or ("|").
            </summary>
            <example>
            In the following example, the <tt>SelectorMode</tt> property
            is used to disable autocompletion in the selector control.
            <code>
            ...
            [PXSelector(
                typeof(FinPeriod.finPeriodID), 
                DescriptionField = typeof(FinPeriod.descr),
                SelectorMode = PXSelectorMode.NoAutocomplete)]
            public virtual String FinPeriodID { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.ExcludeFromReferenceGeneratingProcess">
            <summary>
            Exclude <see cref="T:PX.Data.PXSelectorAttribute"/> from using it in <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> generating process.
            </summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.PrimarySelect">
            <summary>Gets the BQL query that is used to retrieve data records to
            show to the user.</summary>
            <remarks>This select contains condition by ID to retrieve a specific record by key.</remarks>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.OriginalSelect">
            <summary>Gets the BQL query that was passed to the attribute on it's creation.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.ParsCount">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.Type">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.SuppressUnconditionalSelect">
            <exclude />
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.ViewName">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance that will use the specified BQL
            query to retrieve the data records to select from. The list of
            displayed columns is created automatically and consists of all columns
            from the referenced table with the <tt>Visibility</tt> property of the
            <see cref="T:PX.Data.PXUIFieldAttribute">PXUIField</see> attribute set to
            <tt>PXUIVisibility.SelectorVisible</tt>.</summary>
            <param name="type">A BQL query that defines the data set that is shown
            to the user along with the key field that is used as a value. Set to a
            field (type part of a DAC field) to select all data records from the
            referenced table. Set to a BQL command of <tt>Search</tt> type to
            specify a complex select statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance that will use the specified BQL
            query to retrieve the data records to select from, and display the
            provided set of columns.</summary>
            <param name="type">A BQL query that defines the data set that is shown
            to the user along with the key field that is used as a value. Set to a
            field (type part of a DAC field) to select all data records from the
            referenced table. Set to a BQL command of <tt>Search</tt> type to
            specify a complex select statement.</param>
            <param name="fieldList">Fields to display in the control.</param>
            <example>
            The attribute below configures the lookup control to let the user select from the
            <tt>Customer</tt> data records retrieved by the <tt>Search</tt> BQL
            query. The displayed columns are specified explicitly: <tt>AccountCD</tt> and
            <tt>CompanyName</tt>. The <tt>Customer.accountCD</tt> field data will be
            inserted as a value without conversion.
            <code>
            [PXSelector(
                typeof(Search&lt;Customer.accountCD, 
                           Where&lt;Customer.companyType, Equal&lt;CompanyType.customer&gt;&gt;&gt;),
                new Type[] 
                {
                    typeof(Customer.accountCD),
                    typeof(Customer.companyName)
                })]
            public virtual string AccountCD { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.IPXAdjustableView">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.PXAdjustableView">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.WhereAnd(PX.Data.PXCache,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GenerateViewName">
            <summary>
            Generates default view name. View name is used by UI controls when selecting list of records available for selection.
            </summary>
            <returns>A string that references a PXView instance which will be used to retrive a list of records.</returns>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectSingleBound(PX.Data.PXView,System.Object[],System.Object[])">
            <summary>
            A wrapper to PXView.SelectMultiBound() method, extracts the first table in a row if a result of a join is returned.<br/>
            While we are looking for a single record here, we still call SelectMulti() for performance reason, to hit cache and get the result of previously executed queries if any.<br/>
            'Bound' means we will take omitted parameters from explicitly defined array of rows, not from current records set in the graph.
            </summary>
            <param name="view">PXView instance to be called for a selection result</param>
            <param name="currents">List of rows used as a source for omitted parameter values</param>
            <param name="pars">List of parameters to be passed to the query</param>
            <returns>Foreign record retrieved</returns>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectSingle(PX.Data.PXView,System.Object[])">
            <summary>
            A wrapper to PXView.SelectSingleBound() method, extracts the first table in a row if a result of a join is returned.<br/>
            </summary>
            <param name="view">PXView instance to be called for a selection result</param>
            <param name="pars">List of parameters to be passed to the query</param>
            <returns>Foreign record retrieved</returns>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetView(PX.Data.PXCache,PX.Data.BqlCommand,System.Boolean)">
            <summary>
            Returns cached typed view, can be ovirriden to substitute a view with a delegate instead.
            </summary>
            <param name="cache">PXCache instance, used to retrive a graph object</param>
            <param name="select">Bql command to be searched</param>
            <param name="dirtyRead">Flag to separate result sets either merged with not saved changes or not</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.Select(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the data record referenced by the attribute instance
            that marks the field with the specified name in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="field">The name of the field that is be marked with the
            attribute.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectFirst``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the first data record retrieved by the attribute
            instance that marks the specified field in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectFirst(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the first data record retrieved by the attribute
            instance that marks the field with the specified name in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="field">The name of the field that is be marked with the
            attribute.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectLast``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the last data record retrieved by the attribute
            instance that marks the specified field in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectLast(PX.Data.PXCache,System.Object,System.String)">
            <summary>Returns the last data record retrieved by the attribute
            instance that marks the field with the specified name in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="field">The name of the field that is be marked with the
            attribute.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.Select(PX.Data.PXCache,System.Object,System.String,System.Object)">
            <summary>Returns the referenced data record that holds the specified
            value. The data record should be referenced by the attribute instance
            that marks the field with the specified in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="field">The name of the field that is be marked with the
            attribute.</param>
            <param name="value">The value to search the referenced table
            for.</param>
            <returns>Foreign record.</returns>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.GlobalDictionary">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.GlobalDictionary.CacheValue">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetItem(PX.Data.PXCache,PX.Data.PXSelectorAttribute,System.Object,System.Object)">
            <summary>Returns the foreign data record by the specified
            key.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="attr">The instance of the <tt>PXSelector</tt> attribute
            to query for a data record.</param>
            <param name="data">The data record that contains a reference to the
            foreign data record.</param>
            <param name="key">The key value of the referenced data record.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetReferencedDacWithoutSelectorCacheUsage(PX.Data.PXCache,System.Object,System.Object)">
            <summary>
            Gets the DAC referenced by this selector attribute and <paramref name="foreignKeyValue"/> from the database without the lookup into selector's cache.
            </summary>
            <param name="cache">The cache</param>
            <param name="row">The DAC instance which has this <see cref="T:PX.Data.PXSelectorAttribute"/> and references the required foreign DAC.</param>
            <param name="foreignKeyValue">The value of a foreign key of the referenced DAC.</param>
            <returns/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.ClearGlobalCache``1">
            <summary>Clears the internal cache of the <tt>PXSelector</tt>
            attribute, removing the data records retrieved from the specified
            table. Typically, you don't need to call this method, because the
            attribute subscribes on the change notifications related to the table
            and drops the cache automatically.</summary>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.ClearGlobalCache(System.Type)">
            <summary>Clears the internal cache of the <tt>PXSelector</tt>
            attribute, removing the data records retrieved from the specified
            table. Typically, you don't need to call this method, because the
            attribute subscribes on the change notifications related to the table
            and drops the cache automatically.</summary>
            <param name="table">The DAC to drop from the attribute's
            cache.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetField(PX.Data.PXCache,System.Object,System.String,System.Object,System.String)">
            <summary>Returns a value of the field from a foreign data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record that contains a reference to the
            foreign data record.</param>
            <param name="field">The name of the field holding the referenced data
            record key value.</param>
            <param name="value">The key value of the referenced data
            record.</param>
            <param name="foreignField">The name of the referenced data record
            field whose value is returned by the method.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetItemType(PX.Data.PXCache,System.String)">
            <summary>Returns the data access class referenced by the attribute
            instance that marks the field with specified name.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="field">The name of the field that marked with the
            attribute.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectAll``1(PX.Data.PXCache,System.Object)">
            <summary>Returns all data records kept by the attribute instance the
            marks the specified field in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelectAll(PX.Data.PXCache,System.String,System.Object)">
            <summary>Returns all data records kept by the attribute instance the
            marks the field with the specified name in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="fieldname">The name of the field that should be marked
            with the attribute.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.Select``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the data record referenced by the attribute instance
            that marks the specified field in a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.Select``1(PX.Data.PXCache,System.Object,System.Object)">
            <summary>Returns the referenced data record that holds the specified
            value. The data record is searched among the ones referenced by the
            attribute instance that marks the specified field in a particular data
            record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="value">The value to search the referenced table
            for.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SetColumns(PX.Data.PXCache,System.Object,System.String,System.String[],System.String[])">
            <summary>Sets the list of columns and column headers to display for
            the attribute instance that marks the field with the specified name in
            a particular data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to. If
            <tt>null</tt>, the method is applied to all data records kept in the
            cache object.</param>
            <param name="field">The name of the field marked with the
            attribute.</param>
            <param name="fieldList">The new list of field names.</param>
            <param name="headerList">The new list of column headers.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SetColumns(PX.Data.PXCache,System.String,System.String[],System.String[])">
            <summary>Sets the list of columns and column headers for all attribute
            instances that mark the field with the specified name in all data
            records in the cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="field">The name of the field marked with the
            attribute.</param>
            <param name="fieldList">The new list of field names.</param>
            <param name="headerList">The new list of column headers.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SetColumns(System.String[],System.String[])">
            <summary>Sets the list of columns and column headers for an attribute
            instance.</summary>
            <param name="fieldList">The new list of field names.</param>
            <param name="headerList">The new list of column headers.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SetColumns``1(PX.Data.PXCache,System.Object,System.Type[],System.String[])">
            <summary>Sets the list of columns and column headers to display for
            the attribute instance that marks the specified field in a particular
            data record.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="data">The data record the method is applied to.</param>
            <param name="fieldList">The new list of field names.</param>
            <param name="headerList">The new list of column headers.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SetColumns``1(PX.Data.PXCache,System.Type[],System.String[])">
            <summary>Sets the list of columns and column headers for all attribute
            instances that mark the specified field in all data records in the
            cache object.</summary>
            <param name="cache">The cache object to search for the attributes of
            <tt>PXSelector</tt> type.</param>
            <param name="fieldList">The new list of field names.</param>
            <param name="headerList">The new list of column headers.</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.StoreCached``1(PX.Data.PXCache,System.Object,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.StoreCached``1(PX.Data.PXCache,System.Object,System.Object,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.StoreResult``1(PX.Data.PXCache,System.Object,PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.StoreResult``1(PX.Data.PXCache,PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.StoreResult``1(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object})">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.CheckAndRaiseForeignKeyException(PX.Data.PXCache,System.Object,System.Type,System.Type,System.String)">
            <summary>
            Checks foreign keys and raises exception on violation. Works only if foreing key feild has PXSelectorAttribute
            </summary>
            <param name="Row">Current record</param>
            <param name="fieldType">BQL type of foreing key</param>
            <param name="searchType">Optional additional BQL statement to be checked</param>
            <param name="customMessage">Optional custom message to be displayed to user. Must either have {0} placeholder for name of current table 
            and {1} placeholder for foreign key table name, or no format placeholders at all</param>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetDependencies(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.DescriptionFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SelfRowSelecting(PX.Data.PXCache,PX.Data.PXRowSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SubstituteKeyFieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SubstituteKeyFieldUpdating(PX.Data.PXCache,PX.Data.PXFieldUpdatingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.SubstituteKeyCommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.DescriptionFieldCommandPreparing(PX.Data.PXCache,PX.Data.PXCommandPreparingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.ForeignTableRowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.ReadDeletedFieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.GetSelectorFields(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.CreateView(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectorAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.adjustableViewGlobal">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorAttribute.viewGlobal">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXSelectorAttribute.WithCachingByCompositeKeyAttribute.OnlyKeyConditions">
            <summary>
            Indicate that the search query has only conditions with a key fields for item identification.
            </summary>
        </member>
        <member name="T:PX.Data.PXCustomSelectorAttribute">
            <summary>The base class for custom selector attributes. To create a custom selector attribute, you derive a class from this class and implement the
            <tt>GetRecords()</tt> method, as shown in the example below.</summary>
            <remarks>You can also override the <see cref="M:PX.Data.PXCustomSelectorAttribute.CacheAttached(PX.Data.PXCache)">CacheAttached</see> method to add initialization logic and override
            the <see cref="M:PX.Data.PXCustomSelectorAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">FieldVerifying</see> method to redefine the verification logic for the field value.</remarks>
            <example>
              <code title="" description="" lang="CS">
            public class MyCustomSelector : PXCustomSelectorAttribute
            {
                public MyCustomSelector(Type type)
                    : base(type) { }
                
                public virtual IEnumerable GetRecords()
                {
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXCustomSelectorAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance with the specified BQL query for selecting the data records to show to the user.</summary>
            <param name="type">A BQL query that defines the data set that is shown to the user along with the key field that is used as a value. Set to a field (type part of a DAC field) to
            select all data records from the referenced table. Set to a BQL command of <tt>Search</tt> type to specify a complex select statement.</param>
        </member>
        <member name="M:PX.Data.PXCustomSelectorAttribute.#ctor(System.Type,System.Type[])">
            <summary>Initializes a new instance that will use the specified BQL query to retrieve the data records to select from and display the provided set of columns.</summary>
            <param name="type">A BQL query that defines the data set that is shown to the user along with the key field that is used as a value. Set to a field (type part of a DAC field) to
            select all data records from the referenced table. Set to a BQL command of <tt>Search</tt> type to specify a complex select statement.</param>
            <param name="fieldList">Fields to display in the control.</param>
        </member>
        <member name="T:PX.Data.PXCustomSelectorAttribute.FilteredView">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCustomSelectorAttribute.FieldVerifying(PX.Data.PXCache,PX.Data.PXFieldVerifyingEventArgs)">
            <summary>
            The handler of the <tt>FieldVerifying</tt> event.
            </summary>
            <param name="sender">The cache object that has raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:PX.Data.PXCustomSelectorAttribute.CreateViewDelegate">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXCustomSelectorAttribute.CacheAttached(PX.Data.PXCache)">
            <summary>
            The method executed when the attribute is copied to the cache level.
            </summary>
            <param name="sender">The cache object that has raised the event.</param>
        </member>
        <member name="T:PX.Data.PXSelectorByMethodAttribute">
            <summary>
            Selector that extracts records by calling provided static method of a provided type. Method must take no parameters and return IEnumerable implementor
            </summary>
        </member>
        <member name="F:PX.Data.PXSelectorByMethodAttribute.FunctionCache">
            <summary>
            Caches compiled functions. Later the compiled function will be avaliable by the function key which is a tuple of function name and the type than contains it
            </summary>
        </member>
        <member name="F:PX.Data.PXSelectorByMethodAttribute._functionCacheKey">
            <summary>
            Key to get the data providing function from the function cache
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXSelectorByMethodAttribute.#ctor(System.Type,System.String,System.Type,System.Type[])" -->
        <member name="T:PX.Data.UIFieldRef">
            <exclude/>
        </member>
        <member name="T:PX.Data.ForeignKeyChecker">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCopyPasteAction`1">
            <summary>Implements the copy-paste functionality and creates the Edit button on the page datasource.</summary>
            <typeparam name="TNode"></typeparam>
        </member>
        <member name="F:PX.Data.PXCopyPasteAction`1.ImportXMLPostProcessor">
            <exclude />
        </member>
        <member name="F:PX.Data.PXCopyPasteAction`1.ImportXMLValidator">
            <exclude />
        </member>
        <member name="T:PX.Data.AUTemplateCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCopyPasteHiddenViewAttribute">
            <summary>Indicates that the cache corresponding to the primary DAC of
            the data view is not copied when the copy-paste feature is utilized on
            the webpage.</summary>
            <remarks>
            <para>The attribute is placed on the definition of a data view in a
            graph to prevent the cache of the first DAC type referenced by the
            data view to be copied and pasted. The copy-paste feature allows a
            user to copy all caches related to the graph of the current webpage,
            add a new data record, and paste all copied caches to the new data
            record. The <tt>PXCopyPasteHiddenView</tt> attribute hides a cache
            from this feature.</para>
            <para>To hide only a specific field from the copy-paste feature, use
            the <see cref="T:PX.Data.PXCopyPasteHiddenFieldsAttribute">PXCopyPasteHiddenFields</see>
            attribute.</para>
            </remarks>
            <example>
            The code below shows the use of the attribute on the definition of a
            data view in a graph. As a result, the <tt>APAdjust</tt> cache is not
            copied when the user clicks <b>Copy</b> on the webpage bound to the
            graph where the data view is defined.
            <code>
            [PXCopyPasteHiddenView()]
            public PXSelectJoin&lt;APAdjust,
                InnerJoin&lt;APPayment, On&lt;APPayment.docType, Equal&lt;APAdjust.adjgDocType&gt;,
                    And&lt;APPayment.refNbr, Equal&lt;APAdjust.adjgRefNbr&gt;&gt;&gt;&gt;&gt; Adjustments;</code>
            </example>
        </member>
        <member name="F:PX.Data.PXCopyPasteHiddenViewAttribute.ShowInSimpleImport">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCopyPasteHiddenViewAttribute.IsHiddenView(PX.Data.PXGraph,System.String,System.Boolean)">
            <summary>Returns the value indicating whether the attribute is
            attached to the specified data view in the graph.</summary>
            <exclude />
            <param name="g">The graph where the data view is defined.</param>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="F:PX.Data.PXCopyPasteHiddenViewAttribute.IsHidden">
            <exclude />
        </member>
        <member name="T:PX.Data.PXCopyPasteHiddenFieldsAttribute">
            <summary>Indicates that the specific fields of the primary DAC of the data view are not copied when the copy-paste feature is utilized on the webpage.</summary>
            <remarks>See the <see cref="T:PX.Data.PXCopyPasteHiddenViewAttribute">PXCopyPasteHiddenView</see>
            attribute for more detail.</remarks>
            <example>
              <code title="Example" description="The code below prevents only the InvoiceNbr field of the APInvoice DAC from copying when a user clicks Copy on the webpage." lang="CS">
            [PXCopyPasteHiddenFields(typeof(APInvoice.invoiceNbr))]
            public PXSelectJoin&lt;APInvoice,
                LeftJoin&lt;Vendor, On&lt;Vendor.bAccountID, Equal&lt;APInvoice.vendorID&gt;&gt;&gt;&gt;
            Document;</code>
              <code title="Example2" description="Multiple fields can be listed, as the following code shows." lang="CS">
            [PXCopyPasteHiddenFields(typeof(GLTranDoc.parentLineNbr),
                                     typeof(GLTranDoc.curyDiscAmt),
                                     typeof(GLTranDoc.extRefNbr))]
            public PXSelect&lt;GLTranDoc,
                Where&lt;GLTranDoc.module, Equal&lt;Current&lt;GLDocBatch.module&gt;&gt;,
                    And&lt;GLTranDoc.batchNbr, Equal&lt;Current&lt;GLDocBatch.batchNbr&gt;&gt;&gt;&gt;,
                OrderBy&lt;Asc&lt;GLTranDoc.groupTranID, Asc&lt;GLTranDoc.lineNbr&gt;&gt;&gt;&gt;
                    GLTranModuleBatNbr;</code>
            </example>
        </member>
        <member name="F:PX.Data.PXCopyPasteHiddenFieldsAttribute.Fields">
            <exclude />
        </member>
        <member name="F:PX.Data.PXCopyPasteHiddenFieldsAttribute.FieldsToShowInSimpleImport">
            <exclude />
        </member>
        <member name="M:PX.Data.PXCopyPasteHiddenFieldsAttribute.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <tt>PXCopyPasteHiddenFields</tt>
            attribute.
            </summary>
            <param name="fields">The DAC fields that are not copied
            when the user utilize the copy-paste feature.</param>
            <example>
            The code below shows the usage of the attribute on the <tt>CurrentDocument</tt>
            data view defined in a graph.
            <code>
            [PXCopyPasteHiddenFields(typeof(APInvoice.paySel), typeof(APInvoice.payDate))]
            public PXSelect&lt;APInvoice,
                Where&lt;APInvoice.docType, Equal&lt;Current&lt;APInvoice.docType&gt;&gt;,
                    And&lt;APInvoice.refNbr, Equal&lt;Current&lt;APInvoice.refNbr&gt;&gt;&gt;&gt;&gt; CurrentDocument;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXCopyPasteHiddenFieldsAttribute.IsHiddenField(PX.Data.PXGraph,System.String,System.String,System.Boolean)">
            <exclude />
            <param name="g">The graph type where the data view is defined.</param>
            <param name="viewName">The data view that is checked for the <tt>PXCopyPasteHiddenFields</tt> attribute.</param>
            <param name="fieldName"></param>
            <param name="isImportSimple"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXCopyPasteData`1.SaveAsTemplate(System.String)">
            <summary>
            Creates template in database<br/>
            returns template id
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.PXUIVisibility">
            <summary>Is used to define the visibility of input controls.</summary>
            <remarks>This enumeration is used to define the following:
            <list type="bullet">
            <item><description>The visibility of an input
            control or a grid column at runtime</description></item>
            <item><description>A hint as to which columns you should
            include in the grid while selecting them in the webpage
            layout designer</description></item>
            <item><description>The default set of
            columns displayed in the pop-up of the <tt>PXSelector</tt> input
            control</description></item>
            <item><description>The set of columns
            automatically added to the <tt>PXGrid</tt> control with the
            <tt>AutoGenerateColumns</tt> property set to <tt>AppendDynamic</tt>
            if no appropriate columns are defined for the <tt>PXGrid</tt>
            control</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:PX.Data.PXUIVisibility.Undefined">
            <exclude />
        </member>
        <member name="F:PX.Data.PXUIVisibility.Invisible">
            <summary>The field input control or column is hidden.</summary>
            <remarks>Also, when you select columns for a grid
            in the webpage layout designer, the field column is not recommended to
            be included.</remarks>
        </member>
        <member name="F:PX.Data.PXUIVisibility.Visible">
            <summary>The field input control or column is visible.</summary>
            <remarks>Also, when you select columns for a grid
            in the webpage layout designer, the field column is recommended to
            be included.</remarks>
        </member>
        <member name="F:PX.Data.PXUIVisibility.SelectorVisible">
            <summary>The field column is
            added to the <tt>PXSelector</tt> lookup control when the
            <tt>PXSelector</tt> attribute does not define the set of columns
            explicitly.</summary>
        </member>
        <member name="F:PX.Data.PXUIVisibility.Dynamic">
            <summary>
            The field column is automatically added to the <tt>PXGrid</tt> control
            if the <tt>AutoGenerateColumns</tt> property of the grid is set to <tt>AppendDynamic</tt>.
            </summary>
        </member>
        <member name="F:PX.Data.PXUIVisibility.Service">
            <exclude />
        </member>
        <member name="F:PX.Data.PXUIVisibility.HiddenByAccessRights">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectorMode">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXErrorLevel">
            <summary>This enumeration specifies the level of the <tt>PXSetPropertyException</tt> exception. Depending on the level, different error or warning signs are attached to
            UI controls associated with particular fields or rows.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.Undefined">
            <summary>The <tt>Error</tt> sign is attached to the input controls or cells of the DAC fields whose <tt>PXFieldState</tt><tt>Error</tt> property values are not null.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.RowInfo">
            <summary>The <tt>Information</tt> sign is attached to a DAC row within the <tt>PXGrid</tt> control.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.Warning">
            <summary>The <tt>Warning</tt> sign is attached to a DAC field input control or cell.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.RowWarning">
            <summary>The <tt>Warning</tt> sign is attached to a DAC row within the <tt>PXGrid</tt> control.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.Error">
            <summary>The <tt>Error</tt> sign is attached to a DAC field input control or a cell.</summary>
        </member>
        <member name="F:PX.Data.PXErrorLevel.RowError">
            <summary>The <tt>Error</tt> sign is attached to a DAC row within the <tt>PXGrid</tt> control.</summary>
        </member>
        <member name="T:PX.Data.PXErrorHandling">
            <summary>This enumeration is used in the <see cref="T:PX.Data.PXUIFieldAttribute">PXUIField</see> attribute to specify when to handle the <tt>PXSetPropertyException</tt> exception related to the
            field. If the exception is handled, the user gets a message box with the error description, and the field input control is marked as causing an error.</summary>
        </member>
        <member name="F:PX.Data.PXErrorHandling.WhenVisible">
            <summary>The exception is reported only when the <tt>PXUIField</tt> attribute with the <tt>Visible</tt> property set to <tt>true</tt> is attached to a DAC field.</summary>
        </member>
        <member name="F:PX.Data.PXErrorHandling.Always">
            <summary>The exception is always reported by the <tt>PXUIField</tt> attribute attached to a DAC field.</summary>
        </member>
        <member name="F:PX.Data.PXErrorHandling.Never">
            <summary>The exception is never reported by the <tt>PXUIField</tt> attribute attached to a DAC field.</summary>
        </member>
        <member name="T:PX.Data.PXFieldState">
            <summary>Provides data to set up the presentation of the input control for the DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.DataType">
            <summary>Gets the type of data stored in the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Identity">
            <summary>Gets the value that indicates (if set to true) that the field is mapped to an identity column in a database table.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.IsReadOnly">
            <summary>Gets the value that indicates (if set to true) that the field is read-only.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.IsUnique">
            <summary>Gets the indication of a uniqueness constraint on the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Length">
            <summary>Gets or sets the storage size of the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Name">
            <summary>Gets the name of the field.</summary>
        </member>
        <member name="M:PX.Data.PXFieldState.SetAliased(System.String)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXFieldState.Nullable">
            <summary>Gets the value that indicates (if set to true) that the field can store the <tt>null</tt> value.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Precision">
            <summary>Gets the maximum number of digits used to represent a numeric value stored in the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.PrimaryKey">
            <summary>Gets the value that indicates (if set to true) that the field is marked as a key field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Scale">
            <summary>Gets the number of digits to the right of the decimal point used to represent a numeric value stored in the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Required">
            <summary>Gets or sets the value that indicates (if set to true) that the value of the field is required.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Value">
            <summary>Gets or sets the value that is stored in the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Error">
            <summary>Gets or sets the error text assigned to the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.IsWarning">
            <summary>Gets or sets the value that indicates (if set to true) whether the field is marked with the <tt>Warning</tt> sign.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.ErrorLevel">
            <summary>Gets or sets the error level assigned to the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Enabled">
            <summary>Gets or sets the value that indicates (if set to true) that the current field input control will respond to a user's interaction.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Visible">
            <summary>Gets or sets the value that indicates (if set to true) that the current field input control is displayed.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.DisplayName">
            <summary>
            Gets or sets the display name for the field.
            </summary>
            <remarks>
            If <see cref="P:PX.Data.PXFieldState.DisplayName"/> has not been set explicitly then field name <see cref="P:PX.Data.PXFieldState.Name"/> is returned.
            </remarks>
        </member>
        <member name="P:PX.Data.PXFieldState.IsDisplayNameSpecified">
            <summary>
            Gets a value indicating whether  <see cref="P:PX.Data.PXFieldState.DisplayName"/> was explicitly specified for the field.
            </summary>
            <value>
            True if the <see cref="P:PX.Data.PXFieldState.DisplayName"/> was explicitly specified for the field, false if not.
            </value>
        </member>
        <member name="P:PX.Data.PXFieldState.DescriptionName">
            <summary>Gets or sets the name of a DAC field displayed in the <tt>PXSelector</tt> control of the field if the <tt>DisplayMode</tt> property is set to <tt>Text</tt>. If
            the <tt>DisplayMode</tt> property is set to <tt>Hint</tt>, the name is displayed in the <tt>ValueField</tt> - <tt>DescriptionName</tt> format. By default,
            <tt>DisplayMode</tt> is set to <tt>Hint</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.Visibility">
            <summary>Gets or sets the <tt>PXUIVisibility</tt> object for the field.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.DefaultValue">
            <summary>Gets or sets the default value that is displayed in the field's cell for a new record that is not yet committed to the <tt>PXGraph</tt> instance.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.ViewName">
            <summary>Gets or sets the name for the <tt>PXView</tt> object bound to the <tt>PXSelector</tt> field control.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.FieldList">
            <summary>Gets or sets the array of DAC fields for the <tt>PXSelector</tt> field control.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.HeaderList">
            <summary>Gets or sets the array of field display names for the <tt>PXSelector</tt> field control.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.ValueField">
            <summary>Gets or sets the name of a DAC field, which is: 
            <list type="bullet"><item>Displayed in the <tt>PXSelector</tt> field control on focus.</item><item>Used to locate the selected record in the <tt>PXSelector</tt> field control.</item><item>Displayed in the <tt>PXSelector</tt> field control when the <tt>DisplayMode</tt> property is set to <tt>Value</tt>.</item></list></summary>
        </member>
        <member name="P:PX.Data.PXFieldState.SelectorMode">
            <summary>Gets or sets the mode of the PXSelector control.</summary>
        </member>
        <member name="P:PX.Data.PXFieldState.ControlConfig">
            <summary>Gets or sets definition of the control to be rendered.</summary>
        </member>
        <member name="M:PX.Data.PXFieldState.ToString">
            <summary>Returns the string representation of the data value held by the state object.</summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:PX.Data.PXFieldState.Equals(System.Object)">
            <summary>Compares the provided object with the data value.</summary>
            <param name="obj">The object to compare with the data value.</param>
            <returns>
              <tt>true</tt> if the provided object is equal to the data value and <tt>false</tt> otherwise.</returns>
        </member>
        <member name="M:PX.Data.PXFieldState.CreateInstance(System.Object,System.Type,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.String,System.String,System.String,System.String,PX.Data.PXErrorLevel,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PX.Data.PXUIVisibility,System.String,System.String[],System.String[])">
            <summary>Configures a field state with the specified value and type of the field from the provided parameters.</summary>
            <param name="precision">The maximum number of digits used to represent a numeric value stored in the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="value">The value that is stored in the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="dataType">The type of data stored in the field.</param>
            <param name="defaultValue">The default value that is displayed in the field's cell for a new record that is not yet committed to the <tt>PXGraph</tt> instance.</param>
            <param name="nullable">The value that indicates (if set to true) that the field can store the <tt>null</tt> value.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="length">The storage size of the field.</param>
            <param name="displayName">The display name for the field.</param>
            <param name="error">The error text assigned to the field.</param>
            <param name="errorLevel">The error level assigned to the field.</param>
            <param name="enabled">The value that indicates (if set to true) that the current field input control will respond to a user's interaction.</param>
            <param name="visible">The value that indicates (if set to true) that the current field input control is displayed.</param>
            <param name="readOnly">The value that indicates (if set to true) that the field is read-only.</param>
            <param name="visibility">The <tt>PXUIVisibility</tt> object for the field.</param>
            <param name="viewName">The name for the <tt>PXView</tt> object bound to the <tt>PXSelector</tt> field control.</param>
            <param name="fieldList">The array of DAC fields for the <tt>PXSelector</tt> field control.</param>
            <param name="headerList">The array of field display names for the <tt>PXSelector</tt> field control.</param>
            <param name="descriptionName">The name of a DAC field displayed in the <tt>PXSelector</tt> control of the field if the <tt>DisplayMode</tt> property is set to <tt>Text</tt>. If the
            <tt>DisplayMode</tt> property is set to <tt>Hint</tt>, the name is displayed in the <tt>ValueField</tt> - <tt>DescriptionName</tt> format.</param>
        </member>
        <member name="M:PX.Data.PXFieldState.CreateInstance(System.Type,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Object,System.String,System.String,System.String,System.String,PX.Data.PXErrorLevel,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},PX.Data.PXUIVisibility,System.String,System.String[],System.String[])">
            <summary>Configures a field state with the specified type of the field from the provided parameters.</summary>
            <param name="precision">The maximum number of digits used to represent a numeric value stored in the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="dataType">The type of data stored in the field.</param>
            <param name="defaultValue">The default value that is displayed in the field's cell for a new record that is not yet committed to the <tt>PXGraph</tt> instance.</param>
            <param name="nullable">The value that indicates (if set to true) that the field can store the <tt>null</tt> value.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="length">The storage size of the field.</param>
            <param name="displayName">The display name for the field.</param>
            <param name="error">The error text assigned to the field.</param>
            <param name="errorLevel">The error level assigned to the field.</param>
            <param name="enabled">The value that indicates (if set to true) that the current field input control will respond to a user's interaction.</param>
            <param name="visible">The value that indicates (if set to true) that the current field input control is displayed.</param>
            <param name="readOnly">The value that indicates (if set to true) that the field is read-only.</param>
            <param name="visibility">The <tt>PXUIVisibility</tt> object for the field.</param>
            <param name="viewName">The name for the <tt>PXView</tt> object bound to the <tt>PXSelector</tt> field control.</param>
            <param name="fieldList">The array of DAC fields for the <tt>PXSelector</tt> field control.</param>
            <param name="headerList">The array of field display names for the <tt>PXSelector</tt> field control.</param>
            <param name="descriptionName">The name of a DAC field displayed in the <tt>PXSelector</tt> control of the field if the <tt>DisplayMode</tt> property is set to <tt>Text</tt>. If the
            <tt>DisplayMode</tt> property is set to <tt>Hint</tt>, the name is displayed in the <tt>ValueField</tt> - <tt>DescriptionName</tt> format.</param>
        </member>
        <member name="M:PX.Data.PXFieldState.CreateInstance(System.Web.UI.Design.IDataSourceFieldSchema)">
            <summary>Initializes a field state from another field state.</summary>
            <param name="state">A field state to initialize the field state from.</param>
        </member>
        <member name="T:PX.Data.PXFieldState.FieldInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXStringState">
            <summary>Provides data to set up the presentation of the input control for the <tt>string</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.InputMask">
            <summary>Gets or sets the value specifying how users enter data and how data is displayed.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.AllowedValues">
            <summary>Gets or sets the list of values for the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.AllowedLabels">
            <summary>Gets or sets the list of labels for the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.AllowedImages">
            <summary>Gets or sets the list of images for the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.ExclusiveValues">
            <summary>Gets a value that enables (if set to true) editing of the value in the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.EmptyPossible">
            <summary>Gets or sets a value that enables (if set to true) filtering by the empty value in the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.IsUnicode">
            <summary>Gets or sets a value indicating whether Unicode string content is supported.</summary>
        </member>
        <member name="P:PX.Data.PXStringState.ValueLabelDic">
            <summary>Gets the collection of values and labels for the field PXDropDown input control.</summary>
        </member>
        <member name="M:PX.Data.PXStringState.TryGetListValue(System.String,System.String@)">
            <summary>Tries to get value of the <tt>PXDropDown</tt> field input control by provided label.</summary>
        </member>
        <member name="M:PX.Data.PXStringState.TryGetListLabel(System.String,System.String@)">
            <summary>Tries to get label of the <tt>PXDropDown</tt> field input control by provided value.</summary>
        </member>
        <member name="M:PX.Data.PXStringState.ToString">
            <exclude />
        </member>
        <member name="M:PX.Data.PXStringState.CreateInstance(System.Object,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String[],System.String[],System.Nullable{System.Boolean},System.String,System.String[])">
            <exclude />
        </member>
        <member name="T:PX.Data.PXBranchSelectorState">
            <exclude />
        </member>
        <member name="T:PX.Data.PXImageState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXHeaderImageState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSegment">
            <summary>Provides data to set up the presentation of a single segment of a segmented field input control.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.EditMask">
            <summary>The input mask for the segment:
            <list type="bullet"><item>C: <tt>MaskType.Ascii</tt></item><item>a: <tt>MaskType.AlphaNumeric</tt></item><item>9: <tt>MaskType.Numeric</tt></item><item>?: <tt>MaskType.Alpha</tt></item></list></summary>
        </member>
        <member name="F:PX.Data.PXSegment.FillCharacter">
            <summary>The character to fill the value.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.PromptCharacter">
            <summary>The character to prompt for a value.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.Length">
            <summary>The number of characters in the segment.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.Validate">
            <summary>The value that indicates (if set to true) that the new specified segment value should be validated.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.CaseConvert">
            <summary>The value that specifies whether the letters in the segment are converted to uppercase or lowercase:
            <list type="bullet"><item>0: <tt>NotSet</tt></item><item>1: <tt>Upper</tt></item><item>2: <tt>Lower</tt></item></list></summary>
        </member>
        <member name="F:PX.Data.PXSegment.Align">
            <summary>The text alignment type in the segment:
            <list type="bullet"><item>1: <tt>Left</tt></item><item>2: <tt>Right</tt></item></list></summary>
        </member>
        <member name="F:PX.Data.PXSegment.Separator">
            <summary>The character that is used to separate the segment from the previous one.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.ReadOnly">
            <summary>The value that indicates (if set to true) that the contents of the segment cannot be changed.</summary>
        </member>
        <member name="F:PX.Data.PXSegment.Descr">
            <summary>The description of the segment.</summary>
        </member>
        <member name="M:PX.Data.PXSegment.#ctor(System.Char,System.Char,System.Int16,System.Boolean,System.Int16,System.Int16,System.Char,System.Boolean,System.String,System.Char)">
            <summary>Creates an instance of the <tt>PXSegment</tt> class using the provided values.</summary>
            <param name="editMask">The input mask for the segment:
            <list type="bullet"><item>C: <tt>MaskType.Ascii</tt></item><item>a: <tt>MaskType.AlphaNumeric</tt></item><item>9: <tt>MaskType.Numeric</tt></item><item>?: <tt>MaskType.Alpha</tt></item></list></param>
            <param name="fillCharacter">The character to fill the value.</param>
            <param name="length">The number of characters in the segment.</param>
            <param name="validate">The value that indicates (if set to true) that the new specified segment value should be validated.</param>
            <param name="caseConverter">The value that specifies whether the letters in the segment are converted to uppercase or lowercase:
            <list type="bullet"><item>0: <tt>NotSet</tt></item><item>1: <tt>Upper</tt></item><item>2: <tt>Lower</tt></item></list></param>
            <param name="align">The text alignment type in the segment:
            <list type="bullet"><item>1: <tt>Left</tt></item><item>2: <tt>Right</tt></item></list></param>
            <param name="separator">The character that is used to separate the segment from the previous one.</param>
            <param name="readOnly">The value that indicates (if set to true) that the contents of the segment cannot be changed.</param>
            <param name="descr">The description of the segment.</param>
            <param name="promptCharacter">The character to prompt for a value.</param>
        </member>
        <member name="T:PX.Data.PXSegmentedState">
            <summary>Provides data to set up the presentation of the segmented DAC field input control.</summary>
            <example>
              <code title=" " description="The code below gets the field state object of the SubItemID." lang="CS">
            PXSegmentedState subItem =
                this.ResultRecords.Cache.GetValueExt&lt;InventoryTranDetEnqResult.subItemID&gt;
                (this.ResultRecords.Current) as PXSegmentedState;</code>
            </example>
        </member>
        <member name="P:PX.Data.PXSegmentedState.Segments">
            <summary>Gets or sets the list of segments for the segmented field input control.</summary>
        </member>
        <member name="P:PX.Data.PXSegmentedState.ValidCombos">
            <summary>Gets or sets the value indicating whether the segmented field input control displays a single lookup or a separate lookup for each segment</summary>
        </member>
        <member name="P:PX.Data.PXSegmentedState.Wildcard">
            <summary>Gets or sets the collection of characters allowed to be specified within each segment in addition to the <tt>Mask</tt> property of <tt>PXSegment.</tt></summary>
        </member>
        <member name="M:PX.Data.PXSegmentedState.CreateInstance(System.Object,System.String,PX.Data.PXSegment[],System.String,System.Nullable{PX.Data.DimensionLookupMode},System.Nullable{System.Boolean},System.String)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXDoubleState">
            <summary>Provides data to set up the presentation of the input control for the <tt>double</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXDoubleState.MinValue">
            <summary>Gets or sets the minimum value that can be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXDoubleState.MaxValue">
            <summary>Gets or sets the maximum value that can be set in the field input control.</summary>
        </member>
        <member name="M:PX.Data.PXDoubleState.CreateInstance(System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>Configures a double field state from the provided parameters.</summary>
            <param name="maxValue">The maximum value that can be set in the field input control.</param>
            <param name="minValue">The minimum value that can be set in the field input control.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="precision">The maximum number of digits used to represent a numeric value stored in the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="value">The value that is stored in the field.</param>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="T:PX.Data.PXFloatState">
            <summary>Provides data to set up the presentation of the input control for the <tt>float</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXFloatState.MinValue">
            <summary>Gets or sets the minimum value that could be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXFloatState.MaxValue">
            <summary>Gets or sets the maximum value that could be set in the field input control.</summary>
        </member>
        <member name="M:PX.Data.PXFloatState.CreateInstance(System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>Configures a float field state from the provided parameters.</summary>
            <param name="value">The value that is stored in the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="precision">The maximum number of digits used to represent a numeric value stored in the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="minValue">The minimum value that can be set in the field input control.</param>
            <param name="maxValue">The maximum value that can be set in the field input control.</param>
        </member>
        <member name="T:PX.Data.PXDecimalState">
            <summary>Provides data to set up the presentation of the input control for the <tt>decimal</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXDecimalState.MinValue">
            <summary>Gets or sets the minimum value that can be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXDecimalState.MaxValue">
            <summary>Gets or sets the maximum value that can be set in the field input control.</summary>
        </member>
        <member name="M:PX.Data.PXDecimalState.CreateInstance(System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>Configures a decimal field state from the provided parameters.</summary>
            <param name="value">The value that is stored in the field.</param>
            <param name="precision">The maximum number of digits used to represent a numeric value stored in the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="minValue">The minimum value that can be set in the field input control.</param>
            <param name="maxValue">The maximum value that can be set in the field input control.</param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.PXDateState">
            <summary>Provides data to set up the presentation of the input control for the <tt>DateTime</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXDateState.InputMask">
            <summary>Gets or sets the value that specifies how users enter the date.</summary>
        </member>
        <member name="P:PX.Data.PXDateState.DisplayMask">
            <summary>Gets or sets the value that specifies how the date is displayed.</summary>
        </member>
        <member name="P:PX.Data.PXDateState.MinValue">
            <summary>Gets or sets the minimum value that can be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXDateState.MaxValue">
            <summary>Gets or sets the maximum value that can be set in the field input control.</summary>
        </member>
        <member name="M:PX.Data.PXDateState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Configures a date field state from the provided parameters.</summary>
            <param name="minValue">The minimum value that can be set in the field input control.</param>
            <param name="maxValue">The maximum value that can be set in the field input control.</param>
            <param name="inputMask">The value that specifies how users enter the date.</param>
            <param name="displayMask">The value that specifies how the date is displayed.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
            <param name="value">The value that is stored in the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="fieldName">The name of the field.</param>
        </member>
        <member name="T:PX.Data.PXIntState">
            <summary>Provides data to set up the presentation of the input control for the <tt>integer</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.MinValue">
            <summary>Gets or sets the minimum value that could be set in the field input control</summary>
        </member>
        <member name="P:PX.Data.PXIntState.MaxValue">
            <summary>Gets or sets the maximum value that could be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.AllowedValues">
            <summary>Gets or sets the list of values for the field input control of the <tt>PXDropDown</tt> type.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.AllowedLabels">
            <summary>Gets or sets the list of labels for the field input control of the <tt>PXDropDown</tt> type.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.AllowedImages">
            <summary>Gets or sets the list of images for the field input control of the <tt>PXDropDown</tt> type.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.ExclusiveValues">
            <summary>Gets a value that enables (if set to true) editing of the value in the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.EmptyPossible">
            <summary>Gets or sets a value that enables (if set to true) filtering by the empty value in the <tt>PXDropDown</tt> field input control.</summary>
        </member>
        <member name="P:PX.Data.PXIntState.ValueLabelDic">
            <summary>Gets the collection of values and labels for the field PXDropDown input control.</summary>
        </member>
        <member name="M:PX.Data.PXIntState.TryGetListValue(System.String,System.Object@)">
            <summary>Tries to get value of the <tt>PXDropDown</tt> field input control by provided label.</summary>
        </member>
        <member name="M:PX.Data.PXIntState.TryGetListLabel(System.Int32,System.String@)">
            <summary>Tries to get label of the <tt>PXDropDown</tt> field input control by provided value.</summary>
        </member>
        <member name="M:PX.Data.PXIntState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32[],System.String[],System.Type,System.Nullable{System.Int32},System.String[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXIntState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32[],System.String[],System.Type,System.Nullable{System.Int32},System.String[],System.Nullable{System.Boolean})">
            <exclude />
        </member>
        <member name="M:PX.Data.PXIntState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32[],System.String[],System.Nullable{System.Boolean},System.Type,System.Nullable{System.Int32},System.String[],System.Nullable{System.Boolean})">
            <exclude />
        </member>
        <member name="T:PX.Data.PXGuidState">
            <summary>Provides data to set up the presentation of the input control for the <tt>Guid</tt> DAC field.</summary>
        </member>
        <member name="M:PX.Data.PXGuidState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>Configures a guid field state from the provided parameters.</summary>
            <param name="value">The value that is stored in the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="isKey">The value that indicates (if set to true) that the field is marked as a key field.</param>
            <param name="required">The value that indicates (if set to true) that the value of the field is required.</param>
        </member>
        <member name="T:PX.Data.PXLongState">
            <summary>Provides data to set up the presentation of the input control for the <tt>long</tt> DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXLongState.MinValue">
            <summary>Gets or sets the minimum value that could be set in the field input control.</summary>
        </member>
        <member name="P:PX.Data.PXLongState.MaxValue">
            <summary>Gets or sets the maximum value that could be set in the field input control.</summary>
        </member>
        <member name="M:PX.Data.PXLongState.CreateInstance(System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Type)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXNoteState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXColorState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXInactiveFieldState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectorState">
            <summary>Provides data to set up the presentation of a <tt>PXSelector</tt> input control for a DAC field.</summary>
        </member>
        <member name="P:PX.Data.PXSelectorState.SchemaObject">
            <summary>The DAC that contains the field whose values the system uses as the selector values.</summary>
            <value>The full name of the DAC, such as <tt>PX.Objects.SO.SOOrder</tt>.</value>
        </member>
        <member name="P:PX.Data.PXSelectorState.SchemaField">
            <summary>The field whose values the system uses as the selector values.</summary>
            <value>The name of the field, such as <tt>OrderType</tt>.</value>
        </member>
        <member name="M:PX.Data.PXSelectorState.CreateInstance(PX.Data.PXFieldState,System.String,System.String,System.String)">
            <summary>Configures a PXSelector field state from the provided parameters.</summary>
            <param name="schemeField">The field whose values the system uses as the selector values.</param>
            <param name="schemeObj">The DAC that contains the field whose values the system uses as the selector values.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">A field state.</param>
        </member>
        <member name="M:PX.Data.FieldStateExtensions.HasFixedValuesList(PX.Data.PXStringState)">
            <summary>Indicates whether input control of this field has a fixed list of values.</summary>
        </member>
        <member name="M:PX.Data.FieldStateExtensions.HasFixedValuesList(PX.Data.PXIntState)">
            <summary>Indicates whether input control of this field has a fixed list of values.</summary>
        </member>
        <member name="T:PX.Data.GroupHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.GroupHelper.ParamsPair">
            <exclude/>
        </member>
        <member name="T:PX.Data.GroupHelper.ParamsFour">
            <exclude/>
        </member>
        <member name="T:PX.Data.GroupHelper.Definition">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.OnDemandCommand">
            <exclude/>
        </member>
        <member name="T:PX.Data.IMacroVariable">
            <exclude/>
        </member>
        <member name="T:PX.Data.MeVariable">
            <exclude/>
        </member>
        <member name="T:PX.Data.MyUsernameVariable">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMacroVariablesManager">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.noteText">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.entityType">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.graphType">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.externalKey">
            <exclude/>
        </member>
        <member name="P:PX.Data.Note.NotePopupText">
            <exclude/>
        </member>
        <member name="T:PX.Data.Note.entityName">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc.fileID">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc.entityType">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc.entityName">
            <exclude/>
        </member>
        <member name="T:PX.Data.NoteDoc.entityRowValues">
            <exclude/>
        </member>
        <member name="P:PX.Data.UI.PXUIDateFieldAttribute.DateTimeFormat">
            <summary>
            The DateTimeFormat property allows to customize all aspects of format that 
            is applied to a DateTime object while converting it to string.
            </summary>
        </member>
        <member name="M:PX.Data.UI.PXUIDateFieldAttribute.GetMask(System.Boolean)">
            <summary>
            Build input mask. Fields replace by the explicit int with lengths of 2. 
            </summary>
        </member>
        <member name="M:PX.Data.UI.PXUIDateFieldAttribute.MakeMask(System.Boolean)">
            <summary>
            Build mask for edit-mode(short) or for display-mode(long).
            </summary>
        </member>
        <member name="M:PX.Data.UI.PXUIDateFieldAttribute.UpdateServiceData(System.Char,System.Int32)">
            <summary>
            Sets the class-level service data.
            </summary>
        </member>
        <member name="M:PX.Data.UI.PXUIDateFieldAttribute.MaskFlag(System.Boolean,System.Char,System.Int32)">
            <summary>
            Decode control sequence to the mask flag.
            </summary>
        </member>
        <member name="M:PX.Data.UI.PXUIDateFieldAttribute.MakePattern(System.String,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Build pattern for edit-mode(short) or for display-mode(long).
            </summary>
        </member>
        <member name="T:PX.Data.UI.PXUIExtension`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.UI.PXUIExtension`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIActionsListAttribute">
            <summary>
            Implements PXStringList attribute with values from screen's actions list.
            </summary>
        </member>
        <member name="P:PX.Data.Maintenance.GI.GIActionsListAttribute.AllowedActionTypes">
            <summary>
            Allowed action types.
            </summary>
        </member>
        <member name="T:PX.Data.Maintenance.GI.XMLTablesRestrictor.Wildcard">
            <summary>
            Represents a wildcard running on the
            <see cref="N:System.Text.RegularExpressions"/> engine.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.GI.XMLTablesRestrictor.Wildcard.#ctor(System.String)">
            <summary>
            Initializes a wildcard with the given search pattern.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
        </member>
        <member name="M:PX.Data.Maintenance.GI.XMLTablesRestrictor.Wildcard.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a wildcard with the given search pattern and options.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
            <param name="options">A combination of one or more
            <see cref="T:System.Text.RegularExpressions.RegexOptions"/>.</param>
        </member>
        <member name="M:PX.Data.Maintenance.GI.XMLTablesRestrictor.Wildcard.WildcardToRegex(System.String)">
            <summary>
            Converts a wildcard to a regex.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>A regex equivalent of the given wildcard.</returns>
        </member>
        <member name="M:PX.Data.Maintenance.GI.XMLTablesRestrictor.TableList.GetMatchLevel(System.String)">
            <summary>
            Returns relative measure that determines specificity level of match.
            </summary>
            <remarks>
            Example of return values: PX.SM.Users = 3, PX.SM.* = 2, PX.* = 1, * = 0
            </remarks>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.filterCaption">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.resultsCaption">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.selectTop">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.filterColCount">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.pageSize">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.exportTop">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.primaryScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.replacePrimaryScreen">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.newRecordCreationEnabled">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.massDeleteEnabled">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.autoConfirmDelete">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.massRecordsUpdateEnabled">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.massActionsOnRecordsEnabled">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.exposeViaOData">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.exposeViaMobile">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.notesAndFilesTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.rowStyleFormula">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.sitemapSelectorTitle">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.sitemapScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIDesign.defaultSortOrder">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.dataType">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.availableValues">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.isExpression">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.defaultValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.colSpan">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.required">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.hidden">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.size">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.labelSize">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilter.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.field">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.availableValues">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.defaultValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.NewFilter.colSpan">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.CheckboxCombobox">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.CheckboxCombobox.checkbox">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.CheckboxCombobox.combobox">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.ComboValues">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.ComboValues.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.ComboValues.paramNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.ComboValues.value">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.ComboValues.label">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.dataFieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIGroupBy.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassAction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassAction.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassAction.actionName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassAction.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassUpdateField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassUpdateField.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassUpdateField.fieldId">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIMassUpdateField.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.dataField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.condition">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.isExpression">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationCondition.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.parameterName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.isExpression">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationParameter.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.link">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.title">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GINavigationScreen.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.recDefID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRecordDefault.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.parentTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.childTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.joinType">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIRelation.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.openBrackets">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.dataFieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.condition">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.isExpression">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.value1">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.value2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.closeBrackets">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.operation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIWhere.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.relationNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.openBrackets">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.parentField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.condition">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.childField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.closeBrackets">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.operation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIOn.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.objectName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.field">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.schemaField">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.caption">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.styleFormula">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.isVisible">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.defaultNav">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.aggregateFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.totalAggregateFunction">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.navigationNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIResult.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.lineNbr">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.dataFieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISort.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIBase">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIBase.lastFlag">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.designID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.alias">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.noteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GITable.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GenericInquiryDesigner">
            <exclude/>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.MoveNotesAndFilesTable(System.Collections.Generic.List{PX.Api.Models.Command},System.Collections.Generic.List{PX.Api.Models.Container})">
            <summary>
            Moves <see cref="P:PX.Data.Maintenance.GI.GIDesign.NotesAndFilesTable"/> value command to the end of the script
            to be pasted after <see cref="F:PX.Data.Maintenance.GI.GenericInquiryDesigner.Results"/>
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.CommitJoinBrackets(System.Collections.Generic.List{PX.Api.Models.Command})">
            <summary>
            Sets open bracket for join conditions to be committed
            </summary>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GenericInquiryDesigner.FieldItem">
            <exclude/>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.SetValueListInWhere``1(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <summary>
            Sets correct field state and list of values based on field type.
            </summary>
            <param name="dataFieldName">Name of the DAC field corresponding to the value field state and list needed.</param>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.SetEnabled(PX.Data.PXSelectBase,System.Boolean)">
            <summary>
            Sets enabled/disabled state for a view in graph.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.IsGenericInquiryScreen(System.String)">
            <summary>
            Determines if specified node is Generic Inquiry.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GenericInquiryDesigner.SetValueListInNavConditions``1(PX.Data.Events.FieldSelecting{``0},System.Boolean)">
            <param name="notEvent">Unused param to inform the system that the method is not an event</param>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilteredProcessing">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilteredProcessing.GIParametrizedView">
            <exclude/>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GIFilteredProcessing.GIOuterView">
            <exclude/>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GIFilteredProcessing.AddStateSelectingHandler(PX.Data.PXAction{PX.Data.GenericFilter})">
            <summary>
            Adds StateSelecting event handler to an action with enable/disable logic.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GIFilteredProcessing.HandleProcessingExceptionsFor(PX.Data.GenericResult,System.Int32,System.Func{PX.Data.GenericResult,System.Int32,System.Boolean})">
            <summary>
            Handles all exceptions for the specified action and sets info about them in PXProcessing.
            </summary>
            <returns>True, if there were any exceptions; false otherwise.</returns>
        </member>
        <member name="M:PX.Data.Maintenance.GI.GIFilteredProcessing.HandleProcessingExceptionsFor(PX.Data.GenericResult,System.Int32,System.Action{PX.Data.GenericResult,System.Int32})">
            <summary>
            Handles all exceptions for the specified action and sets info about them in PXProcessing.
            </summary>
            <returns>True, if there were any exceptions; false otherwise.</returns>
        </member>
        <member name="T:PX.Data.Maintenance.GI.GISelectedOnlyScope">
            <summary>
            This scope defines that only records with "Selected" property set to true must be selected.
            </summary>
        </member>
        <member name="T:PX.Data.Maintenance.DimensionTree`5">
            <summary>
            Provides methods to travel through the elements of <typeparamref name="TEntity"/> type in tree structure based on some <see cref="T:PX.Data.Maintenance.DimensionTree`1.Dimension"/>.
            </summary>
            <typeparam name="TEntity">The type of the elements of a tree.</typeparam>
            <typeparam name="TDimension">The dimension that defines structure of a tree.</typeparam>
            <typeparam name="TNaturalKeyField">The <see cref="T:PX.Data.IBqlField"/> of the natural key (CD) of the elements of a tree.</typeparam>
            <typeparam name="TSurrogateKeyField">The <see cref="T:PX.Data.IBqlField"/> of the surrogate key (ID) of the elements of a tree.</typeparam>
        </member>
        <member name="M:PX.Data.Maintenance.PXSiteLockout.DBLock.InLoginScope``1(System.Func{``0})">
            <summary>
            Executes function in login scope under 'admin' user and first company.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.PXSiteLockout.DBLock.InLoginScope(System.Action)">
            <summary>
            Executes action in login scope under 'admin' user and first company.
            </summary>
        </member>
        <member name="T:PX.Data.Maintenance.IAppRestartExecutor">
            <summary>
            Represents application restart executor
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.IAppRestartExecutor.RestartApplication">
            <summary>
            Restarts the current application instance
            </summary>
        </member>
        <member name="T:PX.Data.Maintenance.IAppRestartNotificationTransport">
            <summary>
            Represents transport to be used to notify all nodes about required restart 
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.IAppRestartNotificationTransport.SendRestartRequestNotification">
            <summary>
            Sends restart request notification to subscribers
            </summary>
        </member>
        <member name="P:PX.Data.Maintenance.IAppRestartNotificationTransport.RestartRequested">
            <summary>
            Gets <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> to monitor restart request notifications
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.IAppRestartService.RequestRestart">
            <summary>
            Schedules the restart of all application nodes connected to the current database.
            </summary>
        </member>
        <member name="M:PX.Data.Maintenance.PXAppRestartHelper.RestartApplication">
            <summary>
            Restarts application domain in the current cluster node.
            </summary>
        </member>
        <member name="T:PX.Data.GenericFilterCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericFilterCache.CallDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericResultCache">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericResultCache.CallDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericResultCache.FailureDelegate`1">
            <exclude/>
        </member>
        <member name="M:PX.Data.GenericResultCache.SetCurrentForField(System.String)">
            <summary>
            Sets current for item cache based on a field name (aliased).
            </summary>
            <param name="fieldName">Field name in "Alias_Field" format.</param>
            <remarks>
            Suitable for a case when GI contains self-joins - in this situation
            there is only one PXCache and therefore only one Current for two records of the same type with different aliases.
            </remarks>
        </member>
        <member name="M:PX.Data.GenericResultCache.GetExtFieldValue(System.Object,System.String)">
            <summary>
            Returns external (formula/count) field's value.
            </summary>
        </member>
        <member name="T:PX.Data.GICache`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.GICacheCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericFilter">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericResult.row">
            <exclude/>
        </member>
        <member name="P:PX.Data.GenericResult.Values">
            <summary>
            Actual values for each table. Key is an alias.
            </summary>
            <remarks>If null, something went wrong.</remarks>
        </member>
        <member name="T:PX.Data.GenericResult.GenericResultDebugView">
            <exclude/>
        </member>
        <member name="T:PX.Data.GIDescription">
            <exclude/>
        </member>
        <member name="T:PX.Data.GenericInquiry.Description.NavigationScreensSelect">
            <summary>The class is an heir of PXOrderedSelect with a defined DAC and not standard action names
            to avoid conflicts when there are a few views with drag and drop on a screen. </summary>
        </member>
        <member name="M:PX.Data.GenericInquiry.GenericInquiryHelpers.IsTableUsedInSelect(System.String,System.Collections.Generic.IEnumerable{PX.Data.Maintenance.GI.GIRelation},PX.Data.Maintenance.GI.GITable)">
            <summary>
            Checks that <paramref name="tableAlias"/> will be used in Select statement based on
            configured <paramref name="allRelations"/> and <paramref name="firstTable"/>
            </summary>
            <param name="tableAlias">Alias of the table to be checked</param>
            <param name="allRelations">All configured relations</param>
            <param name="firstTable">First table in the tables list</param>
            <remarks>
            There are two cases when a specific table is used in the query:
            1. When there are no relations configured in the GI, first table from the tables list is used to select data.
            2. When there are some relations configured in the GI, first table from the relations list is used in the
               FROM statement, then other tables from the relations list are used in the JOIN statements.
            There is a limitation of the current GI engine that relations should be in the right order, so in some cases
            table might not be used in the query even if it presents in the relations list. Current implementation
            checks that <paramref name="tableAlias"/> is a descendant of the table used in the FROM statement.
            The following examples show when TableX considered as not used:
               1. TableA join TableB, TableC join TableX. There is no relations between TableB and TableC.
               2. TableA join TableB, TableX join TableB (A -&gt; B &lt;- X). TableA is not a ancestor of the TableX.
            </remarks>
        </member>
        <member name="T:PX.Data.PXGIFormulaProcessor">
            <exclude/>
        </member>
        <member name="T:PX.Data.BqlGenericCommand">
            <exclude/>
        </member>
        <member name="M:PX.Data.BqlGenericCommand.GetONConditions(PX.Data.Description.GI.PXRelation,System.Int32@)">
            <exception cref="T:PX.Data.PXException">Thrown when brackets are unbalanced</exception>
        </member>
        <member name="M:PX.Data.BqlGenericCommand.GetWHERE(System.Collections.Generic.List{PX.Data.Description.GI.PXWhereCond},System.Int32@,System.Boolean,System.Collections.Generic.ISet{System.String},System.Boolean)">
            <exception cref="T:PX.Data.PXException">Thrown when brackets are unbalanced</exception>
        </member>
        <member name="T:PX.Data.GIDataRecordMap">
            <exclude/>
        </member>
        <member name="T:PX.Data.GIListProvider.Definition">
            <exclude/>
        </member>
        <member name="M:PX.Data.EnumerableHelper.Using``2(System.Func{``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Constructs an enumerable sequence that depends on a resource object, whose lifetime is tied to the resulting enumerable sequence's lifetime.
            </summary>
            <typeparam name="TSource">The type of the elements in the produced sequence.</typeparam>
            <typeparam name="TResource">The type of the resource used during the generation of the resulting sequence. Needs to implement <see cref="T:System.IDisposable"/>.</typeparam>
            <param name="resourceFactory">Factory function to obtain a resource object.</param>
            <param name="enumerableFactory">Factory function to obtain an enumerable sequence that depends on the obtained resource.</param>
            <returns>An enumerable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceFactory"/> or <paramref name="enumerableFactory"/> is null.</exception>
        </member>
        <member name="T:PX.Data.PreEnumeratedAsyncEnumerable`1">
            <summary>
            Pre-enumerates the first item in the sequence to initialize the source provider.
            Async copy of <see cref="!:PX.Common.PreEnumeratedEnumerable"/>
            </summary>
        </member>
        <member name="M:PX.Data.PreEnumeratedAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PreEnumeratedAsyncEnumerable`1.AsyncEnumerator.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.PreEnumeratedAsyncEnumerable`1.AsyncEnumerator.MoveNextAsync">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.PreEnumeratedAsyncEnumerable`1.AsyncEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.PXGenericInqGrph">
            <exclude/>
            <exclude/>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIFieldState">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIDescriptionField">
            <summary>
            Keeps information about description field that is needed to show it properly.
            </summary>
            <exclude/>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.GIDescriptionField.DescriptionFieldName">
            <summary>
            Real description field name.
            </summary>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.GIDescriptionField.DescriptionFieldAlias">
            <summary>
            If DAC does not contain SourceField_description field, it will be generated by GI, and it's name will be stored in this field.
            </summary>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.GIDescriptionField.IsSelfReferencing">
            <summary>
            Determines if a selector references a description field from the DAC where it is declared.<br/>
            See <see cref="P:PX.Data.PXSelectorAttribute.IsSelfReferencing"/>.
            </summary>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.GIDescriptionField.SourceState">
            <summary>
            State from the source field (i.e. a field that contains PXSelectorAttribute with this DescriptionField)
            </summary>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.Definition">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXGenericInqGrph.InitializeScreenInfo" -->
        <member name="P:PX.Data.PXGenericInqGrph.SearchByID">
            <summary>
            Returns true, if outer query searches for Generic Inquiry record by it's artificial key.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.CreateSearch(PX.Data.Description.GI.PXSort,System.Object,System.Boolean)">
            <summary>
            Creates search based on sort configuration and search value.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.SelectPrimaryRow(PX.Data.PXGraph,PX.Data.GenericResult)">
            <summary>
            Selects full row from primary view.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.SelectAUComboFields">
            <summary>
            Selects fields that has combo box values in automation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.GetSuitableInquiryFieldsFromDacType(PX.Data.PXGraph,System.Type,System.Func{PX.Data.PXCache,System.String,System.Boolean})">
            <summary>
            Returns all suitable (GI-supported) fields for a DAC type.
            </summary>
            <param name="graph">Any <see cref="T:PX.Data.PXGraph"/> instance to retrieve the instance of <see cref="T:PX.Data.PXCache"/> for the particular DAC type.</param>
            <param name="dacType">DAC type.</param>
            <param name="predicate">A predicate used to additionally filter suitable fields. Takes <see cref="T:PX.Data.PXCache"/> instance for the particular DAC type and the field name as arguments.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.CreateInstance(System.Type,System.Boolean)">
            <summary>
            Create an instance of the Generic Inquiry graph with an automatically generated schema that contains all supported fields for a particular DAC.
            </summary>
            <param name="dacType">DAC type.</param>
            <param name="showDeletedRecords">Whether or not to show the 'Deleted Database Record' field, if any.</param>
            <returns>The graph instance.</returns>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.CollectLocalizeStringAttributesInFormulas">
            <summary>
            Collect localizable string attributes in formulas.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.GetRecordRestrictedFields(PX.Data.Description.GI.PXQueryDescription,PX.Data.RestrictedFieldsSet)">
            <summary>
            Converts restricted fields set from GI format (GenericResult | Alias_Field) to common (DAC) format (DacTableName | Field).
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.GetFieldNameAndTable(PX.Data.Description.GI.PXQueryDescription,System.String)">
            <summary>
            Returns table type and field name from GI field name (in Alias_Field format)
            </summary>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIKeyDefault">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIKeyDefault.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIKeyDefault.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIKeyDefault.value">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.FillAddNewKeys(PX.Data.PXGraph,System.String)">
            <summary>
            Inserts GIKeyDefault records in cache (AskExt delegate).
            </summary>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.EditCurrent">
            <summary>
            Keeps current record when navigating back and forth to the entry screen.
            </summary>
        </member>
        <member name="P:PX.Data.PXGenericInqGrph.TotalCurrent">
            <summary>
            Keeps current record with total values, if any.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.editDetail">
            <summary>
            Gets primary screen node url, selects navigation parameters,
            builds url string with this params and throws PXRedirectToUrlException.
            </summary>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.SecureAction(PX.Data.PXAction)">
            <summary>
            Applies access rights from the Primary Screen to the action in the List
            (only if action with the same name exists in the Primary Screen).
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.InitializePrimaryScreenActions">
            <summary>
            Initializes and adds actions from the Primary Screen to the inquiry graph.
            </summary>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIUpdateValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIUpdateValue.selected">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIUpdateValue.fieldName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIUpdateValue.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.GIUpdateValue.value">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGenericInqGrph.NavigationExpressionParser">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGenericInqGrph.InitializeLayeredNavigationActions">
            <summary>
            Adds actions for side-panel navigation layer.
            </summary>
        </member>
        <member name="T:PX.Data.PXCacheExtensions">
            <exclude/>
        </member>
        <member name="T:PX.Data.GIScreenHelper">
            <exclude/>
        </member>
        <member name="M:PX.Data.GIScreenHelper.GetSiteMapNode(System.String)">
            <exception cref="T:PX.Data.PXException">Throws if node can't be found or it doesn't have graph type.</exception>
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.AsyncEnumerableWrapper`1.AsEnumerable">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.AsyncEnumerableWrapper`1.AsAsyncEnumerable">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.AsyncEnumerableWrapper`1.Select``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.AsyncEnumerableWrapper`1.Where(System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.EnumerableWrapper`1.AsEnumerable">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.EnumerableWrapper`1.AsAsyncEnumerable">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.EnumerableWrapper`1.Select``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SyncAsyncEnumerableWrapper.EnumerableWrapper`1.Where(System.Func{`0,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="T:PX.Data.SyncAsyncEnumerableWrapper.IEnumerableLinqWrapper`1">
            <summary>
            A wrapper for using a single code point for synchronous and asynchronous fetching from the database. Used in
            <see cref="M:PX.Data.PXGenericInqGrph.GetRecords(PX.Data.Description.GI.PXQueryDescription,System.Int32,System.Int32,System.Reactive.Disposables.CompositeDisposable,System.Func{PX.Data.SQLTree.Query,PX.Data.PXDataValue[],PX.Data.SyncAsyncEnumerableWrapper.IEnumerableLinqWrapper{PX.Data.PXDataRecord}})"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PX.Data.PXVirtualFieldException">
            <exclude/>
        </member>
        <member name="T:PX.Data.ColumnsNotInAggregatesCollector">
            <summary>
            The visitor of the SQL expressions tree used to collect <see cref="T:PX.Data.SQLTree.Column"/> SQL expressions from a query/subquery that can be wrapped in an aggregate SQL function.
            This is used for example for results fields in GI with grouping.
            </summary>
        </member>
        <member name="T:PX.Data.Gi_v6">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.userID">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.contactID">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.userName">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.companyName">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.businessDate">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.baseCuryID">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.screenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.curyViewState">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.curyRateID">
            <exclude/>
        </member>
        <member name="T:PX.Data.AccessInfo.branchID">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAdapter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSubstManager">
            <summary>The substitution manager.</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.#cctor">
            <summary>
            Static ctor that initializes the substitution engine
            </summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.IsSuitableTypeExportAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>Returns TRUE when assembly could export some types.</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.IsSuitableTypeExportAssembly(System.Reflection.Assembly)">
            <summary>Returns TRUE when assembly could export some types.</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.Refresh">
            <summary>Refreshes the substitution classes (design time only).</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.GetSubstitutedTypes(System.Type,System.Type)">
            <summary>Returns all types substituted for t.</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.Substitute(System.Type,System.Type)">
            <summary>Returns the substitution class.</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.GetSubstitutionSources(System.Type)">
            <summary>Returns substituion tables for specific graph, root graph and dynamic</summary>
        </member>
        <member name="M:PX.Data.PXSubstManager.Register(System.Type,System.Collections.Hashtable)">
            <summary>
            Registers specified class into the substitution engine
            </summary>
        </member>
        <member name="T:PX.Data.PXSubstituteAttribute">
            <summary>Indicates that the derived DAC should replace its base DACs
            in a specific graph or all graphs.</summary>
            <remarks>The attribute is placed on the definition of a DAC that is
            derived from another DAC. The attribute is used primarily to make the
            declarative references of the base DAC in definitions of calculations
            and links from child objects to parent objects be interpreted as the
            references of the derived DAC.</remarks>
            <example>
            The code below shows the use of the <tt>PXSubstitute</tt> attributes
            on the <tt>APInvoice</tt> DAC.
            <code>
            [System.SerializableAttribute()]
            [PXSubstitute(GraphType = typeof(APInvoiceEntry))]
            [PXSubstitute(GraphType = typeof(TX.TXInvoiceEntry))]
            [PXPrimaryGraph(typeof(APInvoiceEntry))]
            public partial class APInvoice : APRegister, IInvoice
            { ... }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSubstituteAttribute.#ctor">
            <summary>
            Initializes a new instance of the attribute. Without explicitly
            set properties, the attribute will cause all base DACs to be
            replaced with the derived DAC in all graphs.
            </summary>
        </member>
        <member name="P:PX.Data.PXSubstituteAttribute.GraphType">
            <summary>Gets or sets the specific graph in which the derived DAC
            replaces base DACs.</summary>
        </member>
        <member name="P:PX.Data.PXSubstituteAttribute.ParentType">
            <summary>Gets or sets the base DAC type up to which all types in the
            inheritance hierarchy are substituted with the derived DAC. By
            default, the property has the null value, which means that all base
            DACs are substituted with the derived DAC.</summary>
        </member>
        <member name="T:PX.Data.PXBreakInheritanceAttribute">
            <summary>When placed on a derived data access class (DAC), indicates
            that the cache objects corresponding to the base DACs should not be
            instantiated.</summary>
            <example>
            In the example below, the attribute prevents instantiation of the
            <tt>INItemStats</tt> cache during instantiation of the
            <tt>INItemStatsTotal</tt> cache.
            <code>
            [PXBreakInheritance]
            [Serializable]
            public partial class INItemStatsTotal : INItemStats
            {
            ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.BqlTablePair">
            <exclude/>
        </member>
        <member name="F:PX.Data.BqlTablePair.VersionedModified">
            <summary>
            CopyOfItem - contains prev version of record. If Null - record was inserted after version was created
            Status - status of record in moment when version was created
            Was Changed - indicates if it was any Update on record
            </summary>
        </member>
        <member name="P:PX.Data.BqlTablePair.IsInserted">
            <summary>
            This field is for Push Notifications. It should be set only if this is record from temporal table.
            </summary>
        </member>
        <member name="T:PX.Data.PXWeakReference">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXWeakKeyComparer">
            <exclude/>
        </member>
        <member name="T:PX.Data.DictionarySerializable`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCacheCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCacheUniqueForTypeCollection">
            <summary>
            This cache collection contains separate caches for each item type regardless of inheritance.
            </summary>
        </member>
        <member name="T:PX.Data.PXViewCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTypedViewCollection">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXTypedViewCollection._NonstandardViews">
            <summary>
            Contains entries not stored between callbacks
            </summary>
        </member>
        <member name="T:PX.Data.PXActionCollection">
            <summary>
            Represents a collection of ordered actions. 
            </summary>
            <remarks>In this collection, you can access an action by the name of the PXAction member that defines the action.</remarks>
        </member>
        <member name="M:PX.Data.PXActionCollection.PressSave">
            <summary>
            Calls the Save action to save changes in the database.		
            </summary>
            <remarks>
            We do not recommended that you use this method in a long-running workflow action.
            Instead, use the <tt>Save.Press()</tt> method of the current graph.		
            </remarks>
        </member>
        <member name="T:PX.Data.PXFieldCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXQueryResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMutableCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.SelectCacheEntry">
            <exclude/>
        </member>
        <member name="T:PX.Data.SelectCacheEntry.Parameters">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXViewQueryCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphQueryCacheCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSelectOperationContext">
            <exclude/>
        </member>
        <member name="T:PX.Data.Events">
            <exclude/>
        </member>
        <member name="T:PX.Data.Events.ArgsConverter`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Events.ArgsConverter`2.EventDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionManager">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionManager.GraphKind">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionManager.ListOfTypes">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXExtensionManager.IsGraphExtensionGenericTemplate(System.Type)" -->
        <member name="M:PX.Data.PXExtensionManager.GetExtendedType(System.Type)">
            <summary>
            For <see cref="T:PX.Data.PXGraphExtension"/> or <see cref="T:PX.Data.PXCacheExtension"/>, returns the original type they are extending.
            </summary>
            <param name="extension">Extension type.</param>
            <returns>The original type being extended; <see langword="null"/> otherwise.
            If <paramref name="extension"/> is not an extension type, <see langword="null"/> is returned.</returns>
        </member>
        <member name="T:PX.Data.ILInstruction">
            <exclude/>
        </member>
        <member name="T:PX.Data.ILReader">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXAppCodeTypeBinder">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCodeDirectoryCompiler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCodeDirectoryCompiler.CacheEntry">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionComparer">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtensionComparer.DegreeOfRelation">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph">
            <summary>
            	<para>The base type that defines the common interface of business logic controllers (graphs), which you should derive from either <tt>PXGraph&lt;TGraph&gt;</tt>
            or <tt>PXGraph&lt;TGraph, TPrimary&gt;</tt>.</para>
            	<para>Each webpage references a graph (through the <tt>PXDatasource</tt> control). An instance of this graph is created and destroyed on each user's request,
            while the modified data records are preserved between requests in the session.</para>
            </summary>
            <remarks>Each webpage references a graph (through the
            <tt>PXDatasource</tt> control). An instance of this graph is created
            and destroyed on each user's request, while the modified data records
            are preserved between requests in the session.</remarks>
        </member>
        <member name="T:PX.Data.PXGraph.StatePrefixScope">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.CreateInstance``1">
            <summary>Initializes a new graph instance of the specified type and
            extension types if the customization exists. This method provides a
            preferred way of initializing a graph. The graph type is specified in
            the type parameter.</summary>
            <example>
            The code below initializes an instance of the <tt>JournalEntry</tt>
            graph.
            <code>
            JournalEntry graph = PXGraph.CreateInstance&lt;JournalEntry&gt;();</code>
            </example>
        </member>
        <member name="M:PX.Data.PXGraph.CreateInstance``1(System.String)">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.IsGraphReusingEnabled">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.IsReusableGraph">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.IsCreatedFromSession">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.ReuseCount">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.ShouldSaveVersionModified">
            <exclude/>
        </member>
        <!-- Badly formed XML comment ignored for member "F:PX.Data.PXGraph.IsInVersionModifiedState" -->
        <member name="F:PX.Data.PXGraph.CreateTime">
            <summary>
            Holds the time when the graph instance was created.
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.RestrictViewFields(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Restricts query fields for view.</summary>
            <param name="view">view name</param>
            <param name="fields">bql fields</param>
        </member>
        <member name="M:PX.Data.PXGraph.RestrictViewFields(System.String,System.Type[])">
            <summary>Restricts query fields for view.</summary>
            <param name="view">view name</param>
            <param name="fields">bql fields</param>
        </member>
        <member name="M:PX.Data.PXGraph.RestrictViewFields(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.CreateInstance(System.Type)">
            <summary>Initializes a new graph instance of the specified type and
            extension types if the customization exists. This method provides a
            preferred way of initializing a graph.</summary>
            <param name="graphType">A type derived from <tt>PXGraph</tt>.</param>
        </member>
        <member name="P:PX.Data.PXGraph.ProxyIsActive">
            <summary>
            When owner web page created in some artifical context. 
            For example WSDL generation or screen information extraction.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.GeneratorIsActive">
            <summary>
            When owner web page created in some artifical context. 
            For example test proxy generation.
            </summary>
        </member>
        <member name="T:PX.Data.PXGraph._InitializeDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.AlteredState">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.InitGraphStaticInfo(System.Type,System.Collections.Generic.List{System.Type},System.Collections.Generic.Dictionary{System.String,System.Type},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes and populates GraphStaticInfo, more specifically wrapper type and
            and method to initialize graph views, actions and to subscribe event handlers
            </summary>
            <param name="tgraph">Type of the business object</param>
            <param name="extensions">List of extension types for tgraph</param>
            <param name="inactiveViews">Inactive views for tgraph</param>
            <param name="inactiveActions">Inactive actions for tgraph</param>
            <returns>GraphStaticInfo</returns>
        </member>
        <member name="T:PX.Data.PXGraph.FieldInfoComparer">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.IsImport">
            <summary>Indicates (if set to <tt>true</tt>) that the import and export engine is working. That is, the field is <tt>true</tt> during the submission or retrieval of
            data with the import scenarios, the export scenarios, the web services API, the copy-and-paste functionality, or the mobile application.</summary>
        </member>
        <member name="F:PX.Data.PXGraph.IsExport">
            <summary>Indicates (if set to <tt>true</tt>) that the export engine is working. That is, the field is <tt>true</tt> during the retrieval of data with the export
            scenarios, the web services API, the copy-and-paste functionality, or the mobile application.</summary>
            <remarks>
              <para>During the data export, the <see cref="F:PX.Data.PXGraph.IsImport" /> field is <tt>true</tt> as well. Therefore, you need to check the following conditions to check which
            operation is performed:</para>
              <list type="bullet">
                <item>If you need to check that the data export is performed: <tt>(graph.IsImport &amp;&amp; graph.IsExport)</tt></item>
                <item>If you need to check that the data import is performed: <tt>(graph.IsImport &amp;&amp; !graph.IsExport)</tt></item>
                <item>If you need to check that either the data import or the data export is performed: <tt>(graph.IsImport)</tt></item>
              </list>
            </remarks>
        </member>
        <member name="F:PX.Data.PXGraph.IsMobile">
            <summary>Indicates (if set to <tt>true</tt>) that the request has come from the Acumatica mobile application.</summary>
        </member>
        <member name="F:PX.Data.PXGraph.IsContractBasedAPI">
            <summary>Indicates (if set to <tt>true</tt>) that the request has come from the contract-based API.</summary>
        </member>
        <member name="P:PX.Data.PXGraph.IsImportFromExcel">
            <summary>Indicates (if set to <tt>true</tt>) that a user uploads records to a grid from an Excel file.</summary>
        </member>
        <member name="F:PX.Data.PXGraph.IsCopyPasteContext">
            <summary>Indicates (if set to <tt>true</tt>) that the copy-and-paste functionality is working.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.CopyPasteGetScript(System.Boolean,System.Collections.Generic.List{PX.Api.Models.Command},System.Collections.Generic.List{PX.Api.Models.Container})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.AdjustApiScript(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.List{PX.Data.Description.FieldInfo}}})">
            <summary>
            Permits to reorder or adjust containers and fields of the form metadata for the Contract-Based API.
            </summary>
            <param name="fieldsByView">List returned by the form metadata collector. It can be modified inside the method.</param>
            <returns>Resulting list that will be used by the Contract-Based API.</returns>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.CopyPasteCommitChanges(System.String,System.Collections.Specialized.OrderedDictionary,System.Collections.Specialized.OrderedDictionary)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXGraph.Accessinfo">
            <summary>Gets an instance of the <tt>AccessInfo</tt> DAC, which
            contains some application settings of the current user, such as the
            branch ID, user ID and name, webpage ID, and other settings. The
            fields of this DAC can be referenced in BQL statements through the
            <tt>Current</tt> parameter. For example,
            <tt>Current&lt;AccessInfo.branchID&gt;</tt>.</summary>
        </member>
        <member name="P:PX.Data.PXGraph.UID">
            <summary>Gets or sets the uniquer identifier that is used for setting
            up the processing operations.</summary>
        </member>
        <member name="P:PX.Data.PXGraph.Culture">
            <summary>Gets or sets the culture information.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.SetOffline">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.SetValueExt(System.String,System.Object,System.String,System.Object)">
            <summary>Sets the value of the specified field in the data record. The
            method relies on the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,
            string, object)</see> method of the cache related to the data
            view.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="data">The data record to update as an instance of the DAC
            or <tt>IDictionary</tt> of field names and field values.</param>
            <param name="fieldName">The name of the field to update.</param>
            <param name="value">The new value for the field.</param>
        </member>
        <member name="M:PX.Data.PXGraph.SetValue(System.String,System.Object,System.String,System.Object)">
            <summary>Sets the value of the field by field name in the data record
            without raising any events. The method relies on the <see
            cref="M:PX.Data.PXCache`1.SetValue(System.Object,System.String,System.Object)">SetValue(object,
            string, object)</see> method of the cache related to the data
            view.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="data">The data record to update.</param>
            <param name="fieldName">The name of the field to update.</param>
            <param name="value">The new value for the field.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetValueExt(System.String,System.Object,System.String)">
            <summary>Gets the value or the <tt>PXFieldState</tt> object of the
            specified field in the data record. The method relies on the <see
            cref="M:PX.Data.PXCache`1.GetValueExt(System.Object,System.String)">GetValueExt(object,
            string)</see> method of the cache related to the data view.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="data">The data record from the cache related to the data
            view.</param>
            <param name="fieldName">The name of the field whose value or state is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetStateExt(System.String,System.Object,System.String)">
            <summary>Gets the value as the <tt>PXFieldState</tt> object of the
            specified field in the data record. The method relies on the <see
            cref="M:PX.Data.PXCache`1.GetStateExt(System.Object,System.String)">GetStateExt(object,
            string)</see> method of the cache.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="data">The data record from the cache related to the data
            view.</param>
            <param name="fieldName">The name of the field whose state is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetValue(System.String,System.Object,System.String)">
            <summary>Gets the value of the specified field in the data record
            without raising any events. The method relies on the <see
            cref="M:PX.Data.PXCache`1.GetValue(System.Object,System.String)">GetValue(
            object, string)</see> method of the cache related to the data
            view.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="data">The data record from the cache related to the data
            view.</param>
            <param name="fieldName">The name of the field whose value is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetFieldNames(System.String)">
            <summary>Returns the names of all fields from all DACs referenced by
            the BQL command of the data view.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetAttributes(System.String,System.String)">
            <summary>Gets all instances of attributes placed on the specified
            field from the cache related to the data view. The method relies on
            the <see
            cref="M:PX.Data.PXCache`1.GetAttributes(System.String)">GetAttributes(string)</see>
            method of the cache.</summary>
            <param name="viewName">The name of the data view.</param>
            <param name="name">The name of the field whose attributes are
            returned. If <tt>null</tt>, the attributes from all fields are
            returned.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetStatus(System.String)">
            <summary>Returns the status of the <tt>Current</tt> data record of the
            cache related to the data view. If the <tt>Current</tt> property of
            the cache is <tt>null</tt>, the method returns the <tt>Notchanged</tt>
            status.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetItemType(System.String)">
            <summary>Returns the type of the first DAC referenced by the data
            view.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="T:PX.Data.PXGraph.GetDefaultDelegate">
            <summary>
            Delegate to get default current item
            </summary>
            <returns>Data item</returns>
        </member>
        <member name="F:PX.Data.PXGraph.Defaults">
            <summary>
            Collection of the delegates to get default current items
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.GetDefault``1">
            <summary>
            Gets default current item
            </summary>
            <typeparam name="TNode">Type of the data item</typeparam>
            <returns>Data item</returns>
        </member>
        <member name="P:PX.Data.PXGraph.TimeStamp">
            <summary>Gets or sets the value of the global timestamp.</summary>
        </member>
        <member name="F:PX.Data.PXGraph.Caches">
            <summary>
            The dictionary that maps DACs to the related cache objects.
            An access to the indexer [] of this collection implicitly
            adds an element to the dictionary if the appropriate element
            does not exist.
            </summary>
            <example>
            The example below shows how the <tt>Caches</tt> property can
            be used to access cache objects of particular DAC type.
            <code>
            // The constructor of the APReleaseProcess graph 
            public APReleaseProcess()
            {
                ...
                PXDBDefaultAttribute.SetDefaultForUpdate&lt;APAdjust.adjgFinPeriodID&gt;(
                    Caches[typeof(APAdjust)], null, false);
            
                ...
                PXDBDefaultAttribute.SetDefaultForUpdate&lt;APTran.finPeriodID&gt;(
                    Caches[typeof(APTran)], null, false);
            }
            </code>
            </example>
        </member>
        <member name="F:PX.Data.PXGraph.Actions">
            <summary>
            The collection of actions defined in the graph.
            </summary>
            <example>
            One of the typical uses of the <tt>Actions</tt> is to save
            changes to the database by invoking the <tt>PressSave()</tt>
            methods as the following code of an action shows. Here, you save current
            changes before starting a background operation.
            <code>
            public PXAction&lt;SalesOrder&gt; Approve;
            [PXProcessButton]
            [PXUIField(DisplayName = "Approve")]
            protected virtual IEnumerable approve(PXAdapter adapter)
            {
                Actions.PressSave();
                SalesOrder order = Orders.Current;
                // Starting a background operation
                PXLongOperation.StartOperation(this, delegate()
                {
                    // Background code
                    SalesOrderEntry graph = PXGraph.CreateInstance&lt;SalesOrderEntry&gt;();
                    graph.ApproveOrder(order);
                });
                return adapter.Get();
            }
            </code>
            </example>
        </member>
        <member name="F:PX.Data.PXGraph.Views">
            <summary>
            The collection of data views defined in the graph.
            </summary>
        </member>
        <member name="F:PX.Data.PXGraph.ViewNames">
            <summary>
            The dictionary that allows getting the name of the data view
            by the corresponding <tt>PXView</tt> object.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.IsProcessing">
            <summary>
            Indicates (if set to <tt>true</tt>) that the <b>Processing</b> dialog box is displayed on the processing page. 
            You override this property in a processing graph to not display the <b>Processing</b> dialog box on the processing page.
            </summary>
            <value>If the value is <tt>false</tt>, the progress and the result of the processing are displayed on the page toolbar.
            By default, the value is <tt>true</tt> (the <b>Processing</b> dialog box is displayed).</value>
            <example>The following example shows the property overriden in a custom <tt>SalesOrderProcess</tt> graph.
            <code>
            public class SalesOrderProcess : PXGraph&lt;SalesOrderProcess>
            {
                ...
                public override bool IsProcessing
                {
                    get { return false; }
                    set { }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXGraph.GetExtension``1">
            <summary>Returns the instance of the graph extension of the specified
            type. The type of the extension is specified in the type
            parameter.</summary>
            <example>
            An extension of a graph is a class that derives from the
            <tt>PXGraphExtension&lt;&gt;</tt> type. The example below shows the
            definition of an extension on the <tt>InventoryItemMaint</tt> graph.
            <code>
            public class InventoryItemMaintExtension :
                PXGraphExtension&lt;InventoryItemMaint&gt;
            {
                public void SomeMethod()
                {
                    // The Base variable references the instance of InventoryItemMaint
                    InventoryItemMaintExtension ext =
                        Base.GetExtension&lt;InventoryItemMaintExtension&gt;();
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXGraph.TypedViews">
            <summary>
            The collection of <tt>PXView</tt> objects indexed by the first
            DACs referenced by the corresponding BQL commands.
            </summary>
        </member>
        <member name="F:PX.Data.PXGraph.AutomationView">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.AutomationStep">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.WorkflowID">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.WorkflowStepID">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.AutomationStepOriginal">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.UnattendedMode">
            <summary>
            UnattendedMode = !PXPreserveScope.IsScoped();
            Do not automatically loads data from session in constructor
            </summary>
            <exclude/>
        </member>
        <member name="F:PX.Data.PXGraph.IsSessionReadOnly">
            <summary>
            Do not allows graph to Unload or Clear data to session.
            </summary>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.GetViewNames">
            <summary>Retrieves the names of all data views defined in the
            graph.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.GetSortColumns(System.String)">
            <summary>Returns pairs of the names of the fields by which the data
            view result will be sorted and values indicating if the sort by the
            field is descending.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="F:PX.Data.PXGraph.IsRestricted">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.GraphStaticInfo">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.#ctor">
            <summary>The <tt>PXGraph</tt> constructor is not called directly. To initialize a new instance of the <tt>PXGraph</tt> or <tt>PXGraph&lt;&gt;</tt> class, use the
            <tt>CreateInstance&lt;&gt;()</tt> method. Classes that derive from <tt>PXGraph&lt;&gt;</tt> (graphs) can define their own constructors without parameters to
            perform layout configuration or configure background processing operations.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.CreateCacheCollection">
            <summary>
            Returns new cache collection instance.
            IMPORTANT NOTE: THIS METHOD HAS TO BE PURE BECAUSE IT IS CALLED FROM THE CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.CreateViewCollection">
            <summary>
            Returns new view collection instance.
            IMPORTANT NOTE: THIS METHOD HAS TO BE PURE BECAUSE IT IS CALLED FROM THE CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.SelectTimeStamp">
            <summary>Retrieves the timestamp value from the database and stores
            this value in the <tt>TimeStamp</tt> property of the graph.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.ExecuteSelect(System.String,System.Object[],System.Object[],System.String[],System.Boolean[],PX.Data.PXFilterRow[],System.Int32@,System.Int32,System.Int32@)">
            <summary>Executes the specified data view and returns the data records
            the data view selects.</summary>
            <remarks>
            <para>The method raises the <tt>RowSelected</tt> event for each
            retrieved data record and sets the <tt>Current</tt> property of the
            cache to the last data record retrieved.</para>
            <para>The method is used by the user interface. The application code
            does not typically need to use this method and selects the data
            directly through the data views.</para>
            </remarks>
            <param name="viewName">The name of the data view.</param>
            <param name="parameters">Parameters for the BQL command.</param>
            <param name="searches">The values by which the data is
            filtered.</param>
            <param name="sortcolumns">The fields by which the if sorted and
            filtered (the filtering values are provided in the <tt>searches</tt>
            parameter)</param>
            <param name="(ref) startRow(ref)startRow">The index of the data record to start
            retreiving with (after filtering by the <tt>searches</tt>
            parameter).</param>
            <param name="maximumRows">The maximum number of data records to
            retrieve.</param>
            <param name="(ref) totalRows(ref)totalRows">The total amount of data records in the
            resultset.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ExecuteSelect(System.String,System.Object[],System.Object[],System.Object[],System.String[],System.Boolean[],PX.Data.PXFilterRow[],System.Int32@,System.Int32,System.Int32@)">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXGraph.PrimaryView">
            <summary>
            Gets the name of the primary data view.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.PrimaryItemType">
            <summary>
            Gets the type of the primary view DAC.
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.ExecuteUpdate(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Object[])">
            <summary>Updates a data record in the cache related to the data view
            by invoking the <see
            cref="M:PX.Data.PXCache`1.Update(System.Collections.IDictionary,System.Collections.IDictionary)">Update(IDictionary,IDictionary)</see>
            method on the cache. Returns 1 in case of successful update and 0
            otherwise.</summary>
            <remarks>The method is used by the user interface.</remarks>
            <param name="viewName">The name of the data view.</param>
            <param name="keys">The keys that identify the data record.</param>
            <param name="values">The new values of the data record fields.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ExecuteDelete(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Object[])">
            <summary>Deletes the data record from the cache related to the data
            view by invoking the <see
            cref="M:PX.Data.PXCache`1.Delete(System.Collections.IDictionary,System.Collections.IDictionary)">Delete(IDictionary,IDictionary)</see>
            method on the cache. Returns 1 in case of successful deletion and 0
            otherwise.</summary>
            <remarks>The method is used by the user interface.</remarks>
            <param name="viewName">The name of the data view.</param>
            <param name="keys">The keys that identify the data record.</param>
            <param name="values">The values of the data record fields.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ExecuteInsert(System.String,System.Collections.IDictionary,System.Object[])">
            <summary>Inserts a new data record into the cache related to the data
            view by invoking the <see
            cref="M:PX.Data.PXCache`1.Insert(System.Collections.IDictionary)">Insert(IDictionary)</see>
            method on the cache. Returns 1 in case of successful insertion and 0
            otherwise.</summary>
            <remarks>The method is used by the user interface.</remarks>
            <param name="viewName">The name of the data view.</param>
            <param name="values">The values to populates the data record fields
            .</param>
        </member>
        <member name="M:PX.Data.PXGraph.Unload">
            <summary>Stores the graph state and the modified data records from all
            caches to the user session.</summary>
            <remarks>The instance of the graph is destroyed at the end of the each
            callback. To preserve user data not saved in the database between
            callbacks, the caches of modified data record are serialized to the
            session using this method.</remarks>
        </member>
        <member name="T:PX.Data.PXGraph.ContextViewDescriptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.ContextFieldDescriptor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.SetContextHeaderFields(System.Type[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.SetContextFields(PX.Data.PXGraph.ContextFieldDescriptor[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.GetContextValue``1">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.GetContextValue(System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.GetContextViewDescriptor">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.Load">
            <summary>Loads the state of the graph and caches from the
            session.</summary>
            <remarks>The state is stored in the session through the <see
            cref="M:PX.Data.PXGraph.Unload">Unload()</see>
            method.</remarks>
        </member>
        <member name="M:PX.Data.PXGraph.Clear">
            <summary>Clears the graph state stored in the session by clearing the
            data from each cache.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.Clear(PX.Data.PXClearOption,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.Clear(PX.Data.PXClearOption)">
            <summary>
            Clears graph state inside the session
            </summary>
        </member>
        <member name="E:PX.Data.PXGraph.OnBeforePersist">
            <summary>
            Event raised from Persist method
            </summary>
            <exclude/>
        </member>
        <member name="E:PX.Data.PXGraph.OnBeforeCommit">
            <summary>
            Event raised from Persist method right before completing transaction
            </summary>
            <exclude/>
        </member>
        <member name="E:PX.Data.PXGraph.OnAfterPersist">
            <summary>
            Event raised from Persist method after it's completion.
            </summary>
            <exclude />
        </member>
        <member name="E:PX.Data.PXGraph.OnClear">
            <summary>
            Event raised from Clear method
            </summary>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.Persist">
            <summary>Saves the modified data records kept in the caches to the
            database.</summary>
            <remarks>
            <para>All data records are saved within a single transaction context.
            The method takes into account only the caches from the <tt>Views.Caches</tt> collection.</para>
            <para>The method divides the caches into two groups:</para>
            <list type="number">
             <item>Caches that store records of DACs that either are not marked with the <see cref="T:PX.Data.PXDBInterceptorAttribute"/>
             attribute (or its descendant), or whose <see cref="T:PX.Data.PXDBInterceptorAttribute"/> attribute
             has the <tt>PersistOrder</tt> property not equal to <tt>PersistOrder.AtTheEndOfTransaction</tt>.</item>
             <item>Caches that store records of DACs whose <see cref="T:PX.Data.PXDBInterceptorAttribute"/> attribute
             has the <tt>PersistOrder</tt> property equal to <tt>PersistOrder.AtTheEndOfTransaction</tt>.</item>
            </list>
            <para>Then the method saves the data records (first from the first group,
            then from the second) in the following order:</para>
              <list type="number">
                <item>Data records with the <tt>Inserted</tt> status from all caches.</item>
                <item>Data records with the <tt>Updated</tt> status from all caches</item>
                <item>Data records with the <tt>Deleted</tt> status from all caches</item>
              </list>
              <para>The application does not typically saves the changes through this method directly. The preferred way of saving the changes to the database is to execute
            <tt>Actions.PressSave()</tt> on the graph. The <tt>PressSave()</tt> method of the <tt>Actions</tt> collection invokes the <tt>Persist()</tt> method on the
            graph and performs additional procedures.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.PXGraph.Persist(System.Type,PX.Data.PXDBOperation)">
            <summary>Saves the modifications of a particular type from the specified cache to the database. The method relies on the
            <see cref="M:PX.Data.PXCache`1.Persist(PX.Data.PXDBOperation)">Persist(PXDBOperation)</see> method of the cache.</summary>
            <param name="cacheType">The DAC type of the cache whose changes are
            saved.</param>
        </member>
        <member name="M:PX.Data.PXGraph.AllowSelect(System.String)">
            <summary>Returns the value indicating if the cache related to the data
            view allows selecting data records through the user interface. This
            flag does not affect the ability to select data records through
            code.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.AllowUpdate(System.String)">
            <summary>Returns the value indicating if the cache related to the data
            view allows updating data records through the user interface. This
            flag does not affect the ability to update a data record through
            code.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.UpdateRights(System.String)">
            <summary>Returns a value that indicates if updating of the cache
            related to the data view is allowed.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.AllowInsert(System.String)">
            <summary>Returns the value indicating if the cache related to the data
            view allows inserting data records through the user interface. This
            flag does not affect the ability to insert a data record through
            code.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.AllowDelete(System.String)">
            <summary>Returns the value indicating if the cache related to the data
            view allows deleting data records through the user interface. This
            flag does not affect the ability to delete a data record through
            code.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetUpdatable(System.String)">
            <summary>Returns the value indicating if the data view is read-only.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.GetKeyNames(System.String)">
            <summary>Returns the names of the keys fields of the cache related to
            the data view.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="M:PX.Data.PXGraph.HasException">
            <summary>Returns the value indicating if any updatable cache has an
            exception.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.GetParameterNames(System.String)">
            <summary>Returns the names of parameters of the data view by invoking
            the <see
            cref="M:PX.Data.PXView.GetParameterNames">GetParameterNames()</see>
            method on the data view.</summary>
            <param name="viewName">The name of the data view.</param>
        </member>
        <member name="P:PX.Data.PXGraph.IsDirty">
            <summary>Gets the value that indicates whether there are modified data
            records not saved to the database in the caches related to the graph
            data views. If the <tt>IsDirty</tt> property of at least one cache
            object is <tt>true</tt>, the <tt>IsDirty</tt> property of the graph is
            also <tt>true</tt>.</summary>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderSelect(PX.Data.BqlCommand,System.Int32,PX.Data.PXDataValue[])">
            <summary>Selects the specified amount of top records from the database
            table.</summary>
            <param name="command">The BQL command defining the select query to
            execute.</param>
            <param name="topCount">The number of the data record to retreive from
            the top of the data set.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderSelectSingle``1(PX.Data.PXDataField[])">
            <summary>Selects a single record from the database table. The table is
            specified as the DAC through the type parameter.</summary>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderSelectMulti``1(PX.Data.PXDataField[])">
            <summary>Selects multiple records from the database table. The table
            is specified as the DAC through the type parameter.</summary>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderInsert``1(PX.Data.PXDataFieldAssign[])">
            <summary>Performs a database insert operation. The table is specified
            as the DAC through the type parameter.</summary>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderUpdate``1(PX.Data.PXDataFieldParam[])">
            <summary>Performs a database update operation. The table is specified
            as the DAC through the type parameter.</summary>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderDelete``1(PX.Data.PXDataFieldRestrict[])">
            <summary>Performs a database delete operation. The table is specified
            as the DAC through the type parameter.</summary>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderSelectSingle(System.Type,PX.Data.PXDataField[])">
            <summary>Selects a single record from the database table.</summary>
            <param name="table">The DAC representing the table from which the data
            record is selected.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderSelectMulti(System.Type,PX.Data.PXDataField[])">
            <summary>Selects multiple records from the database table.</summary>
            <param name="table">The DAC representing the table from which the data
            records are selected.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderInsert(System.Type,PX.Data.PXDataFieldAssign[])">
            <summary>Performs a database insert operation.</summary>
            <param name="table">The DAC representing the table to which the data
            records are inserted.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderUpdate(System.Type,PX.Data.PXDataFieldParam[])">
            <summary>Performs a database update operation.</summary>
            <param name="table">The DAC representing the table from where the data
            records are updated.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderDelete(System.Type,PX.Data.PXDataFieldRestrict[])">
            <summary>Performs a database delete operation.</summary>
            <param name="table">The DAC representing the table whose records are
            deleted.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="M:PX.Data.PXGraph.ProviderEnsure(System.Type,PX.Data.PXDataFieldAssign[],PX.Data.PXDataField[])">
            <param name="table">The DAC representing the table.</param>
            <param name="values">The values.</param>
            <param name="pars">The parameters.</param>
        </member>
        <member name="E:PX.Data.PXGraph.ViewChanged">
            <summary>
            Depricated.
            Occurs when the view content has been changed. 
            </summary>
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.RaisePXGraphViewChanged(System.String)">
            <summary>
            Deprecated 
            </summary>
            <exclude/>
        </member>
        <member name="E:PX.Data.PXGraph.BeforeUnload">
            <exclude/>
        </member>
        <member name="E:PX.Data.PXGraph.Initialized">
            <summary>
            Occurs at the end of graph constructor.
            </summary>
            <exclude/>
        </member>
        <member name="E:PX.Data.PXGraph.OnPrepare">
            <summary>
            Occurs when new instance of graph is created.
            </summary>
            <exclude/>
        </member>
        <member name="P:PX.Data.PXGraph.RowSelecting">
            <summary>
            Gets the instance of <tt>RowSelectingEvents</tt> type that represents the collection of <tt>RowSelecting</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowSelected">
            <summary>
            Gets the instance of <tt>RowSelectedEvents</tt> type that represents the collection of <tt>RowSelected</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowInserting">
            <summary>
            Gets the instance of <tt>RowInsertingEvents</tt> type that represents the collection of <tt>RowInserting</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowInserted">
            <summary>
            Gets the instance of <tt>RowInsertedEvents</tt> type that represents the collection of <tt>RowInserted</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowUpdating">
            <summary>
            Gets the instance of <tt>RowUpdatingEvents</tt> type that represents the collection of <tt>RowUpdating</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowUpdated">
            <summary>
            Gets the instance of <tt>RowUpdatedEvents</tt> type that represents the collection of <tt>RowUpdated</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowDeleting">
            <summary>
            Gets the instance of <tt>RowDeletingEvents</tt> type that represents the collection of <tt>RowDeleting</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowDeleted">
            <summary>
            Gets the instance of <tt>RowDeletedEvents</tt> type that represents the collection of <tt>RowDeleted</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowPersisting">
            <summary>
            Gets the instance of <tt>RowPersistingEvents</tt> type that represents the collection of <tt>RowPersisting</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.RowPersisted">
            <summary>
            Gets the instance of <tt>RowPersistedEvents</tt> type that represents the collection of <tt>RowPersisted</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.CommandPreparing">
            <summary>
            Gets the instance of <tt>CommandPreparingEvents</tt> type that represents the collection of <tt>CommandPreparing</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.FieldDefaulting">
            <summary>
            Gets the instance of <tt>FieldDefaultingEvents</tt> type that represents the collection of <tt>FieldDefaulting</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.FieldUpdating">
            <summary>
            Gets the instance of <tt>FieldUpdatingEvents</tt> type that represents the collection of <tt>FieldUpdating</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.FieldVerifying">
            <summary>
            Gets the instance of <tt>FieldVerifyingEvents</tt> type that represents the collection of <tt>FieldVerifying</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.FieldUpdated">
            <summary>
            Gets the instance of <tt>FieldUpdatedEvents</tt> type that represents the collection of <tt>FieldUpdated</tt> event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.FieldSelecting">
            <summary>
            Gets the instance of FieldSelectingEvents type that represents the collection of FieldSelecting event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="P:PX.Data.PXGraph.ExceptionHandling">
            <summary>
            Gets the instance of ExceptionHandlingEvents type that represents the collection of ExceptionHandling event handlers related to the graph. The collection initially contains the event handlers defined in the graph, but it can be modified at run time.
            </summary>
        </member>
        <member name="F:PX.Data.PXGraph.InstanceCreated">
            <summary>
            The instance of <see cref="T:PX.Data.PXGraph.InstanceCreatedEvents">InstanceCreatedEvents</see>
            type representing the collection of <tt>InstanceCreated</tt> event handlers.
            </summary>
        </member>
        <member name="T:PX.Data.PXGraph.InstanceCreatedDelegate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.InstanceCreatedDelegate`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.InstanceCreatedSubscribers">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.InstanceCreatedSubscribers`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.InstanceCreatedEvents">
            <summary>
            Represents the colection of <tt>InstanceCreated</tt> event handlers, which are
            invoked when a new instance of the graph is initialized.
            </summary>
        </member>
        <member name="M:PX.Data.PXGraph.InstanceCreatedEvents.AddHandler``1(PX.Data.PXGraph.InstanceCreatedDelegate{``0})">
            <summary>
            Adds the provided handler to the collection for the specified graph type.
            </summary>
            <typeparam name="TGraph">The graph type.</typeparam>
            <param name="del">The handler to add to the collection.</param>
        </member>
        <member name="M:PX.Data.PXGraph.InstanceCreatedEvents.RemoveHandler``1(PX.Data.PXGraph.InstanceCreatedDelegate{``0})">
            <summary>
            Removes the provided handler from the collection for the specified graph type.
            </summary>
            <typeparam name="TGraph">The graph type.</typeparam>
            <param name="del">The handler to remove from the collection.</param>
        </member>
        <member name="T:PX.Data.PXGraph.RowSelectingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowSelectingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowSelectingEvents.Proxy">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowSelectedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowSelectedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowInsertingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowInsertingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowInsertedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowInsertedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowUpdatingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowUpdatingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowUpdatedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowUpdatedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowDeletingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowDeletingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowDeletedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowDeletedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowPersistingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowPersistingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowPersistedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.RowPersistedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.CommandPreparingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.CommandPreparingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldDefaultingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldDefaultingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldUpdatingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldUpdatingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldUpdatedEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldUpdatedEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldSelectingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldSelectingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.ExceptionHandlingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.ExceptionHandlingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldVerifyingEvents">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.FieldVerifyingEvents.Interceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph.PXDebugView">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.CanClipboardCopyPaste">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.GetCurrentEntityAsXml(PX.DbServices.Model.ImportExport.ExportTemplate)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXGraph.ImportEntitiesFromXml(System.Byte[],PX.DbServices.Model.ImportExport.RecordImportMode,PX.DbServices.Model.ImportExport.DataUploader@)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphSerializationSurrogate">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSuppressEventValidationAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph`1">
            <summary>The type that is used to derive business logic controllers
            (graphs) in the application.
            This type extends the <tt>PXGraph</tt> type with the ability to automatically initialize data views, actions, and event handlers that are defined as members in the current graph or in its base graphs.
            </summary>
            <remarks>
            	<para>This type extends the <see cref="T:PX.Data.PXGraph">PXGraph</see> type with the ability to
            automatically initialize data views, actions, and event handlers that
            are defined as members in the current graph or in its base
            graphs.</para>
            	<para>In a graph, you can define the following members:</para>
            	<list type="bullet">
            		<item>
            			<description>Data views as objects of the <see cref="T:PX.Data.PXSelect`1">PXSelect&lt;&gt;</see> type or its
            variant. The type of a data view is the BQL expression which can be
            executed by invoking the <tt>Select()</tt> or <tt>Search()</tt>
            methods.</description>
            		</item>
            		<item>
            			<description>Actions as objects of
            the <tt>PXAction</tt> type and paired by the implementation
            method.</description>
            		</item>
            		<item>
            			<description>Event
            handlers.</description>
            		</item>
            	</list>
            	<para>For a data view you can also define the optional method that
            will be executed by the Select() method to retrieve the data instead
            of the standard logic of retreiving the data.</para>
            	<para>Data views and actions must be declared as <tt>public</tt>. When
            you declare data views and actions, you do not initialize them. The
            graph initializes them automatically. The <tt>PXView</tt> objects
            initialized by the data views are available through the <see cref="F:PX.Data.PXGraph.Views">Views</see> collection of the graph. The
            actions are available through the <see cref="F:PX.Data.PXGraph.Actions">Actions</see> collection of the
            graph.</para>
            	<para>Event handlers and methods can be declared as <tt>public</tt>,
            <tt>protected</tt>, or <tt>internal</tt>. The <tt>protected
            virtual</tt> is the recommended modifier. Event handlers of particular
            type are available through the corresponding collections.</para>
            	<para>You can derive a graph from the <see cref="T:PX.Data.PXGraph`2">PXGraph&lt;TGraph,
            TPrimary&gt;</see> type to add pre-defined actions to the graph.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code below declares a graph." lang="CS">
            public class ARDocumentEnq : PXGraph&lt;ARDocumentEnq&gt;
            {
            }</code>
            	<code title="Example2" description="The type parameter is set to the graph itself.
            The code below declares a graph with a data view, an action, and an event handler." groupname="Example" lang="CS">
            public class ARDocumentEnq : PXGraph&lt;ARDocumentEnq&gt;
            {
                // The data view declaration
                public PXSelectOrderBy&lt;ARDocumentResult,
                            OrderBy&lt;Desc&lt;ARDocumentResult.docDate&gt;&gt;&gt; Documents;
             
                // The action declaration
                public PXAction&lt;ARDocumentFilter&gt; previousPeriod;
                [PXUIField(DisplayName = "Prev")]
                [PXPreviousButton]
                public virtual IEnumerable PreviousPeriod(PXAdapter adapter)
                {
                    ...
                }
             
                // The event handler declaration
                public virtual void ARDocumentFilter_RowSelected(
                    PXCache cache, PXRowSelectedEventArgs e)
                {
                    ...
                }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXGraph`2">
            <summary>
            	<para>The same as <tt>PXGraph&lt;TGraph&gt;</tt> but appends the following standard actions for the provided DAC:</para>
            	<list type="bullet">
            		<item>
            			<tt>
            				<tt>Save</tt>
            			</tt>
            		</item>
            		<item>
            			<tt>Insert</tt>
            		</item>
            		<item>
            			<tt>Edit</tt>
            		</item>
            		<item>
            			<tt>Delete</tt>
            		</item>
            		<item>
            			<tt>Cancel</tt>
            		</item>
            		<item>
            			<tt>Prev</tt>
            		</item>
            		<item>
            			<tt>Next</tt>
            		</item>
            		<item>
            			<tt>First</tt>
            		</item>
            		<item>
            			<tt>Last</tt>
            		</item>
            	</list>
            	<para>The DAC is specified in the second type parameter.</para>
            </summary>
            <example>
            	<code title="Example" description="The code below declares a graph that includes a pre-defined set of actions for the Contact DAC. If a webpage is bound to this graph, the webpage toolbar will include the action buttons, which may be used to save, insert, delete, and navigate to Contact data records selected by the primary data view (the data view defined first)." lang="CS">
            public class ContactMaint : PXGraph&lt;ContactMaint, Contact&gt;
            {
            ...
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXGraph`2.Save">
            <summary>The action that saves changes stored in the caches to the database. The code of an application graph typically saves changes through this action as well. To invoke it from code, use the PressSave() method of the Actions property.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Cancel">
            <summary>The action that discard changes to the data from the caches.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Insert">
            <summary>The action that inserts a new data record into the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Delete">
            <summary>The action that deletes the Current data record of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.CopyPaste">
            <summary>The action that is represented on the user interface by an expandable menu that includes Copy and Paste items.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.First">
            <summary>The action that navigates to the first data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Previous">
            <summary>The action that navigates to the previous data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Next">
            <summary>The action that navigates to the next data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`2.Last">
            <summary>The action that navigates to the last data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="M:PX.Data.PXGraph`2.CanClipboardCopyPaste">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraph`3">
            <summary>The same as <see cref="T:PX.Data.PXGraph`1">PXGraph&lt;TGraph&gt;</see>
            but appends the following standard actions for the provided DAC:
            <tt>Save</tt>, <tt>Insert</tt>, <tt>Edit</tt>, <tt>Delete</tt>,
            <tt>Cancel</tt>, <tt>Prev</tt>, <tt>Next</tt>, <tt>First</tt>,
            <tt>Last</tt>. The DAC is specified in the second type
            parameter. Name field for First/Last/Next/Prev buttons is specified in the third type parameter.</summary>
            <example>
            	<code title="Example" description="The code below declares a graph that includes a pre-defined set of actions for the Contact DAC." lang="CS">
            public class ContactMaint : PXGraph&lt;ContactMaint, Contact, Contact.fullName&gt;
            {
            ...
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXGraph`3.Save">
            <summary>The action that saves changes stored in the caches to the database. The code of an application graph typically saves changes through this action as well. To invoke it from code, use the PressSave() method of the Actions property.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Cancel">
            <summary>The action that discard changes to the data from the caches.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Insert">
            <summary>The action that inserts a new data record into the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Delete">
            <summary>The action that deletes the Current data record of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.CopyPaste">
            <summary>The action that is represented on the user interface by an expandable menu that includes Copy and Paste items.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.First">
            <summary>The action that navigates to the first data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Previous">
            <summary>The action that navigates to the previous data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Next">
            <summary>The action that navigates to the next data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="F:PX.Data.PXGraph`3.Last">
            <summary>The action that navigates to the last data record in the primary data view. The data record is set to the Current property of the primary cache.</summary>
        </member>
        <member name="M:PX.Data.PXGraph`3.CanClipboardCopyPaste">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphOrderBy`3">
            <summary>The same as <tt>PXGraph&lt;TGraph&gt;</tt> but appends the following standard actions for the provided DAC: <tt>Save</tt>, <tt>Insert</tt>, <tt>Edit</tt>,
            <tt>Delete</tt>, <tt>Cancel</tt>, <tt>Prev</tt>, <tt>Next</tt>, <tt>First</tt>, <tt>Last</tt>. The DAC is specified in the second type parameter. Sort
            expression for First/Last/Next/Prev buttons is specified in the third type parameter.</summary>
            <example>
            	<code title="Example" description="The code below declares a graph that includes a pre-defined set of actions for the Contact DAC." lang="CS">
            public class ContactMaint : PXGraph&lt;ContactMaint, Contact, OrderBy&lt;AscContact.createdDateTime&gt;&gt;&gt;
            {
            ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXGraphOrderBy`3.CanClipboardCopyPaste">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPreserveScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.SyScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.IPXPrepareExport">
            <summary>
            Graphs implementing this interface are able to manage how values are exported (when exporting grid).
            </summary>
        </member>
        <member name="T:PX.Data.ICaptionable">
            <exclude/>
        </member>
        <member name="T:PX.Data.StringTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.ContextFieldDescriptor`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXGraphExtension`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableMethod`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`5">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`6">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`7">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`8">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`9">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXExtendableFunction`10">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOverrideAttribute">
            <summary>Indicates that the method defined in a graph extension
            overrides a virtual method defined in the graph.</summary>
            <remarks>The attribute is placed on the declaration of a method in a graph extension. (The graph extension is a class that derives from the <tt>PXGraphExtension</tt>
            generic class, where the type parameter is set to the graph to extend.) As a result, the method overrides the graph method with the same signature. That is,
            the method is executed instead of the graph method whenever the graph method is invoked.</remarks>
            <example>
            The example below shows the declaration of a graph extension and the
            method that overrides the graph method.
            <code title="Example" description="" lang="CS">
            // The  definition of the JournalWithSubEntry graph extension
            public class JournalWithSubEntryExtension :
            PXGraphExtension&lt;JournalWithSubEntry&gt;
            {
                [PXOverride]
                public void PrepareItems(string viewName, IEnumerable items)
                {
                    ...
                }
            }</code></example>
        </member>
        <member name="T:PX.Data.PXMergeAttributesAttribute">
            <summary>
            	<para>You use the <tt>PXMergeAttributes</tt> attribute to specify for each field how to apply custom attributes to the existing ones in a DAC extension.</para>
            </summary>
            <example>
            	<code title="Example" description="For example, suppose that for the customized FieldName field, you have to add the PXDefault attribute and change the value in the PXUIFieldAttribute. Suppose the original code of the FieldName field is the following." lang="CS">
            #region FieldName 
              ...
             [PXDBDecimal(2)]
             [PXUIField(DisplayName = "Display Name")]
             public virtual decimal? FieldName
             {...}
            #endregion</code>
            	<code title="Example2" description="In the DAC extension code for the customized field, specify the Merge option, as shown below." groupname="Example" lang="CS">
            public class DACName_Extension: PXCacheExtension&lt;DACName&gt;
            {
             #region FieldName
             
              [PXMergeAttributes(Method = MergeMethod.Merge)]
             
              [PXDefault(TypeCode.Decimal, "0.0")]
              [PXUIField(DisplayName = "Name")]
             
              public string FieldName{get;set;}
             
             #endregion 
            }</code>
            	<code title="Example3" description="The system will merge attributes for the FieldName field. In the result of the merge, the FieldName field will have the following collection of attributes." groupname="Example2" lang="CS">
            ...
            [PXDBDecimal(2)]
            [PXDefault(TypeCode.Decimal, "0.0")]
            [PXUIField(DisplayName = "Name")]
            public virtual decimal? FieldName
            {...}</code>
            </example>
        </member>
        <member name="P:PX.Data.PXMergeAttributesAttribute.Method">
            <summary>Gets or sets a merge method that was selected in the <tt>MergeMethod</tt> enumeration.</summary>
        </member>
        <member name="M:PX.Data.PXMergeAttributesAttribute.Apply(System.Collections.Generic.List{PX.Data.PXEventSubscriberAttribute},PX.Data.PXEventSubscriberAttribute[])">
            <exclude />
        </member>
        <member name="T:PX.Data.MergeMethod">
            <summary>Defines the ways attributes of the DAC and the DAC extension are merged. The enumeration is used in the <tt>PXMergeAttributes</tt> attribute.</summary>
            <remarks>
            	<para></para>
            </remarks>
        </member>
        <member name="F:PX.Data.MergeMethod.Append">
            <summary>Is used to add custom attributes to the existing ones.</summary>
        </member>
        <member name="F:PX.Data.MergeMethod.Replace">
            <summary>Forces the system to use custom attributes instead of the existing ones. This option is used by default if you do not specify the <tt>PXMergeAttributes</tt>
            attribute on the customized field.</summary>
        </member>
        <member name="F:PX.Data.MergeMethod.Merge">
            <summary>Makes the system apply the union of the custom and existing attributes to the customized field.</summary>
        </member>
        <member name="T:PX.Data.PXCustomizeBaseAttributeAttribute">
            <summary>The <tt>PXCustomizeBaseAttribute</tt> attribute is added to the field in a DAC extension for each modified parameter.</summary>
            <example>
            	<code title="Example" description="For example, to set the Enabled parameter of the PXUIField attribute of a field to false, add the following attribute to the field region of the DAC extension." lang="CS">
            [PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Enabled", false)]</code>
            	<code title="Example2" description="The following example shows how to change the Required parameter of the PXUIField attribute for the MyField field of the MyDAC data access class in the MyGraph graph extension by using the CacheAttached() event handler." groupname="Example" lang="CS">
            public class MyGraph_Extension:PXGraphExtension&lt;MyGraph&gt;
            {
            ...
             [PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Required", true)]
              protected void MyDAC_MyField_CacheAttached(PXCache cache)
              {
              }
            ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXCustomizeBaseAttributeAttribute.TargetAttribute">
            <summary>Gets the target attribute.</summary>
        </member>
        <member name="P:PX.Data.PXCustomizeBaseAttributeAttribute.PropertyName">
            <summary>Gets a property name.</summary>
        </member>
        <member name="P:PX.Data.PXCustomizeBaseAttributeAttribute.Value">
            <summary>Gets the value. </summary>
        </member>
        <member name="M:PX.Data.PXCustomizeBaseAttributeAttribute.Apply(System.Collections.Generic.List{PX.Data.PXEventSubscriberAttribute})">
            <exclude />
        </member>
        <member name="T:PX.Data.PXCustomizeSelectorColumns">
            <summary>This attribute defines a new set and order of the columns in the specified selector. You use this attribute in a DAC extension.</summary>
            <example>
            	<code title="Example" description="For example, suppose that you have to add a new column to the ItemClassID selector, which is located on the General Settings tab of the Stock Items form. The original attributes of the field are the following." lang="CS">
            #region ItemClassID 
              public abstract class itemClassID : PX.Data.BQL.BqlString.Field&lt;itemClassID>
              {
              }
              protected String _ItemClassID;
             
              [PXDBString(10, IsUnicode = true)]
              [PXUIField(DisplayName = "Item Class", Visibility = PXUIVisibility.SelectorVisible)]
              [PXSelector(typeof(Search&lt;INItemClass.itemClassID&gt;))]
              public virtual String ItemClassID
              {
                  get { return this._ItemClassID; }
                  set { this._ItemClassID = value; }
              }
            #endregion</code>
            	<code title="Example2" description="The ItemClassID selector contains two columns for the INItemClass.itemClassID and INItemClass.descr fields. The code below shows how to customize only the PXSelector attribute of the field if you need to insert a new column for the INItemClass.baseUnit field between the existing columns. The system will append attributes for the ItemClassID field because of the Append method in the PXMergeAttibutes specified in the DAC extension. In the result of the specified merge method, the ItemClassID field has all original attributes, and the PXCustomizeSelectorColumns attribute is added through the DAC extension. The selector control of the ItemClassID field has three columns, as specified in the PXCustomizeSelectorColumns attribute." groupname="Example" lang="CS">
            public class IN_InventoryItem_Extension: PXCacheExtension&lt;PX.Objects.IN.InventoryItem&gt;
            {
              #region ItemClassID    
               [PXMergeAttributes(Method = MergeMethod.Append)]
               [PXCustomizeSelectorColumns( 
                  typeof(PX.Objects.IN.INItemClass.itemClassID),
                  typeof(PX.Objects.IN.INItemClass.baseUnit),
                  typeof(PX.Objects.IN.INItemClass.descr))]
              #endregion
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXRemoveBaseAttributeAttribute">
            <summary>
            	<para>The <tt>PXRemoveBaseAttribute</tt> attribute removes the specified attribute. You use this attribute in a DAC extension.</para>
            </summary>
            <example>
            	<code title="Example" description="For example, to remove the PXUIField attribute of the field, add the following attribute to the field region of the DAC extension." lang="CS">
            [PXRemoveBaseAttribute(typeof(PXUIFieldAttribute))]</code>
            </example>
        </member>
        <member name="P:PX.Data.PXRemoveBaseAttributeAttribute.TargetAttribute">
            <summary>The attribute to be removed.</summary>
        </member>
        <member name="P:PX.Data.PXRemoveBaseAttributeAttribute.ExactType">
            <summary>
            If set to <c>false</c>, all the attributes derived from <see cref="P:PX.Data.PXRemoveBaseAttributeAttribute.TargetAttribute"/>,
            including the one which is <see cref="P:PX.Data.PXRemoveBaseAttributeAttribute.TargetAttribute"/> itself, are removed.
            Otherwise only the attribute of exact type <see cref="P:PX.Data.PXRemoveBaseAttributeAttribute.TargetAttribute"/> is removed.
            </summary>
        </member>
        <member name="M:PX.Data.PXRemoveBaseAttributeAttribute.Apply(System.Collections.Generic.List{PX.Data.PXEventSubscriberAttribute})">
            <exclude />
        </member>
        <member name="T:PX.Data.PXNonInstantiatedExtensionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.SortExtensionsBy`1">
            <summary>
            A declarative rule, used for <see cref="T:PX.Data.PXGraphExtension"/> sorting.
            </summary>
            <typeparam name="TExtensionOrder"><see cref="T:PX.Data.ExtensionOrderFor`1"/></typeparam>
        </member>
        <member name="T:PX.Data.ExtensionOrderFor`1">
            <summary>
            Defines the order for certain extensions of a certain <typeparamref name="TGraph"/>.
            </summary>
        </member>
        <member name="T:PX.Data.PXSelectBase">
            <exclude/>
        </member>
        <member name="T:PX.Data.ICacheType`1">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectBase`1">
            <summary>The base type for classes that define BQL statements, such as
            <see cref="T:PX.Data.PXSelect`1">PXSelect&lt;&gt;</see> class and its
            variants and the <see cref="T:PX.Data.PXProcessing`1">PXProcessing&lt;&gt;</see> class and
            its successors.</summary>
            <typeparam name="Table">The DAC type of the data records that the class retrieves
            from the database.</typeparam>
            <example>
            	<code title="Example" description="The code below defines a data view, extends its Where conditional expression, and executes the data view." lang="CS">
            // Definition of a data view
            PXSelectBase&lt;ARDocumentResult&gt; sel = new PXSelectReadOnly2&lt;ARDocumentResult,
                LeftJoin&lt;ARInvoice, On&lt;ARInvoice.docType, Equal&lt;ARDocumentResult.docType&gt;,
                    And&lt;ARInvoice.refNbr, Equal&lt;ARDocumentResult.refNbr&gt;&gt;&gt;,
                Where&lt;ARRegister.customerID, Equal&lt;Current&lt;ARDocumentFilter.customerID&gt;&gt;&gt;&gt;
                (this);
            ARDocumentFilter header = Filter.Current;
            // Appending a condition if BranchID is specified in the filter
            if (header.BranchID != null)
            {
                sel.WhereAnd&lt;Where&lt;ARRegister.branchID,
                    Equal&lt;Current&lt;ARDocumentFilter.branchID&gt;&gt;&gt;&gt;();
            }
            // Appending a condition if DocType is specified in the filter
            if (header.DocType != null)
            {
                sel.WhereAnd&lt;Where&lt;ARRegister.docType,
                    Equal&lt;Current&lt;ARDocumentFilter.docType&gt;&gt;&gt;&gt;();
            }
            // Execution of the data view and iteration through the result set
            foreach (PXResult&lt;ARDocumentResult, ARInvoice&gt; reg in sel.Select())
            {
                ARDocumentResult res = reg;
                ARInvoice invoice = reg;
                ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.ClearDialog">
            <summary>Clears the dialog information saved by the graph on last
            invocation of the <tt>Ask()</tt> method.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
            <remarks>
            	<para>This method and its overloads provide the interface for the
            corresponding methods of the <tt>PXView</tt> class.
            </para>
            	<para>The method can be used to display the panel configured by the
            <tt>PXSmartPanel</tt> control. In this case, the <tt>key</tt>
            parameter is set to the <tt>Key</tt> property of the control,
            <tt>refreshRequired</tt> is typically set to <tt>true</tt>, and other
            parameters are set to <tt>null</tt>. The more common way to display a
            panel is to call the AskExt(key)
            method.</para>
            	<para>Note that the method is executed asynchronously. When the method
            invocation is reached for the first time, execution of the enclosing
            method stops, and a request is send to the client to display the
            dialog. When the user clicks one of the buttons, the webpage sends a
            request to the server, and the system starts execution of the method
            that invoked <tt>Ask()</tt> one more time. This time the
            <tt>Ask()</tt> method returns the value that indicates the user's
            choice, and code execution continues.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code below defines an event handler that asks for confirmation to continue deletion of a data record." lang="CS">
            public PXSelect&lt;INComponent&gt; Components;
            protected void INComponent_RowDeleting(
                PXCache sender, PXRowDeletingEventArgs e)
            {
                if (Components.Ask("Deleting Revenue Component",
                                   "Are you sure?",
                                   MessageButtons.YesNo) != WebDialogResult.Yes)
                    e.Cancel = true;
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,`0,System.String,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,`0,System.String,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(`0,System.String,System.String,PX.Data.MessageButtons,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(`0,System.String,System.String,PX.Data.MessageButtons)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,`0,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(System.String,`0,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="key">The identifier of the dialog box (<tt>PXSmartPanel</tt>).</param>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(`0,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon,System.Boolean)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.
            The data for the dialog box can be read from the server or the cache.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <param name="refreshRequired">If <c>true</c>, the data for the dialog box is read from the server, and some or all controls of the form are refreshed.
            If <c>false</c>, the data for the dialog box is first searched in the cache.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Ask(`0,System.String,System.String,PX.Data.MessageButtons,PX.Data.MessageIcon)">
            <summary>Displays the dialog box (<tt>PXSmartPanel</tt>) with one or more choices for the user.</summary>
            <param name="row">The parameter is never used.</param>
            <param name="header">Dialog box caption.</param>
            <param name="message">The message to display in the dialog box.</param>
            <param name="buttons">A <see cref="T:PX.Data.MessageButtons">MessageButtons</see> value indicating
            the set of buttons to display in the dialog box.</param>
            <param name="icon">Dialog box icon.</param>
            <returns>The <see cref="T:PX.Data.WebDialogResult">WebDialogResult</see> value that
            indicates the clicked button.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(System.String)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. The method requests repainting of the
            panel.</summary>
            <param name="key">The identifier of the panel to display.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(System.String,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel to display.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement. The method requests
            repainting of the panel.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(PX.Data.MessageButtons)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement. The method requests
            repainting of the panel.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control. As a key, the method uses the name of
            the variable that holds the BQL statement.</summary>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(System.String,PX.Data.PXView.InitializePanel)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel to display.</param>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(System.String,PX.Data.PXView.InitializePanel,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="key">The identifier of the panel to display.</param>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(PX.Data.PXView.InitializePanel)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.AskExt(PX.Data.PXView.InitializePanel,System.Boolean)">
            <summary>Displays the dialog window configured by the
            <tt>PXSmartPanel</tt> control.</summary>
            <param name="initializeHandler">The delegate of the method that is
            called before the dialog is displayed.</param>
            <param name="refreshRequired">The value that indicates whether the
            dialog should be repainted or displayed as it was cached. If
            <tt>true</tt>, the dialog is repainted.</param>
        </member>
        <member name="P:PX.Data.PXSelectBase`1.Current">
            <summary>Gets or sets the <tt>Current</tt> property of the cache that
            corresponds to the DAC specified in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Insert">
            <summary>Inserts a new data record into the cache by invoking the
            <see cref="M:PX.Data.PXCache`1.Insert">Insert()</see>
            method on the cache. Returns the inserted data record or
            <tt>null</tt>-if the insertion fails.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Insert(`0)">
            <summary>Inserts the provided data record into the cache by invoking
            the <see cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method on the cache. Returns the inserted data record or
            <tt>null</tt>-if the insertion fails.</summary>
            <param name="item">The data record to insert.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Extend``1(``0)">
            <summary>Initializes a data record of the derived DAC from the provided data record of the base DAC and inserts the new data record into the cache. Returns the inserted
            data record.</summary>
            <param name="item">The instance of the base DAC.</param>
            <remarks>The method relies on the <see cref="M:PX.Data.PXCache`1.Extend``1(``0)">Extend&lt;Parent&gt;(Parent)</see>
            method called on the cache.</remarks>
            <example>
              <code title="Example" description="Suppose that the B DAC derives from the A DAC, as follows." lang="CS">
            [Serializable]
            public class A : IBqlTable { ... }
            [Serializable]
            public class B : A { ... }</code>
              <code title="Example2" description="The following data views can be declared in a graph." lang="CS">
            PXSelect&lt;A&gt; BaseRecords;
            PXSelect&lt;B&gt; Records;</code>
              <code title="Example3" description="The code above will result in initialization of two caches, of PXCache&lt;A&gt; and PXCache&lt;B&gt; types. The following code initializes a data record of derived type and inserts it into the cache." lang="CS">
            A baseRec = BaseRecords.Insert();
            B rec = Records.Extend&lt;B&gt;(baseRec);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Update(`0)">
            <summary>Updates the data record in the cache by invoking the
            <see cref="M:PX.Data.PXCache`1.Update(System.Object)">Update(object)</see>
            method on the cache. </summary>
            <param name="item">The data record to be updated.</param>
            <returns>Returns the updated data record.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Delete(`0)">
            <summary>Deletes the data record by invoking the
            <see cref="M:PX.Data.PXCache`1.Delete(System.Object)">Delete(object)</see>
            method on the cache. Returns the data record marked as
            deleted.</summary>
            <param name="item">The data record to delete.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Locate(`0)">
            <summary>Searches the cache for the data record that has the same key
            fields as the provided data record, by invoking the
            <see cref="M:PX.Data.PXCache`1.Locate(System.Object)">Locate(object)</see>
            method on the cache. Returns the data record if it is found in the
            cache or null otherwise.</summary>
            <param name="item">The data record that is searched in the cache by
            the values of its key fields.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SelectSingle(System.Object[])">
            <summary>Retrieves the top data record of the data set that
            corresponds to the BQL statement.</summary>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Select(System.Object[])">
            <summary>Executes the BQL statement and retrieves all matching data
            records.</summary>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SelectWithViewContext(System.Object[])">
            <summary>
            Executes the BQL statement combined with the view context (namely,
            the user defined filters, sorting settings, and records range) and retrieves all matching data records.
            </summary>
            <param name="parameters">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement. If no parameters are passed to the method,
            the <tt>PXView.Parameters</tt> array is used instead.</param>
            <returns>Data records retrieved by executing the BQL statement.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SelectWithViewContextLazy(System.Object[])">
            <summary>
            Executes the BQL statement combined with the view context (namely,
            the user defined filters, sorting settings, and records range) and returns the <tt>IEnumerable</tt>
            interface that gives access to all matching data records.
            </summary>
            <param name="parameters">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement. If no parameters are passed to the method,
            the <tt>PXView.Parameters</tt> array is used instead.</param>
            <returns>The <tt>IEnumerable</tt> interface to data records
            retrieved by executing the BQL statement.</returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.selectBound(System.Object[],System.Object[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``1(System.Object,System.Object[])">
            <summary>Searches for a data record by the value of specified field in
            the data set that corresponds to the BQL statement. The method extends
            the BQL statement with filtering and ordering by the specified field
            and retrieves the top data record.</summary>
            <param name="field0">The value of <tt>Field0</tt> by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
            <example>
            The code below finds the data record with the given reference number
            among the possible results of the data view.
            <code>
            // Defining the data view in a graph
            public PXSelect&lt;ARInvoice,
                Where&lt;ARInvoice.docType, Equal&lt;Optional&lt;ARInvoice.docType&gt;&gt;&gt;&gt; Document;
            ...
            // Search a data record with the given value of the RefNbr field
            Document.Search&lt;ARInvoice.refNbr&gt;(ardoc.RefNbr, ardoc.DocType);
            
            // The Current property is now pointing to the data record found
            // by Search&lt;&gt;(...)
            Document.Current.InstallmentCntr = Convert.ToInt16(installments.Count);
            ...</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``2(System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and sorted.</param>
            <param name="field1">The value by which the data set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``3(System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``4(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``5(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``6(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="field5">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``7(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="field5">The value by which the data set is filtered and
            sorted.</param>
            <param name="field6">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``8(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="field5">The value by which the data set is filtered and
            sorted.</param>
            <param name="field6">The value by which the data set is filtered and
            sorted.</param>
            <param name="field7">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``9(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="field5">The value by which the data set is filtered and
            sorted.</param>
            <param name="field6">The value by which the data set is filtered and
            sorted.</param>
            <param name="field7">The value by which the data set is filtered and
            sorted.</param>
            <param name="field8">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Search``10(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0">The value by which the data set is filtered and
            sorted.</param>
            <param name="field1">The value by which the data set is filtered and
            sorted.</param>
            <param name="field2">The value by which the data set is filtered and
            sorted.</param>
            <param name="field3">The value by which the data set is filtered and
            sorted.</param>
            <param name="field4">The value by which the data set is filtered and
            sorted.</param>
            <param name="field5">The value by which the data set is filtered and
            sorted.</param>
            <param name="field6">The value by which the data set is filtered and
            sorted.</param>
            <param name="field7">The value by which the data set is filtered and
            sorted.</param>
            <param name="field8">The value by which the data set is filtered and
            sorted.</param>
            <param name="field9">The value by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SearchAll``1(System.Object[],System.Object[])">
            <summary>Searches the data set that corresponds to the BQL statement
            for all data records whose fields have the specified values. The
            fields are specified in the type parameter. The method extends the BQL
            statement with filtering and ordering by the fields and retrieves all
            data records from the resulting data set.</summary>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
            <remarks>Though ordering may seem superfluous here, it is needed for
            better performance of the selection from the database.</remarks>
            <example>
            	<code title="Example" description="The code below searches the data view for all data records whose TranClass field has the G value." lang="CS">
            // Data view definition in a graph
            public PXSelect&lt;GLTran,
                Where&lt;GLTran.module, Equal&lt;Current&lt;Batch.module&gt;&gt;,
                    And&lt;GLTran.batchNbr, Equal&lt;Current&lt;Batch.batchNbr&gt;&gt;&gt;&gt;&gt; Trans;
            ...
            // Code in some method
            foreach(GLTran tran in 
                        Trans.SearchAll&lt;Asc&lt;GLTran.tranClass&gt;&gt;(new object [] {"G"}))
                ...</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SearchWindowed``1(System.Object[],System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of contiguous data records
            starting from the given position in the filtered data set. The fields
            are specified in the type parameter. The method extends the BQL
            statement with filtering and ordering by the fields and requests the
            limited numer of data records.</summary>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
            <example>
            	<code title="Example" description="The code below retrieves the first five data records whose TranClass field has the G value from the data view." lang="CS">
            // Data view definition in a graph
            public PXSelect&lt;GLTran,
                Where&lt;GLTran.module, Equal&lt;Current&lt;Batch.module&gt;&gt;,
                    And&lt;GLTran.batchNbr, Equal&lt;Current&lt;Batch.batchNbr&gt;&gt;&gt;&gt;&gt; Trans;
            ...
            // Code in some method
            PXResultset&lt;GLTran&gt; res =
                Trans.SearchWindowed&lt;Asc&lt;GLTran.tranClass&gt;&gt;(new object [] {"G"}, 0, 5);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SelectWindowed(System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of data records starting from
            the given position.</summary>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
            <example>
            	<code title="Example" description="The code below retrieves the first data record from the data set that corresponds to the BQL statement." lang="CS">
            // Initializing the data view
            PXSelectBase&lt;FinPeriod&gt; select = new PXSelect&lt;FinPeriod,
                Where&lt;FinPeriod.finYear, Equal&lt;Required&lt;FinPeriod.finYear&gt;&gt;&gt;,
                OrderBy&lt;Asc&lt;FinPeriod.periodNbr&gt;&gt;&gt;(sender.Graph);
            // Executing the data view
            FinPeriod fp = select.SelectWindowed(0, 1, DateTime.Now.Year);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereAnd``1">
            <summary>Appends a filtering expression to the BQL statement via the
            logical <tt>And</tt>. The additional filtering expression is provided in the
            type parameter.</summary>
            <typeparam name="TWhere">The additional filtering expression.</typeparam>
            <example>
              <code title="Example" description="The code below appends additional comparison to the BQL statement when the corresponding field in the filter is set to a value." lang="CS">
            // Initializing the data view
            PXSelectBase&lt;APDocumentResult&gt; sel = new PXSelect&lt;APDocumentResult,
                Where&lt;APRegister.vendorID, Equal&lt;Current&lt;APDocumentFilter.vendorID&gt;&gt;&gt;,
                OrderBy&lt;Desc&lt;APDocumentResult.docDate&gt;&gt;&gt;&gt;(this);
            // Checking whether a filter object has a value in the BranchID field
            if (Filter.Current.BranchID != null)
            {
                // Extending the Where clause with additional condition
                sel.WhereAnd&lt;Where&lt;APRegister.branchID,
                                 Equal&lt;Current&lt;APDocumentFilter.branchID&gt;&gt;&gt;&gt;();
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereAnd(System.Type)">
            <summary>Appends a filtering expression to the BQL statement via the logical <tt>And</tt>. The additional filtering expression is specified in the parameter.</summary>
            <param name="where">The additional filtering expression.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereOr``1">
            <summary>Appends a filtering expression to the BQL statement via the logical <tt>Or</tt>. The additional filtering expression is provided in the type parameter.</summary>
            <typeparam name="TWhere">The additional filtering expression.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereOr(System.Type)">
            <summary>Appends a filtering expression to the BQL statement via the logical <tt>Or</tt>. The additional filtering expression is specified in the parameter.</summary>
            <param name="where">The additional filtering expression.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.OrderByNew``1">
            <summary>Replaces the <tt>OrderBy</tt> clause if the BQL statement has
            one, otherwise the new <tt>OrderBy</tt> clause is simply attached to
            the BQL statement.</summary>
            <example>
            The code below initializes a data view as a local variable and adds
            different ordering expression depending on the value of a variable.
            <code title="Example">
            // Initialization of a data view
            PXSelectBase&lt;INLotSerialStatus&gt; cmd =
                new PXSelect&lt;INLotSerialStatus, ...&gt;(this);
            
            // Adding a different ordering expression depending on
            // a variable's value
            switch (lotSerIssueMethod)
            {
                case INLotSerIssueMethod.FIFO:
                    cmd.OrderByNew&lt;
                        OrderBy&lt;Asc&lt;INLocation.pickPriority,
                                Asc&lt;INLotSerialStatus.receiptDate,
                                Asc&lt;INLotSerialStatus.lotSerialNbr&gt;&gt;&gt;&gt;&gt;();
                    break;
                case INLotSerIssueMethod.LIFO:
                    cmd.OrderByNew&lt;
                        OrderBy&lt;Asc&lt;INLocation.pickPriority,
                                Desc&lt;INLotSerialStatus.receiptDate,
                                Asc&lt;INLotSerialStatus.lotSerialNbr&gt;&gt;&gt;&gt;&gt;();
                    break;
                ...
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.Join``1">
            <summary>Appends a joining clause to the BQL statement.</summary>
            <example>
            	<code title="Example" description="The code below appends the LeftJoin clause to the BQL statement." lang="CS">
            PXSelectBase&lt;GLTran&gt; select = new PXSelect&lt;GLTran&gt;(this);
            select.Join&lt;LeftJoin&lt;AP.APTran,
                On&lt;AP.APTran.refNbr, Equal&lt;GLTran.refNbr&gt;,
                And&lt;AP.APTran.lineNbr, Equal&lt;GLTran.tranLineNbr&gt;&gt;&gt;&gt;&gt;();</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereNot">
            <summary>Adds logical <tt>Not</tt> to the whole <tt>Where</tt> clause of the BQL statement, reversing the condition to the opposite.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.WhereNew``1">
            <summary>Replaces the filtering expression in the BQL statement. The
            new filtering expression is provided in the type parameter.</summary>
            <typeparam name="newWhere">The new filtering expression.</typeparam>
            <example>
              <code title="Example" description="The code below replaces the Where clause in a data view" lang="CS">
            // Defining the data view in a graph
            public PXSelect&lt;ARInvoice,
                Where&lt;ARInvoice.docType, Equal&lt;Current&lt;ARInvoice.docType&gt;&gt;,
                    And2&lt;Where&lt;ARInvoice.origModule, Equal&lt;BatchModule.moduleAR&gt;,
                             Or&lt;ARInvoice.released, Equal&lt;True&gt;&gt;&gt;&gt;&gt;&gt; Document;
            ...
            // Replacing the Where clause
            Document.WhereNew&lt;
                Where&lt;ARInvoice.docType, Equal&lt;Required&lt;ARInvoice.docType&gt;&gt;&gt;&gt;();
            // Getting an ARInvoice data record
            ARInvoice ardoc = (ARInvoice)resultsetRecord;
            // Executing the modified data view
            Document.Select(ardoc.DocType);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.GetItemType">
            <summary>Returns the type of the DAC provided as the type parameter of
            <tt>PXSelectBase&lt;&gt;</tt> class. For BQL statements that are
            derived from <tt>PXSelectBase&lt;&gt;</tt>, it is the first mentioned
            DAC.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreResult(PX.Data.BqlCommand,System.Boolean,PX.Data.PXGraph,System.Collections.Generic.List{System.Object},PX.Data.PXQueryParameters)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreResult(PX.Data.BqlCommand,System.Boolean,PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreResult(PX.Data.BqlCommand,System.Boolean,PX.Data.PXGraph,PX.Data.PXResult)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreResult(System.Collections.Generic.List{System.Object},PX.Data.PXQueryParameters)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreResult(PX.Data.IBqlTable)">
            <summary>
            Intercepts PXView.Select calls, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            Query parameters determined automatically from the provided selectResult
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreTailResult(PX.Data.PXResult,System.Object[],System.Object[])">
            <summary>
            Intercepts PXView.Select calls for tail view, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreTailResult(System.Collections.Generic.List{System.Object},System.Object[],System.Object[])">
            <summary>
            Intercepts PXView.Select calls for tail view, instead of querying the database, PXView.Select will immediately return synthetic result provided by this method
            The interceptor works in context of the current graph.
            For a new graph instance create a new interceptor
            </summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.StoreCached(PX.Data.PXCommandKey,System.Collections.Generic.List{System.Object})">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.SetValueExt``1(`0,System.Object)">
            <summary>Sets the value of the specified field in the given data
            record. The method relies on the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,string, object)</see>
            method of the cache.</summary>
            <param name="row">The data record whose field value is set.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`1.GetValueExt``1(`0)">
            <summary>Gets the value of the specified field for the given data
            record. The method relies on the <see
            cref="M:PX.Data.PXCache.GetValueExt``1(System.Object)">GetValueExt&lt;Field&gt;(object)</see>
            method of the cache, but unlike the cache's method always
            returns a value, not a <tt>PXFieldState</tt> object.</summary>
            <param name="row">The data record whose field value is
            returned.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.GetCommand">
            <summary>Returns the <tt>BqlCommand</tt> object representing the BLQ statement.</summary>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.#ctor(PX.Data.PXGraph)">
            <summary>Initializes a new instance of a data view bound to the
            specified graph.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to
            the specified graph and uses the provided method to retrieve
            data.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
            <param name="handler">The delegate of the method that is used to
            retrieve the data from the database (or other source). This method is
            invoked when one of the <tt>Select()</tt> methods is called.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SelectWindowed(PX.Data.PXGraph,System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of data records starting from
            the given position.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Select(PX.Data.PXGraph,System.Object[])">
            <summary>Executes the BQL statement and retrieves all matching data
            records.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="pars">The values to substitute BQL parameters, such as
            <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SelectAsync(PX.Data.PXGraph,System.Threading.CancellationToken,System.Object[])">
            <summary>Executes the BQL statement and retrieves all matching data
            records.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="pars">The values to substitute BQL parameters, such as
            <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SelectSingleBound(PX.Data.PXGraph,System.Object[],System.Object[])">
            <summary>Executes BQL command with specified parameters and currents. Selects single row.</summary>
            <param name="graph">Graph is used to cache selected results and to merge modified rows</param>
            <param name="currents">Overrides values from PXCache.Current</param>
            <param name="pars">Parameters referenced from "Optional" or "Required" BQL statement</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SelectMultiBound(PX.Data.PXGraph,System.Object[],System.Object[])">
            <summary>Executes the BQL statement with the specified values to
            substitute current object and retrieves all matching data
            records.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="currents">The objects to be used instead of the data
            records referenced by the <tt>Current</tt> property of the
            caches.</param>
            <param name="pars">The values to substitute BQL parameters, such as
            <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Select``1(PX.Data.PXGraph,System.Object[])">
            <summary>Executes the BQL statement and retrieves all matching data
            records. A specific <tt>PXResultset&lt;&gt;</tt> type can be specified
            in the type parameter. To wrap the retrieved data records, the non-
            generic <tt>Select()</tt> method uses the
            <tt>PXResultset&lt;Table&gt;</tt> type, where <tt>Table</tt> is the
            first DAC specified in the BQL statement.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="pars">The values to substitute BQL parameters, such as
            <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SelectWindowed``1(PX.Data.PXGraph,System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of data records starting from
            the given position. A specific <tt>PXResultset&lt;&gt;</tt> type can
            be specified in the type parameter.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="pars">The values to substitute BQL parameters, such as
            <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``1(PX.Data.PXGraph,System.Object,System.Object[])">
            <summary>Searches for a data record by the value of specified field in
            the data set that corresponds to the BQL statement. The method extends
            the BQL statement with filtering and ordering by the specified field
            and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``2(PX.Data.PXGraph,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
            <example>
            The code below checks whether a duplicate of the <tt>APInvoice</tt>
            data record exists by searching by the key fields.
            <code>
            APInvoice duplicate = PXSelect&lt;APInvoice&gt;.
                Search&lt;APInvoice.docType, APInvoice.refNbr&gt;(
                    this, invoice.DocType, invoice.OrigRefNbr);
            
            // If the data record exists, throw an exception
            if (duplicate != null)
                throw new PXException(ErrorMessages.RecordExists);</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``3(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``4(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``5(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``6(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="field5">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``7(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="field5">The value by which the data
            set is filtered and sorted.</param>
            <param name="field6">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``8(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="field5">The value by which the data
            set is filtered and sorted.</param>
            <param name="field6">The value by which the data
            set is filtered and sorted.</param>
            <param name="field7">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``9(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="field5">The value by which the data
            set is filtered and sorted.</param>
            <param name="field6">The value by which the data
            set is filtered and sorted.</param>
            <param name="field7">The value by which the data
            set is filtered and sorted.</param>
            <param name="field8">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Search``10(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="field0">The value by which the data
            set is filtered and sorted.</param>
            <param name="field1">The value by which the data
            set is filtered and sorted.</param>
            <param name="field2">The value by which the data
            set is filtered and sorted.</param>
            <param name="field3">The value by which the data
            set is filtered and sorted.</param>
            <param name="field4">The value by which the data
            set is filtered and sorted.</param>
            <param name="field5">The value by which the data
            set is filtered and sorted.</param>
            <param name="field6">The value by which the data
            set is filtered and sorted.</param>
            <param name="field7">The value by which the data
            set is filtered and sorted.</param>
            <param name="field8">The value by which the data
            set is filtered and sorted.</param>
            <param name="field9">The value by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SearchAll``1(PX.Data.PXGraph,System.Object[],System.Object[])">
            <summary>Searches the data set that corresponds to the BQL statement
            for all data records whose fields have the specified values. The
            fields are specified in the type parameter. The method extends the BQL
            statement with filtering and ordering by the fields and retrieves all
            data records from the resulting data set.</summary>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="pars">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SearchAll``2(PX.Data.PXGraph,System.Object[],System.Object[])">
            <summary>Searches the data set that corresponds to the BQL statement
            for all data records whose fields have the specified values.</summary>
            <remarks>The fields are specified in the <tt>Sort</tt> type parameter.
            The method extends the BQL statement with filtering and ordering by
            the fields and retrieves all data records from the resulting data set.
            A specific <tt>PXResultset&lt;&gt;</tt> type can be specified in the
            <tt>Resultset</tt> type parameter.</remarks>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="pars">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.SearchWindowed``2(PX.Data.PXGraph,System.Object[],System.Int32,System.Int32,System.Object[])">
            <summary>Searches the data set that corresponds to the BQL statement
            for the data records whose fields have the specified values. Retrieves
            the specified number of such data records starting from the given
            position.</summary>
            <remarks>The fields are specified in the <tt>Sort</tt> type parameter.
            The method extends the BQL statement with filtering and ordering by
            the fields and retrieves all data records from the resulting data set.
            A specific <tt>PXResultset&lt;&gt;</tt> type can be specified in the
            <tt>Resultset</tt> type parameter.</remarks>
            <param name="graph">The graph that is used to cache the retrieved data
            record and merge them with the modified data records.</param>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="pars">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.Clear(PX.Data.PXGraph)">
            <summary>Clears the results of BQL statement execution stored in the
            provided graph.</summary>
            <param name="graph">The graph where the data is cleared.</param>
            <example>
            	<code title="Example" description="The code below clears the query cache to load the records directly from the database (the data records are still merged with the modifications stored in the PXCache object)." lang="CS">
            // Clearing the query cache
            PXSelect&lt;CRMergeCriteria,
                Where&lt;CRMergeCriteria.mergeID, Equal&lt;Required&lt;CRMerge.mergeID&gt;&gt;&gt;&gt;.
                Clear(this);
            // Selecting data records directly from the database (not from the query
            // cache) and merging with the PXCache&lt;&gt; object
            foreach (CRMergeCriteria item in
                 PXSelect&lt;CRMergeCriteria,
                     Where&lt;CRMergeCriteria.mergeID, Equal&lt;Required&lt;CRMerge.mergeID&gt;&gt;&gt;&gt;.
                     Select(this, document.MergeID))
            {
                Criteria.Cache.Delete(item);
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelectBase`2.StoreCached(PX.Data.PXGraph,PX.Data.PXCommandKey,System.Collections.Generic.List{System.Object})">
            <summary>Stores in the caches the results of BQL statement
            execution.</summary>
            <param name="graph">The graph object whose caches are used to store
            the data records.</param>
            <param name="queryKey"></param>
            <param name="records"></param>
        </member>
        <member name="T:PX.Data.PXSelect`1">
            <summary>
            	<para>Defines a data view for retrieving a particular data set from the database and provides the interface to the cache for inserting, updating, and deleting the
            data records.</para>
            	<para>This class and other classes derived from <tt>PXSelectBase</tt> are used as a basis for building BQL statements. These classes are translated into the SQL
            <tt>SELECT</tt> statements.</para>
            </summary>
            <typeparam name="Table">Specifies a data access class (DAC) bound to a database table from which the resulting SQL query will select records.</typeparam>
            <remarks>
            	<para>A <tt>PXSelect&lt;Table&gt;</tt> object wraps the <tt>Select&lt;Table&gt;</tt> object, which represents the BQL command, and the <see cref="T:PX.Data.PXView">PXView</see> object,
            which executes this BQL command. The <tt>PXSelect&lt;Table&gt;</tt> object also holds the reference of the <see cref="T:PX.Data.PXCache`1">cache</see> of the <tt>Table</tt> data
            records and the graph.</para>
            	<para>The <tt>PXSelect&lt;Table&gt;</tt> type provides interfaces to the <tt>PXView</tt> object and the cache. So you can execute the underlying BQL command and
            invoke cache methods through the methods of the <tt>PXSelect&lt;Table&gt;</tt> class.</para>
            </remarks>
            <example>
            	<code title="Example" description="The code below shows the declaration of a data view in a graph and execution of this data view." lang="CS">
            public class VendorClassMaint : PXGraph&lt;VendorClassMaint&gt;
            {
                public PXSelect&lt;Vendor,
                    Where&lt;Vendor.vendorClassID, Equal&lt;Current&lt;VendorClass.vendorClassID&gt;&gt;&gt;&gt;
                Vendors;
                ...
                public void SomeMethod()
                {
                    // Data view execution
                    foreach (Vendor vend in Vendors.Select())
                        ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelect`1.#ctor(PX.Data.PXGraph)">
            <summary>Initializes a new instance of a data view bound to the
            specified graph.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
        </member>
        <member name="M:PX.Data.PXSelect`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to
            the specified graph and uses the provided method to retrieve
            data.</summary>
            <param name="graph">The graph with which the data view is
            associated.</param>
            <param name="handler">The delegate of the method that is used to
            retrieve the data from the database (or other source). This method is
            invoked when one of the <tt>Select()</tt> methods is called.</param>
        </member>
        <member name="T:PX.Data.PXSelect`2">
            <summary>Selects records from one table filtered by an expression set in <tt>Where</tt>. The result set is merged with the modified data records kept in the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <example>
            	<code title="Example" description="The code below shows the declaration of a data view in a graph and execution of this data view." lang="CS">
            public class VendorClassMaint : PXGraph&lt;VendorClassMaint&gt;
            {
                public PXSelect&lt;Vendor,
                    Where&lt;Vendor.vendorClassID, Equal&lt;Current&lt;VendorClass.vendorClassID&gt;&gt;&gt;&gt;
                Vendors;
                ...
                public void SomeMethod()
                {
                    // Data view execution
                    foreach (Vendor vend in Vendors.Select())
                        ...
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXSelect`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelect`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelect`3">
            <summary>Selects records from one table, filters them by an expression set in <tt>Where</tt>, and orders by fields specified in <tt>OrderBy</tt>. The result set is
            merged with the modified data records kept in the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelect`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelect`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoin`2">
            <summary>Selects records from multiple tables linked via the <tt>Join</tt> clause. The resulting data records from the main table are merged with the modified data
            records from the <tt>PXCacheT&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoin`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoin`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoin`3">
            <summary>Selects records from multiple tables linked via the <tt>Join</tt> clause and filters the result set according to expression set in Where. The resulting data
            records from the main table are merged with the modified data records from the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoin`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoin`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoinOrderBy`3">
            <summary>Defines a data view for retrieving a particular data set from
            the database and provides the interface to the cache for inserting,
            updating, and deleting the data records.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoinOrderBy`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoinOrderBy`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoin`4">
            <summary>Selects records from multiple tables. The resulting data records from the main table are merged with the modified data records from the
            <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoin`4.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoin`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectOrderBy`2">
            <summary>Selects records from one table and sorts them by fields specified in <tt>OrderBy</tt>. The result set is merged with the modified data records kept in the
            <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectOrderBy`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectOrderBy`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectOrderBy`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectOrderBy`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly`1">
            <summary>Selects records from one table without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly`1.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly`2">
            <summary>Selects records from one table without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly`3">
            <summary>Selects records from one table without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly2`2">
            <summary>Selects records from one table without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly2`3">
            <summary>Selects records from multiple tables without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly2`4">
            <summary>Selects records from multiple tables without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`4.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly2`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly3`2">
            <summary>Selects records from one table without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly3`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly3`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectReadonly3`3">
            <summary>Selects records from multiple tables without merging the result set with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectReadonly3`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectReadonly3`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectGroupBy`2">
            <summary>Selects records from the one table, grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate">
            	<tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`2.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`2.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectGroupBy`3">
            <summary>Selects records from one table, grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate">
            	<tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectGroupBy`4">
            <summary>Selects records from one table grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate">
            	<tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`4.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectGroupBy`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoinGroupBy`3">
            <summary>Defines a data view for retrieving a particular data set from
            the database and provides the interface to the cache for inserting,
            updating, and deleting the data records.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoinGroupBy`4">
            <summary>Defines a data view for retrieving a particular data set from
            the database and provides the interface to the cache for inserting,
            updating, and deleting the data records.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`4.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectJoinGroupBy`5">
            <summary>Selects records from multiple tables, grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Where">The WHERE clause.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`5.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectJoinGroupBy`5.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectGroupByOrderBy`3">
            <summary>Selects records from multiple tables, grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Aggregate"><tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectGroupByOrderBy`3.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectGroupByOrderBy`3.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXSelectGroupByOrderBy`4">
            <summary>Selects records from multiple tables, grouping and applying aggregations. The result set is not merged with the <tt>PXCache&lt;Table&gt;</tt> object.</summary>
            <typeparam name="Table">The DAC that represents the table from which
            data records are retrieved.</typeparam>
            <typeparam name="Join">Joined DACs to select from.</typeparam>
            <typeparam name="Aggregate">
            	<tt>Aggregate</tt> clause wrapping <tt>Sum</tt>,
            <tt>Avg</tt>, <tt>Min</tt>, <tt>Max</tt> or <tt>GroupBy</tt> functions.</typeparam>
            <typeparam name="OrderBy">The ORDER BY clause.</typeparam>
        </member>
        <member name="M:PX.Data.PXSelectGroupByOrderBy`4.#ctor(PX.Data.PXGraph)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXSelectGroupByOrderBy`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude />
        </member>
        <member name="T:PX.Data.InqField">
            <exclude/>
        </member>
        <member name="T:PX.Data.InqField.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.InqField.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.InqField.enabled">
            <exclude/>
        </member>
        <member name="T:PX.Data.InqField.linkCommand">
            <exclude/>
        </member>
        <member name="T:PX.Data.DataScreenBase">
            <exclude/>
        </member>
        <member name="T:PX.Data.GIDataScreen">
            <exclude/>
        </member>
        <member name="T:PX.Data.DataScreen">
            <exclude/>
        </member>
        <member name="T:PX.Data.IDataScreenFactory">
            <exclude/>
        </member>
        <member name="T:PX.Data.DataScreenFactory">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXProtectedAccessAttribute">
            <summary>
              <para>Allows to make a protected member of a graph available to be called in a graph extension.</para>
              <para>To be able to call a protected member in a graph extension, annotate the member in a graph extension with the PXProtectedAccess attribute. The member has to
            have the same signature as the corresponding member in the graph or lower-level graph extension. The framework will replace the body of the member annotated
            with PXProtectedAccess with the body of the corresponding member in the graph or lower-level graph extension.</para>
            </summary>
            <remarks>The member you want to access and the graph extension must be declared abstract.</remarks>
            <example>
              <code title="Graph Example" description="Suppose that the code of Acumatica ERP includes the following graph." lang="CS">
            public class MyGraph : PXGraph&lt;MyGraph&gt;
            {
                protected void Foo(int param1, string param2) { ... }
                protected static void Foo2() { }
                protected int Bar(MyDac dac) =&gt; dac.IntValue;
                protected decimal Prop { get; set; }
                protected double Field;
            }</code>
              <code title="Graph Extension Example" description="You can use the members in an extension of the graph, as shown in the following example." lang="CS">
            [PXProtectedAccess]
            public abstract class MyExt : PXGraphExtension&lt;MyGraph&gt;
            {
                  [PXProtectedAccess] protected abstract void Foo(int param1, string param2)
                  [PXProtectedAccess] protected abstract void Foo2();
                  [PXProtectedAccess] protected abstract int Bar(MyDac dac);
                  [PXProtectedAccess] protected abstract decimal Prop { get; set; }
                  [PXProtectedAccess] protected abstract double Field { get; set; }
                  private void Test()
                  {
                         Foo(42, "23");
                         int bar = Bar(new MyDac());
                         decimal prop = Prop;
                         Prop = prop + 12;
                         double field = Field;
                         Field = field + 15;
                  }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.OfflineHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.IOfflineSelect">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelect`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelect`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelect`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectJoin`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectJoin`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectJoin`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectOrderBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectOrderBy`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly2`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly2`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly2`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly3`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectReadonly3`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectGroupBy`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectGroupBy`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectJoinGroupBy`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.OfflineSelectJoinGroupBy`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXOrderedSelect`4">
            <summary>The class that implements the functionality that allows users to drag rows, cut and paste rows, and insert new rows in the middle of the grid. The data view
            defined with this class can include <tt>Where</tt> and <tt>OrderBy</tt> clauses.</summary>
            <typeparam name="Primary">The primary DAC in the graph.</typeparam>
            <typeparam name="Table">The DAC of the grid rows.</typeparam>
            <typeparam name="Where">The <tt>Where</tt> clause.</typeparam>
            <typeparam name="OrderBy">The <tt>OrderBy</tt> clause.</typeparam>
            <remarks>This class can be used in a graph for the grid's view.</remarks>
        </member>
        <member name="M:PX.Data.PXOrderedSelect`4.#ctor(PX.Data.PXGraph)">
            <summary>Initializes a new instance of a data view bound to the specified graph.</summary>
            <param name="graph">The graph with which the data view is associated.</param>
        </member>
        <member name="M:PX.Data.PXOrderedSelect`4.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to the specified graph and uses the provided method to retrieve data.</summary>
            <param name="graph">The graph with which the data view is associated.</param>
            <param name="handler">The delegate of the method that is used to retrieve the data from the database (or other source). This method is invoked when one of the <tt>Select()</tt>
            methods is called.</param>
        </member>
        <member name="T:PX.Data.PXOrderedSelect`5">
            <summary>The class that implements the functionality that allows users to drag rows, cut and paste rows, and insert new rows in the middle of the grid. The data view
            defined with this class can include <tt>Join</tt>, <tt>Where</tt> and <tt>OrderBy</tt> clauses.</summary>
            <typeparam name="Primary">The primary DAC in the graph.</typeparam>
            <typeparam name="Table">The DAC of the grid rows.</typeparam>
            <typeparam name="Join">The <tt>Join</tt> clause.</typeparam>
            <typeparam name="Where">The <tt>Where</tt> clause.</typeparam>
            <typeparam name="OrderBy">The <tt>OrderBy</tt> clause.</typeparam>
            <remarks>This class can be used in a graph for the grid's view.</remarks>
        </member>
        <member name="M:PX.Data.PXOrderedSelect`5.#ctor(PX.Data.PXGraph)">
            <summary>Initializes a new instance of a data view bound to the specified graph.</summary>
            <param name="graph">The graph with which the data view is associated.</param>
        </member>
        <member name="M:PX.Data.PXOrderedSelect`5.#ctor(PX.Data.PXGraph,System.Delegate)">
            <summary>Initializes a new instance of a data view that is bound to the specified graph and uses the provided method to retrieve data.</summary>
            <param name="graph">The graph with which the data view is associated.</param>
            <param name="handler">The delegate of the method that is used to retrieve the data from the database (or other source). This method is invoked when one of the <tt>Select()</tt> methods is
            called.</param>
        </member>
        <member name="T:PX.Data.PXOrderedSelectBase`2">
            <summary>The abstract class that provides the functionality that allows users to drag rows, cut and paste rows, and insert new rows in the middle of the grid.</summary>
            <typeparam name="Primary">The primary DAC in the graph.</typeparam>
            <typeparam name="Table">The DAC of the grid rows.</typeparam>
        </member>
        <member name="F:PX.Data.PXOrderedSelectBase`2.PasteLineCommand">
            <exclude />
        </member>
        <member name="F:PX.Data.PXOrderedSelectBase`2.ResetOrderCommand">
            <exclude />
        </member>
        <member name="P:PX.Data.PXOrderedSelectBase`2.RenumberTailOnDelete">
            <summary>
            Default value is TRUE. Performance customization point. Override in Initialize() method to allow gaps in numbering when record is deleted. 
            </summary>
        </member>
        <member name="M:PX.Data.PXOrderedSelectBase`2.Initialize">
            <summary>Initializes a new instance of the class and adds the actions related to sorting to the graph.</summary>
        </member>
        <member name="P:PX.Data.PXOrderedSelectBase`2.CustomComparer">
            <exclude />
        </member>
        <member name="M:PX.Data.PXOrderedSelectBase`2.RenumberAll">
            <summary>Renumbers all rows in the grid.</summary>
        </member>
        <member name="M:PX.Data.PXOrderedSelectBase`2.RenumberTail">
            <summary>Renumbers only the inserted rows in the grid.</summary>
        </member>
        <member name="M:PX.Data.PXOrderedSelectBase`2.RenumberAll(System.Collections.Generic.IComparer{PX.Data.PXResult})">
            <summary>Renumbers all rows in the grid by using the specified comparer.</summary>
            <param name="comparer">A type that defines a custom comparison of rows.</param>
        </member>
        <member name="T:PX.Data.ISortOrder">
            <summary>The interface that the DAC that corresponds to the rows of a grid must implement to make it possible for the
            <see cref="T:PX.Data.PXOrderedSelectBase`2">PXOrderedSelectBase</see>-derived classes to enumerate and reorder the rows in the grid.</summary>
            <remarks>A <see cref="T:PX.Data.PXOrderedSelectBase`2">PXOrderedSelectBase</see>-derived class should be used in a graph for the grid's view.</remarks>
        </member>
        <member name="P:PX.Data.ISortOrder.SortOrder">
            <summary>The order of a row in the grid.</summary>
            <value>
              <para>To persist the order of rows in a grid, the <tt>SortOrder</tt> property of the DAC that implements the <tt>ISortOrder</tt> interface must be mapped to the
            corresponding database column in the DAC's database table. This column stores the order of rows.</para>
              <para>The <tt>SortOrder</tt> number for a new row is defaulted by <see cref="T:PX.Data.PXOrderedSelectBase`2">PXSelectOrderBase</see>, therefore you don't need any attributes
            on the <tt>SortOrder</tt> field to default it. By default, the value of <tt>SortOrder</tt> for a new row is taken from its <tt>LineNbr</tt> field. However,
            there is a possibility to define the action on the screen that will insert new row in the middle of a grid and renumber all rows after it.</para>
            </value>
        </member>
        <member name="P:PX.Data.ISortOrder.LineNbr">
            <summary>The line number of a row in the grid.</summary>
        </member>
        <member name="T:PX.Data.PXCacheExtensionCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCacheOriginalCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCacheWeakCollection`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.ShrinkScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXBaseRedirectException.WindowMode">
            <summary>The modes of opening a page to which the exception redirects.</summary>
        </member>
        <member name="F:PX.Data.PXBaseRedirectException.WindowMode.NewWindow">
            <summary>The new window.</summary>
        </member>
        <member name="M:PX.Data.PXBaseRedirectException.Filter.#ctor(System.String)">
            <summary>
            All records will be shown; if default filter exists, it won't be applied.
            </summary>
            <param name="dataMember"></param>
        </member>
        <member name="T:PX.Data.PXRedirectRequiredException">
            <summary>Opens the specified application page in either the same window or a new one.</summary>
            <remarks>By default, the user is redirected in the same window.</remarks>
            <example>
            	<code title="Example" description="In the action handler, you create a new instance of the ProductMaint graph that is the controller for the product editing page. In the graph, you set the Current property of the Product cache to the product if it is found by the specified ID. If the current data record is set for the cache object, you throw the PXRedirectRequiredException to open the page with the current data record displayed." lang="CS">
            public PXAction&lt;SupplierFilter&gt; ViewProduct;
            [PXButton]
            protected virtual void viewProduct()
            {
                SupplierProduct row = SupplierProducts.Current;
                // Creating the instance of the graph
                ProductMaint graph = PXGraph.CreateInstance&lt;ProductMaint&gt;();
                // Setting the current product for the graph
                graph.Products.Current = graph.Products.Search&lt;Product.productID&gt;(
                row.ProductID);
                // If the product is found by its ID, throw an exception to open
                // a new window (tab) in the browser
                if (graph.Products.Current != null)
                {
                    throw new PXRedirectRequiredException(graph, true, "Product Details");
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXRedirectRequiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXRedirectWithReportException">
            <summary>The exception that opens two pages: the specified report in a new window, and the specified application page in the same window.</summary>
        </member>
        <member name="M:PX.Data.PXRedirectHelper.GetRedirectPrefix(PX.Data.PXBaseRedirectException.WindowMode,System.Boolean,PX.Data.PXGraph)">
            <summary>
            Return "RedirectX"-type prefix.
            </summary>
        </member>
        <member name="T:PX.Data.PXReportRedirectParameters">
            <summary>The redirect parameters for <see cref="T:PX.Data.PXReportRequiredException">PXReportRequiredException</see>.</summary>
        </member>
        <member name="P:PX.Data.PXReportRedirectParameters.ReportParameters">
            <summary>
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </summary>
        </member>
        <member name="P:PX.Data.PXReportRedirectParameters.ResultSet">
            <summary>The data to be used for the report generation.</summary>
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetEnumerator">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetItemType(System.Int32)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetItem(System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetTableCount">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetRowCount">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetDelayedQuery">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetCollectionType">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.GetCollection">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.UnwrapParameters(System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRedirectParameters.UnwrapSet(System.Object)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXReportRequiredException">
            <summary>The exception that opens the specified report in the same window or a new one.</summary>
            <example>
              <code title="Example" description="The following code launches a report with one parameter." lang="CS">
            public PXAction&lt;Customer&gt; printInvoice;
             
            [PXUIField(DisplayName = "Print Invoice", MapEnableRights = PXCacheRights.Select, MapViewRights = PXCacheRights.Select)]
            public virtual IEnumerable PrintInvoice(PXAdapter adapter)
            {
                Customer customer = [fetch desired customer record here];
             
                if (customer != null &amp;&amp; customer.RefNbr != null)
                {
                    // Add your report parameters to a Dictionary&lt;string, string&gt; collection.
                    // The dictionary key is the parameter name as shown in the Report Designer.
                    // The dictionary value is the value you assign to this parameter.
                    Dictionary&lt;string, string&gt; parameters = new Dictionary&lt;string, string&gt;();
                    parameters["RefNbr"] = customer.RefNbr;
             
                    // Provide the report ID
                    string reportID = "AR641000";
             
                    // Provide a title name for your report page
                    string reportName = "Customer Invoice"
             
                    // Redirect to report page by throwing a PXReportRequiredException object 
                    throw new PXReportRequiredException(parameters, reportID, reportName);
                }
             
                return adapter.Get();
            }</code>
            </example>
        </member>
        <member name="F:PX.Data.PXReportRequiredException.DeviceHubParamSeparator">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.AddSibling(System.String,PX.Data.PXReportRedirectParameters)">
            <summary>Appends the specified report with the redirect parameters to the exception.</summary>
            <param name="reportId">The report identifier, such as <em>AP654000</em>.</param>
            <param name="redirectParameters">The report parameters and the result set to be used for the report.</param>
            <remarks>You can use this method to merge multiple reports into a single one.</remarks>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.AddSibling(System.String,System.Object)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.AddSibling(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Appends the specified report with the report parameters to the exception.</summary>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="parameters">
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.AddSibling(System.String,PX.Data.IPXResultset)">
            <summary>Appends the specified report with the result set to the exception.</summary>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="resultset">The data to be used for the report generation.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.AddSibling(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>Appends the specified report with the report parameters to the exception.</summary>
            <param name="parameters">
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <example>
              <code title="Example" description="The &lt;tt&gt;AddSibling&lt;/tt&gt; method will append the reports generated for the service orders to the &lt;tt&gt;PXReportRequiredException&lt;/tt&gt; instance initially created for the first processed service order. After all selected service orders have been processed, a single &lt;tt&gt;PXReportRequiredException&lt;/tt&gt; will be thrown to redirect the user to the Report Viewer displaying all generated reports at once." lang="CS">
            public class PrintServiceOrderProcess : PXGraph&lt;PrintServiceOrderProcess&gt;
            {
                public PXCancel&lt;FSServiceOrder&gt; Cancel;
                public PXProcessing&lt;FSServiceOrder&gt; ServiceOrderRecords;
             
                public PrintServiceOrderProcess()
                {
                    ServiceOrderRecords.SetProcessDelegate(list =&gt; PrintServiceOrders(list));
                }
             
                public static void PrintServiceOrders(IEnumerable&lt;FSServiceOrder&gt; list)
                {
                    PXReportRequiredException ex = null;
                    foreach (var order in list)
                    {
                        Dictionary&lt;string, string&gt; parameters = new Dictionary&lt;string, string&gt;();
                        string srvOrdType = SharedFunctions
                            .GetFieldName&lt;FSServiceOrder.srvOrdType&gt;(true);
                        string refNbr = SharedFunctions
                            .GetFieldName&lt;FSServiceOrder.refNbr&gt;(true);
                        parameters[srvOrdType] = order.SrvOrdType;
                        parameters[refNbr] = order.RefNbr;
             
                        if (ex == null)
                        {
                            ex = new PXReportRequiredException(parameters, "SD641000", "SD641000");
                        }
                        else
                        {
                            ex.AddSibling("SD641000", parameters, false);
                        }
                    }
                    if (ex != null) throw ex;
                }
            }</code>
            </example>
            
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified data to be used for the report generation, report ID, and the title of the report page.</summary>
            <param name="resultset">The data to be used for the report generation.</param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="message">The title of the report page in the browser.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IBqlTable,System.String,System.String,PX.Common.CurrentLocalization)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IBqlTable,System.String,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified report parameters, report ID, and title of the report page.</summary>
            <param name="parameters">
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="message">The title of the report page in the browser.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified report parameters and report ID.</summary>
            <param name="parameters">
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified data to be used for the report generation, report ID, opening mode, and the title of the report page.</summary>
            <param name="resultset">The data to be used for the report generation.</param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="message">The title of the report page in the browser.</param>
            <param name="newWindow">The mode of opening the report in the browser.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,PX.Data.PXBaseRedirectException.WindowMode,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified data to be used for the report generation, report ID, and opening mode.</summary>
            <param name="resultset">The data to be used for the report generation.</param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="newWindow">The mode of opening the report in the browser.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified data to be used for the report generation and the report ID.</summary>
            <param name="resultset">The data to be used for the report generation.</param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IBqlTable,System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IPXResultset,System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(PX.Data.IBqlTable,System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization)">
            <summary>Instantiates an exception with the specified report parameters, report ID, opening mode, and the title of the report page.</summary>
            <param name="parameters">
              <para>The dictionary with report parameters. <span id="f2efad77-0698-49f8-8c0e-3648b21cde84">The dictionary key is the parameter name as shown in the Report
            Designer. The dictionary value is the value you assign to this parameter.</span></para>
            </param>
            <param name="reportID">The report identifier, such as <em>AP654000</em>.</param>
            <param name="newWindow">The mode of opening the report in the browser.</param>
            <param name="message">The title of the report page in the browser.</param>
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String,PX.Data.PXBaseRedirectException.WindowMode,System.String,PX.Common.CurrentLocalization,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXReportRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXRedirectToUrlException">
            <summary>
            	<para>Opens a webpage with the specified external URL in a new window. This exception is also used for opening an inquiry page that is loaded into the same window
            by default.</para>
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            throw new PXRedirectToUrlException(externalLink, PXBaseRedirectException.WindowMode.New, string.Empty);</code>
            </example>
        </member>
        <member name="T:PX.Data.PXPaymentRedirectException">
            <summary>Is used to invoke a hosted form for creating or editing of the information about a credit card payment.</summary>
        </member>
        <member name="M:PX.Data.PXPaymentRedirectException.#ctor(System.String,System.String,System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Instantiates an exception with the specified data. In this constructor, you can specify whether the GET HTTP method should be used to obtain a form from the
            credit card processing center.</summary>
            <param name="caption">The caption to be displayed for the form obtained from the credit card processing center.</param>
            <param name="url">The URL to obtain the form from.</param>
            <param name="useGetMethod">If set to true, makes the system use the GET HTTP method to obtain a form from the credit card processing center. If set to false, the POST HTTP method is
            used.</param>
            <param name="token">A token to access the form.</param>
            <param name="parameters">A dictionary of parameters that are necessary to access the form.</param>
        </member>
        <member name="M:PX.Data.PXPaymentRedirectException.#ctor(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Instantiates an exception with the specified data.</summary>
            <param name="caption">The caption to be displayed for the form obtained from the credit card processing center.</param>
            <param name="url">The URL to obtain the form from.</param>
            <param name="token">A token to access the form.</param>
            <param name="parameters">A dictionary of parameters that are necessary to access the form.</param>
        </member>
        <member name="P:PX.Data.PXPaymentRedirectException.Token">
            <exclude />
        </member>
        <member name="P:PX.Data.PXPaymentRedirectException.Url">
            <exclude />
        </member>
        <member name="P:PX.Data.PXPaymentRedirectException.Caption">
            <exclude />
        </member>
        <member name="P:PX.Data.PXPaymentRedirectException.UseGetMethod">
            <exclude />
        </member>
        <member name="P:PX.Data.PXPaymentRedirectException.Parameters">
            <exclude />
        </member>
        <member name="M:PX.Data.PXRedirectToGIDesignerRequiredException.GetUrl(PX.Data.PXSiteMapNode)">
            <summary>
            Returns URL for Generic Inquiry Designer with parameters for defined GI site map node.
            </summary>
            <param name="giNode"></param>
            <returns>URL; null, if Generic Inquiry Designer site map is not accessible or does not exist.</returns>
        </member>
        <member name="T:PX.Data.PXUpdate`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdate`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateJoin`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateJoin`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateGroupBy`3">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateGroupBy`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXUpdateJoinGroupBy`4">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMappedCacheExtension">
            <summary>The class that represents a mapped cache extension, which is used for implementation of reusable business logic.</summary>
        </member>
        <member name="T:PX.Data.IBqlMapping">
            <summary>The interface that mapping classes, which are used for implementation of reusable business logic, should implement.</summary>
        </member>
        <member name="P:PX.Data.IBqlMapping.Table">
            <summary>The DAC to which the mapped cache extension is mapped.</summary>
        </member>
        <member name="P:PX.Data.IBqlMapping.Extension">
            <summary>The mapped cache extension.</summary>
        </member>
        <member name="T:PX.Data.PXSelectExtension`1">
            <summary>The class that is used to define a mapping-based data view.</summary>
            <typeparam name="Table">The base DAC.</typeparam>
        </member>
        <member name="F:PX.Data.PXSelectExtension`1.BaseSelect">
            <exclude />
        </member>
        <member name="P:PX.Data.PXSelectExtension`1.Cache">
            <summary>Gets the cache that corresponds to the DAC specified in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.#ctor(PX.Data.PXSelectBase)">
            <summary>Initializes a data view based on the specified Select statement.</summary>
            <param name="baseSelect">The base Select statement.</param>
        </member>
        <member name="P:PX.Data.PXSelectExtension`1.Current">
            <summary>Gets or sets the <tt>Current</tt> property of the cache that corresponds to the DAC specified in the type parameter.</summary>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Insert">
            <summary>Inserts a new data record into the cache by invoking the
            <see cref="M:PX.Data.PXCache`1.Insert">Insert()</see>
            method on the cache. Returns the inserted data record or
            <tt>null</tt>-if the insertion fails.</summary>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Insert(`0)">
            <summary>Inserts the provided data record into the cache by invoking
            the <see cref="M:PX.Data.PXCache`1.Insert(System.Object)">Insert(object)</see>
            method on the cache. Returns the inserted data record or
            <tt>null</tt>-if the insertion fails.</summary>
            <param name="item">The data record to insert.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Extend``1(``0)">
            <summary>Initializes a data record of the derived DAC from the provided data record of the base DAC and inserts the new data record into the cache. Returns the inserted
            data record.</summary>
            <param name="item">The instance of the base DAC.</param>
            <remarks>The method relies on the <see cref="M:PX.Data.PXCache`1.Extend``1(``0)">Extend&lt;Parent&gt;(Parent)</see>
            method called on the cache.</remarks>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Update(`0)">
            <summary>Updates the data record in the cache by invoking the
            <see cref="M:PX.Data.PXCache`1.Update(System.Object)">Update(object)</see>
            method on the cache. Returns the updated data record.</summary>
            <param name="item">The updated version of the data record.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Delete(`0)">
            <summary>Deletes the data record by invoking the
            <see cref="M:PX.Data.PXCache`1.Delete(System.Object)">Delete(object)</see>
            method on the cache. Returns the data record marked as
            deleted.</summary>
            <param name="item">The data record to delete.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Locate(`0)">
            <summary>Searches the cache for the data record that has the same key
            fields as the provided data record, by invoking the
            <see cref="M:PX.Data.PXCache`1.Locate(System.Object)">Locate(object)</see>
            method on the cache. Returns the data record if it is found in the
            cache or null otherwise.</summary>
            <param name="item">The data record that is searched in the cache by
            the values of its key fields.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.SelectSingle(System.Object[])">
            <summary>Retrieves the top data record of the data set that
            corresponds to the BQL statement.</summary>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Select(System.Object[])">
            <summary>Executes the BQL statement and retrieves all matching data
            records.</summary>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.selectBound(System.Object[],System.Object[])">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``1(System.Object,System.Object[])">
            <summary>Searches for a data record by the value of specified field in the data set that corresponds to the BQL statement. The method extends the BQL statement with
            filtering and ordering by the specified field and retrieves the top data record.</summary>
            <param name="field0">The value of <tt>Field0</tt> by which the data
            set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``2(System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0, field1,field1">The values of <tt>Field0</tt> and
            <tt>Field1</tt> by which the data set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``3(System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field2-field2">The values of
            <tt>Field0</tt>-<tt>Field2</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``4(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field3-field3">The values of
            <tt>Field0</tt>-<tt>Field3</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``5(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field4-field4">The values of
            <tt>Field0</tt>-<tt>Field4</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``6(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field5-field5">The values of
            <tt>Field0</tt>-<tt>Field5</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``7(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field6-field6">The values of
            <tt>Field0</tt>-<tt>Field6</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``8(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field7-field7">The values of
            <tt>Field0</tt>-<tt>Field7</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``9(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields
            in the data set that corresponds to the BQL statement. The method
            extends the BQL statement with filtering and ordering by the specified
            fields and retrieves the top data record.</summary>
            <param name="field0 - field8-field8">The values of
            <tt>Field0</tt>-<tt>Field8</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.Search``10(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>Searches for a data record by the values of specified fields in the data set that corresponds to the BQL statement. The method extends the BQL statement with
            filtering and ordering by the specified fields and retrieves the top data record.</summary>
            <param name="field0 - field9-field9">The values of
            <tt>Field0</tt>-<tt>Field9</tt> by which the data set is filtered and
            sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.SearchAll``1(System.Object[],System.Object[])">
            <summary>Searches the data set that corresponds to the BQL statement for all data records whose fields have the specified values. The fields are specified in the type
            parameter. The method extends the BQL statement with filtering and ordering by the fields and retrieves all data records from the resulting data set.</summary>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="arguments">The values to substitute BQL parameters, such as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the BQL statement.</param>
            <remarks>Though ordering may seem superfluous here, it is needed for
            better performance of the selection from the database.</remarks>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.SearchWindowed``1(System.Object[],System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of contiguous data records
            starting from the given position in the filtered data set. The fields
            are specified in the type parameter. The method extends the BQL
            statement with filtering and ordering by the fields and requests the
            limited numer of data records.</summary>
            <param name="searchValues">The values of fields referenced in
            <tt>Sort</tt> by which the data set is filtered and sorted.</param>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.SelectWindowed(System.Int32,System.Int32,System.Object[])">
            <summary>Retrieves the specified number of data records starting from
            the given position.</summary>
            <param name="startRow">The 0-based index of the first data record to
            retrieve.</param>
            <param name="totalRows">The number of data records to
            retrieve.</param>
            <param name="arguments">The values to substitute BQL parameters, such
            as <tt>Optional</tt>, <tt>Required</tt>, and <tt>Argument</tt>, in the
            BQL statement.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.GetItemType">
            <summary>Returns the type of the DAC provided as the type parameter of <tt>PXSelectBase&lt;&gt;</tt> class. For BQL statements that are derived from
            <tt>PXSelectBase&lt;&gt;</tt>, it is the first mentioned DAC.</summary>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.SetValueExt``1(`0,System.Object)">
            <summary>Sets the value of the specified field in the given data
            record. The method relies on the <see
            cref="M:PX.Data.PXCache`1.SetValueExt(System.Object,System.String,System.Object)">SetValueExt(object,string, object)</see>
            method of the cache.</summary>
            <param name="row">The data record whose field value is set.</param>
            <param name="value">The value to set to the field.</param>
        </member>
        <member name="M:PX.Data.PXSelectExtension`1.GetValueExt``1(`0)">
            <summary>Gets the value of the specified field for the given data
            record. The method relies on the <see
            cref="M:PX.Data.PXCache.GetValueExt``1(System.Object)">GetValueExt&lt;Field&gt;(object)</see>
            method of the cache, but unlike the cache's method always
            returns a value, not a <tt>PXFieldState</tt> object.</summary>
            <param name="row">The data record whose field value is
            returned.</param>
        </member>
        <member name="P:PX.Data.Handlers.AppPath.WithSessionIdentifier">
            <returns>Application path with session segment (usually <c>W(..)</c>) appended to it.</returns>
            <seealso cref="P:System.Web.HttpRequest.ApplicationPath">HttpRequest.ApplicationPath</seealso>
            <seealso cref="M:System.Web.HttpResponse.ApplyAppPathModifier(System.String)">HttpResponse.ApplyAppPathModifier</seealso>
        </member>
        <member name="T:PX.Data.Handlers.PXEntityOpener">
            <summary>
            Performs navigation to specific screens and records from URLs containing screen IDs
            and key fields.
            </summary>
        </member>
        <member name="T:PX.Data.Handlers.FileGetter">
            <exclude/>
        </member>
        <member name="T:PX.Data.Handlers.IStreamGetterSource">
            <exclude/>
        </member>
        <member name="M:PX.Data.IPXLogin.InitBranch(System.String,System.String)">
            <summary>
            Gets default branch for username@company (see <see cref="M:PX.SM.SMAccessPersonalMaint.GetDefaultBranchId(System.String,System.String)" />),
            then sets it to context and writes to a cookie
            </summary>
        </member>
        <member name="T:PX.Data.ILocalizableValues">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXCultureSelectorAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNumberSeparatorListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation.collationName">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation.collationNameCS">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation.collationNameLatin">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation.collationNameCSLatin">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.SystemCollation.sqlDialect">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.ILocalizationFeaturesService">
            <summary>
            The service provides the information about localization features
            that aggregate data and business logic specific to a region
            and makes Acumatica ERP compliant to local market requirements.
            Localization features can include custom generic inquiries, forms, reports, dashboards,
            modifications to existing forms, business logic, etc.
            </summary>
        </member>
        <member name="M:PX.Data.Localization.ILocalizationFeaturesService.GetEnabledLocalizations">
            <summary>
            Returns localizations available on the website.
            </summary>
            <returns>A list of localizations represented by unique IDs that consist of capital letters.</returns>
        </member>
        <member name="M:PX.Data.Localization.ILocalizationFeaturesService.GetEnabledLocalization">
            <summary>
             Returns an ID of the localization that has been enabled by using the corresponding check box on the Enable/Disable Features (CS100000) form in the current tenant.
            </summary>
            <returns>The unique ID that consists of capital letters used by ILocalizationFeaturesService
            and specified as a country code following by ISO 3166-1 alpha-2.
            Returns null if no localization features are enabled for a tenant.</returns>
        </member>
        <member name="M:PX.Data.Localization.ILocalizationFeaturesService.GetLocalizationCodeForFeature(System.String)">
            <summary>
            Returns the localization that corresponds to the requested feature.
            </summary>
            <param name="feature">The name of the feature according to <see cref="P:PX.Data.PXAccessProvider.AllFeatures">PXAccessProvider</see></param>
            <returns>The unique ID of the localization that consists of capital letters</returns>
        </member>
        <member name="T:PX.Data.Localization.LocaleFormatRequest">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localization.LocaleFormatInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXActionDisabledException">
            <summary>
            Derived from PXException
            </summary>
        </member>
        <member name="T:PX.Data.PXScreenMisconfigurationException">
            <summary>
            Derived from PXException
            </summary>
        </member>
        <member name="T:PX.Data.PXActionInterruptException">
            <summary>
            The exception that interrupts the execution of a workflow action.
            </summary>
        </member>
        <member name="T:PX.Data.PXException">
            <summary>
            Derived from Exception
            </summary>
        </member>
        <member name="P:PX.Data.PXException.Message">
            <summary>
            Gets a message that describes the current exception with message number and prefix (if defined)
            </summary>
        </member>
        <member name="P:PX.Data.PXException.MessageNoNumber">
            <summary>
            Gets a message that describes the current exception with prefix (if defined), but without message number
            </summary>
        </member>
        <member name="P:PX.Data.PXException.MessageNoPrefix">
            <summary>
            Gets a message that describes the current exception without message prefix and number
            </summary>
        </member>
        <member name="P:PX.Data.PXException.ExceptionNumber">
            <summary>
            Gets exception message number
            </summary>
        </member>
        <member name="P:PX.Data.PXException.MessagePrefix">
            <summary>
            Gets exception message prefix
            </summary>
        </member>
        <member name="T:PX.Data.PXArgumentException">
            <summary>
            Derived from PXException. The exception that is thrown when one of the arguments provided to a method is not valid.
            </summary>
        </member>
        <member name="T:PX.Data.PXInvalidOperationException">
            <summary>
            Derived from PXException. The exception that is thrown when a method call is invalid for the object's current state.
            </summary>
        </member>
        <member name="T:PX.Data.PXNotSupportedException">
            <summary>
            Derived from PXException. The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
            </summary>
        </member>
        <member name="T:PX.Data.PXProviderEmptyConnectionStringException">
            <summary>
            Derived from PXProviderException. The exception that is thrown when a configuration provider error has occurred because of empty connection string.
            </summary>
        </member>
        <member name="T:PX.Data.PXProviderException">
            <summary>
            Derived from PXException. The exception that is thrown when a configuration provider error has occurred.
            </summary>
        </member>
        <member name="T:PX.Data.PXMembershipPasswordException">
            <summary>
            Derived from PXException. The exception that is thrown when a password cannot be retrieved from the password store.
            </summary>
        </member>
        <member name="T:PX.Data.PXObjectDisposedException">
            <summary>
            Derived from PXException.
            </summary>
        </member>
        <member name="M:PX.Data.PXObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXNotLoggedInException">
            <summary>
            Derived from PXException. The exception that is thrown when a configuration provider error has occurred.
            </summary>
        </member>
        <member name="M:PX.Data.PXNotLoggedInException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXBadDictinaryException">
            <summary>
            Derived from PXException. The exception that is thrown when one of the arguments provided to a method is not valid.
            </summary>
        </member>
        <member name="T:PX.Data.PXNullReferenceException">
            <summary>
            Derived from PXException. The exception that is thrown when a configuration provider error has occurred.
            </summary>
        </member>
        <member name="M:PX.Data.PXNullReferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="T:PX.Data.Localizers.PXAutomationLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXControlLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXDateTimeLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.IPXObjectLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXListLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXReportItemLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXSiteMapLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXSpecialLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.Localizers.PXUIFieldLocalizer">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.DateTimeBaseKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.DateTimeCacheAttachedKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.DateTimeDacKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.DateTimeExtensionKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.IDateTimeLocalizationKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXReportItemKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXSiteMapKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXSpecialKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator">
            <exclude/>
        </member>
        <member name="T:PX.Data.LocalizationKeyGenerators.XmlCommentKeyGenerator">
            <summary>
            A generator of localization resource keys for XML comments.
            </summary>
        </member>
        <member name="T:PX.Data.PXLocalizer">
            <summary>
            Provides mechanism for retrieving localized resources by key (from satellite resource assemblies).
            </summary>
        </member>
        <member name="M:PX.Data.PXLocalizer.Reload">
            <summary>
            Resets and refills the current database localization slot.
            </summary>
        </member>
        <member name="M:PX.Data.PXLocalizer.ResetSlot">
            <summary>
            Resets the current database localization slot.
            </summary>
        </member>
        <member name="M:PX.Data.PXLocalizer.Localize(System.String)">
            <summary>
            Translates the provided <paramref name="message"/> to the current 
            locale using default translation value. 
            The translation is taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.Localize(System.String,System.String)">
            <summary>
            Translates the provided <paramref name="message"/> to the current 
            locale using key-specific translation value. 
            The translation is taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="strMessageKey">The key of localization resource for key-specific translation.
            The key is used to avoid conflicts.
            If the key is null, default translation value will be used.
            The key is generated by one of the KeyGenerator classes.
            <see cref="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator"/>
            </param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.LocalizeFormat(System.String,System.Object[])">
            <summary>
            Translates the provided <paramref name="message"/> and all 
            <paramref name="args"/> one by one to the current locale 
            using default translation values and then composes the resulting 
            string from the translations. The format items in the message
            are replaced with the translated arguments in the translated string.
            The translations are taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="args">The arguments of the string.</param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.LocalizeFormatWithKey(System.String,System.String,System.Object[])">
            <summary>
            Translates the provided <paramref name="message"/> and all 
            <paramref name="args"/> one by one to the current locale 
            using key-specific translation value and then composes the resulting 
            string from the translations. The format items in the message
            are replaced with the translated arguments in the translated string.
            The translations are taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="strMessageKey">The key of localization resource for key-specific translation.
            The key is used to avoid conflicts.
            If the key is null, default translation value will be used.
            The key is generated by one of the KeyGenerator classes.
            <see cref="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator"/>
            </param>
            <param name="args">The arguments of the string.</param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.Localize(System.String,System.String,System.Boolean@)">
            <summary>
            Translates the provided <paramref name="message"/> to the current locale. 
            The translation is taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="strMessageKey">The key of localization resource for key-specific translation.
            The key is used to avoid conflicts.
            If the key is null, default translation value will be used.
            The key is generated by one of the KeyGenerator classes.
            <see cref="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator"/>
            </param>
            <param name="isTranslated">Indicates whether the message has a 
            translation to the current locale.</param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.Localize(System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Translates the provided <paramref name="message"/> to the current locale. 
            The translation is taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="strMessageKey">The key of localization resource for key-specific translation.
            The key is used to avoid conflicts.
            If the key is null, default translation value will be used.
            The key is generated by one of the KeyGenerator classes.
            <see cref="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator"/>
            </param>
            <param name="escapeString">
            </param>
            <param name="isTranslated">Indicates whether the message has a 
            translation to the current locale.</param>
            <returns>The translated message.</returns>
        </member>
        <member name="M:PX.Data.PXLocalizer.Localize(System.String,System.String,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Translates the provided <paramref name="message"/> to the current locale. 
            The translation is taken from the currently loaded dictionary.
            </summary>
            <param name="message">An input string to translate.</param>
            <param name="strMessageKey">The key of localization resource for key-specific translation.
            The key is used to avoid conflicts.
            If the key is null, default translation value will be used.
            The key is generated by one of the KeyGenerator classes.
            <see cref="T:PX.Data.LocalizationKeyGenerators.AutomationKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXControlKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXListKeyGenerator"/>
            <see cref="T:PX.Data.LocalizationKeyGenerators.PXUIFieldKeyGenerator"/>
            </param>
            <param name="escapeString">
            </param>
            <param name="isTranslated">Indicates whether the message has a 
            translation to the current locale.</param>
            <param name="isNotLocalizable">Indicates whether the message was marked as not localizable 
            on the Translation Dictionaries (SM200540) form. 
            For details, see <see cref="P:PX.Translation.LocalizationRecord.IsNotLocalized"/>.</param>
            <returns>The translated message.</returns>
            <remarks>
            The message is trimmed before translation.
            </remarks>
            <example>
            <code>
            string localized = PXLocalizer.Localize(Messages.ExampleMessage, typeof(Messages).FullName, isTranslated, isNotLocalizable);
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXLocalizer.EscapeString(System.String)">
            <summary>
            Replaces newline escape symbols in the provided <paramref name="message"/> by environment default newline symbol.
            </summary>
            <param name="message">An input string.</param>
        </member>
        <member name="M:PX.Data.PXLocalizer.UnescapeString(System.String)">
            <summary>
            Replaces newline symbols in the provided <paramref name="message"/> by special escape symbol.
            </summary>
            <param name="message">An input string.</param>
        </member>
        <member name="T:PX.Data.PXLocaleScope">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLocalizerRepository">
            <exclude/>
        </member>
        <member name="T:PX.Data.ErrorMessages">
            <summary>
            Contains strings for exceptions that can be thrown in Acumatica Platform.
            These strings are automatically collected during the localization process
            and can be translated to desired languages.
            </summary>
        </member>
        <member name="F:PX.Data.ErrorMessages.HttpContextNotFound">
            <exclude />
        </member>
        <member name="F:PX.Data.ErrorMessages.UnableToParseIPAddress">
            <exclude />
        </member>
        <member name="F:PX.Data.ErrorMessages.GIImportXMLScreenIDAlreadyExists">
            <exclude />
        </member>
        <member name="F:PX.Data.ErrorMessages.ScreenIDDuplicate">
            <exclude />
        </member>
        <member name="T:PX.Data.ActionsMessages">
            <exclude/>
        </member>
        <member name="T:PX.Data.RightMessages">
            <exclude/>
        </member>
        <member name="T:PX.Data.InfoMessages">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXReportMessages">
            <exclude/>
        </member>
        <member name="T:PX.Data.ImportExportMessage">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMessages">
            <summary>
            Saves messages declared in derived class into internal dictionary and performs search of specific message
            when it is required. Also calls localization method (from PXLocalizer class) if the message is found
            which retrieves localized string from dictionary. Each message is stored by the PXMessages class
            as a triplet in which human-readable message is a key, fully qualified name of message and message
            number (generated automatically) are value.
            For example, {No idfield found: {CountryIdFieldNotFound, 24}}. Here,
            "No idfield found" is a culture-independent human-readable message (key),
            "PX_Data_ErrorMessages_CountryIdFieldNotFound" is a fully qualified name of message in PXMessages-derived
            class (which will be used as a key for string in resource-file), "24" is a mesage number 
            (in order of declaration inside of derived class).
            </summary>
        </member>
        <member name="T:PX.Data.PXMessages.DictVal">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXMessages.SingleMessage">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXMessages.SingleMessage.SeekMessageInDicts(System.String,System.Collections.Generic.List{PX.Data.PXMessages.DictVal}@)">
            <summary>
            Looks for specific culture-independent message in interanl dictionaries
            </summary>
            <param name="strMessage">Message to look for</param>
            <param name="msgpair">A pair representing fully-qulified message name and its number if message is found</param>
            <returns>true if message is found, otherwise returns false</returns>
        </member>
        <member name="M:PX.Data.PXMessages.SingleMessage.#ctor(System.String)">
            <summary>
            Looks for specific message in internal dictionaries and creates a single message triplet for it if found
            </summary>
            <param name="strMessage">Message to look for</param>
        </member>
        <member name="P:PX.Data.PXMessages.SingleMessage.GlobalMessage">
            <summary>
            Gets a human-readable culture-independent message (as it is declared in PXMessages-derived class)
            </summary>
        </member>
        <member name="P:PX.Data.PXMessages.SingleMessage.MessageClassTypeNames">
            <summary>
            Gets fully-qualified names of PXMessages-derived class in which message is declared
            </summary>
        </member>
        <member name="P:PX.Data.PXMessages.SingleMessage.MessageName">
            <summary>
            Gets name of message variable as it is declared in PXMessages-derived class
            </summary>
        </member>
        <member name="P:PX.Data.PXMessages.SingleMessage.MessageNumber">
            <summary>
            Gets message number
            </summary>
        </member>
        <member name="P:PX.Data.PXMessages.SingleMessage.MessagePrefix">
            <summary>
            Gets or sets message prefix (a string that will be displayed before each message, defined by PXLocalizable)
            </summary>
        </member>
        <member name="M:PX.Data.PXMessages.CollectMessages(Serilog.ILogger)">
            <summary>
            Passes through all loaded assemblies, looks for PXMessages-derived classes and adds messages from them to internal dictionaries.
            Messages from each PXMessages-derived class are stored in their own separate dictionary.
            </summary>
        </member>
        <member name="M:PX.Data.PXMessages.AddMessagesToDictionary(System.Type)">
            <summary>
            Adds messages from specific PXMessages-derived class to their own dictionary
            </summary>
            <param name="messagesType">Type of PXMessages-derived class to add messages from</param>
        </member>
        <member name="M:PX.Data.PXMessages.Localize(System.String)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <returns>A string representing localized message with prefix or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.Localize(System.String,System.UInt32@)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessageNumber">Will contain message number after method finishes</param>
            <returns>A string representing localized message with prefix or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.Localize(System.String,System.String@)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessagePrefix">Will contain message prefix after method finishes</param>
            <returns>A string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.Localize(System.String,System.UInt32@,System.String@)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessageNumber">Will contain message number after method finishes</param>
            <param name="MessagePrefix">Will contain message prefix after method finishes</param>
            <returns>A string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeNoPrefix(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeAddNumber(System.String)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <returns>A string representing message number and localized message with prefix or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeAddNumber(System.String,System.String@)">
            <summary>
            Localizes a message
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessagePrefix">Will contain message prefix after method finishes</param>
            <returns>A string representing message number and localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormat(System.String,System.UInt32@,System.Object[])">
            <summary>
            Localizes a message and formats it like String.Format does
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessageNumber">Will contain message number after method finishes</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>A formatted string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormat(System.String,System.Object[])">
            <summary>
            Localizes a message and formats it like String.Format does
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>A formatted string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormat(System.String,System.String@,System.Object[])">
            <summary>
            Localizes a message and formats it like String.Format does
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessagePrefix">Will contain message prefix after method finishes</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>A formatted string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormat(System.String,System.UInt32@,System.String@,System.Object[])">
            <summary>
            Localizes a message and formats it like String.Format does
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="MessageNumber">Will contain message number after method finishes</param>
            <param name="MessagePrefix">Will contain message prefix after method finishes</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>A formatted string representing localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormatNoPrefix(System.String,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormatNoPrefixNLA(System.String,System.Object[])">
            <exclude />
        </member>
        <member name="M:PX.Data.PXMessages.LocalizeFormatAddNumber(System.String,System.Object[])">
            <summary>
            Localizes a message and formats it like String.Format does
            </summary>
            <param name="strMessage">A culture-independent human-readable message to localize</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <returns>A formatted string representing message number and localized message or strMessage if local resource can't be found</returns>
        </member>
        <member name="T:PX.Data.ProcessingMessages">
            <exclude/>
        </member>
        <member name="T:PX.Data.PagePathConverter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBTranslatonProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLocale">
            <summary>
            Represents a single locale available in the system.
            </summary>
        </member>
        <member name="T:PX.Data.PXCollationComparer">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLocalesProvider">
            <summary>
            Provides access to all locales available in the system.
            </summary>
        </member>
        <member name="M:PX.Data.PXLocalesProvider.Clear">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.GetLocales">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.GetLocales(System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.GetCurrentLocale">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.ContainsCollation(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.StartsWithCollation(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXLocalesProvider.EndsWithCollation(System.String,System.String)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXTranslationProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXSpecialResources">
            <exclude/>
        </member>
        <member name="T:PX.Data.TranslationValidationManager">
            <exclude/>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXNameAttribute">
            <summary>The base class for <tt>PXCacheName</tt>
            and <tt>PXViewName</tt> attributes. Do not use
            this attribute directly.</summary>
        </member>
        <member name="P:PX.Data.PXNameAttribute.Name">
            <summary>Gets the value specified as the name in the
            constructor.</summary>
        </member>
        <member name="M:PX.Data.PXNameAttribute.GetName">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the attribute that assigns the provided name to the object.
            </summary>
            <param name="name">The value used as the name of the object.</param>
        </member>
        <member name="T:PX.Data.PXCacheNameAttribute">
            <summary>Sets the user-friendly name and type of the data access class (DAC).</summary>
            <remarks>
              <para>The attribute is added to the DAC declaration. The name can be obtained at run time through the
            <see cref="M:PX.Data.PXUIFieldAttribute.GetItemName(PX.Data.PXCache)">GetItemName(PXCache)</see> static method of the <tt>PXUIField</tt> attribute.</para>
              <para>The CacheGlobal flag can be obtained at run time through the <see cref="M:PX.Data.PXCacheNameAttribute.UseGlobalCache(System.Type)"/> static method of the current attribute.</para>
              <para>The attribute is used on the Generic Inquiry (SM208000) form to filter the list of DACs during the selection. By default, the user is suggested to
            use DACs with the non-empty attribute.</para>
            </remarks>
            <example>
              <code title="" description="" lang="CS">
            [PXCacheName("Currency Info", PXDacType.Config)]
            public partial class CurrencyInfo : PX.Data.IBqlTable
            {
                ...
            }</code>
            </example>
             <example>
              <code title="" description="" lang="CS">
            [PXCacheName("Inventory Item", PXDacType.Catalogue, CacheGlobal = true)]
            public partial class InventoryItem : PX.Data.IBqlTable
            {
                ...
            }</code>
            </example>
        </member>
        <member name="P:PX.Data.PXCacheNameAttribute.DacType">
            <summary>
            Gets the <see cref="T:PX.Data.PXDacType"/> value specified as the type of DAC in the constructor. 
            By default, the property is set to <see cref="F:PX.Data.PXDacType.Unknown"/>.
            </summary>
        </member>
        <member name="P:PX.Data.PXCacheNameAttribute.CacheGlobal">
            <summary>
            If the flag set corresponding type rows should cache.
            By default, the data records does not cache.
            The flag can be obtained at run time through the <see cref="M:PX.Data.PXCacheNameAttribute.UseGlobalCache(System.Type)"/> static method of the current attribute.
            </summary>
        </member>
        <member name="M:PX.Data.PXCacheNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance that assigns the specified name to the DAC.
            </summary>
            <param name="name">The name to assign to the DAC.</param>
        </member>
        <member name="M:PX.Data.PXCacheNameAttribute.#ctor(System.String,PX.Data.PXDacType)">
            <summary>
            Initializes a new instance that assigns the specified name and type to the DAC.
            </summary>
            <param name="name">The name to assign to the DAC.</param>
            <param name="dacType">The type to assign to the DAC. This parameter is optional. By default, the property is set to <see cref="F:PX.Data.PXDacType.Unknown"/></param>
        </member>
        <member name="M:PX.Data.PXCacheNameAttribute.GetName(System.Type)">
            <summary>
            Gets the localized DAC display name.
            </summary>
            <param name="dacType">The DAC type</param>
            <returns>
            The localized DAC display name.
            </returns>
        </member>
        <member name="M:PX.Data.PXCacheNameAttribute.UseGlobalCache(System.Type)">
            <summary>Returns the flag of the data access class (DAC).
            The flag is set using the <see cref="P:PX.Data.PXCacheNameAttribute.CacheGlobal"/> property of the <see cref="T:PX.Data.PXCacheNameAttribute"/> attribute.</summary>
            <param name="entityType">data access class (DAC)</param>
        </member>
        <member name="T:PX.Data.PXDacType">
            <summary>
            Type(category) of data access class (DAC).
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Unknown">
            <summary>
            Default value, not set
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Config">
            <summary>
            The type to assign to the DAC which have a config fields.
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Catalogue">
            <summary>
            The type to assign to the DAC which is a catalogue.
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Document">
            <summary>
            The type to assign to the DAC which is a document.
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Details">
            <summary>
            The type to assign to the DAC which is a document detail.
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.History">
            <summary>
            The type to assign to the DAC which have a history of operations.
            </summary>
        </member>
        <member name="F:PX.Data.PXDacType.Balance">
            <summary>
            The type to assign to the DAC which have a balance fields.
            </summary>
        </member>
        <member name="T:PX.Data.PXViewNameAttribute">
            <summary>Defines the user-friendly name of a data view.</summary>
            <remarks>The attribute is added to the view declaration.</remarks>
            <example>
            	<code title="Example" description="The code below shows the usage of the PXViewName attribute on the data view definition in a graph. (Messages.Orders is a constant defined by the application.)" lang="CS">
            [PXViewName(Messages.Orders)]
            public PXSelectReadonly&lt;SOOrder,
                Where&lt;SOOrder.customerID, Equal&lt;Current&lt;BAccount.bAccountID&gt;&gt;&gt;&gt;
                Orders;</code>
            </example>
        </member>
        <member name="M:PX.Data.PXViewNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance that sets the provided string as
            the user-friendly name of the data view.
            </summary>
            <param name="name">The string used as the name of the data view.</param>
        </member>
        <member name="T:PX.Data.PXEMailSourceAttribute">
            <example>
            	<code title="Example" description="The code below shows the use of the attribute on the declaration of a DAC." lang="CS">
            [System.SerializableAttribute()]
            [PXPrimaryGraph(typeof(ARStatementUpdate))]
            [PXEMailSource]
            public partial class ARStatement : PX.Data.IBqlTable
            { ... }</code>
            </example>
        </member>
        <member name="M:PX.Data.PXEMailSourceAttribute.#ctor">
            
        </member>
        <member name="M:PX.Data.PXEMailSourceAttribute.#ctor(System.Type[])">
            
        </member>
        <member name="P:PX.Data.PXEMailSourceAttribute.Types">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.PXHiddenAttribute">
            <summary>
            Hides a data access class (DAC), the business logic controller (graph), or the view from the selectors of DACs and graphs as well as from the web wervice API clients.
            </summary>
            <remarks>
            If you want an object to be visible to the web service APIs, you can set the <see cref="P:PX.Data.PXHiddenAttribute.ServiceVisible"/> property to <see langword="true"/>.
            The hidden feature of a class is not inherited. If you derive a class from another class with <see cref="T:PX.Data.PXHiddenAttribute"/>, the derived class is not hidden.
            </remarks>
            <example>
            	<code title="Example" description="In the example below, the attribute is placed on the DAC declaration." lang="CS">
            [Serializable]
            [PXHidden]
            public partial class ActivitySource : IBqlTable { ... }</code>
            	<code title="Example2" description="In the example below, the attribute is placed on the graph declaration." groupname="Example" lang="CS">
            [PXHidden()]
            public class CAReleaseProcess : PXGraph&lt;CAReleaseProcess&gt; { ... }</code>
            	<code title="Example3" description="In the example below, the attribute is placed on the view declaration in some graph." groupname="Example2" lang="CS">
            [PXHidden]
            public PXSelect&lt;CurrencyInfo&gt; CurrencyInfoSelect;</code>
            </example>
        </member>
        <member name="P:PX.Data.PXHiddenAttribute.ServiceVisible">
            <summary>Gets or sets the value that indicates whether the object
            marked with the attribute is visible to the Web Service API (in
            particular, to the Report Designer). By default the property
            equals <tt>false</tt>, and the object is hidden from all
            selectors.</summary>
        </member>
        <member name="P:PX.Data.PXHiddenAttribute.Target">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPrimaryGraphBaseAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXPrimaryGraphBaseAttribute.VerifyRightsBy">
            <summary>
            Returns graph types which are used to verify access in some modules (e.g. OData v4)
            </summary>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphBaseAttribute.GetAllGraphTypes">
            <summary>
            Returns all possible graph types
            </summary>
        </member>
        <member name="T:PX.Data.PXPrimaryGraphAttribute">
            <summary>Sets the primary graph for a DAC. The primary graph
            determines the default page where a user is redirected for editing a
            data record.</summary>
            <remarks>
            	<para>The attribute can be placed on the following declarations:</para>
            	<list type="bullet">
            		<item>
            			<description>On a DAC&#8212;To specify the
            primary graph for this DAC.</description>
            		</item>
            		<item>
            			<description>On a DAC extension&#8212;To add or override the
            specification of the primary graph for the DAC.</description>
            		</item>
            		<item>
            			<description>On a graph&#8212;To
            indicate that it is the primary graph for the specified
            DACs. This declaration has a higher priority than that on a DAC
            or a DAC extension. Do not specify the same DAC for different graphs
            because the behaviour will be unpredictable.</description>
            		</item>
            		<item>
            			<description>On a graph extension&#8212;To add or override the default navigation
            declared on the graph corresponding to the graph extension.</description>
            		</item>
            	</list>
            	<para>A declaration of this attribute on a higher level extension overrides the
            declarations of this attribute on DACs (graphs) or their extensions of lower level.</para>
            	<para>For a DAC or a DAC extension, you can specify several graphs and corresponding
            conditions. In this case, the first graph for which the corresponding condition
            holds true at run time is considered the primary graph. A condition is
            a BQL query based on either the <tt>Where</tt> class or the
            <tt>Select</tt> class.</para>
            </remarks>
            <example>
            	<code title="Example" description="In the example below, the SalesPersonMaint graph is set as the primary graph for the DAC SalesPerson." lang="CS">
            [PXPrimaryGraph(typeof(SalesPersonMaint))]
            public partial class SalesPerson : PX.Data.IBqlTable
            {
                ...
            }</code>
            	<code title="Example2" description="In the example below, the attribute specifies the graph that is used as the primary graph for a DAC if the condition holds true for the data in the cache." groupname="Example" lang="CS">
            [PXPrimaryGraph(
                new Type[] { typeof(ShipTermsMaint)},
                new Type[] { typeof(Select&lt;ShipTerms, 
                    Where&lt;ShipTerms.shipTermsID, Equal&lt;Current&lt;ShipTerms.shipTermsID&gt;&gt;&gt;&gt;)
                })]
            public partial class ShipTerms : PX.Data.IBqlTable
            {
                ...
            }</code>
            	<code title="Example3" description="In the example below, the attribute specifies the graph that is used as the primary graph for a DAC if the Select statement retrieves a non-empty data set." groupname="Example2" lang="CS">
            [PXPrimaryGraph(
                new Type[] { typeof(CountryMaint)},
                new Type[] { typeof(Select&lt;State, 
                    Where&lt;State.countryID, Equal&lt;Current&lt;State.countryID&gt;&gt;, 
                        And&lt;State.stateID, Equal&lt;Current&lt;State.stateID&gt;&gt;&gt;&gt;&gt;)
                })]
            public partial class State : PX.Data.IBqlTable
            {
                ...
            }</code>
            	<code title="Example4" description="In the example below, the attribute specifies two graphs and the corresponding Select statements. The first graph for which the Select statement returns a non-empty data set is used as the primary graph for the DAC." groupname="Example3" lang="CS">
            [PXPrimaryGraph(
                new Type[] {
                    typeof(APQuickCheckEntry),
                    typeof(APPaymentEntry)
                },
                new Type[] {
                    typeof(Select&lt;APQuickCheck,
                        Where&lt;APQuickCheck.docType, Equal&lt;Current&lt;APPayment.docType&gt;&gt;, 
                            And&lt;APQuickCheck.refNbr, Equal&lt;Current&lt;APPayment.refNbr&gt;&gt;&gt;&gt;&gt;),
                    typeof(Select&lt;APPayment, 
                        Where&lt;APPayment.docType, Equal&lt;Current&lt;APPayment.docType&gt;&gt;, 
                            And&lt;APPayment.refNbr, Equal&lt;Current&lt;APPayment.refNbr&gt;&gt;&gt;&gt;&gt;)
                })]
            public partial class APPayment : APRegister, IInvoice
            {
                ...
            }</code>
            	<code title="Example5" description="In the example below, the attribute defines or redefines the primary graph for the DAC that corresponds to the DAC extension." groupname="Example4" lang="CS">
            [PXPrimaryGraph(typeof(AnotherGraph))]
            public class MyDacExtension : PXCacheExtension&lt;MyDac&gt;
            {
                ...
            }</code>
            	<code title="Example6" description="In the example below, the attribute of the graph specifies the DAC for which the graph is used as the primary graph when the Select statement returns a non-empty data set." groupname="Example5" lang="CS">
            [PXPrimaryGraph(
                new Type[] {
                    typeof(INUnit)
                },
                new Type[] {
                    typeof(Select&lt;UnitOfMeasure,
                        Where&lt;UnitOfMeasure.unit, Equal&lt;Current&lt;INUnit.fromUnit&gt;&gt;&gt;&gt;)
                })]
            public class UnitOfMeasureMaint : PXGraph&lt;UnitOfMeasureMaint, UnitOfMeasure&gt;
            {
                ...
            }</code>
            	<code title="Example7" description="In the example below, the attribute defines the graph that corresponds to the graph extension as the primary graph for the DAC. This definition has the highest priority over other definitions of the primary graph." groupname="Example6" lang="CS">
            [PXPrimaryGraph(typeof(MyDac))]
            public class MyGraphExtension : PXGraphExtension&lt;MyGraph&gt;
            {
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXPrimaryGraphAttribute.PrimaryAttributeInfo">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXPrimaryGraphAttribute.Filter">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXPrimaryGraphAttribute.Filters">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXPrimaryGraphAttribute.UseParent">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.#ctor(System.Type)">
            <summary>For a DAC, the attribute specifies a graph that will be used
            to edit DAC's records. For a graph, the attribute specifies a DAC whose records
            will be edited by the graph.</summary>
            <param name="type">The business logic controller (graph) or the DAC.
            The graph should derive from <tt>PXGraph</tt>. The DAC should
            implement <tt>IBqlTable</tt>.</param>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.#ctor(System.Type[],System.Type[])">
            <summary>For a DAC, the attribute specifies graphs and corresponding conditions;
            the first graph whose condition is met will be used to edit DAC's records.
            For a graph, the attribute specifies DACs and corresponding conditions;
            records of the first DAC whose condition is met will be edited by the graph.</summary>
            <param name="types">The array of business logic controllers (graphs) or
            DACs. A graph should derive from <tt>PXGraph</tt>. A DAC should
            implement <tt>IBqlTable</tt>.</param>
            <param name="conditions">The array of conditions that correspond to
            the graphs or DACs specified in the first parameter. Specify BQL
            queries, either <tt>Where</tt> expressions or <tt>Select</tt>
            commands.</param>
            <example>
            In the example below, the attribute specifies the graph that is used as
            the primary graph for a DAC if the condition holds true for the data in
            the cache.
            <code>
            [PXPrimaryGraph(
                new Type[] { typeof(ShipTermsMaint)},
                new Type[] { typeof(Select&lt;ShipTerms, 
                    Where&lt;ShipTerms.shipTermsID, Equal&lt;Current&lt;ShipTerms.shipTermsID&gt;&gt;&gt;&gt;)
                })]
            public partial class ShipTerms : PX.Data.IBqlTable
            {
                ...
            }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.GetGraphType(PX.Data.PXCache,System.Object@,System.Boolean,System.Type)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.ValidateGraphType(PX.Data.PXCache,System.Type,System.Type,System.Object@,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.GetAllGraphTypes">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Type@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Object@,System.Type@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Boolean,System.Object@,System.Type@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Object@,System.Type@,System.Type@,PX.Data.PXCache@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Type,System.Object@,System.Type@,System.Type@,PX.Data.PXCache@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Boolean,System.Object@,System.Type@,System.Type@,PX.Data.PXCache@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.FindPrimaryGraph(PX.Data.PXCache,System.Type,System.Boolean,System.Object@,System.Type@,System.Type@,PX.Data.PXCache@)">
            <exclude />
        </member>
        <member name="M:PX.Data.PXPrimaryGraphAttribute.GetAttributes(PX.Data.PXCache)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXDACDescriptionAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXDACDescriptionAttribute.Target">
            <summary>Get.</summary>
        </member>
        <member name="P:PX.Data.PXDACDescriptionAttribute.Attribute">
            <summary>Get.</summary>
        </member>
        <member name="T:PX.Data.PXNotCleanableCache`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLineNbrMarkerAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute">
            <summary>Adds the table toobar button that allows the user to load data from a file to the table. The attribute is placed on the view that is used to obtain the data
            for the table.</summary>
            <remarks>
              <para>The attribute is placed on the view declaration in the graph. As a result, the table that uses the view as a data provider will include the button that
            opens the data import wizard. By using this wizard, a user can load data from an Excel or CSV file to the table.</para>
              <para>You can control all steps of the data import if you make the graph implement the <tt>PXImportAttribute.IPXPrepareItems</tt> interface.</para>
            </remarks>
            <example>
              <code title="Example" description="The following attibute adds the upload button to the toolbar of the table that uses the Transactions view for data retrieval. In this example, the primary view DAC is INRegister, and this DAC is passed to the attribute as a parameter. " lang="CS">
            // Primary view declaration
            public PXSelect&lt;INRegister,
                Where&lt;INRegister.docType, Equal&lt;INDocType.adjustment&gt;&gt;&gt; adjustment;
            ...
             
            [PXImport(typeof(INRegister))]
            public PXSelect&lt;INTran,
                      Where&lt;INTran.docType, Equal&lt;Current&lt;INRegister.docType&gt;&gt;,
                          And&lt;INTran.refNbr, Equal&lt;Current&lt;INRegister.refNbr&gt;&gt;&gt;&gt;&gt;
                   Transactions;</code>
              <code title="Example2" description="In the following example, the graph implements the PXImportAttribute.IPXPrepareItems interface to control the data import." groupname="Example" lang="CS">
            public class APInvoiceEntry : APDataEntryGraph&lt;APInvoiceEntry, APInvoice&gt;,
                                          PXImportAttribute.IPXPrepareItems
            {
                ...
                // The attribute is placed on the view declaration
                [PXImport(typeof(APInvoice))]
                public PXSelectJoin&lt;APTran,
                    LeftJoin&lt;POReceiptLine,
                        On&lt;POReceiptLine.receiptNbr, Equal&lt;APTran.receiptNbr&gt;, 
                        And&lt;POReceiptLine.lineNbr, Equal&lt;APTran.receiptLineNbr&gt;&gt;&gt;&gt;,
                    Where&lt;APTran.tranType, Equal&lt;Current&lt;APInvoice.docType&gt;&gt;,
                        And&lt;APTran.refNbr, Equal&lt;Current&lt;APInvoice.refNbr&gt;&gt;&gt;&gt;,
                    OrderBy&lt;Asc&lt;APTran.tranType,
                            Asc&lt;APTran.refNbr, Asc&lt;APTran.lineNbr&gt;&gt;&gt;&gt;&gt;
                    Transactions;
                ...
             
                // Implementation of the IPXPrepareItems methods
                public virtual bool PrepareImportRow(
                    string viewName, IDictionary keys, IDictionary values)
                {
                    if (string.Compare(viewName, "Transactions", true) == 0)
                    {
                        if (values.Contains("tranType")) values["tranType"] = 
                            Document.Current.DocType;
                        else values.Add("tranType", Document.Current.DocType);
                        if (values.Contains("tranType")) values["refNbr"] = 
                            Document.Current.RefNbr;
                        else values.Add("refNbr", Document.Current.RefNbr);
                    }
                    return true;
                }
             
                public bool RowImporting(string viewName, object row)
                {
                    return row == null;
                }
             
                public bool RowImported(string viewName, object row, object oldRow)
                {
                    return oldRow == null;
                }
             
                public virtual void PrepareItems(string viewName, IEnumerable items) { }
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXImportAttribute.ImportMode">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.ImportMode.Value">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.MappingPropertiesInitEventArgs">
            <exclude/>
        </member>
        <member name="E:PX.Data.PXImportAttribute.MappingPropertiesInit">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CommonSettingsDialogShowingEventArgs">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.MappingDialogShowingEventArgs">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.FileUploadingEventArgs">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.RowImportingEventArgs">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXContentBag">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXContentBag.fileExtension">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXContentBag.data">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXContentBag.loaded">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.index">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.fileExtension">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.data">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.nullValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.culture">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportSettings.mode">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CSVSettings">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CSVSettings.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CSVSettings.separator">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CSVSettings.codePage">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.XLSXSettings">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.XLSXSettings.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings.index">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings.viewName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings.columnIndex">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings.columnName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportColumnsSettings.propertyName">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CommonSettings">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.IPXImportWizard">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CreateImportRowEventArguments">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.RowImportingEventArguments">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.RowImportedEventArguments">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.ImporDoneEventArguments">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CreateImportRowEventHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.RowImportingEventHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.RowImportedEventHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.ImportDoneEventHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.CSVImporter`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.XLSXImporter`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImporter`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImporter`1.StateInfo">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImporter`1.PXCachedView">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImporter`1.Operation">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXImportAttribute.PXImporter`1.IsMasked(System.String,System.String)">
            <summary>
            Check if <paramref name="text"/> is masked by <paramref name="mask"/>
            </summary>
            <remarks>Differs from Mask.IsMasked as it returns true even if text is longer and starts with mask</remarks>
            <returns>True if <paramref name="text"/> is a part of <paramref name="mask"/> or
            <paramref name="text"/> is longer but it starts with the <paramref name="mask"/></returns>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXImportException">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.IPXPrepareItems">
            <summary>Defines methods that can be implemented by the graph to control the data import.</summary>
        </member>
        <member name="M:PX.Data.PXImportAttribute.IPXPrepareItems.PrepareImportRow(System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>Prepares a record from the imported file for conversion into a DAC instance.</summary>
            <param name="viewName">The name of the view that is marked with the attribute.</param>
            <param name="keys">The keys of the data to import.</param>
            <param name="values">The values corresponding to the keys.</param>
        </member>
        <member name="M:PX.Data.PXImportAttribute.IPXPrepareItems.RowImporting(System.String,System.Object)">
            <summary>Implements the logic executed before the insertion of a data record into the cache.</summary>
            <param name="viewName">The name of the view that is marked with the attribute.</param>
            <param name="row">The record to import as a DAC instance.</param>
        </member>
        <member name="M:PX.Data.PXImportAttribute.IPXPrepareItems.RowImported(System.String,System.Object,System.Object)">
            <summary>Implements the logic executed after the insertion of a data record into the cache.</summary>
            <param name="viewName">The name of the view that is marked with the attribute.</param>
            <param name="row">The imported record as a DAC instance.</param>
        </member>
        <member name="M:PX.Data.PXImportAttribute.IPXPrepareItems.PrepareItems(System.String,System.Collections.IEnumerable)">
            <summary>Verifies the imported items before they are saved in the database.</summary>
            <param name="viewName">The name of the view that is marked with the attribute.</param>
            <param name="items">The collection of objects to import as instances of the DAC.</param>
        </member>
        <member name="T:PX.Data.PXImportAttribute.IPXProcess">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute._RUNWIZARD_ACTION_NAME">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute._IMPORT_ACTION_NAME">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute.ImportCSVSettingsName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute.ImportXLSXSettingsName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute.ImportColumnsSettingsName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute.ImportContentBagName">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute._DONT_UPDATE_EXIST_RECORDS">
            <exclude/>
        </member>
        <member name="F:PX.Data.PXImportAttribute.ImportFlag">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXImportAttribute.#ctor">
            <summary>Initializes a new instance of the attribute. The primary view of the graph will be detected based on PXGraph.PrimaryView.</summary>
        </member>
        <member name="M:PX.Data.PXImportAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the attribute. The parameter sets the primary view DAC.</summary>
            <param name="primaryTable">The first DAC that is referenced by the primary view of the graph where the current view is declared.</param>
        </member>
        <member name="M:PX.Data.PXImportAttribute.#ctor(System.Type,PX.Data.PXImportAttribute.IPXImportWizard)">
            <summary>Initializes a new instance of the attribute. The first
            parameter is the primary table of the view the attribute is attached
            to.</summary>
            <param name="primaryTable">The first table that is referenced in the
            view (primary table).</param>
            <param name="importer">An object that implements the <tt>IPXImportWizard</tt> interface.</param>
        </member>
        <member name="M:PX.Data.PXImportAttribute.ViewCreated(PX.Data.PXGraph,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXImportAttribute.SetEnabled(PX.Data.PXGraph,System.String,System.Boolean)">
            <summary>Enables or disables the control that the attribute adds to the table.</summary>
            <param name="graph">The graph where the view marked with the attribute
            is defined.</param>
            <param name="viewName">The name of the view that is marked with the
            attribute.</param>
            <param name="isEnabled">The value that indicates whether the method
            enables or disables the control.</param>
        </member>
        <member name="P:PX.Data.PXImportAttribute.RollbackPreviousImport">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.PXSelectInsertedHandler">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXImportAttribute.viewErrorInterceptor">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLineNbrAttribute">
            <summary>Automatically generates unique line numbers that identify for
            child data records in the parent-child relationship. This attribute
            does not work without the <see cref="T:PX.Data.PXParentAttribute">PXParent</see>
            attribute.</summary>
            <remarks>
            	<para>The attribute should be placed on the child DAC field that
            stores the line number. The line number is a two-byte integer
            incremented by the <tt>IncrementStep</tt> property value, which equals
            1 by default. The line number uniquely identifies a data record among
            the child data records related to a given parent data record. The
            attribute calculates each next value by incrementing the current
            number of the child data records.</para>
            	<para>The child DAC field to store the line number typically has the
            <tt>short?</tt> data type. It also should be a key field. You indicate
            that the field is a key field by setting the <tt>IsKey</tt> property
            of the data type attribute to <tt>true</tt>.</para>
            	<para>As a parameter, you should pass either the parent DAC field that
            stores the number of related child data records or the parent DAC
            itself. In the latter case, the attribute will determine the number of
            related child data records by itself. If the parent DAC field is
            specified, the attribute automatically updates its value.</para>
            </remarks>
            <example>
            	<code title="Example" description="The attribute below takes the number of related child data records from the provided parent field. The PXParent attribute must be added to some other field of this DAC." lang="CS">
            [PXDBShort(IsKey = true)]
            [PXLineNbr(typeof(ARRegister.lineCntr))]
            public virtual short? LineNbr { get; set; }</code>
            	<code title="Example2" description="In the following example, the attribute calculates the number of related child data records by itself." groupname="Example" lang="CS">
            [PXDBShort(IsKey = true)]
            [PXLineNbr(typeof(Vendor))]
            [PXParent(typeof(
                Select&lt;Vendor,
                    Where&lt;Vendor.bAccountID, Equal&lt;Current&lt;TaxReportLine.vendorID&gt;&gt;&gt;&gt;))]
            public virtual short? LineNbr { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXLineNbrAttribute.LastDefault">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the attribute. As a parameter you can provide
            the parent data record field that stores the number of child data records or
            the parent DAC if there is no such field. In the latter case the attribute
            will calculate the number of child data records automatically.
            </summary>
            <param name="sourceType">The parent data record field that stores the number
            of children or the parent DAC.</param>
            <param name="Enabled">Allows to make field editable.</param>
            <example>
            In the following example, the attribute calculates the number of related child
            data records by itself.
            <code>
            [PXDBShort(IsKey = true)]
            [PXLineNbr(typeof(Vendor))]
            [PXParent(typeof(
                Select&lt;Vendor,
                    Where&lt;Vendor.bAccountID, Equal&lt;Current&lt;TaxReportLine.vendorID&gt;&gt;&gt;&gt;))]
            public virtual short? LineNbr { get; set; }
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the attribute. As a parameter you can provide
            the parent data record field that stores the number of child data records or
            the parent DAC if there is no such field. In the latter case the attribute
            will calculate the number of child data records automatically.
            </summary>
            <param name="sourceType">The parent data record field that stores the number
            of children or the parent DAC.</param>
            <param name="Enabled">Allows to make field editable.</param>
            <example>
            In the following example, the attribute calculates the number of related child
            data records by itself.
            <code>
            [PXDBShort(IsKey = true)]
            [PXLineNbr(typeof(Vendor))]
            [PXParent(typeof(
                Select&lt;Vendor,
                    Where&lt;Vendor.bAccountID, Equal&lt;Current&lt;TaxReportLine.vendorID&gt;&gt;&gt;&gt;))]
            public virtual short? LineNbr { get; set; }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXLineNbrAttribute.IncrementStep">
            <summary>Gets or sets the number by which the line number is
            incremented or decremented. By default, the property equals
            1.</summary>
        </member>
        <member name="P:PX.Data.PXLineNbrAttribute.DecrementOnDelete">
            <summary>Indicates whether the source field would be decremented 
            on the row deleting or not. By default, the property equals true.</summary>
        </member>
        <member name="P:PX.Data.PXLineNbrAttribute.ReuseGaps">
            <summary>
            Indicates whether the line number gaps produced by the delete operation should be reused
            </summary>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.LineNbr_FieldSelecting(PX.Data.PXCache,PX.Data.PXFieldSelectingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.RowInserted(PX.Data.PXCache,PX.Data.PXRowInsertedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.RowDeleted(PX.Data.PXCache,PX.Data.PXRowDeletedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.RowPersisted(PX.Data.PXCache,PX.Data.PXRowPersistedEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.ClearLastDefaultValue">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.NewLineNbr(PX.Data.PXCache,System.Object)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.NewLineNbr``1(PX.Data.PXCache,System.Object)">
            <summary>Returns the next line number for the provided parent data
            record. The returned value should be used as the child identifier
            stored in the specified field.</summary>
            <param name="cache">The cache object to search for the</param>
            <param name="Current">The parent data record for which the next child
            identifier (line number) is returned.</param>
            <returns>The line number as an object. Cast to <tt>short?</tt>.</returns>
        </member>
        <member name="M:PX.Data.PXLineNbrAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXTimeZoneAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXTimeZoneAttribute.IsLocalizable">
            
        </member>
        <member name="T:PX.Data.PXDBStringListAttribute">
            <summary>
            Configures a dropdown control for a string field. The values and labels
            for the dropdown control are taken from the specified database table.
            </summary>
            <example>
            	<code title="Example" description="In the example below, the lists of values and labels are taken from the CROpportunityProbability table." lang="CS">
            [PXDBString(1, IsUnicode = true)]
            [PXUIField(DisplayName = "Probability", Visibility = PXUIVisibility.SelectorVisible)]
            [PXDBStringList(
                typeof(CROpportunityProbability),
                typeof(CROpportunityProbability.code),
                typeof(CROpportunityProbability.description),
                DefaultValueField = typeof(CROpportunityProbability.isDefault))]
            public virtual string Probability { get; set; }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBStringListAttribute.PXDBStringAttributeHelper">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBStringListAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="table">The DAC representing the table whose fields
            are used as sources of values and labels.</param>
            <param name="valueField">The field holding string values.</param>
            <param name="descriptionField">The field holding labels.</param>
        </member>
        <member name="T:PX.Data.PXDBIntListAttribute">
            <summary>
            Configures a drop-down control for an integer field. The values and labels
            for the drop-down control are taken from the specified database table.
            </summary>
            <example>
            <code>
            [PXDBInt]
            [PXUIField(DisplayName = "Stage", Visibility = PXUIVisibility.SelectorVisible)]
            [PXDBIntList(
               typeof(CROpportunityStage),
               typeof(CROpportunityStage.stageCode),
               typeof(CROpportunityStage.description),
               DefaultValueField = typeof(CROpportunityStage.isDefault))]
            public virtual int? StageID { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.PXDBIntListAttribute.PXDBIntAttributeHelper">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXDBIntListAttribute.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the attribute.
            </summary>
            <param name="table">The DAC representing the table whose fields
            are used as sources of values and labels.</param>
            <param name="valueField">The field holding integer values.</param>
            <param name="descriptionField">The field holding labels.</param>
        </member>
        <member name="T:PX.Data.IPXDBListAttributeHelper">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXBaseListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBListAttributeHelper`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBListAttributeHelper`1.ListParameters">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBListAttributeHelper`1.ValueLabelPairs">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPreviewAttribute">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXPreviewAttribute.#ctor(System.Type)">
            
        </member>
        <member name="M:PX.Data.PXPreviewAttribute.#ctor(System.Type,System.Type)">
            
        </member>
        <member name="T:PX.Data.PXFontListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFontSizeListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXFontSizeStrListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.TypeDeleteAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXVirtualAttribute">
            <summary>
            	<para>You add this attribute to a DAC class definition to prevent specific DAC data records from being saved to the database.</para>
            </summary>
            <remarks>
            	<para dir="ltr">It is mandatory that you invoke the <tt>PXVirtual</tt> statuc constructor by adding the following line of code into either a BLC constuctor or
            the Initialize method within a BLC extension.</para>
            	<blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            		<para>
            			<tt>typeof(PX.Data.MassProcess.FieldValue).GetCustomAttributes(typeof(PXVirtualAttribute), false);</tt>
            		</para>
            	</blockquote>
            	<para>See examples below.</para>
            </remarks>
            <example>
            	<code title="Example" description="The example below shows a general PXVirtual attribute declaration." lang="CS">
            [PXVirtual]
            [PXCacheName(Messages.TimeCardDetail)]
            [Serializable]
            public partial class EPTimeCardSummary : IBqlTable
            { ... }</code>
            	<code title="Example2" description="In the following code you invoke a static constructor for the PXVirtual attribute within a BLC constructor." groupname="Example" lang="CS">
            public PXGenericInqGrph()
            {
                ...
                typeof(FieldValue).GetCustomAttributes(typeof(PXVirtualAttribute), false);
                ...
            }</code>
            	<code title="Example3" description="In the following code you invoke a static constructor for the PXVirtual attribute within a BLC initialize method." groupname="Example2" lang="CS">
            public override void Initialize()
            {
                typeof(FieldValue).GetCustomAttributes(typeof(PXVirtualAttribute), false);
                ...
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PXBypassAuditAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXDBUserPasswordAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXPossibleRowsListAttribute">
            <summary>User friendly name of a DAC class.</summary>
            <exclude/>
        </member>
        <member name="T:PX.Data.PXRoleRightAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXReadOnlyViewAttribute">
            <summary>
            When attached to a data view in a graph, excludes the cache behind the view
            from the collection of updatable caches.
            The key consequence is that this cache is not persisted by the graph's
            Persist() method and by the Save action.
            The cache can still be persisted manually.
            </summary>
        </member>
        <member name="M:PX.Data.PXReadOnlyViewAttribute.ViewCreated(PX.Data.PXGraph,System.String)">
            <exclude />
        </member>
        <member name="T:PX.Data.PXGroupMaskAttribute">
            <summary>
            Set the BQL JOIN or\and WHERE for the DAC which restricts this DAC by related DAC with group restrictions (e.g. SOOrder + Customer) in some modules (e.g. OData v4)
            </summary>
        </member>
        <member name="M:PX.Data.IContentReader.MoveNext">
            <summary>
            Move to next record in data source
            </summary>
            <returns>true, if the operation was performed successfully</returns>
        </member>
        <member name="M:PX.Data.IContentReader.GetValue(System.Int32)">
            <summary>
            Find value in record by given key index
            </summary>
            <param name="index">index of value</param>
            <returns>null, if given key index was not found</returns>
        </member>
        <member name="M:PX.Data.IContentReader.Reset">
            <summary>
            Reset state of reader
            </summary>
        </member>
        <member name="P:PX.Data.IContentReader.IndexKeyPairs">
            <summary>
            Collection of value keys
            </summary>
        </member>
        <member name="T:PX.Data.CSVReader">
            <summary>
            Reads CSV format
            </summary>
        </member>
        <member name="T:PX.Data.XLSXReader">
            <summary>
            Reads XLSX format
            </summary>
        </member>
        <member name="M:PX.Data.EntityHelper.GetNoteIDAndEnsureNoteExists(System.Object)">
            <summary>
            Get NoteID for entity (field marked with <see cref="T:PX.Data.PXNoteAttribute"/>. If NoteID is not exist in database create it, persist it.
            If entity <see cref="T:PX.Data.Note"/> doesn't exist create it and persist it.
            </summary>
            <returns>NoteID for entity.</returns>
            <remarks>
            Do the same as <see cref="M:PX.Data.EntityHelper.GetEntityNoteID(System.Object,System.Boolean)"/> with persistRow = <see langword="true"/> but also persist create Note for it.
            </remarks>
        </member>
        <member name="T:PX.Data.EP.IActivityService">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.IActivityType">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.screenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.position">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.title">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.imageKey">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.imageSet">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.url">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.count">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.ActivityService.Total.newCount">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.RelatedEntity">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.RelatedEntity.refNoteID">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.RelatedEntity.entityCD">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.OwnerSelectionListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.OwnerSelectionListAttribute.assigned">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.OwnerSelectionListAttribute.workGroup">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.OwnerSelectionListAttribute.escalated">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.PXFieldDescriptionAttribute">
            <summary>Marks the DAC field that is included in
            the entity description&#8212;the string that describes a particular
            data records. The description includes values from fields marked with
            the <tt>PXFieldDescription</tt> attribute joined by comma.</summary>
            <remarks>
            When a DAC field is marked with the <see cref="T:PX.Data.PXRefNoteAttribute">PXRefNote</see>
            attribute, you can generate the <tt>RefNoteSelector</tt> control for it.
            The value displayed in the control consists of the values of fields
            marked with the <tt>PXFieldDescription</tt> attribute and joined by comma.
            </remarks>
            <example>
            The code below shows the usage of the <tt>PXFieldDescription</tt> attribute
            in the definition of the DAC field.
            <code>
            [PXDBString(3, IsKey = true, IsFixed = true)]
            [PXFieldDescription]
            public virtual String DocType { get; set; }
            </code>
            </example>
        </member>
        <member name="T:PX.Data.EP.EPCalendarDashboardGraphAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.EPNowDefaultAttribute">
            <summary>Sets the DateTime.Now property as the default value.</summary>
        </member>
        <member name="T:PX.Data.EP.PXRemindDateAttribute">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.EmailFormatListAttribute">
            <summary>Determines email formats.</summary>
        </member>
        <member name="T:PX.Data.EP.PXChildUpdatableAttribute">
            <summary>Allows specific fields update, related to activity entities.</summary>
        </member>
        <member name="M:PX.Data.EP.PXRefNoteSelectorAttribute.SetEnabled(PX.Data.PXView,System.Boolean)">
            
        </member>
        <member name="T:PX.Data.EP.IAssign">
            <summary>
            Represents a document that can be assigned to a workgroup, a single owner, or both.
            This workgroup or owner will be responsible for processing the document.
            If a workgroup is specified, an owner that belongs to that workgroup can be specified.
            </summary>
        </member>
        <member name="P:PX.Data.EP.IAssign.WorkgroupID">
            <summary>
            The identifier of the workgroup responsible for the current document.
            </summary>
            <value>
            Corresponds to the <see cref="P:PX.TM.EPCompanyTree.WorkGroupID">EPCompanyTree.WorkGroupID</see> field.
            </value>
        </member>
        <member name="P:PX.Data.EP.IAssign.OwnerID">
            <summary>
            The identifier of the user responsible for the current document.
            If the <see cref="P:PX.Data.EP.IAssign.WorkgroupID"/> is specified, only a user that belongs
            to the specified workgroup can be used.
            </summary>
            <value>
            Corresponds to the PX.Objects.CR.Contact.ContactID field.
            </value>
        </member>
        <member name="T:PX.Data.EP.FlexibleMailSender">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.MailAccountManager">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.MailAccountManager.MailSenderFactory">
            <summary>
            Factory method used to initialize <see cref="T:PX.Common.Mail.MailSender"/> from the <see cref="T:PX.SM.EMailAccount">Email Account</see>.
            Inject it from the DI.
            </summary>
            <param name="emailAccount">Email account for which <see cref="T:PX.Common.Mail.MailSender"/> will be created.</param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.EP.MailAccountManager.MailReceiverFactory">
            <summary>
            Factory method used to initialize <see cref="T:PX.Common.Mail.MailReceiver"/> from the <see cref="T:PX.SM.EMailAccount">Email Account</see>.
            Inject it from the DI.
            </summary>
            <param name="emailAccount">Email account for which <see cref="T:PX.Common.Mail.MailReceiver"/> will be created.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.EP.MailAccountManager.BaseSettingsDefinition.GetEMailAccount(System.Nullable{System.Int32})">
            <summary>
            Gets EMailAccount by EMailAccountID, returns null if not found
            </summary>
        </member>
        <member name="M:PX.Data.EP.MailAccountManager.BaseSettingsDefinition.GetPreferencesEmail">
            <summary>
            Gets PreferencesEmail, returns null if not found
            </summary>
        </member>
        <member name="T:PX.Data.EP.IMailReceiveProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.IMessageProccessor">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.IMailSendProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.INotificationSender">
            <exclude/>
        </member>
        <member name="T:PX.Data.EP.EmptyNotificationSender">
            <exclude/>
        </member>
        <member name="M:PX.Data.FieldEditPreventerExt.MakeRuleWeakeningScopeFor``1(PX.Data.PXGraph,PX.Data.RuleWeakenLevel)">
            <summary>
            Creates an instance of scope, within which all edit preventing rules (<see cref="T:PX.Data.EditPreventor`1"/>) for a specific field are weakened.
            </summary>
        </member>
        <member name="M:PX.Data.GraphHelper.Hold(PX.Data.PXCache,System.Object)">
            <summary>
            Hold entity in the cache
            </summary>
        </member>
        <member name="M:PX.Data.GraphHelper.MarkUpdated(PX.Data.PXCache,System.Object)">
            <summary>
            Mark entity as updated without firing any event
            </summary>
        </member>
        <member name="M:PX.Data.GraphHelper.MarkUpdated(PX.Data.PXCache,System.Object,System.Boolean)">
            <summary>
            Mark entity as updated without firing any event
            </summary>
        </member>
        <member name="M:PX.Data.GraphHelper.MarkDeleted(PX.Data.PXCache,System.Object)">
            <summary>
            Mark entity as deleted without firing any event 
            </summary>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.selected">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.cacheName">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.name">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.displayName">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.attributeID">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.order">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.hidden">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.FieldValue.required">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.IMassProcess`1">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.PXMassProcessBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.PXMassUpdateBase`2">
            <exclude/>
        </member>
        <member name="T:PX.Data.MassProcess.PXPrimaryGraphCollection">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXVirtualDACAttribute">
            <summary>Prevents the data view from selecting data records from the
            database.</summary>
            <remarks>The attribute can be placed on data views defined in a graph.
            The data view will not try to select data records from the database.
            You should define the optional method for this data view to form the
            resultset which the data view will return.</remarks>
            <example>
            <code>
            [PXVirtualDAC]
            public PXSelect&lt;PMProjectBalanceRecord,
                Where&lt;PMProjectBalanceRecord.recordID, IsNotNull&gt;, 
                OrderBy&lt;Asc&lt;PMProjectBalanceRecord.sortOrder&gt;&gt;&gt; BalanceRecords;
            </code>
            </example>
        </member>
        <member name="M:PX.Data.PXFieldScreenToSiteMapAddHelper`1.#ctor(PX.Data.PXGraph,PX.Metadata.IScreenInfoCacheControl,System.String,System.String,System.Type,System.Type,System.Type,System.Type,PX.Data.PXFieldScreenToSiteMapAddHelper{`0}.Field[][])">
            <summary>
            Creates new instance of the helper.
            </summary>
            <param name="screenIdPrefix">First two letter of ScreenID.</param>
            <param name="urlPrefix">Base url.</param>
            <param name="titleField">Title field for site map node.</param>
            <param name="screenIDField">Read-only field for showing ScreenID. Can be null.</param>
            <param name="fieldSets">Collection of the field sets. URL is created by appending each set of parameters filled by fields values.</param>
        </member>
        <member name="M:PX.Data.MultiFactorAuth.IMultiFactorService.GetCookieName(System.String)">
            <summary>
            Method returns name for remember device cookie 
            </summary>
            <param name="login"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.MultiFactorAuth.IMultiFactorService.IsAccessCodeValid(System.Int32,System.Guid,System.String)">
            <summary>
            Checks if one time code is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.MultiFactorAuth.IMultiFactorService.IsAccessCodeValid(System.String,System.String,System.String,System.Object,System.Tuple{System.Int32,System.Guid,System.Boolean}@,System.Nullable{PX.Data.MultiFactorAuth.ErrorReason}@)">
            <summary>
            Checks if one time code is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.MultiFactorAuth.IMultiFactorService.GeneratePersistentCodes(System.Guid,System.Int32,System.Int32)">
            <summary>
            Returns generated access codes to be used as one time access tokens. They are valid for lifetime days.
            </summary>
            <param name="count">count of access codes to be generated</param>
            <param name="lifetime">Number of days for codes to be valid</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.MultiFactorAuth.IMultiFactorService.GetUserIdsWithTwoFactorType(System.String,System.String,System.Boolean@,System.String[]@,System.Boolean@)">
            <summary>
            Returns users list by login and password with multifactor preferences
            </summary>
            <param name="login"></param>
            <param name="password"></param>
            <param name="isMultiFactorEnabled"></param>
            <param name="multiFactorProviders"></param>
            <param name="isPasswordChanging"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.ListEntryPoint">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.entryScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Data.ListEntryPoint.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Data.IChainHandler`1">
            <summary>
            Chain-of-Responsibility pattern event handler interface.
            </summary>
        </member>
        <member name="T:PX.Data.IListProvider">
            <exclude/>
        </member>
        <member name="M:PX.Data.IListProvider.TryRedirect(PX.Data.PXGraph,System.String)">
            <summary>
            Redirects to the List screen for provided entry screen.
            </summary>
        </member>
        <member name="M:PX.Data.IListProvider.GetCurrentSearches(System.String)">
            <summary>
            Returns key's values for current record in the Entry Screen.
            </summary>
        </member>
        <member name="M:PX.Data.IListProvider.SetCurrentSearches(System.String,System.Object[])">
            <summary>
            Saves key's values for current record in the Entry Screen.
            </summary>
        </member>
        <member name="T:PX.Data.LEPMaint">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXList">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXListProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXListsSiteMapModifier">
            <summary>
            Replaces all primary screens with corresponding list screens.
            </summary>
        </member>
        <member name="M:PX.Data.PXListsSiteMapModifier.Modify(PX.Data.PXSiteMapNode)">
            <exclude />
        </member>
        <member name="M:PX.Data.Process.PXAuditHelper.IsGenericScreen(PX.Data.PXSiteMapNode)">
            <summary>
            Returns true if the screen is generic and works with different entities
            </summary>
        </member>
        <member name="T:PX.Data.Process.IScheduleAdjustmentRule">
            <summary>
            Common interface for all schedule adjustment rules
            (schedule adjustment rule is a class that can adjust next run date based on some rule, 
            for example, run schedule monthly/weekly/first Sunday of a month/etc).
            </summary>
        </member>
        <member name="F:PX.Data.Process.ScheduleProcessor.IMPERSONATION_CONTEXT_USER_NAME">
            <summary>
            User name with high privileges to get required data
            </summary>
        </member>
        <member name="P:PX.Data.Process.ScheduleProcessor.ISettings.FirstRunDelay">
            <summary>
            Delay before first processor execution in milliseconds
            </summary>
        </member>
        <member name="P:PX.Data.Process.ScheduleProcessor.ISettings.OnErrorDelay">
            <summary>
            Delay executions after exception in milliseconds
            </summary>
        </member>
        <member name="P:PX.Data.Process.ScheduleProcessor.ISettings.WatcherInterLoopDelay">
            <summary>
            Delay between watcher iterations in milliseconds
            </summary>
        </member>
        <member name="P:PX.Data.Process.ScheduleProcessor.ISettings.DefaultIntervalBetweenExecutions">
            <summary>
            If there is no other scheduled tasks, watcher sleeps for that amount of time in milliseconds
            </summary>
        </member>
        <member name="P:PX.Data.Process.ScheduleProcessorOptions.DisableScheduleProcessor">
            <summary>
            Indicates whether schedule processor should be disabled in the system
            </summary>
        </member>
        <member name="P:PX.Data.Process.IScheduleProvider.ActiveSchedules">
            <summary>
            Returns active schedules only
            </summary>
        </member>
        <member name="P:PX.Data.Process.IScheduleProvider.AllSchedules">
            <summary>
            Returns all schedules despite its activity
            </summary>
        </member>
        <member name="M:PX.Data.Process.IScheduleProvider.Subscribe(System.Action{System.Object},System.Object)">
            <summary>
            Subscribes an <param name="action">action</param> to schedule modifications.
            </summary>
            <returns>Object that must be disposed when subscription is no longer needed.</returns>
        </member>
        <member name="M:PX.Data.AUScheduleExtensions.IsTimeInActiveRange(PX.SM.AUSchedule,System.DateTime)">
            <summary>
            Determines whether defined time is in active schedule range [StartTime, EndTime].
            </summary>
        </member>
        <member name="M:PX.Data.AUScheduleExtensions.ApplyAdjustmentRule(PX.SM.AUSchedule,PX.Data.Process.IScheduleAdjustmentRuleProvider)">
            <summary>
            Applies schedule adjustment rule provided by <see cref="T:PX.Data.Process.IScheduleAdjustmentRuleProvider"/> for defined schedule.
            If adjustment rule is null, nothing is applied.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.AUScheduleExtensions.AdjustNextDate(PX.SM.AUSchedule,System.DateTime,PX.Data.Process.IScheduleAdjustmentRuleProvider)" -->
        <member name="M:PX.Data.PXAutomation.ApplyAction(PX.Data.PXGraph,PX.Data.PXAction,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <returns>True, if need to save the record after applying the action.</returns>
        </member>
        <member name="M:PX.Data.PXAutomation.ApplyActionInt(PX.Data.PXGraph,PX.Data.PXAction,System.String,PX.Data.PXAutomation.Step,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <returns>True, if need to save the record after applying the action.</returns>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetWorkflowDefinitionFields(PX.Data.PXGraph)">
            <summary>
            Returns workflow state and flowId fields for graph
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetPossibleTransition(PX.Data.PXGraph)">
            <summary>
            Returns list of all possible transitions from current state and in current flow
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetAllExposedWorkflowActions(PX.Data.PXGraph)">
            <summary>
            Return list of all actions in graph, that have linked dynamic form
            or that are exposed to mobile via workflow
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.FillFormValues(PX.Data.PXGraph,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Fill dynamic form with corresponded values. For form fields, that are not presented in <paramref name="values"/> collection
            default value will be used
            </summary>
            <param name="formName">Form name</param>
            <param name="values">Fields with values, where value can be in internal and external format</param>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.FillFormValues(PX.Data.PXGraph,PX.Data.Automation.TransitionInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Fill dynamic form with corresponded values. For form fields, that are not presented in <paramref name="values"/> collection
            default value will be used
            </summary>
            <param name="transition">Transition, that use action with dynamic form</param>
            <param name="values">Fields with values, where value can be in internal and external format</param>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.FillFormValuesByAction(PX.Data.PXGraph,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Fill dynamic form with corresponded values. For form fields, that are not presented in <paramref name="values"/> collection
            default value will be used
            </summary>
            <param name="actionName">Action with dynamic form</param>
            <param name="values">Fields with values, where value can be in internal and external format</param>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetCurrentFormValues(PX.Data.PXGraph)">
            <summary>
            Returns currently stored dynamic form values 
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetPossibleComboBoxValuesForState(PX.Data.PXGraph,System.Type,System.String,System.String)">
            <summary>
            Return pairs of system value/desciption for selected combo-box field in selected workflow state
            </summary>
            <param name="graph">Graph</param>
            <param name="dacType">Type of DAC, that contains field</param>
            <param name="fieldName">Field name</param>
            <param name="state">Workflow state name (system or description)</param>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetRequiredFieldsForState(PX.Data.PXGraph,System.String)">
            <summary>
            Return list of dynamically required fields for selected workflow state
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetPossibleComboBoxValuesForState``1(PX.Data.PXGraph,System.String)">
            <summary>
            Return pairs of system value/desciption for selected combo-box field in selected workflow state
            </summary>
            <param name="graph">Graph</param>
            <param name="status">Workflow state name (system or description)</param>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetPossibleTransition(PX.Data.PXGraph,System.String)">
            <summary>
            Returns list of all possible transitions from current state and in current flow, that targets to <paramref name="targetState"/> state
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.IsInSpecifiedStatus(PX.Data.PXGraph,System.String)">
            <summary>
            Checks, if workflow for current graph is in <paramref name="state"/>
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetScreenFields(System.String,PX.Data.PXGraph)">
            <summary>
            Returns merged list of all form field state for selected screen
            </summary>
        </member>
        <member name="M:PX.Data.Automation.IWorkflowService.GetWorkflowAddedActions(System.String)">
            <summary>
            Returns Navigation and Workflow Actions, added in Workflow Configuration.
            </summary>
            <param name="screenId"></param>
            <returns></returns>
        </member>
        <member name="T:PX.Data.Automation.PXWorkflowMassProcessingAttribute">
            <exclude/>
        </member>
        <member name="P:PX.Data.Automation.PXWorkflowMassProcessingAttribute.DisplayName">
            <summary>Get, set.</summary>
        </member>
        <member name="P:PX.Data.Automation.PXWorkflowMassProcessingAttribute.Visible">
            <summary>Get, set.</summary>
        </member>
        <member name="T:PX.Data.Automation.PXWorkflowMassProcessingAttribute.undefinded">
            <exclude/>
        </member>
        <member name="M:PX.Data.Automation.PXWorkflowService.FieldDefaulting(System.Collections.Generic.IEnumerable{PX.Data.Process.Automation.State.ScreenTableField},PX.Data.PXCache,System.String,System.Object,System.Object@)">
            <summary>
            Evaluates default value for the field <paramref name="fieldName"/> based on default values of screen fields.
            </summary>
        </member>
        <member name="M:PX.Data.Automation.PXWorkflowService.CheckNonPersistentStateWhilePersisting(PX.Data.PXCache,PX.Data.PXRowPersistingEventArgs)">
            <summary>
            If current state is non persistent, user should not be able to save the entity
            </summary>
        </member>
        <member name="M:PX.Data.Automation.PXWorkflowService.GetRootStateName(System.String,PX.SM.AUWorkflow,System.String)">
            <summary>
            Get root state name of nested State.
            </summary>
            <param name="state"></param>
            <param name="graph"></param>
            <param name="workflow"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Automation.PXWorkflowService.ClearActionData">
            <summary>
            Clear workflow data that is usually copied into long run parameters. This parameters are used to finish workflow actions
            that run long runs in code
            Sometimes, long run's can be started not for action (f.e. telemetry data collection) - and if it happens, than such long run
            will capture current workflow status and finish it at the end
            </summary>
        </member>
        <member name="M:PX.Data.Automation.PXWorkflowService.PX#Concurrency#Internal#ILongOperationWorkflowAdapter#RestoreWorkflowParameters(PX.Concurrency.Internal.PXLongOperationPars)">
            <summary>
            Restore all workflow parameters (if any existed at the begin) 
            </summary>
            <param name="pxLongOperationPars"></param>
        </member>
        <member name="T:PX.Data.Automation.PXWorkflowService.TransitionMovementData">
            <summary>
            Data to execute workflow transition
            </summary>
        </member>
        <member name="M:PX.Data.Automation.Services.NavigationTemplateHelper.GetTemplatePlaceholders(System.String)">
            <summary>
            Gets list of template placeholders
            </summary>
            <param name="template">Templated string with placeholders surrounded with double or triple brackets</param>
            <returns>List of placeholders found in the provided <paramref name="template"/></returns>
        </member>
        <member name="M:PX.Data.Automation.Services.NavigationTemplateHelper.IsExternalUrlOrTemplate(System.String)">
            <summary>
            Checks if provided <paramref name="value"/> is external URL or contains template placeholders
            </summary>
            <param name="value">Value to be checked</param>
        </member>
        <member name="M:PX.Data.Automation.Services.NavigationTemplateHelper.ProcessTemplate(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Fills templated string with values
            </summary>
            <param name="templatedString">String with template placeholders</param>
            <param name="templateParameters">Template parameters</param>
        </member>
        <member name="M:PX.Data.PXBatchList`1.ProcessBatch(System.Func{System.Threading.CancellationToken,`0},System.Threading.CancellationToken)">
            <summary>
            Adds a batch to the list to execut and run long operation.
            If the maximum number of elements in the simultaneous execution is reached, then expects the completion of any first element.
            </summary>
        </member>
        <member name="M:PX.Data.PXBatchList`1.MergeCompleted">
            <summary>
            Clears the list of completed batches. Save last batch error.
            </summary>
        </member>
        <member name="M:PX.Data.PXBatchList`1.Complete">
            <summary>
            Throw exception if one of the batch is completed with an error
            </summary>
        </member>
        <member name="T:PX.Data.PXParallelProcessingOptions">
            <summary>The parallel processing options that override the default ones and the ones from the <tt>web.config</tt> file.</summary>
            <remarks>
              <para>To enable parallel processing in the system, you need to set the <see cref="F:PX.Common.WebConfig.ParallelProcessingDisabled">ParallelProcessingDisabled</see> key to <see langword="false" /> in the <tt>appSettings</tt>
            section of the <tt>web.config</tt> file. You can additionally set the values of the following keys:</para>
              <list type="bullet">
                <item>
                  <see cref="F:PX.Common.WebConfig.ParallelProcessingBatchSize">ParallelProcessingBatchSize</see>: You specify the number of records that are included in a batch for parallel processing. By default, the value is
                10. You can override this value in code.</item>
                <item>
                  <see cref="F:PX.Common.WebConfig.EnableAutoNumberingInSeparateConnection">EnableAutoNumberingInSeparateConnection</see>: You set the key to <tt>true</tt> to make the system issue new document numbers in a separate
                    connection to the <tt>NumberingSequence</tt> table, which means that the numbering sequence does not blocks other threads that are running in parallel.
                    You cannot override this value in code.
                    <para><b>Note:</b> If a thread fails to process a batch, the numbering sequence may have gaps in the numbering sequence.</para></item>
                <item>
                  <see cref="F:PX.Common.WebConfig.ParallelProcessingMaxThreads">ParallelProcessingMaxThreads</see>: Specify the maximum number of parallel threads that are used by the processing delegates. You cannot override
                    this value in code.
                    <para><b>Tip:</b> The system calculates the number of cores that are used for parallel processing depending on the license parameters and the actual
                    number of cores available on the machine. The value of the key can additionally decrease the number of threads available for parallel processing.</para></item>
                <item>
                  <see cref="!:PX.Common.WebConfig.IsParallelProcessingSkipBatchExceptions">IsParallelProcessingSkipBatchExceptions</see>: Set the key to <tt>true</tt> to make the system continue with processing of other batches if an
                exception occurs during processing of a batch. The error is still recorded and, if you use a parallel processing via a processing view, the
                <see cref="T:PX.Data.PXOperationCompletedWithErrorException" /> exception is thrown after the processing of all batches. If you use the
                <see cref="!:PX.Data.PXProcessing.ProcessItemsParallel&lt;TTable&gt;(List&lt;TTable&gt;, Action&lt;PXGraph, TTable&gt;, Func&lt;PXGraph&gt;, PXParallelProcessingOptions)">PXProcessing.ProcessItemsParallel</see> method directly, you can handle the errors by yourself. However, if the initial exception is
                <see cref="T:PX.Data.PXOperationCompletedWithErrorException" /> exception, which is a system exception, the batch is marked as processed incorrectly regardless of the
                value of the key. You cannot override the value of this key in code.</item>
              </list>
            </remarks>
            <example>
              <code title="Example" description="To configure the parallel execution for a particular processing view, you need to set ParallelProcessingOptions of the processing view, as shown in the example below." lang="CS">
            MyProcessingView.ParallelProcessingOptions =
               settings =&gt;
               {
                  settings.IsEnabled = true;
                  settings.BatchSize = 10;
               };</code>
            </example>
        </member>
        <member name="F:PX.Data.PXParallelProcessingOptions.IsEnabled">
            <summary>A field that specifies (if set to <see langword="true"/>) that parallel processing is enabled for a particular processing.</summary>
        </member>
        <member name="F:PX.Data.PXParallelProcessingOptions.BatchSize">
            <summary>The batch size for parallel processing.</summary>
            <remarks>You override this field if you need to use a custom batch size for this parallel processing.</remarks>
        </member>
        <member name="F:PX.Data.PXParallelProcessingOptions.SplitToBatches">
            <summary>A delegate for custom batch splitting.</summary>
            <remarks>If the <strong>SplitToBatches</strong> delegate is not <see langword="null"></see>, it is used instead of the algorithm of the original
            <strong>PX.Data.PXBatchList.SplitToBatches</strong> function.</remarks>
            <example>
              <code title="Example" description="The following code shows an example of the SplitToBatches delegate. The ScheduledTran rows are ordered by the key, which consists of the following fields: ScheduleID, ComponentID, and DetailLineNbr. The customized SplitToBatches delegate corrects the batch size if the ScheduledTran rows with the same parent key are split to multiple batches. The correction of the batch size is necessary because the process updates the parent object of the rows (which is DRScheduleDetail) and has to do it only once. " lang="CS">
            private IEnumerable&lt;(int, int)&gt; SplitToBatches(IList list, PXParallelProcessingOptions options)
            {
                ScheduledTran tEnd, tNext;
                int start = 0, end = 0;
             
                while (start &lt; list.Count)
                {
                    end = Math.Min(start + options.BatchSize - 1, list.Count - 1) - 1;
                    do
                    {
                        end++;
                        tEnd = (ScheduledTran)list[end];
                        tNext = (end + 1) &lt; list.Count ? ( )list[end + 1] : null;
                    }
                    while (tEnd.ScheduleID == tNext?.ScheduleID &amp;&amp; tEnd.ComponentID == tNext?.ComponentID &amp;&amp; tEnd.DetailLineNbr == tNext?.DetailLineNbr);
             
                    yield return (start, end);
                    start = end + 1;
                }
            }
             
            protected virtual void ScheduleRecognitionFilter_RowSelected(PXCache cache, PXRowSelectedEventArgs e)
            {
                ScheduleRecognitionFilter filter = Filter.Current;
                DateTime? filterDate = filter.RecDate;
             
                if (PX.Common.WebConfig.ParallelProcessingDisabled == false)
                {
                    Items.ParallelProcessingOptions = settings =&gt; {
                        settings.IsEnabled = true;
                        settings.BatchSize = 1000;
                        settings.SplitToBatches = SplitToBatches;
                    };
                }
                Items.SetProcessDelegate(delegate (List&lt;ScheduledTran&gt; items)
                {
                    RunRecognition(items, filterDate);
                });
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.ImageExtractor.ExtractEmbedded(System.String,System.Func{PX.Data.ImageExtractor.ImageInfo,System.ValueTuple{System.String,System.String}},System.String@,System.Collections.Generic.ICollection{PX.Data.ImageExtractor.ImageInfo}@)">
            <summary>
            Extract embedded images
            </summary>
            <param name="content">HTML-content</param>
            <param name="getSrcAndTitle">function that return values for "src" and "title" attributes of "img" tag</param>
            <param name="newContent">updated content</param>
            <param name="images"></param>
            <remarks>
            If getSrcAndTitle return empty string or null as "title", then no "title" attribute added
            </remarks>
            <returns>true if any embedded images successfully processed</returns>
        </member>
        <member name="M:PX.Data.ImageExtractor.ParseEmbedded(System.String,System.String,PX.Data.ImageExtractor.ImageInfo@)">
            <summary>
            Parse embedded image info
            </summary>
            <param name="imgSource">text of src tag</param>
            <param name="imgAlt">text of alt tag</param>
            <param name="imageInfo">info about embedded image</param>
            <returns>
            true if embedded image extracted from imageSource
            false if imageSource is not embedded or without data, or unknown mime type</returns>
        </member>
        <member name="T:PX.Data.PXLongRunStatus">
            <summary>
              <para>This enumeration specifies the status type of a long-running operation.</para>
            </summary>
            <remarks>
              <para>The <see cref="!:PX.Data.PXLongOperation.GetStatus&lt;Object&gt;">GetStatus</see> methods return a value of this type.</para>
            </remarks>
        </member>
        <member name="F:PX.Data.PXLongRunStatus.NotExists">
            <summary>
            The long-running operation does not exist on the server.
            </summary>
        </member>
        <member name="F:PX.Data.PXLongRunStatus.InProcess">
            <summary>
            The long-running operation has not yet completed.
            </summary>
        </member>
        <member name="F:PX.Data.PXLongRunStatus.Completed">
            <summary>
            The long-running operation has completed.
            </summary>
        </member>
        <member name="F:PX.Data.PXLongRunStatus.Aborted">
            <summary>
            The long-running operation has been aborted.
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess">
            <summary>
            Serves as a common entry point for all attributes
            that are involved into Quick Process declarative configuration,
            and also contains a <see cref="M:PX.Data.PXQuickProcess.Start``3(``0,``1,``2)"/>
            method from which Quick Process could be configured and started
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Action`1">
            <summary>
            Special Quick Process <see cref="T:PX.Data.PXAction"/>,
            which state should be configured with <see cref="T:PX.Data.PXQuickProcess.Action`1.ConfiguredBy`1"/> option
            </summary>
            <typeparam name="TPrimary">The primary entity type</typeparam>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Action`1.ConfiguredBy`1">
            <summary>
            Special Quick Process <see cref="T:PX.Data.PXAction"/>
            which state is automatically configured by a <typeparamref name="TConfig"/> instance
            </summary>
            <typeparam name="TConfig">The configuring entity type</typeparam>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Action`1.ConfiguredBy`1.#ctor(PX.Data.PXGraph)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Action`1.ConfiguredBy`1.#ctor(PX.Data.PXGraph,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Action`1.ConfiguredBy`1.#ctor(PX.Data.PXGraph,System.Delegate)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step">
            <summary>
            Quick Process declarative configuration attributes
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsBoundToAttribute">
            <summary>
            Binds <see cref="T:PX.Data.IBqlField"/> with a graph action
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.GraphType">
            <summary>
            The graph type
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.ActionName">
            <summary>
            The action name
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.OnSuccessMessage">
            <summary>
            On success message
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.OnFailureMessage">
            <summary>
            On failure message
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.DisplayName">
            <summary>
            Gets or sets the field name displayed in the user interface.
            This name is rendered as the input control label on a form or as the grid column header.
            </summary>
            <remarks>The default value is the menuID.</remarks>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.#ctor(System.Type,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Binds <see cref="T:PX.Data.IBqlField"/> with a graph action
            </summary>
            <param name="graphType">The graph type</param>
            <param name="actionName">The action name</param>
            <param name="onSuccessMsg">On success message</param>
            <param name="onFailureMsg">On failure message</param>
            <param name="nonDatabaseField">Indicates whether target field should be an unbound field</param>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Binds <see cref="T:PX.Data.IBqlField"/> with a graph action
            </summary>
            <param name="stepDefinition">Type that implements <see cref="T:PX.Data.PXQuickProcess.Step.IDefinition"/> and defines a graph type and action name</param>
            <param name="nonDatabaseField">Indicates whether target field should be an unbound field</param>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.CacheAttached(PX.Data.PXCache)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsBoundToAttribute.RowSelected(PX.Data.PXCache,PX.Data.PXRowSelectedEventArgs)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.RelatedFieldAttribute">
            <summary>
            Indicates a field that is related to a specific Quick Process step
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.RelatedFieldAttribute.StepField">
            <summary>
            Quick Process step reference
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.RelatedFieldAttribute.SyncVisibilityWithRelatedStep">
            <summary>
            Indicates whether visibility of the targeted field should be synchronized
            with visibility of the related Quick Process step.
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.RelatedFieldAttribute.#ctor(System.Type)">
            <summary>
            Indicates a field that is related to a specific Quick Process step
            </summary>
            <param name="stepField">Quick Process step reference</param>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.RelatedFieldAttribute.GetStepRelatedFields(PX.Data.PXCache,System.Object)">
            <summary>
            Extract related fields info of the Quick Process steps
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns>Step-fields names to related fields names map</returns>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.RelatedParameterAttribute">
            <summary>
            Declares a parameter for a specific Quick Process step
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.RelatedParameterAttribute.ActionParameterName">
            <summary>
            Parameter name of the bound method of the related step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.RelatedParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Declares a parameter for a specific Quick process step
            </summary>
            <param name="stepField">Quick Process step reference</param>
            <param name="actionParameterName">Parameter name of the bound method of the related step</param>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.StepsRelationAttribute">
            <summary>
            Declares dependencies between Quick Process steps
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.StepsRelationAttribute.GetRestrictedSteps(PX.Data.PXCache,System.Object)">
            <summary>
            Extract presence change restriction info of the Quick Process steps
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns>Fields names to restrict reasons map</returns>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.StepsRelationAttribute.IsStepRestricted``1(PX.Data.PXCache,System.Object)">
            <summary>
            Inspect whether change of the step presence is restricted 
            </summary>
            <typeparam name="TField">Inspected field type</typeparam>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns><c>true</c> if the step is restricted, otherwise - <c>false</c></returns>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.StepsRelationAttribute.IsStepRestricted(PX.Data.PXCache,System.Object,System.String)">
            <summary>
            Inspect whether change of the step presence is restricted 
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <param name="fieldName">Inspected field name</param>
            <returns><c>true</c> if the step is restricted, otherwise - <c>false</c></returns>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.StepsRelationAttribute.RestrictChangeReason">
            <summary>
            Indicates why change of the step presence is restricted
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.RequiresStepsAttribute">
            <summary>
            Indicates that the current step requires presence of some other steps
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.RequiresStepsAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Indicates that the current step requires presence of some other steps
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsRequiredByStepsAttribute">
            <summary>
            Indicates that the current step presence is required by some other steps
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsRequiredByStepsAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Indicates that the current step presence is required by some other steps
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsApplicableAttribute">
            <summary>
            Declares applicability condition of the current step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsApplicableAttribute.#ctor(System.Type)">
            <summary>
            Declares applicability condition of the current step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsApplicableAttribute.GetStepsApplicability(PX.Data.PXCache,System.Object)">
            <summary>
            Extract applicability info of the Quick Process steps
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns>Fields names to their applicability map</returns>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsApplicableAttribute.IsApplicable(PX.Data.PXCache,System.Object)">
            <summary>
            Indicates whether applicability condition of the current step is met
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns><c>true</c> if applicability condition of the current step is met, otherwise - <c>false</c></returns>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsStartPointAttribute">
            <summary>
            Indicates when the current step is considered as a flow start point.
            Quick Process flow could be started only from a start point step
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsStartPointAttribute.PreventStepPresenceChanging">
            <summary>
            Indicates whether step presence changing should be prevented in case when the start point condition is met
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsStartPointAttribute.#ctor(System.Type)">
            <summary>
            Indicates when the current step is considered as a flow start point.
            Quick Process flow could be started only from a start point step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsStartPointAttribute.FieldDefaulting(PX.Data.PXCache,PX.Data.PXFieldDefaultingEventArgs)">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsStartPointAttribute.IsStartPoint(PX.Data.PXCache,System.Object)">
            <summary>
            Indicates whether start point condition of the current step is met
            </summary>
            <param name="cache">Quick Process configuration entity cache</param>
            <param name="row">Quick Process configuration entity</param>
            <returns><c>true</c> if tart point condition of the current step is met, otherwise - <c>false</c></returns>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsInsertedJustAfterAttribute">
            <summary>
            Declares that the current step should be inserted just after the related step in the Quick Process flow
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsInsertedJustAfterAttribute.PredecessorField">
            <summary>
            Predecessor step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsInsertedJustAfterAttribute.#ctor(System.Type)">
            <summary>
            Declares that the current step should be inserted just after the related step in the Quick Process flow
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.Step.IsInsertedJustBeforeAttribute">
            <summary>
            Declares that the current step should be inserted just before the related step in the Quick Process flow
            </summary>
        </member>
        <member name="P:PX.Data.PXQuickProcess.Step.IsInsertedJustBeforeAttribute.SuccessorField">
            <summary>
            Successor step
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Step.IsInsertedJustBeforeAttribute.#ctor(System.Type)">
            <summary>
            Declares that the current step should be inserted just before the related step in the Quick Process flow
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.AutoRedirectOptionAttribute">
            <summary>
            Indicates whether Quick Process reports and documents should be opened immediately on their creation.
            </summary>
        </member>
        <member name="T:PX.Data.PXQuickProcess.AutoDownloadReportsOptionAttribute">
            <summary>
            Indicates whether Quick Process reports should be downloaded immediately on their creation.
            </summary>
        </member>
        <member name="M:PX.Data.PXQuickProcess.Start``3(``0,``1,``2)">
            <summary>
            Start a Quick Process execution, configured by the <paramref name="quickProcessConfig"/>
            </summary>
            <typeparam name="TGraph">Entry point graph type</typeparam>
            <typeparam name="TTable">Entry point entity type</typeparam>
            <typeparam name="TConfig">Configuration entity type</typeparam>
            <param name="graph">The graph that requests a Quick Process execution</param>
            <param name="startEntity">The entity from which processing should be started</param>
            <param name="quickProcessConfig">The entity that should configure the Quick Process execution</param>
        </member>
        <member name="M:PX.Data.PXQuickProcess.StartAndGetExceptions``3(``0,``1,``2)">
            <summary>
            Start a Quick Process execution, configured by the <paramref name="quickProcessConfig"/>
            </summary>
            <typeparam name="TGraph">Entry point graph type</typeparam>
            <typeparam name="TTable">Entry point entity type</typeparam>
            <typeparam name="TConfig">Configuration entity type</typeparam>
            <param name="graph">The graph that requests a Quick Process execution</param>
            <param name="startEntity">The entity from which processing should be started</param>
            <param name="quickProcessConfig">The entity that should configure the Quick Process execution</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.DisplayName(System.String)">
            <summary>
            Sets a display name for the action category.
            </summary>
            <param name="displayName">A display name</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.PlaceAfter(System.String)">
            <summary>
            Places the action category after the specified action category.
            </summary>
            <param name="categoryName">A name of the action category after which the current category should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.PlaceAfter(PX.Data.WorkflowAPI.FolderType)">
            <summary>
            Places the action category after the specified action category.
            </summary>
            <param name="folderType">A folder type of the category after which the current category should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.PlaceAfter(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured)">
            <summary>
            Places the action category after the specified action category.
            </summary>
            <param name="category">An action category after which the current category should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.Place(PX.Data.WorkflowAPI.Placement,System.String)">
            <summary>
            Places the action category in the specified location of the list of categories.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the category is placed first or last, respectively, and the <paramref name="relativeCategoryName"/> parameter is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and the <paramref name="relativeCategoryName"/> parameter is specified,
            the category is placed after or before the category specified by <paramref name="relativeCategoryName"/>, respectively.
            </summary>
            <param name="placement">A location of the category in the list of categories.</param>
            <param name="relativeCategoryName">A name of the action category relative to which the current category should be placed.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.Place(PX.Data.WorkflowAPI.Placement,PX.Data.WorkflowAPI.FolderType)">
            <summary>
            Places the action category in the specified location of the list of categories.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the category is placed first or last, respectively, and the <paramref name="relativeFolderType"/> parameter is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and the <paramref name="relativeFolderType"/> parameter is specified,
            the category is placed after or before the category specified by <paramref name="relativeFolderType"/>, respectively.
            </summary>
            <param name="placement">A location of the category in the list of categories.</param>
            <param name="relativeFolderType">A folder type of the category relative to which the current category should be placed.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IAllowOptionalConfigCategory.Place(PX.Data.WorkflowAPI.Placement,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured)">
            <summary>
            Places the action category in the specified location of the list of categories.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the category is placed first or last, respectively, and the <paramref name="relativeCategory"/> parameter is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> equals <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and the <paramref name="relativeCategory"/> parameter is specified,
            the category is placed after or before the category specified by <paramref name="relativeCategory"/>, respectively.
            </summary>
            <param name="placement">A location of the category in the list of categories.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.IContainerFillerCategories.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured)">
            <summary>Adds a configured category object to the screen configuration.</summary>
            <param name="action">The configured category object.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionCategory.ContainerAdjusterCategories.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ActionDefinitionBuilder.CreateNew(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Creates a new navigation action or workflow action object.</summary>
            <param name="actionName">Internal name of an action which will be used to identify the action in the Graph.Actions collection.</param>
            <param name="initializer">Function that is used to configure the new action object.</param>
            <returns>Configured action object that can be used in a workflow and added to a graph as an action.</returns>
            <example>
              <code title="Example" description="Suppose you need to define the new Assign action which updates the CROpportunity.Resolution field, is located in the Action folder, and is displayed on a mass processing form for updating opportunities (the Udpate Opportunities (CR503120) form). The code for such action looks as shown below." lang="CS">
            var actionAssign = context.ActionDefinitions.CreateNew("Assign", action =&gt; action
                .WithFieldAssignments(fields =&gt;
                {
                    fields.Add&lt;CROpportunity.resolution&gt;(f =&gt; f.SetFromValue("Assigned"));
                })
                .DisplayName("Assign")                        
                .InFolder(FolderType.ActionsFolder, "Lost")
                .MassProcessingScreen&lt;UpdateOpportunityMassProcess&gt;());</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ActionDefinitionBuilder.CreateExisting(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Wraps an existing graph action with an action definition object addressing this object by the specified internal name.</summary>
            <param name="actionName">The internal name for an existing graph action.</param>
            <param name="initializer">Function that is used to configure behaviour of the existing action.</param>
            <returns>Configured action object that can be used in a workflow.</returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ActionDefinitionBuilder.CreateExisting(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Wraps an existing graph action with an action definition object addressing this object by the PXAction graph member.</summary>
            <param name="actionSelector">Expression that is used to address the PXAction graph member.</param>
            <param name="initializer">Function that is used to configure behaviour of the existing action.</param>
            <returns>Configured action object that can be used in a workflow.</returns>
            <example>
              <code title="Example" description="Suppose you want to wrap the Release action on the Cases (CR306000) form. The code looks as shown below. First you get the context of the screen. Then you call the CreateExisting method." lang="CS">
            var context = config.GetScreenConfigurationContext&lt;CRCaseMaint, CRCase&gt;();
             
            var gactionRelease = context.ActionDefinitions.CreateExisting(g =&gt; g.release, a =&gt; a
                                .InFolder(FolderType.ActionsFolder)
                                .MassProcessingScreen&lt;CRCaseReleaseProcess&gt;());</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ActionDefinitionBuilder.CreateExisting``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Wraps an existing graph action with an action definition object addressing this object by the PXAction member of a graph extension.</summary>
            <typeparam name="TExtension">Type of the graph extension where the action is declared.</typeparam>
            <param name="actionSelector">Expression that is used to address the PXAction member of a graph extension.</param>
            <param name="initializer">Function that is used to configure behaviour of the existing action.</param>
            <returns>Configured action object that can be used in a workflow.</returns>
            <example>
              <code title="Example" description="Suppose, on the Leads (CR301000) form, you need to wrap the ConvertToOpportunityAll action which is declared in the CreateOpportunity graph extension. The code looks as shown below. First, you get the context of the screen. Then you call the CreateExisting method." lang="CS">
            var context = configuration.GetScreenConfigurationContext&lt;LeadMaint, CRLead&gt;();
             
            var actionConvertToOpportunityAll = context.ActionDefinitions.CreateExisting&lt;CreateOpportunityExt&gt;(
                e =&gt; e.ConvertToOpportunityAll, a =&gt; a
                    .WithFieldAssignments(fields =&gt;
                    {
                        fields.Add&lt;CRLead.resolution&gt;(f =&gt; f.SetFromValue(reasons[States.Converted].@default));
                        fields.Add&lt;CRLead.isActive&gt;(f =&gt; f.SetFromValue(false));
                    }).InFolder(FolderType.ActionsFolder));</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ActionDefinitionBuilder.Get(System.String)">
            <summary>Gets the configured action object by the internal name of the action from the screen configuration.</summary>
            <param name="actionName">Internal name of the action.</param>
            <returns>Configured action object.</returns>
            <example>
              <code title="Example" description="Suppose you need to get an object for the action named Assign in the OpportunityMaint graph. The code looks as shown below. First you get the context of the screen. Then you get the action object." lang="CS">
            var context = config.GetScreenConfigurationContext&lt;OpportunityMaint, CROpportunity&gt;();
            var actionAssign = context.ActionDefinitions.Get("Assign");</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.DisplayName(System.String)">
            <summary>Sets the display name of an action.</summary>
            <param name="displayName">Display name of an action</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.PlaceAfter(System.String)">
            <summary>Places the current action in the Graph.Actions collection after <paramref name="actionName" /> action.</summary>
            <param name="actionName">The internal name of the action in the Graph.Actions collection that should precede the current action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.PlaceAfter(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>Places the current action in the Graph.Actions collection after <paramref name="actionSelector" /> action.</summary>
            <param name="actionSelector">Expression to get the action in the Graph.Actions collection which should precede the current action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.PlaceAfter(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Places the current action in the Graph.Actions collection after the <paramref name="action" /> action.</summary>
            <param name="action">Definition of an action that should precede the current action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.WithForm(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured)">
            <summary>Sets a dialog box that will be shown to a user before the action is executed.</summary>
            <param name="form">Dialog box object.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.MassProcessingScreen(System.String)">
            <summary>Specified the mass processing form where the current action will be available for processing multiple records.</summary>
            <param name="screenId">The ID of the mass processing form.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.MassProcessingScreen``1">
            <summary>Specified the mass processing form where the current action will be available for processing multiple records.</summary>
            <param name="screenId"></param>
            <typeparam name="T">Graph name of the mass processing form.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsCreateRecordScreen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredCreate)">
            <summary>Specifies that the current action is a redirection action that creates a new record.</summary>
            <param name="createAction">Settings for a form which the action opens. The settings contain specifications on creating a new record.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsSearchRecordScreen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredSearch)">
            <summary>Specified that the current action opens a form where a user can search for specific records.</summary>
            <param name="createAction">Allows to set screen settings for record creation.</param>
            <param name="searchAction">Predefined action which opens the form to search records.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsRunReportScreen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredRunReport)">
            <summary>Specified that the current action runs a report.</summary>
            <param name="createAction">Allows to set screen settings for record creation.</param>
            <param name="runReportAction">Predefined action which runs a report.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsSidePanelScreen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredSidePanel)">
            <summary>
            Specify that the current navigation action is a side panel action.
            </summary>
            <param name="sidePanelAction">Side panel configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsHiddenWhen(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>Specified that the current action must be hidden on the form when the provided condition is true.</summary>
            <param name="condition">Function which defines the condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsHiddenWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>Specified that the current action must be hidden on the form when the provided condition is true.</summary>
            <param name="condition">Preconfigured condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsHiddenAlways">
            <summary>Specifies that current action must always be hidden on the form. Use this method for auto-run actions.</summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsDisabledWhen(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>Specifies that current action must be disabled on the form when the provided condition is true.</summary>
            <param name="condition">Function which defines the condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsDisabledWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>Specifies that current action must be disabled on the form when the provided condition is true.</summary>
            <param name="condition">Preconfigured condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.IsDisabledAlways">
            <summary>Specifies that the current action must always be disabled on the form.</summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.WithFieldAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>Sets an ordered list of primary DAC fields that will be updated before the action method is executed.</summary>
            <param name="containerFiller">Definition of fields to be updated.</param>
            <remarks>The method is applicable only to graph actions because only such actions have a method to execute.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.WithParameterAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerParameters})">
            <summary>Sets an ordered list of parameters that will be used to execute the action method.</summary>
            <param name="containerFiller">Definition of parameters for the action.</param>
            <remarks>The method is applicable only to graph actions because only such actions have a method to execute.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IAllowOptionalConfigAction.WithDisplayOnToolbar(PX.Data.WorkflowAPI.DisplayOnToolBar)">
            <summary>
            Specifies how current action is displayed on main toolbar
            </summary>
            <param name="displayOnToolbar"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory)">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">A predefined category</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,System.String)">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">A predefined category</param>
            <param name="previousActionName">A name of the action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">A predefined category</param>
            <param name="previousActionSelector">A BQL expression that selects an action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">A predefined category</param>
            <param name="previousAction">An action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,PX.Data.WorkflowAPI.Placement,System.String)">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeActionName"/> is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and <paramref name="relativeActionName"/> is specified,
            the action is placed after or before the action specified by <paramref name="relativeActionName"/>, respectively.
            </summary>
            <param name="category">A predefined category</param>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionName">A name of the action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,PX.Data.WorkflowAPI.Placement,System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeActionSelector"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/>,
            the action is placed after or before the action specified by <paramref name="relativeActionSelector"/>, respectively.
            </summary>
            <param name="category">A predefined category</param>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionSelector">A BQL expression that selects an action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.PredefinedCategory,PX.Data.WorkflowAPI.Placement,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeAction"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and <paramref name="relativeAction"/> is specified,
            the action is placed after or before the action specified by <paramref name="relativeAction"/>, respectively.
            </summary>
            <param name="category">A predefined category</param>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeAction">An action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured)">
            <summary>
            Puts an action into a category.
            </summary>
            <param name="category">An action category</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,System.String)">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">An action category</param>
            <param name="previousActionName">A name of the action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">An action category</param>
            <param name="previousActionSelector">A BQL expression that selects an action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Puts an action into a category and places the action after the specified action in this category.
            </summary>
            <param name="category">An action category</param>
            <param name="previousAction">An action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,PX.Data.WorkflowAPI.Placement,System.String)">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeActionName"/> is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and <paramref name="relativeActionName"/> is specified,
            the action is placed after or before the action specified by <paramref name="relativeActionName"/>, respectively.
            </summary>
            <param name="category">An action category</param>
            <param name="placement">specifies where to place action in the category</param>
            <param name="relativeActionName">another action specified by name</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,PX.Data.WorkflowAPI.Placement,System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeActionSelector"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/>,
            the action is placed after or before the action specified by <paramref name="relativeActionSelector"/>, respectively.
            </summary>
            <param name="category">An action category</param>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionName">A name of the action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#WithCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionCategory.IConfigured,PX.Data.WorkflowAPI.Placement,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Puts the current action into a category and places the action into a specified location inside the category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in this category, respectively, <paramref name="relativeAction"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and <paramref name="relativeAction"/> is specified,
            the action is placed after or before the action specified by <paramref name="relativeAction"/>, respectively.
            </summary>
            <param name="category">An action category</param>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionSelector">A BQL expression that selects an action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceAfterInCategory(System.String)">
            <summary>
            Places the current action after the specified action inside the current action's category.
            </summary>
            <param name="previousActionName">A name of the action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceAfterInCategory(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Places the current action after the specified action inside the current action's category.
            </summary>
            <param name="previousActionSelector">A BQL expression that selects an action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceAfterInCategory(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Places the current action after the specified action inside the current action's category.
            </summary>
            <param name="previousAction">An action after which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceInCategory(PX.Data.WorkflowAPI.Placement,System.String)">
            <summary>
            Places the current action into a specified location inside the current action's category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in category, respectively, <paramref name="relativeActionName"/> is ignored and can be <see langword="null"/>.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/> and <paramref name="relativeActionName"/> is specified,
            the action is placed after or before the action specified by <paramref name="relativeActionName"/>, respectively.
            </summary>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionName">A name of the action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceInCategory(PX.Data.WorkflowAPI.Placement,System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Places the current action into a specified location inside the current action's category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in category, respectively, <paramref name="relativeActionSelector"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/>,
            the action is placed after or before the action specified by <paramref name="relativeActionSelector"/>, respectively.
            </summary>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeActionSelector">A BQL expression that selects an action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ConfiguratorAction.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#ActionDefinition#IAllowOptionalConfigAction#PlaceInCategory(PX.Data.WorkflowAPI.Placement,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>
            Places the current action into a specified location inside the current action's category.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.First"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Last"/>,
            the action is placed first or last in category, respectively, <paramref name="relativeAction"/> is ignored.
            If <paramref name="placement"/> is <see cref="F:PX.Data.WorkflowAPI.Placement.After"/> or <see cref="F:PX.Data.WorkflowAPI.Placement.Before"/>,
            the action is placed after or before the action specified by <paramref name="relativeAction"/>, respectively.
            </summary>
            <param name="placement">A location of the action in the category</param>
            <param name="relativeAction">An action near which the current action should be placed</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IContainerFillerActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Adds settings for an existing graph action to the screen configuration.</summary>
            <param name="actionSelector">Expression that addresses the PXAction member of a graph.</param>
            <param name="config">Function that configures behaviour of the existing action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IContainerFillerActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Adds settings for an existing action defined in a graph extension to the screen configuration.</summary>
            <typeparam name="TExtension">Type of the graph extension where the action is declared.</typeparam>
            <param name="actionSelector">Expression that addresses the PXAction member of a graph extension.</param>
            <param name="config">Function that configures behaviour of the existing action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IContainerFillerActions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Adds settings for an existing or new action to the screen configuration.</summary>
            <param name="actionName">The internal name of the action.</param>
            <param name="config">Function that configures the action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IContainerFillerActions.AddNew(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>Adds settings for a new action to the screen configuration.</summary>
            <param name="actionName">The internal name of the action.</param>
            <param name="config">Function that configures the action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.IContainerFillerActions.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>Adds a configured action object to the screen configuration.</summary>
            <param name="action">The configured action object.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.AddNew(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Replace(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>
            Replace existing action definition configuration with new one.
            </summary>
            <param name="actionSelector">Expression, that is used to address PXAction Graph member.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Replace``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>
            Replace existing action definition configuration with new one.
            </summary>
            <typeparam name="TExtension">Graph extension type.</typeparam>
            <param name="actionSelector">Expression, that is used to address PXAction GraphExtension member.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IAllowOptionalConfigAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured})">
            <summary>
            Replace existing action definition configuration with new one.
            </summary>
            <param name="actionName">System action name for existing action definition.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Update(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction})">
            <summary>
            Update existing action definition configuration.
            </summary>
            <param name="actionSelector">Expression, that is used to address PXAction Graph member.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Update``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction})">
            <summary>
            Update existing action definition configuration.
            </summary>
            <typeparam name="TExtension">Graph extension type.</typeparam>
            <param name="actionSelector">Expression, that is used to address PXAction GraphExtension member.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.ConfiguratorAction})">
            <summary>
            Update existing action definition configuration.
            </summary>
            <param name="actionName">System action name for existing action definition.</param>
            <param name="config">Function, that is used to configure new action behaviour.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Remove(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>
            Remove action definition from screen configuration.
            </summary>
            <param name="actionSelector">Expression, that is used to address PXAction Graph member.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}})">
            <summary>
            Remove action definition from screen configuration.
            </summary>
            <typeparam name="TExtension">Graph extension type.</typeparam>
            <param name="actionSelector">Expression, that is used to address PXAction GraphExtension member.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionDefinition.ContainerAdjusterActions.Remove(System.String)">
            <summary>
            Remove action definition from screen configuration.
            </summary>
            <param name="actionName">System action name for existing action definition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ActionStateBuilder.Create(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <summary>Creates and configures a state of a new action with the <paramref name="actionName" /> internal name.</summary>
            <param name="actionName">The internal name of an action.</param>
            <param name="initializer">The function, that is used to configure the new action state object.</param>
            <remarks>If you add an action state configuration to any state, the current action will be enabled in this state unless the action is not
            disabled by a condition on the action level. Thus, if the <paramref name="initializer" /> parameter value is null, the action is enabled in the current state.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IAllowOptionalConfig.IsDuplicatedInToolbar">
            <summary>Specifies that the current action in the current state must be displayed on the form toolbar.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IAllowExtendedOptionalConfig.IsAutoAction(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>Specifies that the current action in the current state must be executed automatically if the <paramref name="condition" /> condition equals true.</summary>
            <param name="condition">A condition to be checked. If the condition is true, the system runs the current action automatically. Default values is True, which means
            that the current action is always run automatically.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXAutoAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXAutoAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.IContainerFillerActions.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})" -->
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXAutoAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <typeparam name="TExtension">A type of the graph extension in which the action is declared.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXAutoAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <typeparam name="TExtension">A type of the graph extension in which the action is declared.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowExtendedOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <param name="actionName">The internal name of the action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <overloads>Adds a configuration of an action state to the current state.</overloads>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <param name="action">A configured action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Replace(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <summary>Replaces an existing configuration of an action state with the provided configuration.</summary>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Replace``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <summary>Replaces an existing configuration of an action state with the provided configuration.</summary>
            <typeparam name="TExtension">A type of the graph extension in which the action is declared.</typeparam>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <remarks>Use this method if the action is declared in a graph extension.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <summary>Replaces an existing configuration of an action state with the provided configuration.</summary>
            <param name="actionName">The internal name of the action.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Replace(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IAllowOptionalConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IConfigured})">
            <summary>Replaces an existing configuration of an action state with the provided configuration.</summary>
            <param name="action">A configured action.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Update(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction})">
            <summary>Updates an existing configuration of an action state with the provided configuration.</summary>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Update``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction})">
            <summary>Updates an existing configuration of an action state with the provided configuration.</summary>
            <typeparam name="TExtension">A type of the graph extension in which the action is declared.</typeparam>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
            <remarks>Use this method if the action is declared in a graph extension.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction})">
            <summary>Updates an existing configuration of an action state with the provided configuration.</summary>
            <param name="actionName">The internal name of the action.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Update(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.ConfiguratorAction})">
            <summary>Updates an existing configuration of an action state with the provided configuration.</summary>
            <param name="action">A configured action.</param>
            <param name="config">A function that configures behavior of the action in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Remove(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>Removes a configuration of an action state from the current state. It means the method removes the action from the state configuration, but the action
            itself is not deleted.</summary>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}})">
            <summary>Removes a configuration of an action state from the current state. It means the method removes the action from the state configuration, but the action
            itself is not deleted.</summary>
            <typeparam name="TExtension">A type of the graph extension in which the action is declared.</typeparam>
            <param name="actionSelector">An expression that addresses the PXAction member of a graph.</param>
            <remarks>Use this method if the action is declared in a graph extension.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Remove(System.String)">
            <summary>Removes a configuration of an action state from the current state. It means the method removes the action from the state configuration, but the action
            itself is not deleted.</summary>
            <param name="actionName">The internal name of the action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ActionState.ContainerAdjusterActions.Remove(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>Removes a configuration of an action state from the current state. It means the method removes the action from the state configuration, but the action
            itself is not deleted.</summary>
            <param name="action">A configured action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.AssignmentBuilder.Create(System.Boolean,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Creates and configure a new assignment for the DAC field.</summary>
            <param name="isField">Indicates if there is a DAC field or an action parameter in the left part of the assignment.</param>
            <param name="leftOperandName">A name of a DAC field name or action method parameter.</param>
            <param name="initializer">A function that configures an assignment.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.AssignmentBuilder.Create``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Creates and configure a new assignment for the DAC field.</summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="initializer">A function that configures an assignment.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromValue(System.Object)">
            <summary>Specifies a constant value for the field assignment.</summary>
            <param name="value">A value that is assigned to the field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromExpression(System.String)">
            <summary>Specifies a string expression for the field assignment. This expression is evaluated at runtime in the current graph context. The result value is
            applied to the current field or parameter.</summary>
            <param name="expression">A string expression.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromFormField(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured,System.String)">
            <summary>Specifies a dialog box field which value will be assigned to the DAC field.</summary>
            <param name="form">A configured dialog box.</param>
            <param name="fieldName">An internal name of the dialog box field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromField``1">
            <summary>Specifies a  dialog box field which value will be assigned to the DAC field.</summary>
            <typeparam name="TField">A dialog box field.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromToday">
            <summary>Sets the current date to the DAC field at runtime. The method sets the sames value which the @Now string expression returns.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromNow">
            <summary>Sets the current date and time to the DAC field at runtime. The method sets the sames value which the @Now string expression returns.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromCurrentUser">
            <summary>Sets the current user name to the DAC field at runtime.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.INeedRightOperand.SetFromCurrentBranch">
            <summary>Sets the current branch ID to the DAC field at runtime.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add``1(System.Nullable{System.Boolean})">
            <summary>
            Adds a new field assignment from a boolean value.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add``1(System.Nullable{System.Int32})">
            <summary>
            Adds a new field assignment from an integer value.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add``1(System.Nullable{System.Decimal})">
            <summary>
            Adds a new field assignment from a decimal value.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add``1(System.String)">
            <summary>
            Adds a new field assignment from a string value.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new field assignment from a boolean value.
            </summary>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add(System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new field assignment from an integer value.
            </summary>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add(System.String,System.Nullable{System.Decimal})">
            <summary>
            Adds a new field assignment from a decimal value.
            </summary>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add(System.String,System.String)">
            <summary>
            Adds a new field assignment from a string value.
            </summary>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>
            Adds a new field assignment.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function that configures the current field assignment.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerFields.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Adds a new field assignment.</summary>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function that configures the current field assignment.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Replace``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Replaces an existing assignment with the new one.</summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function that configures a current field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Replaces an existing assignment with the new one.</summary>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function that configures a current field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Update``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.ConfiguratorAssignment,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Updates an existing assignment.</summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function that updates current field configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.ConfiguratorAssignment,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>Updates an existing assignment.</summary>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function that updates current field configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Remove``1">
            <summary>Removes an existing assignment.</summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.FieldContainerAdjusterAssignment.Remove(System.String)">
            <summary>Removes an existing assignment.</summary>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerParameters.Add(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new field assignment from a boolean value.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerParameters.Add(System.String,System.Nullable{System.Int32})">
            <summary>
            Adds a new field assignment from an integer value.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerParameters.Add(System.String,System.Nullable{System.Decimal})">
            <summary>
            Adds a new field assignment from a decimal value.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerParameters.Add(System.String,System.String)">
            <summary>
            Adds a new field assignment from a string value.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.IContainerFillerParameters.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>
            Adds a new parameter assignment.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
            <param name="config">A function that configures the current parameter assignment.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.ParameterContainerAdjusterAssignments.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IConfigured})">
            <summary>
            Replaces an existing parameter assignment with the new one.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
            <param name="config">A function that configures the current parameter assignment.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Assignment.ParameterContainerAdjusterAssignments.Remove(System.String)">
            <summary>
            Removes an existing parameter assignment.
            </summary>
            <param name="parameterName">A name of the method parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.INeedAnyConfigState.WithActions(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionState.IContainerFillerActions})">
            <summary>Specifies behaviour of actions in the current state.</summary>
            <param name="containerFiller">A function that configures state of actions.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to add the Assign and AutoAssign actions and remove the Open action to the current state of the workflow. The example is shown in the following code." lang="CS">
            states.Update(States.New, state =&gt; state
                .WithActions(actions =&gt;
                {
                    actions.Add(actionAssign, a =&gt; a
                        .IsDuplicatedInToolbar());
             
                    actions.Add(actionAutoAssign, a =&gt; a
                        .IsAutoAction(ownerNotNullCondition));
                    actions.Remove("Open");
                }
            ));</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.INeedAnyConfigState.WithFieldStates(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IContainerFillerFields})">
            <summary>Specifies behaviour of fields in the current state.</summary>
            <param name="containerFiller">A function that configures states of fields.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to update combo box values in the CROpportunity.resolution field in the New state of a workflow. The example is shown in the following code." lang="CS">
            states.Update(States.New, state =&gt; state
                .WithFieldStates(fields =&gt;
                {
                    fields.UpdateField&lt;CROpportunity.resolution&gt;(field =&gt;
                        field.WithDefaultValue(_reasonUnassign).ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));
                })
            );</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.INeedAnyConfigState.WithOnEnterAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Sets an ordered list of primary DAC fields that will be updated when entity enters the current state.
            </summary>
            <param name="containerFillerFields">A list of fields to be updated.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.INeedAnyConfigState.WithOnLeaveAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Sets an ordered list of primary DAC fields that will be updated when entity leaves the current state.
            </summary>
            <param name="containerFillerFields">A list of fields to be updated.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.IContainerFillerStates.Add``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>Adds a new configuration of a workflow state to the current workflow.</summary>
            <typeparam name="TStateId">A value of the state property field that corresponds to the current workflow state.</typeparam>
            <param name="config">A function which specifies behavior of the document in the current workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.IContainerFillerStates.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>Adds a new configuration of a workflow state to the current workflow.</summary>
            <param name="stateId">Value of the state property field that corresponds to current state.</param>
            <param name="config">A function which specifies behavior of the document in the current workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.IContainerFillerStates.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured)">
            <summary>Adds a new workflow state to the current workflow.</summary>
            <param name="state">A configured workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Replace``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>Replaces an existing configuration of the workflow state with the provided one.</summary>
            <typeparam name="TStateId">A value of the state property field that corresponds to the current state.</typeparam>
            <param name="config">A function which specifies behavior of the document in the current workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>Replaces an existing configuration of the workflow state with the provided one.</summary>
            <param name="stateId">A value of the state property field that corresponds to the current state.</param>
            <param name="config">A function which specifies behavior of the document in the current workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Update``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.ConfiguratorState,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.ConfiguratorState})">
            <summary>Updates an existing configuration of the workflow state.</summary>
            <typeparam name="TStateId">A value of the state property field that corresponds to the current state.</typeparam>
            <param name="config">A function which overrides the configuration of the workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.ConfiguratorState,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.ConfiguratorState})">
            <summary>Updates an existing configuration of the workflow state.</summary>
            <param name="stateId">A value of the state property field that corresponds to the current state.</param>
            <param name="config">A function which overrides the configuration of the workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Remove``1">
            <summary>Removes an existing state from the current workflow.</summary>
            <typeparam name="TStateId">A value of the state property field that corresponds to the current state.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.BaseFlowStep.ContainerAdjusterStates.Remove(System.String)">
            <summary>Removes an existing state from the current workflow.</summary>
            <param name="stateId">A value of the state property field that corresponds to the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.WithSharedName(System.String)">
            <summary>Sets an internal name of the current condition.</summary>
            <param name="name">The internal name of the condition.</param>
            <remarks>Every condition used on a screen must have an internal name.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromBql``1">
            <summary>Creates a reusable condition based on the provided BQL statement.</summary>
            <typeparam name="TBqlCondition">A condition in the form of a BQL statement.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromBqlType(System.Type)">
            <summary>Creates a reusable condition based on the provided BQL statement.</summary>
            <typeparam name="TBqlCondition">A condition in the form of a BQL statement.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromClass``1">
            <summary>Creates a reusable condition based on a class that implements the <see cref="T:PX.Data.WorkflowAPI.INamedCondition" /> interface.</summary>
            <typeparam name="TCondition">A class that describes the condition.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromConstant(System.Boolean)">
            <summary>Creates a reusable condition by wrapping a boolean constant with a reusable condition object.</summary>
            <param name="constant">A boolean constant.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromLambda(System.Func{`1,System.Boolean})">
            <summary>Creates a reusable condition which calls a boolean lambda function to evaluate a value against the current PXGraph object.</summary>
            <param name="expr">A boolean lambda function.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.FromExpr(System.Func{`1,System.Boolean})">
            <summary>Creates a reusable condition which calls a boolean lambda function to evaluate a value against the current PXGraph object.</summary>
            <param name="expr">A boolean lambda function.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ConditionBuilder.Get(System.String)">
            <summary>Gets the configured condition object by the provided internal name.</summary>
            <param name="name">An internal name of a condition.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.IContainerFillerConditions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>
            Adds a new configured shared condition to the screen configuration.
            </summary>
            <param name="name">An internal name of the new condition.</param>
            <param name="condition">A configured condition object.</param>
            <remarks>Only added condition objects (except condition in a form of boolean constants) are evaluated in runtime.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.IContainerFillerConditions.Add(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition})">
            <summary>
            Adds a new configured shared condition to the screen configuration.
            </summary>
            <param name="condition">A function that configures a shared condition.</param>
            <remarks>Only added condition objects (except condition in a form of boolean constants) are evaluated in runtime.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.IContainerFillerConditions.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>
            Adds a new configured shared condition to the screen configuration.
            </summary>
            <param name="condition">A configured condition object with an internal name.</param>
            <remarks>Only added condition objects (except condition in a form of boolean constants) are evaluated in runtime.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ContainerAdjusterConditions.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>
            Replaces an existing condition with the new one.
            </summary>
            <param name="name">An internal name of a condition to be replaced.</param>
            <param name="condition">A function which configures the shared condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Condition.ContainerAdjusterConditions.Remove(System.String)">
            <summary>
            Removes an existing condition  from the screen configuration.
            </summary>
            <param name="name">An internal name of a condition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsHiddenWhen(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>
            Specifies that the current DAC field should be hidden when <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">A function which configures the condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsHiddenWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>
            Specifies that the current DAC field should be hidden when <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">A configured condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsHiddenAlways">
            <summary>
            Specifies that the current DAC field should always be hidden. Use this method for auto-run actions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsDisabledWhen(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>
            Specifies that the current DAC field should be disabled when the <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">A function that configures the condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsDisabledWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>
            Specifies that the current DAC field should be disabled when the <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">A configured condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsDisabledAlways">
            <summary>
            Specifies that the current DAC field should always be disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsRequiredWhen(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition.ConditionBuilder,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Condition})">
            <summary>
            Specifies that the current DAC field should be required when the <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">Function that configures the condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsRequiredWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>
            Specifies that the current DAC field should be required when the <paramref name="condition"/> equals <see langword="true"/>.
            </summary>
            <param name="condition">Configured condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.IsRequiredAlways">
            <summary>
            Specifies that the current DAC field should always be required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.SetComboValue(System.String,System.String)">
            <summary>
            For string DAC fields marked with the <see cref="T:PX.Data.PXStringListAttribute"/>, adds an additional combo box value.
            </summary>
            <param name="key">An additional combo box value.</param>
            <param name="description">The display name of the combo box value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.SetComboValues(System.ValueTuple{System.String,System.String}[])">
            <summary>
            For string DAC fields marked with the <see cref="T:PX.Data.PXStringListAttribute"/>, adds additional combo box values.
            </summary>
            <param name="values">A list of additional combo box values and their display names.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.DisplayName(System.String)">
            <summary>Sets the display name of a field.</summary>
            <param name="displayName">Display name of a field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.WithDefaultValue(System.Object)">
            <summary>Sets the default value of a field.</summary>
            <param name="defaultValue">Default value of a field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.INeedAnyConfigField.WithDefaultExpression(System.String)">
            <summary>Sets the default value of a field as a string expression for the subsequent evaluation.</summary>
            <param name="defaultValue">Expression for evaluation the default value of a field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.IContainerFillerFields.Add``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IConfigured})">
            <summary>
            Adds a new configuration for an existing DAC field.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function which configures behaviour of the DAC field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.IContainerFillerFields.Add``1(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IConfigured},System.Boolean)">
            <summary>
            Adds a new configuration for an existing DAC field.
            </summary>
            <typeparam name="TField">>A DAC type.</typeparam>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function which configures behaviour of the DAC field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.IContainerFillerFields.Add(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IConfigured},System.Boolean)">
            <summary>
            Adds a new configuration for an existing DAC field.
            </summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function which configures behaviour of the DAC field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Replace``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IConfigured})">
            <summary>
            Replaces an existing configuration of a field with the provided one.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function which configures behaviour of an existing field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Replace(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IConfigured})">
            <summary>
            Replaces an existing configuration of a field with the provided one.
            </summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function which configures behaviour of an existing field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Update``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.ConfiguratorField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.ConfiguratorField})">
            <summary>
            Updates an existing configuration of a field.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function which configures behaviour of an existing field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Update(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.ConfiguratorField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.ConfiguratorField})">
            <summary>
            Updates an existing configuration of a field.
            </summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">A DAC field name.</param>
            <param name="config">A function which configures behaviour of an existing field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Remove``1">
            <summary>
            Removes an existing configuration of a field.
            </summary>
            <typeparam name="TField">A DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.DynamicFieldState.ContainerAdjusterFields.Remove(System.Type,System.String)">
            <summary>
            Removes an existing configuration of a field.
            </summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">A DAC field name.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.FieldStateBuilder.Create``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Creates a new reusable configuration of a field state.</summary>
            <typeparam name="TField">A DAC field which state is configured.</typeparam>
            <param name="initializer">A function which configures behaviour of an existing field in the current state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.FieldStateBuilder.Create``1(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Creates a new reusable configuration of a field state.</summary>
            <typeparam name="TTable">A DAC type.</typeparam>
            <param name="fieldName">Name of a DAC field.</param>
            <param name="initializer">A function which configures behaviour of an existing field in the current state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.FieldStateBuilder.CreateTable``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Creates a reusable configuration of a provided DAC.</summary>
            <typeparam name="TTable">A DAC type.</typeparam>
            <param name="initializer">A function which configures behaviour of a DAC in the current state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.FieldStateBuilder.CreateAllFields``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Creates a reusable configuration for all fields of the provided DAC.</summary>
            <typeparam name="TTable">A DAC type.</typeparam>
            <param name="initializer">A functions which configures behaviour of all fields of the provided DAC in the current state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.FieldStateBuilder.Create(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Creates a new reusable configuration of a field state.</summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">Name of a DAC field.</param>
            <param name="initializer">A function which configures behaviour of an existing field in the current state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.INeedAnyConfigField.IsHidden">
            <summary>Specifies that the current field or all fields of the DAC should be hidden in the current state.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.INeedAnyConfigField.IsDisabled">
            <summary>Specifies that the current field or all fields of the DAC should be disabled in the current state.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.INeedAnyConfigField.IsRequired">
            <summary>Specifies that the current field or all fields of the DAC should be required in the current state.</summary>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to make the CROpportunity.ownerID field required in the Open state of a workflow. The example is shown in the following code." lang="CS">
            states.Update(States.Open, state =&gt; state
                .WithFieldStates(fields =&gt;
                {
                      fields.AddField&lt;CROpportunity.ownerID&gt;(field =&gt;
                    field.IsRequired());
                }
            ));</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.INeedAnyConfigField.DefaultValue(System.Object)">
            <summary>Specifies a default value for the current field.</summary>
            <param name="defaultValue">A default value of the field.</param>
            <remarks>This setting is applied only in the initial state of the workflow.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.INeedAnyConfigField.ComboBoxValues(System.String[])">
            <summary>Specified a list of available combo box values for the current field in current workflow state.</summary>
            <param name="v">A list of available combo box values.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to update the list of availble combo box values for a field. The example is shown in the following code. _reason*** variables are string constants." lang="CS">
            field.WithDefaultValue(_reasonUnassign).ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddField``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Adds a new configuration of a DAC field. The configuration is applied to the field in the current workflow state.</summary>
            <typeparam name="TField">A DAC field.</typeparam>
            <param name="config">A function which configures field behavior in the current workflow state.</param>
            <remarks>If the current state has configuration for Table/All Fields of a DAC and a particular configuration for one or more field of the same DAC, such
            configuration overrides field behavior specified in Table/All Fields configurations for the same field.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddField(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})" -->
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddFields``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})" -->
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddTable``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>
            Adds new DAC configuration, that will be applied in current state.
            </summary>
            <remarks>If the current state has configuration for Table/All Fields of a DAC and a particular configuration for one or more field of the same DAC, such
            configuration overrides field behavior specified in Table/All Fields configurations for the same field.</remarks>
            <typeparam name="TTable">DAC type.</typeparam>
            <param name="config">Functions that configures DAC behavior in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddTable(System.Type,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>
            Adds new DAC configuration, that will be applied in current state.
            </summary>
            <remarks>If the current state has configuration for Table/All Fields of a DAC and a particular configuration for one or more field of the same DAC, such
            configuration overrides field behavior specified in Table/All Fields configurations for the same field.</remarks>
            <param name="table">DAC type.</param>
            <param name="config">Functions that configures DAC behavior in the current state.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddTables``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})" -->
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddAllFields``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Adds a configuration for all fields in the provided DAC The configuration is applied to the fields in the current workflow state.</summary>
            <typeparam name="TTable">DAC type.</typeparam>
            <param name="config">A function which configures behavior of all fields of the provided DAC in the current workflow state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddAllFields(System.Type,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>Adds a configuration for all fields in the provided DAC The configuration is applied to the fields in the current workflow state.</summary>
            <param name="table">DAC type.</param>
            <param name="config">A function which configures behavior of all fields of the provided DAC in the current workflow state.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.IContainerFillerFields.AddAllFieldsFromTables``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})" -->
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.ReplaceField``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>
            Replaces field configuration in current workflow state.
            </summary>
            <typeparam name="TField">DAC field.</typeparam>
            <param name="config">Functions that configures field behavior in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.ReplaceField(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.INeedAnyConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IConfigured})">
            <summary>
            Replaces field configuration in current workflow state.
            </summary>
            <param name="table">DAC type.</param>
            <param name="fieldName">Field name.</param>
            <param name="config">Functions that configures field behavior in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.UpdateField``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.ConfiguratorField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.ConfiguratorField})">
            <summary>
            Updates field configuration in current workflow state.
            </summary>
            <typeparam name="TField">DAC field.</typeparam>
            <param name="config">Functions that overrides field behavior in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.UpdateField(System.Type,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.ConfiguratorField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.ConfiguratorField})">
            <summary>
            Updates field configuration in current workflow state.
            </summary>
            <param name="table">DAC type.</param>
            <param name="fieldName">Field name.</param>
            <param name="config">Functions that overrides field behavior in the current state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.RemoveField``1">
            <summary>
            Removes field configuration in current workflow state.
            </summary>
            <typeparam name="TField">DAC field.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FieldState.ContainerAdjusterFields.RemoveField(System.Type,System.String)">
            <summary>
            Removes field configuration in current workflow state.
            </summary>
            <param name="table">DAC type.</param>
            <param name="fieldName">Field name.</param>
        </member>
        <member name="P:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.IsNonPersistent">
            <summary>
            If true, an entity in the state cannot be saved.
            </summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.FlowStateBuilder.Create(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>
            Creates a new reusable configured workflow state.
            </summary>
            <param name="flowState">A value of the state property field that corresponds to the current workflow state.</param>
            <param name="initializer">A function which specifies behavior of the document in the current workflow state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.FlowStateBuilder.Create``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FlowState.INeedAnyFlowStateConfig,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured})">
            <summary>
            Creates a new reusable configured workflow state.
            </summary>
            <typeparam name="TStateId">A value of the state property field that corresponds to the current state.</typeparam>
            <param name="config">A function which specifies behavior of the document in the current workflow state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.IsInitial">
            <summary>Specifies that the current state must be initial in the current workflow.</summary>
            <remarks>Only one state in each workflow can be initial.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.IsInitial(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXAutoAction{`1}}})">
            <summary>Specifies that the current state must be initial in the current workflow and sets a state initializing action.</summary>
            <remarks>Only one state in each workflow can be initial.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.IsInitial``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXAutoAction{`1}}})">
            <summary>Specifies that the current state must be initial in the current workflow and sets a state initializing action.</summary>
            <remarks>Only one state in each workflow can be initial.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.IsNonPersistent">
            <summary>Specifies that the current state must be non persistent in the current workflow.</summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.WithFieldStates(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FieldState.IContainerFillerFields})">
            <summary>Specifies behaviour of fields in the current state.</summary>
            <param name="containerFiller">A function that configures states of fields.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to update combo box values in the CROpportunity.resolution field in the New state of a workflow. The example is shown in the following code." lang="CS">
            states.Update(States.New, state =&gt; state
                .WithFieldStates(fields =&gt;
                {
                    fields.UpdateField&lt;CROpportunity.resolution&gt;(field =&gt;
                        field.WithDefaultValue(_reasonUnassign).ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));
                })
            );</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.WithOnEnterAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Sets an ordered list of primary DAC fields that will be updated when entity enters the current state.
            </summary>
            <param name="containerFillerFields">A list of fields to be updated.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.INeedAnyFlowStateConfig.WithOnLeaveAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Sets an ordered list of primary DAC fields that will be updated when entity leaves the current state.
            </summary>
            <param name="containerFillerFields">A list of fields to be updated.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FlowState.ConfiguratorState.MarkAsNonPersistent">
            <summary>
            If you mark the state as non-persistent, you will not be able to save an entity in this state.
            </summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.FormBuilder.Create(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.INeedAnyConfigForm,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured})">
            <summary>
            Creates a new reusable configuration of a dialog box.
            </summary>
            <param name="formName">An internal name of the dialog box.</param>
            <param name="initializer">A function that descibes the dialog box appearance and field configuration.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.FormBuilder.Get(System.String)">
            <summary>Returns a configured reusable dialog box that has been previously configured.</summary>
            <param name="formName">An internal name of the dialog box.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.INeedAnyConfigForm.ColumnsCount(System.Int32)">
            <summary>Specifies a number of columns to be used for displaying fields in the dialog box.</summary>
            <param name="cnt">A number of columns.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.INeedAnyConfigForm.Prompt(System.String)">
            <summary>Specifies the title of the dialog box.</summary>
            <param name="prompt">A dialog box title.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.INeedAnyConfigForm.WithFields(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.IContainerFillerFields})">
            <summary>Specifies a list of form fields which are visible in the dialog box.</summary>
            <param name="containerFiller">A function that specifies configuration of form fields.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.IContainerForms.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.INeedAnyConfigForm,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured})">
            <summary>Adds a new dialog box to the screen configuration.</summary>
            <param name="formName">An internal name of the dialog box.</param>
            <param name="config">A function that describes the dialog box appearance and field configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.IContainerForms.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured)">
            <summary>Adds a new configured dialog box to the screen configuration.</summary>
            <param name="form">A configured dialog box.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.ContainerAdjusterForms.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.INeedAnyConfigForm,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured})">
            <summary>
            Replaces an existing dialog box configuration with the new one.
            </summary>
            <param name="formName">An internal name of a dialog box.</param>
            <param name="config">A function that replaces the dialog box appearance and field configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.ContainerAdjusterForms.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.ConfiguratorForm,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.ConfiguratorForm})">
            <summary>Updates a configuration of an existing dialog box.</summary>
            <param name="formName">An internal name of a dialog box.</param>
            <param name="config">A function that updates the dialog box appearance and field configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Form.ContainerAdjusterForms.Remove(System.String)">
            <summary>
            Removes an existing dialog box configuration.
            </summary>
            <param name="formName">An internal name of a dialog box.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedTypeConfigField.WithSchemaOf``1">
            <summary>
            Defines a new field for a dialog box. The field state is copied from the provided DAC field.
            </summary>
            <typeparam name="TField">A DAC field that is used to generate the field state.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedTypeConfigField.WithSchemaOf``1(System.String)">
            <summary>
            Defines a new field for a dialog box. The field state is copied from the provided DAC field.
            </summary>
            <typeparam name="TTable">A DAC type.</typeparam>
            <param name="fieldName">A DAC field that is used to generate the field state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedTypeConfigField.WithSchemaOf(System.Type,System.String)">
            <summary>
            Defines a new field for a dialog box. The field state is copied from the provided DAC field.
            </summary>
            <param name="table">A DAC type.</param>
            <param name="fieldName">A DAC field that is used to generate the field state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedTypeConfigField.WithComboBoxField">
            <summary>
            Defines a new combo box field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedTypeConfigField.WithCheckBoxField">
            <summary>
            Defines a new check box field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.INeedComboBoxValues.ComboBoxValues(System.ValueTuple{System.String,System.String}[])">
            <summary>
            Defines a list of available combo box values and their display names which will be displayed in the combo box field.
            </summary>
            <param name="values">A list of available combo box values and their display names.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.IsRequired">
            <summary>
            Specifies that the current field of the dialog box is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.DefaultValue(System.Object)">
            <summary>
            Specifies the default value for the current field of the dialog box.
            </summary>
            <param name="defaultValue">A constant default value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.DefaultValueFromSchemaField">
            <summary>
            Specifies the default value for the current field of the dialog box. The value is taken from the corresponding DAC field.
            </summary>
            <remarks>This setting could not be applied for new combo box and check box fields.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.DefaultExpression(System.String)">
            <summary>
            Specifies a string expression that will be used to set the default value for the current field of the dialog box.
            </summary>
            <param name="defaultValue">A string expression for the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.IsHiddenWhen(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>Specified that the current field must be hidden on the form when the provided condition is true.</summary>
            <param name="condition">Preconfigured condition.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.IsHiddenAlways">
            <summary>Specifies that current field must always be hidden on the form.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.OnlyComboBoxValues(System.String[])">
            <summary>
            Restricts a list of possible combo box values.
            </summary>
            <param name="values">A list of available combo box values.</param>
            <remarks>This setting is available only for dialog box fields which states are copied from DAC fields, and DAC fields have the attached <see cref="T:PX.Data.PXStringListAttribute"/> </remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.ComboBoxValue(System.String,System.String)">
            <summary>
            Adds a new pair of a combox box value and its display name to the combo box field of the dialog box.
            </summary>
            <param name="key">A combo box value.</param>
            <param name="description">A display name of the combox box value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.ComboBoxValuesSource(PX.Data.WorkflowAPI.ComboBoxValuesSource)">
            <summary>
            Specifies a source of combo box values.
            </summary>
            <param name="valuesSource">A source of combo box values.</param>
            <remarks>This setting is available only for dialog box fields which states are copied from DAC fields, and DAC fields have the attached <see cref="T:PX.Data.PXStringListAttribute"/> </remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.Prompt(System.String)">
            <summary>
            Specifies A label text for a dialog box field.
            </summary>
            <param name="prompt">A label text.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.ColumnSpan(System.Int32)">
            <summary>
            Specifies a column span for the current field of the dialox box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.ControlSize(System.String)">
            <summary>
            Specifies the size of the control for the current field of the dialog box.
            </summary>
            <param name="controlSize">A size of the control.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IAllowOptionalConfig.ControlSize(PX.Data.WorkflowAPI.FormFieldControlSize)">
            <summary>
            Specifies a size of the control for the current field of the dialog box.
            </summary>
            <param name="controlSize">A size of the control.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.IContainerFillerFields.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.INeedTypeConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.IConfigured})">
            <summary>
            Adds a configuration of a new dialog box field to the current dialog box.
            </summary>
            <param name="fieldName">An internal name of a dialog box field.</param>
            <param name="config">A function that configures the behaviour of the dialog box field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.ContainerAdjusterFields.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.INeedTypeConfigField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.IConfigured})">
            <summary>
            Replaces an existing configuration of a dialog box field with the new one.
            </summary>
            <param name="fieldName">An internal name of a dialog box field.</param>
            <param name="config">A function that configures the behaviour of the dialog box field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.ContainerAdjusterFields.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.ConfiguratorField,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.FormField.ConfiguratorField})">
            <summary>
            Updates an existing configuration of a dialog box field.
            </summary>
            <param name="fieldName">An internal name of a dialog box field.</param>
            <param name="config">A function that overrides the behaviour of the dialog box field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.FormField.ContainerAdjusterFields.Remove(System.String)">
            <summary>
            Removes an existing configuration of a dialog box field.
            </summary>
            <param name="fieldName">An internal name of a dialog box field.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.NavigationDefinitionBuilder.CreateRecord(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.ICreateNeedScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredCreate})">
            <summary>Creates a set of settings for a navigation action which creates a new record.</summary>
            <param name="initializer">Function that configures settings for the navigation action which creates a new record.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.NavigationDefinitionBuilder.SearchRecord(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.ISearchNeedScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredSearch})">
            <summary>Creates a set of settings for a navigation action which opens a list of records.</summary>
            <param name="initializer">Function that configures settings for a navigation action which opens a list of records</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.NavigationDefinitionBuilder.RunReport(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IRunReportNeedScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredRunReport})">
            <summary>Creates a set of settings for a navigation action which opens a report.</summary>
            <param name="initializer">Function that configures settings for a navigation action which opens a report.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.NavigationDefinitionBuilder.SidePanel(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.ISidePanelNeedScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationDefinition.IConfiguredSidePanel})">
            <summary>
            Creates a set of settings for a navigation action which opens a side panel.
            </summary>
            <param name="initializer">Function that configures settings for a navigation action which opens a side panel.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ICreateNeedScreen.NavigateToScreen(System.String)">
            <summary>Specifies an ID of the form which will be used to create a new record.</summary>
            <param name="screenId">Form ID.</param>
            <remarks>This method is applicable only to actions which open a form with a new record.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ICreateNeedScreen.NavigateToScreen``1">
            <summary>Specifies primary graph of a form to be opened.</summary>
            <typeparam name="T">Type of the primary graph of the form.</typeparam>
            <remarks>This method is applicable only to actions which open a form with a new record.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISearchNeedScreen.NavigateToScreen(System.String)">
            <summary>Specifies an ID of the form with a list of record to be opened.</summary>
            <param name="screenId">Form ID.</param>
            <remarks>This method is applicable only to actions which open a list of records.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISearchNeedScreen.NavigateToScreen``1">
            <summary>Specifies primary graph of a form with the list of records to be opened.</summary>
            <typeparam name="T">Type of the primary graph of the form.</typeparam>
            <remarks>This method is applicable only to actions which open a list of records.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.IRunReportNeedScreen.ReportID(System.String)">
            <summary>Specifies a report to be opened when a user select the action.</summary>
            <param name="screenId">Report ID.</param>
            <remarks>This method is applicable only to actions with open a report.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ICreateOptionalDefaults.WithWindowMode(PX.Data.PXBaseRedirectException.WindowMode)">
            <summary>Specifies a window mode in which a form should be opened when a user select the action.</summary>
            <param name="windowMode">Window mode.</param>
            <remarks>This method is applicable only to actions which open a specific record on a form.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ICreateOptionalDefaults.WithAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IContainerFillerNavigationActionParameters})">
            <summary>Specifies a list of navigation parameters.</summary>
            <param name="containerFiller">Function that specifies a list of navigation parameters.</param>
            <remarks>This method is applicable only to actions which open a specific record on a form.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISearchOptionalParameters.WithWindowMode(PX.Data.PXBaseRedirectException.WindowMode)">
            <summary>Specifies a window mode in which a form should be opened when a user select the action.</summary>
            <param name="windowMode">Window mode.</param>
            <remarks>This method is applicable only to actions which open a list of records.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISearchOptionalParameters.WithAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IContainerFillerNavigationActionParameters})">
            <summary>Specifies a list of navigation parameters for an action.</summary>
            <param name="containerFiller">Function that specifies a list of navigation parameters.</param>
            <remarks>This method is applicable only to actions which open a list of records.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISearchOptionalParameters.WithFK``1">
            <summary>Specifies that selected foreign key object must be used to calculate navigation parameter values.</summary>
            <typeparam name="TFK">Foreign key type.</typeparam>
            <remarks>This method is applicable only to actions which open a list of records.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.IRunReportOptionalParameters.WithWindowMode(PX.Data.PXBaseRedirectException.WindowMode)">
            <summary>Specifies a window mode in which a report should be opened when a user select the action.</summary>
            <param name="windowMode">Window mode.</param>
            <remarks>This method is applicable only to actions with open a report.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.IRunReportOptionalParameters.WithAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IContainerFillerNavigationActionParameters})">
            <summary>Specifies a list of report parameters.</summary>
            <param name="containerFiller">Function that specifies list of report parameters.</param>
            <remarks>This method is applicable only to actions with open a report.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISidePanelNeedScreen.NavigateToScreen(System.String)">
            <summary>Specifies ID of a form which will be displayed on a side panel.</summary>
            <param name="screenId">Form ID.</param>
            <remarks>This method is applicable only to actions which open a side panel.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISidePanelNeedScreen.NavigateToScreen``1">
            <summary>Specifies primary graph of a form which will be displayed on a side panel.</summary>
            <typeparam name="T">Type of the primary graph of the form.</typeparam>
            <remarks>This method is applicable only to actions which open a side panel.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISidePanelOptionalDefaults.WithIcon(System.String)">
            <summary>Specifies an icon which will be displayed for the action.</summary>
            <param name="iconName">An icon name from the font-awesome.css file.</param>
            <remarks>This method is applicable only for side panels.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationDefinition.ISidePanelOptionalDefaults.WithAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IContainerFillerNavigationActionParameters})">
            <summary>Specifies a list of navigation parameters.</summary>
            <param name="containerFiller">Function that specifies list of navigation parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromValue(System.Object)">
            <summary>Specifies a constant value for the current navigation or report parameter.</summary>
            <param name="value">The constant value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromExpression(System.String)">
            <summary>Specifies a string expression for the current navigation or report parameter. This expression is evaluated at runtime in the current graph context.
            </summary>
            <param name="expression">A string expression.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromFormField(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IConfigured,System.String)">
            <summary>Specifies a dialog box field which value will be assigned to the the current navigation or report parameter.</summary>
            <param name="form">A configured dialog box.</param>
            <param name="fieldName">An internal name of the dialog box field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromField``1">
            <summary>Specifies that value for the current navigation or report parameter must be taken from the provided DAC field.</summary>
            <typeparam name="TField">A DAC field which value should be passed as a navigation or report parameter value.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromField(System.String)">
            <summary>Specifies that value for the current navigation or report parameter must be taken from the provided DAC field.</summary>
            <param name="fieldName">A name of a DAC field which value should be passed as a navigation or report parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromToday">
            <summary>Sets the current date to the the current navigation or report parameter at runtime. The method sets the sames value which the @Now string expression returns.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromNow">
            <summary>Sets the current date and time to the the current navigation or report parameter at runtime. The method sets the sames value which the @Now string expression returns.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromCurrentUser">
            <summary>Sets the current user name to the the current navigation or report parameter at runtime.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.INeedRightOperand.SetFromCurrentBranch">
            <summary>Sets the current branch ID to the the current navigation or report parameter at runtime.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.IContainerFillerNavigationActionParameters.Add``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IConfigured})">
            <summary>Adds a configuration of a new navigation parameter for the current navigation action.</summary>
            <typeparam name="TField">A navigation parameter.</typeparam>
            <param name="config">A function that configures the navigation parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.IContainerFillerNavigationActionParameters.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IConfigured})">
            <summary>Adds a configuration of a new navigation parameter for the current navigation action.</summary>
            <param name="fieldName">A navigation parameter.</param>
            <param name="config">A function that configures the navigation parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.NavigationActionParametersContainerAdjuster.Replace``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IConfigured})">
            <summary>Replaces an existing configuration of a navigation parameter with the new configuration.</summary>
            <typeparam name="TField">A navigation parameter.</typeparam>
            <param name="config">A function that configures a navigation parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.NavigationActionParametersContainerAdjuster.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.INeedRightOperand,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.NavigationParameter.IConfigured})">
            <summary>Replaces an existing configuration of a navigation parameter with the new configuration.</summary>
            <param name="fieldName">A navigation parameter name.</param>
            <param name="config">A function that configures a navigation parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.NavigationActionParametersContainerAdjuster.Remove``1">
            <summary>Removes an existing configuration of a navigation parameter.</summary>
            <typeparam name="TField">A navigation parameter.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.NavigationParameter.NavigationActionParametersContainerAdjuster.Remove(System.String)">
            <summary>Removes an existing configuration of a navigation parameter.</summary>
            <param name="fieldName">A name of the navigation parameter.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedStateIDScreen.StateIdentifierIs``1">
            <summary>Specifies a primary DAC field as a property that controls the state of the current workflow.</summary>
            <typeparam name="TField">A primary DAC field.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedStateIDScreen.StateIdentifierIs(System.String)">
            <summary>Specifies a primary DAC field as a property that controls the state of current workflow.</summary>
            <param name="fieldName">Name of a primary DAC field.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedFlowTypeIDOrDefaultFlow.AddDefaultFlow(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Adds a new workflow which will be used for the document in case there are no other workflows or in case the flow identifier does not match any defined value.</summary>
            <param name="config">A function that configures all settings of the default workflow.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedFlowTypeIDOrDefaultFlow.FlowTypeIdentifierIs``1(System.Boolean)">
            <summary>Specifies a primary DAC field as a property which is used to identify different workflows for the document.</summary>
            <typeparam name="TField">A primary DAC field.</typeparam>
            <param name="allowUserToChange"><code>true</code> to allow a user manually change a workflow of the current document in any state; otherwise, <code>false</code>.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedFlowTypeIDOrDefaultFlow.FlowTypeIdentifierIs(System.String,System.Boolean)">
            <summary>Specifies a primary DAC field as a property which is used to identify different workflows for the document.</summary>
            <param name="fieldName">Name of a primary DAC field.</param>
            <param name="allowUserToChange"><code>true</code> to allow a user manually change a workflow of the current document in any state; otherwise, <code>false</code>.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.INeedFlowList.WithFlows(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IContainerFillerFlows})">
            <summary>Defines a list of available workflows identified by the flow type field.</summary>
            <param name="containerFiller">Functions that specifies list of possible workflows.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.IAllowOptionalConfig.WithActions(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IContainerFillerActions})">
            <summary>Defines a list of action configurations.</summary>
            <param name="containerFiller">A function that specifies a list of action configurations.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.IAllowOptionalConfig.WithFieldStates(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.DynamicFieldState.IContainerFillerFields})">
            <summary>Defines a list of field configurations.</summary>
            <param name="containerFiller">A function that specifies a list of field configurations.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.IAllowOptionalConfig.WithForms(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Form.IContainerForms})">
            <summary>Defines a list of dialog box configurations.</summary>
            <param name="containerFiller">A function that specifies list of dialog box configurations.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.ConfiguratorScreen.ReplaceDefaultFlow(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Replaces a configuration of a default workflow with the provided one.</summary>
            <param name="config">A function that configures the default workflow settings.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.ConfiguratorScreen.UpdateDefaultFlow(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Updates a configuration of the default workflow.</summary>
            <param name="config">A function that configures the default workflow settings.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.ScreenConfiguration.ConfiguratorScreen.RemoveDefaultFlow">
            <summary>Completely removes a configuration of the default workflow.</summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedSource.From``1">
            <summary>Specifies a source state for the current transition.</summary>
            <typeparam name="TSourceState">A value of the workflow state property.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedSource.From(System.String)">
            <summary>Specifies a source state for the current transition.</summary>
            <param name="sourceState">A value for the workflow state property.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedSource.From(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured)">
            <summary>Specifies a source state for the current transition.</summary>
            <param name="from">A configured workflow state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTarget.To``1">
            <summary>Specifies a target state for the current transition.</summary>
            <typeparam name="TTargetState">A value for the workflow state property.</typeparam>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTarget.To(System.String)">
            <summary>Specifies a target state for the current transition.</summary>
            <param name="targetState">A value for the workflow state property.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTarget.To(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured)">
            <summary>Specifies a target state for the current transition.</summary>
            <param name="to">A configured workflow state.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTriggerAction.IsTriggeredOn(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.PXAction{`1}}})">
            <summary>Specifies an action that triggers the current transition.</summary>
            <param name="actionSelector">An expression that is used to address the PXAction graph member.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTriggerAction.IsTriggeredOn``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.PXAction{`1}}})">
            <summary>Specifies an action that triggers the current transition.</summary>
            <typeparam name="TExtension">A type of the graph extension where the action is declared.</typeparam>
            <param name="actionSelector">An expression that is used to address the PXAction member of a graph extension.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTriggerAction.IsTriggeredOn(System.String)">
            <summary>Specifies an action that triggers the current transition.</summary>
            <param name="actionName">An internal name of an action which will be used to identify the action in the Graph.Actions collection.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.INeedTriggerAction.IsTriggeredOn(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ActionDefinition.IConfigured)">
            <summary>Specifies an action that triggers the current transition.</summary>
            <param name="action">A configured action object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IAllowOptionalConfig.When(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ISharedCondition)">
            <summary>Specifies a condition that will be evaluated after an action is executed to check whether the transition should be performed.</summary>
            <param name="condition">A configured condition object.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IAllowOptionalConfig.WithFieldAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Sets an ordered list of primary DAC fields that will be updated after the action method is executed.
            </summary>
            <param name="containerFillerFields">A list of fields to be updated.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to add a transition during which the CROpportunity.ownerID field value should be changed. The example is shown in the following code." lang="CS">
            transitions.Add(transition =&gt; transition
                    .From(States.Assigned)
                    .To(States.New)
                    .IsTriggeredOn(actionReject)
                    .WithFieldAssignments(fields =&gt;
                    {
                      fields.Add&lt;CROpportunity.ownerID&gt;(f =&gt; f.SetFromExpression(null));
                    })
                    );</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IContainerFillerTransitions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>Adds A new transition to the current workflow.</summary>
            <param name="transitionName">An internal name of the transition.</param>
            <param name="configTransition">A function that configures behaviour of the new transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IContainerFillerTransitions.Add(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>Adds a new transition to the current workflow.</summary>
            <param name="configTransition">A function that configures behaviour of the new transition.</param>
            <remarks>The internal name of the transition will be generated automatically.</remarks>
            <example>
              <code title="Example" description="Suppose you need to add a transition with the New source state and the Assigned target state. The transition is triggered with the Assign action. The example is shown in the following code." lang="CS">
            transitions.Add(transition =&gt; transition
                .From(States.New)
                .To(States.Assigned)
                .IsTriggeredOn(actionAutoAssign));</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IContainerFillerTransitions.AddGroupFrom(System.String,System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ISourceContainerFillerTransitions})">
            <summary>Adds new transitions to the current workflow. All added transitions will have the same source state.</summary>
            <param name="fromState">A source state for new transitions.</param>
            <param name="transitions">A function that configures behaviour of the new transitions.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IContainerFillerTransitions.AddGroupFrom(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IConfigured,System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ISourceContainerFillerTransitions})">
            <summary>Adds new transitions to the current workflow. All added transitions will have the same source state.</summary>
            <param name="fromState">A source state for new transitions.</param>
            <param name="transitions">A function that configures behaviour of the new transitions.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.IContainerFillerTransitions.AddGroupFrom``1(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ISourceContainerFillerTransitions})">
            <summary>Adds new transitions to the current workflow. All added transitions will have the same source state.</summary>
            <typeparam name="TFromState">A source state for new transitions.</typeparam>
            <param name="transitions">A function that configures behaviour of the new transitions.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ISourceContainerFillerTransitions.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedTarget,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>Adds a new transition to the current workflow. The source state of the transition will be the current state of the workflow.</summary>
            <param name="transitionName">An internal name of the transition.</param>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ISourceContainerFillerTransitions.Add(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedTarget,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>Adds a new transition to the current workflow. The source state of the transition will be the current state of the workflow.</summary>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
            <remarks>The internal name of the transition will be generated automatically.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>Replaces an existing transition with the provided one.</summary>
            <param name="transitionName">An internal name of a transition.</param>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Replace(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>
            Replaces an existing transition with the new one.
            </summary>
            <param name="transitionSelector">A function that allows to get a transition by the source state, the target state and the action.</param>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ConfiguratorTransition,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ConfiguratorTransition})">
            <summary>
            Updates an existing transition with the new one.
            </summary>
            <param name="transitionName">An internal name of a transition.</param>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Update(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured},System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ConfiguratorTransition,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.ConfiguratorTransition})">
            <summary>
            Updates an existing transition with the new one.
            </summary>
            <param name="transitionSelector">A function that allows to get a transition by the source state, the target state and the action.</param>
            <param name="configTransition">A function that configures behaviour of the transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Remove(System.String)">
            <summary>
            Removes an existing transition.
            </summary>
            <param name="transitionName">An internal name of a transition.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Transition.ContainerAdjusterTransitions.Remove(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.INeedSource,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IConfigured})">
            <summary>
            Removes an existing transition.
            </summary>
            <param name="transitionSelector">A function that allows to get a transition by the source state, the target state and the action.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.WorkflowBuilder.Create(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Creates a new reusable workflow.</summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the new workflow.</param>
            <param name="initializer">A function that specifies behavior of the document in the new workflow.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.WorkflowBuilder.Create``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Creates a new reusable workflow.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the new workflow.</typeparam>
            <param name="initializer">A function that specifies behavior of the document in the new workflow.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.WorkflowBuilder.CreateDefault(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Creates a new reusable default workflow.</summary>
            <param name="initializer">A function that specifies behavior of the document in the new workflow.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.INeedStatesFlow.WithFlowStates(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.BaseFlowStep.IContainerFillerStates})">
            <summary>Specifies a list of workflow states.</summary>
            <param name="containerFiller">A function that configures states of the current workflow.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to update state of a workflow. The example is shown in the following code." lang="CS">
            .UpdateDefaultFlow(config1 =&gt; config1.WithFlowStates
                (states =&gt;
                {
                  states.Update(States.New, state =&gt; state
                   .WithFieldStates(fields =&gt;
                   {
                     fields.UpdateField&lt;CROpportunity.resolution&gt;(field =&gt;
                      field.WithDefaultValue(_reasonUnassign).ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));
                   })
                  .WithActions(actions =&gt;
                  {
                    actions.Add(actionAssign, a =&gt; a
                        .IsDuplicatedInToolbar());
             
                    actions.Add(actionAutoAssign, a =&gt; a
                    .IsAutoAction(ownerNotNullCondition));
                    actions.Remove("Open");
                  }));
                  states.Add(assignedState);
                  states.Update(States.Open, state =&gt; state
                    .WithFieldStates(fields =&gt;
                    {
                      fields.AddField&lt;CROpportunity.ownerID&gt;(field =&gt;
                        field.IsRequired());
                    }));
                }))</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IAllowOptionalConfig.WithTransitions(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Transition.IContainerFillerTransitions})">
            <summary>Specifies an ordered list of workflow transitions.</summary>
            <param name="containerFiller">A function that configures transitions of the current workflow.</param>
            <returns></returns>
            <example>
              <code title="Example" description="Suppose you need to remoce the NewToOpenOnOpen transition and add a list of new transitions to the current workflow. The example is shown in the following code." lang="CS">
            .UpdateDefaultFlow(config1 =&gt; config1.WithTransitions(transitions =&gt;
                {
                  transitions.Remove("NewToOpenOnOpen");
             
                  transitions.Add(transition =&gt; transition
                    .From(States.New)
                    .To(States.Assigned)
                    .IsTriggeredOn(actionAssign));
                  transitions.Add(transition =&gt; transition
                    .From(States.New)
                    .To(States.Assigned)
                    .IsTriggeredOn(actionAutoAssign));
                  transitions.Add(transition =&gt; transition
                    .From(States.Assigned)
                    .To(States.New)
                    .IsTriggeredOn(actionReject)
                    .WithFieldAssignments(fields =&gt;
                    {
                      fields.Add&lt;CROpportunity.ownerID&gt;(f =&gt; f.SetFromExpression(null));
                    })
                    );
                  transitions.Add(transition =&gt; transition
                    .From(States.Assigned)
                    .To(States.Open)
                    .IsTriggeredOn(actionAccept));
                })</code>
            </example>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IAllowOptionalConfig.AlteredDescription(System.String)">
            <summary>Specifies the display name for the current workflow.</summary>
            <param name="description">A display name for workflow.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.Add``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Adds a new workflow with the specified ID to the screen configuration.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.Add(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Adds a new workflow with the specified ID to the screen configuration.</summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the current workflow.</param>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured)">
            <summary>Adds a new workflow to the screen configuration.</summary>
            <param name="flow">A configured workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddDefault(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Adds a new default workflow to the screen configuration.</summary>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFrom(System.String,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds new workflow based on a predefined workflow (inherited) with the specified ID.</summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the current workflow.</param>
            <param name="flow">A parent workflow (a workflow on which the new workflow will be based on).</param>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
            <remarks>This method creates a copy of the parent workflow and then modifies it.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFrom(System.String,System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds new workflow based on a predefined workflow (inherited) with the specified ID.</summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the current workflow.</param>
            <param name="copyFromFlowId">An identifier of the parent workflow (a workflow on which the new workflow will be based on).</param>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
            <remarks>This method creates copy of original workflow and then modify it.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFromDefault(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds a new workflow based on a predefined workflow (inherited) from a default workflow with the specified ID.</summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the current workflow.</param>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFrom``1(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds new workflow based on a predefined workflow (inherited) with the specified ID.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="flow">A parent workflow (a workflow on which the new workflow will be based on).</param>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFrom``1(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds new workflow based on a predefined workflow (inherited) with the specified ID.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="copyFromFlowId">An identifier of the parent workflow (a workflow on which the new workflow will be based on).</param>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFromDefault``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>
            Adds new inherited from default workflow with the specified id.
            </summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.IContainerFillerFlows.AddInheritedFrom``2(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>Adds new workflow based on a predefined workflow (inherited) with the specified ID.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <typeparam name="CopyFromID">An identifier of the parent workflow (a workflow on which the new workflow will be based on).</typeparam>
            <param name="config">A function that overrides behavior of the document defined in the parent workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Replace``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>Replaces an existing workflow with the provided one.</summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Replace(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.INeedStatesFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.IConfigured})">
            <summary>
            Replaces an existing workflow with the new one.
            </summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the removed workflow.</param>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Update``1(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>
            Updates an existing workflow.
            </summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the current workflow.</typeparam>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Update(System.String,System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Workflow.ConfiguratorFlow})">
            <summary>
            Updates an existing workflow.
            </summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the removed workflow.</param>
            <param name="config">A function that specifies behavior of the document in the current workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Remove``1">
            <summary>
            Removes an existing workflow from the screen configuration.
            </summary>
            <typeparam name="ID">A value of the property field of a flow type that corresponds to the removed workflow.</typeparam>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.Workflow.ContainerAdjusterFlows.Remove(System.String)">
            <summary>
            Removes an existing workflow from the screen configuration.
            </summary>
            <param name="flowID">A value of the property field of a flow type that corresponds to the removed workflow.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.IContainerFillerHandlers.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1}}})">
            <summary>
            Subsribes an event handler defined in a graph to a workflow state. You specify an event handler by selecting it from a graph.
            </summary>
            <param name="handlerSelector">An expression that selects an event handler from the graph.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.IContainerFillerHandlers.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1}}})">
            <summary>			
            Subsribes an event handler defined in a graph extension to a workflow state. You specify an event handler by selecting it from a graph extension.
            </summary>
            <typeparam name="TExtension">A type of the graph extension.</typeparam>
            <param name="handlerSelector">An expression that selects an event handler from the graph extension.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.IContainerFillerHandlers.Add``1(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,``0}}})">
            <summary>
            Subsribes an event handler defined in a graph to a workflow state. You specify an event handler by selecting it from a graph.
            </summary>
            <typeparam name="TEventTarget">A type of the event.</typeparam>
            <param name="handlerSelector">An expression that selects an event handler from the graph.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.IContainerFillerHandlers.Add``2(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,``0,``1}}})">
            <summary>
            Subsribes an event handler defined in a graph to a workflow state. You specify an event handler by selecting from a graph.
            </summary>
            <typeparam name="TEventTarget">A type of the event.</typeparam>
            <typeparam name="TParams">A type of the event handler parameter.</typeparam>
            <param name="handlerSelector">An expression that selects an event handlers from the graph.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.IContainerFillerHandlers.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IHandlerConfiguredBase)">
            <summary>
            Subsribes an event handler to a workflow state.
            </summary>
            <param name="handler">An event handler that should be added to the state.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.ContainerAdjusterHandlers.Add(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1}}})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.ContainerAdjusterHandlers.Add``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1}}})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.ContainerAdjusterHandlers.Add``1(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,``0}}})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.ContainerAdjusterHandlers.Add``2(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,``0,``1}}})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandler.ContainerAdjusterHandlers.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IHandlerConfiguredBase)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`1.Is(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2}}})">
            <summary>
            Declares an event handler defined in a graph to an event. You specify the event handler by selecting it from the graph.
            </summary>
            <param name="eventHandlerSelector">An expression that selects an event handler from the graph.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`1.Is``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2}}})">
            <summary>
            Declares an event handler defined in a graph extension to an event. You specify the event handler by selecting it from the graph extension.
            </summary>
            <typeparam name="TExtension">A type of the graph extension.</typeparam>
            <param name="eventHandlerSelector">An expression that selects an event handler from the graph extension.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`1.Is(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IConfigured{`2})">
            <summary>
            Declares an event handler to an event.
            </summary>
            <param name="eventHandlerDefinition">An event handler that should be subsribed.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`1.IsNew(System.String)">
            <summary>
            Declares an event handler to an event. This method allows you to specify the event handler by its name.
            </summary>
            <param name="eventHandlerName">A name of an event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`2.Is(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2,`3}}})">
            <summary>
            Declares an event handler defined in a graph to an event. You specify the event handler by selecting it from the graph.
            </summary>
            <param name="eventHandlerSelector">An expression that selects an event handler from the graph.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`2.Is``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2,`3}}})">
            <summary>
            Declares an event handler defined in a graph extension to an event. You specify the event handler by selecting it from the graph extension.
            </summary>
            <typeparam name="TExtension">A type of the graph extension.</typeparam>
            <param name="eventHandlerSelector">An expression that selects an event handler from the graph extension.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`2.Is(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IConfigured{`2,`3})">
            <summary>
            Declares an event handler to an event. This method allows to define the event handler in the parameter.
            </summary>
            <param name="eventHandlerDefinition">A definition of an event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.INeedSubscriber`2.IsNew(System.String)">
            <summary>
            Declares an event handler to an event. This method allows you to specify the event handler by its name.
            </summary>
            <param name="eventHandlerName">A name of the event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction.WithFieldAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Allows to set an ordered list of primary DAC fields, that will be updated before action executed.
            </summary>
            <param name="containerFiller">Field updates definition for current action.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction.DisplayName(System.String)">
            <summary>Sets the display name of an event handler.</summary>
            <param name="displayName">Display name of an event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction`1.WithFieldAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Allows to set an ordered list of primary DAC fields, that will be updated before action executed.
            </summary>
            <param name="containerFiller">Field updates definition for current action.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction`1.DisplayName(System.String)">
            <summary>Sets the display name of an event handler.</summary>
            <param name="displayName">Display name of an event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction`2.WithFieldAssignments(System.Action{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.Assignment.IContainerFillerFields})">
            <summary>
            Allows to set an ordered list of primary DAC fields, that will be updated before action executed.
            </summary>
            <param name="containerFiller">Field updates definition for current action.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.IAllowOptionalConfigAction`2.DisplayName(System.String)">
            <summary>Sets the display name of an event handler.</summary>
            <param name="displayName">Display name of an event handler.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`1.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget}#Is(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2}}})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`1.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget}#Is``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2}}})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`1.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget}#Is(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IConfigured{`2})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`1.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget}#IsNew(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`2.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget,TEventParams}#Is(System.Linq.Expressions.Expression{System.Func{`0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2,`3}}})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`2.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget,TEventParams}#Is``1(System.Linq.Expressions.Expression{System.Func{``0,PX.Data.WorkflowAPI.PXWorkflowEventHandler{`1,`2,`3}}})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`2.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget,TEventParams}#Is(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IConfigured{`2,`3})">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ConfiguratorWorkflowEventHandler`2.PX#Data#WorkflowAPI#BoundedTo{TGraph,TPrimary}#WorkflowEventHandlerDefinition#INeedSubscriber{TEventTarget,TEventParams}#IsNew(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ContainerAdjusterHandlers.Add(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.INeedEventTarget,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IHandlerConfiguredBase})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.WorkflowAPI.BoundedTo`2.WorkflowEventHandlerDefinition.ContainerAdjusterHandlers.Add(PX.Data.WorkflowAPI.BoundedTo{`0,`1}.WorkflowEventHandlerDefinition.IHandlerConfiguredBase)">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.WorkflowAPI.Readonly.FlowState.IsNonPersistent">
            <summary>
            If true, the state is non persistent and an entity in the state cannot be saved.
            </summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.FolderType">
            <exclude />
        </member>
        <member name="F:PX.Data.WorkflowAPI.FolderType.ActionsFolder">
            <summary>The <b>Actions</b> menu.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.FolderType.InquiriesFolder">
            <summary>The <b>Inquiries</b> menu.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.FolderType.ReportsFolder">
            <summary>The <b>Reports</b> menu.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.FolderType.ToolbarFolder">
            <summary>The form toolbar.</summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.PredefinedCategory">
            <summary>Specifies predefined categories.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.PredefinedCategory.Actions">
            <summary>The <b>Actions</b> category.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.PredefinedCategory.Inquiries">
            <summary>The <b>Inquiries</b> category.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.PredefinedCategory.Reports">
            <summary>The <b>Reports</b> category.</summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.DisplayOnToolBar">
            <summary>Specifies how an action can be displayed on the form toolbar.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.DisplayOnToolBar.Hidden">
            <summary>Never display an action on the form toolbar.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.DisplayOnToolBar.IfEnabled">
            <summary>Display an action on the form toolbar only if the action is enabled.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.DisplayOnToolBar.Always">
            <summary>Always display an action on the form toolbar.</summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.ComboBoxItemsModificationAction">
            <summary>Possible modifications of combo box items.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.ComboBoxItemsModificationAction.Set">
            <summary>Adds a new combo box value or updates the display name of an existing combo box value.</summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.ComboBoxItemsModificationAction.Remove">
            <summary>Completely removes a value from the list of available combo box values.</summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.FormFieldControlSize">
            <summary>
            Sizes of UI controls.
            </summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.ComboBoxValuesSource">
            <summary>
            A source of combo box values in dialog forms.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.ComboBoxValuesSource.SourceState">
            <summary>
            Take combo box values from the workflow state property of the current entity state.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.ComboBoxValuesSource.TargetState">
            <summary>
            Take combo box values from the workflow state property of the target entity state—that is, the entity state after the transition.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.ComboBoxValuesSource.ExplicitValues">
            <summary>
            Take combo box values from the field settings in the dialog form.
            </summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.Placement">
            <summary>
            Provides a location of an action inside a category or location of a category in the More menu.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.Placement.After">
            <summary>
            The current object should be placed after the specified object.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.Placement.Before">
            <summary>
            The current object should be placed before the specified object.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.Placement.First">
            <summary>
            The current object should be placed first in the list of objects.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.Placement.Last">
            <summary>
            The current object should be places last in the list of objects.
            </summary>
        </member>
        <member name="F:PX.Data.WorkflowAPI.Placement.Default">
            <summary>
            By default, the current object is placed after the specified object.
            </summary>
        </member>
        <member name="T:PX.Data.WorkflowAPI.PXScreenConfiguration">
            <summary>A container for the workflow context.</summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.PXScreenConfiguration.GetScreenConfigurationContext``2">
            <summary>
            Creates an empty configuration or returns an existing screen configuration.
            </summary>
            <typeparam name="TGraph">A graph that defines business logic of the screen.</typeparam>
            <typeparam name="TPrimary">A primary DAC of the screen.</typeparam>
            <returns></returns>
        </member>
        <member name="T:PX.Data.WorkflowAPI.WorkflowContext`2">
            <summary>Contains conditions, workflows, dialog boxes, action and field configuration for the screen.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Forms">
            <summary>A helper object that allows you to create reusable configurations of dialog boxes and provides access to already configured dialog boxes.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.ActionStates">
            <summary>A helper object that allows you to create reusable configuration of an action state.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.ActionDefinitions">
            <summary>A helper object that allows you to create reusable action configurations and provides access to already configured actions.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Categories">
            <summary>A helper object that allows you to create reusable categories.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.WorkflowEventHandlers">
            <summary>A helper object that allows you to create reusable workflow event handlers.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Assignments">
            <summary>A helper object that allows you to create reusable assignments for fields and action parameters.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Conditions">
            <summary>A helper object that allows you to create reusable shared conditions and provides access to already defined conditions.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.FieldStates">
            <summary>A helper object that allows you to create reusable configurations of a field state.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.FlowStates">
            <summary>A helper object that allows you to create reusable configurations of a flow state.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Workflows">
            <summary>A helper object that allows you to create reusable workflows.</summary>
        </member>
        <member name="P:PX.Data.WorkflowAPI.WorkflowContext`2.Navigation">
            <summary>A helper object that allows you to create reusable navigation actions.</summary>
        </member>
        <member name="M:PX.Data.WorkflowAPI.WorkflowContext`2.AddScreenConfigurationFor(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.IStartConfigScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.IConfigured})">
            <summary>Adds a new configuration of the screen.</summary>
            <param name="config">A function that specifies the screen configuration.</param>
            <remarks>A screen can contain only one screen configuration.</remarks>
        </member>
        <member name="M:PX.Data.WorkflowAPI.WorkflowContext`2.ReplaceScreenConfigurationFor(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.IStartConfigScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.IConfigured})">
            <summary>Replaces an existing screen configuration with the provided one.</summary>
            <param name="config">A function that specifies the screen configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.WorkflowContext`2.UpdateScreenConfigurationFor(System.Func{PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.ConfiguratorScreen,PX.Data.WorkflowAPI.BoundedTo{`0,`1}.ScreenConfiguration.ConfiguratorScreen})">
            <summary>
            Overrides an existing screen configuration.
            </summary>
            <param name="config">A function that overrides the screen configuration.</param>
        </member>
        <member name="M:PX.Data.WorkflowAPI.WorkflowContext`2.RemoveScreenConfigurationFor">
            <summary>Removes the screen configuration.</summary>
        </member>
        <member name="T:PX.Data.PushNotifications.IBCNotificationQueueWriter">
            <summary>
            Represents an interface for raising events in the commerce queue
            </summary>
        </member>
        <member name="M:PX.Data.PushNotifications.IBCNotificationQueueWriter.RaiseEvent(PX.Data.PushNotifications.BCQueueMessage)">
            <summary>
            Raises a commerce notification event
            </summary>
        </member>
        <member name="T:PX.Data.PushNotifications.IBCNotificationQueueReader">
            <summary>
            Represents an interface for reading the commerce event queue and processing it to <see cref="!:PX.Commerce.Core.IBCNotificationQueueProcessor"/>
            </summary>
        </member>
        <member name="T:PX.Data.PushNotifications.DummyPrimaryNotificationQueue">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.DummyPushNotificationDefinitionProvider">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.ICommitEventEnricher">
            <summary>Allows you to add additional information to push notifications.</summary>
            <example>
            	<code title="Example" description="The following code shows a sample implementation of the ICommitEventEnricher interface, which adds the business date and the name of the user to the AdditionalInfo element of notifications in JSON format." lang="CS">
            using PX.Data;
            using PX.Data.PushNotifications;
             
            public class CommitEventEnricher : ICommitEventEnricher 
            {   
                public void Enrich(IQueueEvent commitEvent)            
                {     
                    var businessDate = PXContext.PXIdentity?.BusinessDate;     
                    var userName = PXContext.PXIdentity?.IdentityName;     
                    commitEvent.AdditionalInfo.Add(nameof(businessDate), businessDate);     
                    commitEvent.AdditionalInfo.Add(nameof(userName), userName);          
                }      
            }</code>
            	<code title="Example2" description="The application includes the additional information in the AdditionalInfo element of the notifications in JSON format, as shown in the following notification example." groupname="Example" lang="Json">
            {  
                ...  
                "TimeStamp":636295833829493672,  
                "AdditionalInfo":  
                {    
                    "businessDate":"2017-05-05T15:16:23.1",    
                    "userName":"admin"
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.Data.PushNotifications.ICommitEventEnricher.Enrich(PX.Data.PushNotifications.IQueueEvent)">
            <summary>You use this method to add properties that you want to be returned in push notifications.</summary>
            <remarks>The <tt>Enrich()</tt> method is called in the <tt>PX.Data.PXTransactionScope.Dispose()</tt> method. 
            Therefore, the Enrich() method must not return data that is not accessible in this scope.</remarks>
            <example>
            	<code title="Example" description="The following code shows a sample implementation of the ICommitEventEnricher interface, which adds the business date and the name of the user to the AdditionalInfo element of notifications in JSON format.
            " lang="CS">
            using PX.Data;
            using PX.Data.PushNotifications;
            public class CommitEventEnricher : ICommitEventEnricher
            {
                 public void Enrich(IQueueEvent commitEvent)
                 {
                     var businessDate = PXContext.PXIdentity?.BusinessDate;
                     var userName = PXContext.PXIdentity?.IdentityName;
                     commitEvent.AdditionalInfo.Add(nameof(businessDate), businessDate);
                     commitEvent.AdditionalInfo.Add(nameof(userName), userName);
                 }
            }</code>
            </example>
        </member>
        <member name="T:PX.Data.PushNotifications.JsonMessageFormatter">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.NativeMethods">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.QueueEvent">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.IQueueEvent">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.QueueEventType">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.IdentityEvent">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.CommitEvent">
            <exclude/>
        </member>
        <member name="T:PX.Data.PushNotifications.Statistics.DummyPrimaryQueueStatisticAggregator">
            <exclude/>
        </member>
        <member name="P:PX.Data.PushNotifications.Statistics.IQueueDispatcherWithStatusInfo.Type">
            <summary>
            Have to be 2 characters long (to fit nchar(2) column in database)
            </summary>
        </member>
        <member name="M:PX.Data.PushNotifications.Statistics.IQueueDispatcherWithStatusInfo.DoMaintenanceWork(System.Action)">
            <summary>
            This method stops the dispatcher, invoke action, after completion starts dispatcher
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:PX.Data.PXFieldScope">
            <summary>
            This class allows you to restrict the set of fields on which
            the <tt>SELECT</tt> operation will be performed to speed up this operation.
            </summary>
            <remarks>No <tt>RowSelecting</tt> event (for example, originated from attributes)
            will be generated for the fields that are not specified in the <tt>PXFieldScope</tt> constructor.</remarks>
            <example>In the following example, the <tt>SELECT</tt> operation inside the code block
            will be performed on the <tt>SearchIndex.indexID</tt> and <tt>SearchIndex.entityType</tt>
            fields only.
            <code lang="CS">
            using (new PXFieldScope(selectTopRank.View, new Type[] { typeof(SearchIndex.indexID), typeof(SearchIndex.entityType) }))
            {
                return base.ExecuteSelect(viewName, parameters, searches, sortcolumns,
                    descendings, filters, ref startRow, maximumRows, ref totalRows);
            }
            </code>
            </example>
        </member>
        <member name="P:PX.Data.PXFieldScope.Fields">
            <summary>
            The set of fields on which the <tt>SELECT</tt> operations are performed.
            </summary>
        </member>
        <member name="P:PX.Data.PXFieldScope.View">
            <summary>
            The <tt>PXView</tt> object that contains the fields on which
            the <tt>SELECT</tt> operations are performed.
            </summary>
            <remarks> The <tt>RestrictedFields</tt> property of this view contains the fields
            specified in the constructor of the <tt>PXFieldScope</tt> object. When the <tt>Dispose</tt>
            method is called, the <tt>RestrictedFields</tt> property of the view is cleared of these fields.</remarks>
        </member>
        <member name="M:PX.Data.PXFieldScope.#ctor(PX.Data.PXView,System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Creates a <tt>PXFieldScope</tt> object.
            </summary>
            <param name="view">The <tt>PXView</tt> object to store the fields
            on which the <tt>SELECT</tt> operations will be performed.</param>
            <param name="fieldsAndTables">The fields explicitly specified here and the fields
            from the tables specified here constitute the set of fields on which
            the <tt>SELECT</tt> operations will be performed.</param>
            <param name="collectDependencies">Specifies whether the fields that are dependent on
            the explicitly listed fields must be taken into account too.</param>
        </member>
        <member name="M:PX.Data.PXFieldScope.#ctor(PX.Data.PXView,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates a <tt>PXFieldScope</tt> object.
            </summary>
            <param name="view">The <tt>PXView</tt> object to store the fields
            on which the <tt>SELECT</tt> operations will be performed.</param>
            <param name="fields">The fields on which to perform the <tt>SELECT</tt> operations.</param>
            <param name="collectDependencies">Specifies whether the fields that are dependent on
            the explicitly listed fields must be taken into account too.</param>
        </member>
        <member name="M:PX.Data.PXFieldScope.#ctor(PX.Data.PXView,System.Collections.Generic.IEnumerable{PX.Data.RestrictedField},System.Boolean)">
            <summary>
            Creates a <tt>PXFieldScope</tt> object.
            </summary>
            <param name="view">The <tt>PXView</tt> object to store the fields
            on which the <tt>SELECT</tt> operations will be performed.</param>
            <param name="fields">The fields on which to perform the <tt>SELECT</tt> operations.</param>
            <param name="collectDependencies">Specifies whether the fields that are dependent on
            the explicitly listed fields must be taken into account too.</param>
        </member>
        <member name="M:PX.Data.PXFieldScope.#ctor(PX.Data.PXView,System.Type[])">
            <exclude/>
        </member>
        <member name="P:PX.Data.PXFieldScope.IsScoped">
            <summary>
            Returns <tt>true</tt> if a fields scope for the <tt>SELECT</tt> operation is set;
            otherwise, it returns <tt>false</tt>.
            </summary>
        </member>
        <member name="M:PX.Data.PXFieldScope.Dispose">
            <exclude/>
        </member>
        <member name="T:PX.Data.RestrictedField">
            <summary>
            This class represents an item of a fields set used by the <tt>PXFieldScope</tt> class.
            </summary>
        </member>
        <member name="P:PX.Data.RestrictedField.Table">
            <summary>
            Returns the table to which the field belongs.
            </summary>
        </member>
        <member name="P:PX.Data.RestrictedField.Field">
            <summary>
            Returns the field name.
            </summary>
        </member>
        <member name="M:PX.Data.RestrictedField.#ctor(System.Type,System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedField.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedField.Equals(PX.Data.RestrictedField)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedField.GetHashCode">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedField.Equals(System.Object)">
            <exclude/>
        </member>
        <member name="T:PX.Data.RestrictedFieldsSet">
            <summary>
            This class represents a set of fields (<tt>RestrictedField</tt> objects) used by the <tt>PXFieldScope</tt> class.
            </summary>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.#ctor(PX.Data.RestrictedFieldsSet)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.#ctor(System.Collections.Generic.IEnumerable{PX.Data.RestrictedField})">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.Add(PX.Data.RestrictedField)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.Remove(PX.Data.RestrictedField)">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.AddRange(System.Collections.Generic.IEnumerable{PX.Data.RestrictedField})">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.RemoveRange(System.Collections.Generic.IEnumerable{PX.Data.RestrictedField})">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.Any">
            <summary>
            Indicates whether the fields set contains any items.
            </summary>
            <returns>Returns <tt>true</tt> if the <tt>RestrictedFieldsSet</tt> object
            contains any items; otherwise, the method returns <tt>false</tt>.</returns>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.GetEnumerator">
            <exclude/>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="P:PX.Data.RestrictedFieldsSet.Count">
            <summary>
            Gets the number of items in the <tt>RestrictedFieldsSet</tt> object.
            </summary>
        </member>
        <member name="M:PX.Data.RestrictedFieldsSet.Contains(PX.Data.RestrictedField)">
            <exclude/>
        </member>
        <member name="T:PX.Data.PXLogFieldToTelemetryAttribute">
            <summary>
            Indicates that a DAC property's value is stored by telemetry
            as the <see cref="!:PX.Telemetry.RequestInfoEx.PrimaryViewKeys"/> property of a request. The attribute is assigned to a DAC property. 
            </summary>
            <remarks>
            For primary items of a graph, their keys are stored in the <see cref="!:PX.Telemetry.RequestInfoEx.PrimaryViewKeys"/> telemetry property of an HTTP request.
            However for instance, if a graph has a <see cref="T:PX.Data.PXFilter`1"/> data view, the keys of the corresponding DAC are not stored in telemetry.   
            If you need to store these keys in telemetry, you can mark
            the respective properties of the <see cref="T:PX.Data.PXFilter`1"/>'s type argument (that is, of the DAC) with PXLogFieldToTelemetryAttribute.
            </remarks> 
        </member>
        <member name="T:PX.Data.PXTelemetryLogger">
            <exclude/>
        </member>
        <member name="M:PX.Data.PXTrace.UseSerilog(Serilog.ILogger)">
            <param name="logger">If you pass this, you take care of its disposal.</param>
        </member>
        <member name="P:PX.Data.PXTrace.Logger">
            <summary>
            If you set this, you take care of its disposal.
            The only place it actually IS set is
            <see cref="M:PX.Logging.LoggingExtensions.UseLogging(Microsoft.Extensions.Hosting.IHostBuilder)">UseLogging</see>.
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteError(System.String)">
            <summary>
            Write event with EventType = TraceEventType.Error
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteError(System.String,System.Object[])">
            <summary>
            Write event with EventType = TraceEventType.Error
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Data.PXTrace.WriteError(System.Exception,System.String,System.Object[])" -->
        <member name="M:PX.Data.PXTrace.WriteError(System.Exception)">
            <summary>
            Write event with EventType = TraceEventType.Error
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteWarning(System.String)">
            <summary>
            Write event with EventType = TraceEventType.Warning
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteWarning(System.String,System.Object[])">
            <summary>
            Write event with EventType = TraceEventType.Warning
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteWarning(System.Exception)">
            <summary>
            Write event with EventType = TraceEventType.Warning
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteInformation(System.String)">
            <summary>
            Write event with EventType = TraceEventType.Information
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteInformation(System.String,System.Object[])">
            <summary>
            Write event with EventType = TraceEventType.Information
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteInformation(System.Exception)">
            <summary>
            Write event with EventType = TraceEventType.Information
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteVerbose(System.String)">
            <summary>
            Write event with EventType = TraceEventType.Verbose
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteVerbose(System.String,System.Object[])">
            <summary>
            Write event with EventType = TraceEventType.Verbose
            </summary>
        </member>
        <member name="M:PX.Data.PXTrace.WriteVerbose(System.Exception)">
            <summary>
            Write event with EventType = TraceEventType.Verbose
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.IFieldsRelation">
            <summary>
            The interface for extraction of field pairs from the <see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/> class.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.IFieldsRelation.FieldOfChildTable">
            <exclude/>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.IFieldsRelation.FieldOfParentTable">
            <exclude/>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.FieldRelationArray">
            <summary>
            A <see cref="T:PX.Common.TypeArray"/> of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.IFieldsRelation"/> types 
            (i.e. of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.Field`1">
            <summary>
            Begins a field relation declaration by defining a <see cref="T:PX.Data.IBqlField"/> of the child <see cref="T:PX.Data.IBqlTable"/>.
            </summary>
            <typeparam name="TBqlFieldOfChildTable"><see cref="T:PX.Data.IBqlField"/> of child-<see cref="T:PX.Data.IBqlTable"/> of the relation</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1">
            <summary>
            Finishes the fields relation declaration by defining a <see cref="T:PX.Data.IBqlField"/> of parent-<see cref="T:PX.Data.IBqlTable"/>.
            </summary>
            <typeparam name="TBqlFieldOfParentTable"><see cref="T:PX.Data.IBqlField"/> of parent-<see cref="T:PX.Data.IBqlTable"/> of the relation</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1.AsSimpleKey">
            <summary>
            Indicates that the field relation should be interpreted as a simple foreign key relation.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1.AsSimpleKey.WithTablesOf`2">
            <summary>
            A simple relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3">
            <summary>
            A base class for a strongly typed relation between two tables.
            </summary>
            <typeparam name="TSelf">The type of a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3"/> descendant.</typeparam>
            <typeparam name="TParentTable">The type of the parent table of the relation.</typeparam>
            <typeparam name="TChildTable">The type of the child table of the relation.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.Dirty.FindParent(PX.Data.PXGraph,`2)">
            <summary>
            Finds the parent entity that the child entity refers.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.Dirty.SelectChildren(PX.Data.PXGraph,`1)">
            <summary>
            Selects the children entities that refer the parent entity.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.FindParent(PX.Data.PXGraph,`2)">
            <summary>
            Finds the parent entity that the child entity refers.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.SelectChildren(PX.Data.PXGraph,`1)">
            <summary>
            Selects the children entities that refer the parent entity.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.Match(PX.Data.PXGraph,`1,`2)">
            <summary>
            Indicates that two entities of the reference are match to each other.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.SameAsCurrent">
            <summary>
            Represents a predicate for the <typeparamref name="TChildTable"/> that is parametrized
            with corresponding key values of a current (<see cref="T:PX.Data.Current`1"/>) <typeparamref name="TParentTable"/> row.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.SameAsCurrent.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.SameAsCurrent.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.And`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "and".
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.KeysRelation`3.Or`1">
            <summary>
            Appends a unary operator to a conditional expression via logical "or".
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`2">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`2.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`3">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`3.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`4">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`4.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`5">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`5.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`6">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`6.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`7">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`7.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`8">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`8.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`9">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`9.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`10">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`10.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`11">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`11.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`12">
            <summary>
            Represents a composite foreign key relation, made of a set of fields relations
            (<see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`12.WithTablesOf`2">
            <summary>
            A composite foreign key relation between <typeparamref name="TParentTable"/> and <typeparamref name="TChildTable"/> entities.
            </summary>
            <typeparam name="TParentTable">The parent table of the foreign key.</typeparam>
            <typeparam name="TChildTable">The child table of the foreign key.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKey">
            <summary>
            The interface that provides instance-level access to static primary key (PK) API of a certain table.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKey.Find(PX.Data.PXGraph,System.Object[])">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKey.Find(PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKey.StoreResult(PX.Data.PXGraph,PX.Data.IBqlTable)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKeyOf`1">
            <summary>
            The interface that provides instance-level access to static primary key (PK) API of a certain table.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKeyOf`1.Find(PX.Data.PXGraph,System.Object[])">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKeyOf`1.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.IPrimaryKeyOf`1.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1">
            <summary>
            Begins a primary key declaration by defining a <typeparamref name="TTable"/> to which the PK is related.
            </summary>
            <typeparam name="TTable">The type of a table to which the PK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.IPrimaryKeyConfig">
            <summary>
            The primary key configuration
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2">
            <summary>
            The base primary key declaration by defining a single key field of the table.
            </summary>
            <typeparam name="TKeyComponent">A single key field of the table.</typeparam>
            <typeparam name="TPrimaryKeyConfig">The primary key configuration</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's key.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.FindBy(PX.Data.PXGraph,System.Object)">
            <summary>
            Finds an entity by its key.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.FindBy(PX.Data.PXGraph,System.Object,System.Boolean)">
            <summary>
            Finds an entity by its key.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.PutToCache(PX.Data.PXGraph,`0)">
            <summary>
            Put the item to global cache
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of the table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.ForeignKeyOf`1.By`1">
            <summary>
            Finishes the foreign key declaration by defining a single foreign key field of the child table.
            </summary>
            <typeparam name="TChildKeyComponent">A single foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.BaseBy`2.ForeignKeyOf`1.By`1.FindParent(PX.Data.PXGraph,`3)">
            <summary>
            Finds the parent entity that the child entity refers.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`1">
            <summary>
            Finishes the primary key declaration by defining a single key field of the table.
            </summary>
            <typeparam name="TKeyComponent">A single key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`1.Dirty">
            <summary>
            Finishes the primary key declaration by defining a single key field of the table.
            Read dirty items.
            </summary>
            <typeparam name="TKeyComponent">A single key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2">
            <summary>
            Finishes the primary key declaration by defining two key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2.ForeignKeyOf`1.By`2">
            <summary>
            Finishes the foreign key declaration by defining two foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2.FindBy(PX.Data.PXGraph,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`2.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3">
            <summary>
            Finishes the primary key declaration by defining three key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3.ForeignKeyOf`1.By`3">
            <summary>
            Finishes the foreign key declaration by defining three foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`3.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4">
            <summary>
            Finishes the primary key declaration by defining four key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4.ForeignKeyOf`1.By`4">
            <summary>
            Finishes the foreign key declaration by defining four foreign key field of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`4.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5">
            <summary>
            Finishes the primary key declaration by defining five key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5.ForeignKeyOf`1.By`5">
            <summary>
            Finishes the foreign key declaration by defining five foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`5.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6">
            <summary>
            Finishes the primary key declaration by defining six key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6.ForeignKeyOf`1.By`6">
            <summary>
            Finishes the foreign key declaration by defining six foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`6.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7">
            <summary>
            Finishes the primary key declaration by defining seven key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7.ForeignKeyOf`1.By`7">
            <summary>
            Finishes the foreign key declaration by defining seven foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`7.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8">
            <summary>
            Finishes the primary key declaration by defining eight key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent8">The eighth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8.ForeignKeyOf`1.By`8">
            <summary>
            Finishes the foreign key declaration by defining eigth foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent8">The eighth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`8.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9">
            <summary>
            Finishes the primary key declaration by defining ninth key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent8">The eighth key field of the table.</typeparam>
            <typeparam name="TKeyComponent9">The ninth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9.ForeignKeyOf`1.By`9">
            <summary>
            Finishes the foreign key declaration by defining ninth foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent8">The eighth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent9">The ninth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`9.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10">
            <summary>
            Finishes the primary key declaration by defining tenth key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent8">The eighth key field of the table.</typeparam>
            <typeparam name="TKeyComponent9">The ninth key field of the table.</typeparam>
            <typeparam name="TKeyComponent10">The tenth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.ForeignKeyOf`1.By`10">
            <summary>
            Finishes the foreign key declaration by defining tenth foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent8">The eighth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent9">The ninth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent10">The tenth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.StoreCached(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`10.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11">
            <summary>
            Finishes the primary key declaration by defining eleventh key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent8">The eighth key field of the table.</typeparam>
            <typeparam name="TKeyComponent9">The ninth key field of the table.</typeparam>
            <typeparam name="TKeyComponent10">The tenth key field of the table.</typeparam>
            <typeparam name="TKeyComponent11">The eleventh key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11.ForeignKeyOf`1.By`11">
            <summary>
            Finishes the foreign key declaration by defining eleventh foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent8">The eighth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent9">The ninth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent10">The tenth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent11">The eleventh foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`11.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12">
            <summary>
            Finishes the primary key declaration by defining twelfth key fields of the table.
            </summary>
            <typeparam name="TKeyComponent1">The first key field of the table.</typeparam>
            <typeparam name="TKeyComponent2">The second key field of the table.</typeparam>
            <typeparam name="TKeyComponent3">The third key field of the table.</typeparam>
            <typeparam name="TKeyComponent4">The fourth key field of the table.</typeparam>
            <typeparam name="TKeyComponent5">The fifth key field of the table.</typeparam>
            <typeparam name="TKeyComponent6">The sixth key field of the table.</typeparam>
            <typeparam name="TKeyComponent7">The seventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent8">The eighth key field of the table.</typeparam>
            <typeparam name="TKeyComponent9">The ninth key field of the table.</typeparam>
            <typeparam name="TKeyComponent10">The tenth key field of the table.</typeparam>
            <typeparam name="TKeyComponent11">The eleventh key field of the table.</typeparam>
            <typeparam name="TKeyComponent12">The twelfth key field of the table.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12.ForeignKeyOf`1">
            <summary>
            Begins a declaration of a foreign key (FK) based on an existing primary key by defining a <typeparamref name="TChildTable"/> table to which the FK is related.
            </summary>
            <typeparam name="TChildTable">The type of a table to which the FK is related.</typeparam>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12.ForeignKeyOf`1.By`12">
            <summary>
            Finishes the foreign key declaration by defining eleventh foreign key fields of the child table.
            </summary>
            <typeparam name="TChildKeyComponent1">The first foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent2">The second foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent3">The third foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent4">The fourth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent5">The fifth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent6">The sixth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent7">The seventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent8">The eighth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent9">The ninth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent10">The tenth foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent11">The eleventh foreign key field of the child table.</typeparam>
            <typeparam name="TChildKeyComponent12">The twelfth foreign key field of the child table.</typeparam>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12.Find(PX.Data.PXGraph,`0)">
            <summary>
            Finds an entity by the item's keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12.FindBy(PX.Data.PXGraph,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Finds an entity by its keys.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PrimaryKeyOf`1.By`12.StoreResult(PX.Data.PXGraph,`0)">
            <summary>
            Stores the item in the query cache results.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute">
            <summary>
            Excludes certain rows of child-<see cref="T:PX.Data.IBqlTable"/> from referential 
            integrity check by using the <see cref="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.CurrentTableExcludingCondition"/> 
            and <see cref="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.ForeignTableExcludingConditions"/>.<para/>
            Child-<see cref="T:PX.Data.IBqlTable"/> can has many parent-specific conditions, 
            and only one general condition (where <see cref="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.SpecificParent"/> is no set).<para/>
            To include <see cref="T:PX.Data.IBqlTable"/>s in referential integrity check
            declare a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> by using one of the following attributes: 
            <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute"/> or <see cref="T:PX.Data.PXParentAttribute"/> (on child side),
            or <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute"/> (on parent or child side).
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.IsValid">
            <summary>
            Indicates whether attribute has a valid configuration
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.CurrentTableExcludingCondition">
            <summary>
            Condition (<see cref="T:PX.Data.IBqlWhere"/>-clause) that determines if a certain row
            should be excluded from referential integrity check based on the row itself
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.ForeignTableExcludingConditions">
            <summary>
            Represents a single or a set of excluding conditions (<see cref="T:PX.Data.IBqlWhere"/>-clauses) targeted on external
            <see cref="T:PX.Data.IBqlTable"/>, that left-joined to the row by the defined <see cref="T:PX.Data.IBqlOn"/>-expression.<para/>
            If any of conditions is met for a certain row - it would be excluded from referential integrity check.<para/>
            Should be a single a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.Joined`1.Satisfies`1"/> 
            or a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.JoinedAsParent.Satisfies`1"/> type specification,
            or an <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludingConditionArray"/> filled with such types.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.SpecificParent">
            <summary>
            The only parent-<see cref="T:PX.Data.IBqlTable"/> for which the passed conditions are meaningful to.<para/>
            If <see cref="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.SpecificParent"/> is set, the conditions become specific excluding conditions,
            otherwise, if <see cref="P:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute.SpecificParent"/> is <code>null</code>, the conditions become
            general excluding conditions that are meaningful to any parent-<see cref="T:PX.Data.IBqlTable"/><para/>
            General and specific conditions (if both) are combined with <see cref="T:PX.Data.Or`1"/>-clause on referential integrity check.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludingConditionArray">
            <summary>
            A <see cref="T:PX.Common.TypeArray"/> of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.IByForeignTableExcludingCondition"/> types 
            (i.e. <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.Joined`1.Satisfies`1"/>
            or <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.JoinedAsParent.Satisfies`1"/>).
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1">
            <summary>
            Begins a foreign table excluding condition definition 
            by defining the foreign <see cref="T:PX.Data.IBqlTable"/>.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.Joined`1">
            <summary>
            Continues the foreign table excluding condition definition 
            by defining <see cref="T:PX.Data.IBqlOn"/>-condition, on which foreign <see cref="T:PX.Data.IBqlTable"/>
            would be joined to the current table.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.Joined`1.Satisfies`1">
            <summary>
            Finishes the foreign table excluding condition definition 
            by defining the <see cref="T:PX.Data.IBqlWhere"/>-condition, which foreign <see cref="T:PX.Data.IBqlTable"/>
            should match so that a current table row would be excluded from referential integrity check.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.Joined`1.JoinOnly">
            <summary>
            Finishes the foreign table excluding condition definition
            by indicating that foreign table should only be joined 
            without any excluding condition introducing and that 
            real excluding condition for joined table will be found
            in further foreign table excluding condition definitions,
            therefore such excluding condition should never be neither 
            the last element of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludingConditionArray"/>,
            nor the single condition.<para/>
            Using of current technique allows developer to define
            complex excluding conditions, that includes fields of
            multiple tables.
            </summary>
            <example>
            Exclude row only if both SOOrder-parent and SOShipment-parent are released/completed
            [PXExcludeRowsFromReferentialIntegrityCheck(ForeignTableExcludingConditions = 
            	typeof(ExcludingConditionArray.FilledWith{
            		ExcludeWhen{SOOrder}.JoinedAsParent.JoinOnly,
            		ExcludeWhen{SOShipment}.JoinedAsParent.Satisfies{Where{SOShipment.released, Equal{True}, And{SOOrder.completed, Equal{True}}}}})
            )]
            </example>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.JoinedAsParent">
            <summary>
            Continues the foreign table excluding condition definition 
            by indicating that <see cref="T:PX.Data.IBqlOn"/>-condition, on which foreign <see cref="T:PX.Data.IBqlTable"/>
            would be joined to the current table, should be searched in <see cref="T:PX.Data.PXParentAttribute"/>s
            of current table.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.JoinedAsParent.Satisfies`1">
            <summary>
            Finishes the foreign table excluding condition definition 
            by defining the <see cref="T:PX.Data.IBqlWhere"/>-condition, which foreign <see cref="T:PX.Data.IBqlTable"/>
            should match so that a current table row would be excluded from referential integrity check.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ExcludeWhen`1.JoinedAsParent.JoinOnly">
            <summary>
            Finishes the foreign table excluding condition definition
            by indicating that foreign table should only be joined 
            without any excluding condition introducing and that 
            real excluding condition for joined table will be found
            in further foreign table excluding condition definitions,
            therefore such excluding condition should never be neither 
            the last element of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ExcludingConditionArray"/>,
            nor the single condition.<para/>
            Using of current technique allows developer to define
            complex excluding conditions, that includes fields of
            multiple tables.
            </summary>
            <example>
            Exclude row only if both SOOrder and SOShipment parents are released/completed
            [PXExcludeRowsFromReferentialIntegrityCheck(ForeignTableExcludingConditions = 
            	typeof(ExcludingConditionArray.FilledWith{
            		ExcludeWhen{SOOrder}.JoinedAsParent.JoinOnly,
            		ExcludeWhen{SOShipment}.JoinedAsParent.Satisfies{Where{SOShipment.released, Equal{True}, And{SOOrder.completed, Equal}True}}}}})
            )]
            </example>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute">
            <summary>
            Actively includes targeted <see cref="T:PX.Data.IBqlTable"/> in referential integrity 
            check in <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole"/> of child,
            and explicitly declares a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> between two <see cref="T:PX.Data.IBqlTable"/>s.<para/>
            <see cref="T:PX.Data.IBqlTable"/> could be passively (e.g. without <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> generating)
            included in referential integrity check in any <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole"/> 
            by using <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute"/>.<para/>
            Certain rows could be excluded from referential integrity check by using <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute"/>.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute.Messages">
            <exclude />
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute.RefHolder">
            <exclude />
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute.#ctor(System.Type,PX.Data.ReferentialIntegrity.ReferenceOrigin,PX.Data.ReferentialIntegrity.ReferenceBehavior,System.Boolean)">
            <summary>
            Explicitly declares a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> (foreign key constraint) 
            between two <see cref="T:PX.Data.IBqlTable"/>s by a simple or a composite key relation.
            </summary>
            <param name="fieldsRelationsContainer">
            A single <see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/> type specification
            or a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.FieldRelationArray"/>, such as a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`2"/>,
            filled with such type specifications.
            </param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute.#ctor(System.Type,PX.Data.ReferentialIntegrity.ReferenceBehavior)">
            <summary>
            Explicitly declares a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> (foreign key constraint) 
            between two <see cref="T:PX.Data.IBqlTable"/>s by a simple or a composite key relation,
            with <see cref="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.DeclareReferenceAttribute"/>.
            </summary>
            <param name="fieldsRelationsContainer">
            A single <see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/> type specification
            or a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.FieldRelationArray"/>, such as a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`2"/>,
            filled with such type specifications.
            </param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute.#ctor(System.Type)">
            <summary>
            Explicitly declares a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> (foreign key constraint) 
            between two <see cref="T:PX.Data.IBqlTable"/>s by a simple or a composite key relation,
            with <see cref="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.DeclareReferenceAttribute"/> and <see cref="F:PX.Data.ReferentialIntegrity.ReferenceBehavior.Restrict"/>.
            </summary>
            <param name="fieldsRelationsContainer">
            A single <see cref="T:PX.Data.ReferentialIntegrity.Attributes.Field`1.IsRelatedTo`1"/> type specification
            or a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.FieldRelationArray"/>, such as a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.CompositeKey`2"/>,
            filled with such type specifications.
            </param>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute">
            <summary>
            Passively includes targeted <see cref="T:PX.Data.IBqlTable"/> in referential integrity check without creating any <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s.<para/>
            <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s could be declared explicitly by using <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute"/> (on child side).<para/>
            Certain rows could be excluded from referential integrity check by using <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXExcludeRowsFromReferentialIntegrityCheckAttribute"/>.<para/>
            In case when only parent-<see cref="T:PX.Data.IBqlTable"/> is included in referential integrity check, 
            only children presence checking will be performed on parent-row deleting.<para/>
            In case when only child-<see cref="T:PX.Data.IBqlTable"/> is included in referential integrity check, 
            only parent presence checking will be performed on child-row inserting.<para/>
            In case when both child-<see cref="T:PX.Data.IBqlTable"/> and parent-<see cref="T:PX.Data.IBqlTable"/> are included in referential integrity check, 
            both checks will be performed on corresponding events.<para/>
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute.#ctor(PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole)">
            <summary>
            Instantiate new instance of <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute"/>
            </summary>
            <param name="referentialIntegrityRole">Indicates <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole"/> of targeted <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute.ReferentialIntegrityRole">
            <summary>
            Indicates <see cref="T:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole"/> of targeted <see cref="T:PX.Data.IBqlTable"/>
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute.CheckPoint">
            <summary>
            Indicates on which events of current entity system should check referential integrity.
            Default value for entities in a parent role is <see cref="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.BeforePersisting"/>,
            for entities in a child role - <see cref="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.OnPersisting"/>,
            and for entities in both roles - <see cref="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.Both"/>.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Attributes.PXReferentialIntegrityCheckAttribute.RowsExcludingCondition">
            <summary>
            <see cref="T:PX.Data.IBqlWhere"/>-clause or <see cref="T:PX.Data.IBqlSearch"/>-clause that indicates whether the row of targeted
            <see cref="T:PX.Data.IBqlTable"/> should be excluded from referential integrity check.
            Row will be excluded if <see cref="T:PX.Data.IBqlWhere"/>-clause is true or <see cref="T:PX.Data.IBqlSearch"/>-clause
            returns any result
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.PXSuspendReferentialIntegrityCheckScope">
            <summary>
            Temporarily suspend referential integrity check for a cache
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole">
            <summary>Defines how referential integrity check should be performed.</summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole.AsParent">
            <summary>
            Check children presence on row deleting
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole.AsChild">
            <summary>
            Check parent presence on row inserting and row updating
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.ReferentialIntegrityRole.Full">
            <summary>
            Check children presence on row deleting and parent presence on row inserting/updating
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Attributes.CheckPoint">
            <summary>Defines when referential integrity check should be performed.</summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.BeforePersisting">
            <summary>
            Check referential integrity on parents <see cref="E:PX.Data.PXCache.RowDeleting"/>
            and children <see cref="E:PX.Data.PXCache.RowInserting"/> and <see cref="E:PX.Data.PXCache.RowUpdating"/> events.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.OnPersisting">
            <summary>
            Check referential integrity on <see cref="E:PX.Data.PXCache.RowPersisting"/> event.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.Attributes.CheckPoint.Both">
            <summary>
            Check referential integrity both on parents <see cref="E:PX.Data.PXCache.RowDeleting"/>
            and children <see cref="E:PX.Data.PXCache.RowInserting"/> and <see cref="E:PX.Data.PXCache.RowUpdating"/>,
            and on <see cref="E:PX.Data.PXCache.RowPersisting"/> event.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.DacRelations.DacRelationService.GetProjectionRelations(System.Type)">
            <summary>
            If table is a projection, we need to collect it's references, references from base classes
            and references from DAC's which are defined in Select of <see cref="T:PX.Data.PXProjectionAttribute"/>
            if fields from their references exist in this projection.
            </summary>
            <param name="table">The projection table.</param>
            <returns>Relations of projection table.</returns>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.DacRelations.DacRelationService.IsReferenceAllowed(PX.Data.ReferentialIntegrity.DacRelations.TableRelations.Relation,System.Collections.Generic.List{System.ValueTuple{System.String,System.Type}},System.Boolean)">
            <summary>
            Checks if all fields of reference from DAC which is defined 
            in Select of <see cref="T:PX.Data.PXProjectionAttribute"/> exist in the projection.
            </summary>
            <param name="relation">Relation of DAC which is defined in Select of <see cref="T:PX.Data.PXProjectionAttribute"/></param>
            <param name="allowedFields">
            Fields in projection that exist in other tables
            which are defined in Select of <see cref="T:PX.Data.PXProjectionAttribute"/>
            </param>
            <param name="isOutgoing">Flag that indicates if reference is outgoing or incoming</param>
            <returns>True if reference is allowed in projection</returns>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.DacRelations.DacRelationServiceExtensions.GetTableRelations``1(PX.Data.ReferentialIntegrity.DacRelations.IDacRelationService)">
            <summary>
            Returns relation information for a particular DAC type specified by <typeparamref name="Table"/>.
            </summary>
            <typeparam name="Table">DAC type</typeparam>
            <param name="dacRelationService"><see cref="T:PX.Data.ReferentialIntegrity.DacRelations.IDacRelationService"/> instance</param>
            <returns>The information about all incoming and outgoing relations for a particular DAC.</returns>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.DacRelations.IDacRelationService">
            <summary>
            Provides information about relations between DACs.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.DacRelations.IDacRelationService.GetTableRelations(System.Type)">
            <summary>
            Returns relation information for a particular DAC type specified by <paramref name="table"/>.
            </summary>
            <param name="table">DAC type</param>
            <returns>The information about all incoming and outgoing relations for a particular DAC.</returns>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.DacRelations.RelationType.Key">
            <summary>
            Represents an explicitly declared relation between DACs (e.g., by using <a href="https://wiki.acumatica.com/display/TND/Primary+and+Foreign+Key+API">Foreign Key API</a>).
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.DacRelations.RelationType.Direct">
            <summary>
            Represents a relation between DACs that is directly mentioned in a <see cref="T:PX.Data.PXParentAttribute"/>, <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute"/>, <see cref="T:PX.Data.PXSelectorAttribute"/> or in a similar attribute.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.DacRelations.RelationType.Indirect">
            <summary>
            Represents a relation between DACs that is indirectly mentioned in a Join or Where clause in a data view inside one of the data graphs.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.FieldAndParameter">
            <summary>
            Represents a field-and-parameter pair
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.FieldAndParameter.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            Initialize new instance of <see cref="T:PX.Data.ReferentialIntegrity.FieldAndParameter"/>
            </summary>
            <param name="field">Actual field. Must be a <see cref="T:PX.Data.IBqlField"/> implementer</param>
            <param name="parameter">Parameter field. Must be a <see cref="T:PX.Data.IBqlField"/> implementer</param>
            <param name="parameterType">Parameter wrapper. Must be a <see cref="T:PX.Data.IBqlParameter"/> implementer</param>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector">
            <summary>
            Performs inspection of <see cref="T:PX.Data.IBqlTable"/> referential relationship.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector.AllReferencesAreCollected">
            <summary>
            Indicates whether the process of collecting <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s is already completed.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector.CollectReference(PX.Data.ReferentialIntegrity.Reference)">
            <summary>
            Collects the reference.
            </summary>
            <param name="reference">The reference to be collected</param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector.GetReferencesOfAllDacs">
            <summary>
            Gets information about referential relationship between all <see cref="T:PX.Data.IBqlTable"/>s
            that are included in referential integrity check.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector.GetReferencesOf(System.Type)">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/>
            that is included in referential integrity check.
            </summary>
            <param name="bqlTable">Inspecting <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.ITableReferenceInspector.GetReferencesOf``1">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/> 
            and other <see cref="T:PX.Data.IBqlTable"/>s that are included in referential integrity check.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Inspecting.ReferencesInspectionResult">
            <summary>
            Represents a result of inspecting raw <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s of some <see cref="T:PX.Data.IBqlTable"/>
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Inspecting.TableReferenceInspector">
            <summary>
            Performs inspection of <see cref="T:PX.Data.IBqlTable"/> referential relationship
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.TableReferenceInspector.GetReferencesOfAllDacs">
            <summary>
            Gets information about referential relationship between all <see cref="T:PX.Data.IBqlTable"/>s
            that are included in referential integrity check
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.TableReferenceInspector.GetReferencesOf(System.Type)">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/>
            that is included in referential integrity check
            </summary>
            <param name="bqlTable">Inspecting <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Inspecting.TableReferenceInspector.GetReferencesOf``1">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/> 
            and other <see cref="T:PX.Data.IBqlTable"/>s that are included in referential integrity check
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Inspecting.TableReferenceInspector.AllReferencesAreCollected">
            <summary>
            Indicates whether the process of collecting <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s is already completed
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.IReferenceMerger">
            <summary>
            Performs merging of similar <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s by weighting 
            their corresponding <see cref="T:PX.Data.IBqlTable"/>s and deciding which of them is more primary.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.IReferenceMerger.GetSuggestedType(System.Type)">
            <summary>
            Returns the "primary" <see cref="T:PX.Data.IBqlTable"/> type suggested by the merging algorithm for the
            original <see cref="T:PX.Data.IBqlTable"/> type as a replacement in the references.
            </summary>
            <param name="originalType">The original type of <see cref="T:PX.Data.IBqlTable"/>.</param>
            <returns>The "primary" <see cref="T:PX.Data.IBqlTable"/> type suggested by the merging algorithm.</returns>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.ITableMergedReferencesInspector">
            <summary>
            Performs inspection of <see cref="T:PX.Data.IBqlTable"/> referential relationship.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.ITableMergedReferencesInspector.GetMergedReferencesOfAllTables">
            <summary>
            Gets information about referential relationship between all <see cref="T:PX.Data.IBqlTable"/>s
            that are included in referential integrity check.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.ITableMergedReferencesInspector.GetMergedReferencesOf(System.Type)">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/>
            that is included in referential integrity check.
            </summary>
            <param name="bqlTable">Inspecting <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.ITableMergedReferencesInspector.GetMergedReferencesOf``1">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/> 
            and other <see cref="T:PX.Data.IBqlTable"/>s that are included in referential integrity check.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Merging.ITableMergedReferencesInspector.AllReferencesAreMerged">
            <summary>
            Indicates whether the process of merging <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s is already completed.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.MergedReference">
            <summary>
            Represents a <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> that was merged from several other,
            so its parent and child <see cref="T:PX.Data.IBqlTable"/>s may be substituted with some 
            other applicable <see cref="T:PX.Data.IBqlTable"/>s (e.g. their aliases, TPT-descendants or namesakes)
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.MergedReferencesInspectionResult">
            <summary>
            Represents a result of inspecting merged <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s of some <see cref="T:PX.Data.IBqlTable"/>
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.ReferenceMerger">
            <summary>
            Performs merging of similar <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s by weighting 
            their corresponding <see cref="T:PX.Data.IBqlTable"/>s and deciding which of them is more primary.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.ReferenceMerger.RemappingDecision.CanSubstituteDescendantWithBaseType(System.Type)">
            <summary>
            Indicates whether <see cref="P:PX.Data.ReferentialIntegrity.Merging.ReferenceMerger.RemappingDecision.Descendant"/> can be substituted by its <see cref="P:PX.Data.ReferentialIntegrity.Merging.ReferenceMerger.RemappingDecision.BaseType"/> in provided <paramref name="selectStatement"/>
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Merging.TableMergedReferencesInspector">
            <summary>
            Performs inspection of <see cref="T:PX.Data.IBqlTable"/> referential relationship.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.TableMergedReferencesInspector.GetMergedReferencesOfAllTables">
            <summary>
            Gets information about referential relationship between all <see cref="T:PX.Data.IBqlTable"/>s
            that are included in referential integrity check
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.TableMergedReferencesInspector.GetMergedReferencesOf(System.Type)">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/>
            that is included in referential integrity check.
            </summary>
            <param name="bqlTable">Inspecting <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Merging.TableMergedReferencesInspector.GetMergedReferencesOf``1">
            <summary>
            Gets information about referential relationship between the given <see cref="T:PX.Data.IBqlTable"/> 
            and other <see cref="T:PX.Data.IBqlTable"/>s that are included in referential integrity check.
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Merging.TableMergedReferencesInspector.AllReferencesAreMerged">
            <summary>
            Indicates whether the process of merging <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>s is already completed
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.Reference">
            <summary>
            Represents a referential relationship (or foreign key constraint) between two <see cref="T:PX.Data.IBqlTable"/>s, 
            used to annotate data model and perform referential integrity check.
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Reference.FromParentSelect(PX.Data.BqlCommand,PX.Data.ReferentialIntegrity.ReferenceOrigin,PX.Data.ReferentialIntegrity.ReferenceBehavior,System.Type,System.Type)">
            <summary>
            Create <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> from a Select-<see cref="T:PX.Data.BqlCommand"/>
            </summary>
            <param name="selectCommand"><see cref="T:PX.Data.IBqlSelect"/> or <see cref="T:PX.Data.IBqlSearch"/> where first table suppose to be parent table</param>
            <param name="childTable">Child <see cref="T:PX.Data.IBqlTable"/></param>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Reference.#ctor(PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.ReferenceOrigin,PX.Data.ReferentialIntegrity.ReferenceBehavior,System.Type)">
            <summary>
            Instantiate <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> between parent and child tables
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Reference.#ctor(PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.ReferenceOrigin,PX.Data.ReferentialIntegrity.ReferenceBehavior,System.Type,System.Type,System.Type)">
            <summary>
            Instantiate <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> between parent and child tables with manual selects setting
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Reference.#ctor(System.Type,PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.TableWithKeys,PX.Data.ReferentialIntegrity.ReferenceOrigin,PX.Data.ReferentialIntegrity.ReferenceBehavior,System.Type)">
            <summary>
            Instantiate <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> between parent and child tables with auto inference of both selects
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.Parent">
            <summary>
            Parent <see cref="T:PX.Data.IBqlTable"/> with its key-fields
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.Child">
            <summary>
            Child <see cref="T:PX.Data.IBqlTable"/> with its key-fields
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.ReferenceOrigin">
            <summary>
            Indicates how referential relationship between DACs is achieved
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.ReferenceBehavior">
            <summary>
            Indicates how referential relationship between DACs is handled
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.ParentSelect">
            <summary>
            Select-statement for selecting parent entities
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.ChildrenSelect">
            <summary>
            Select-statement for selecting child entities
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.OriginalSelect">
            <summary>
            Select-statement from which current reference was inferred
            </summary>
            <remarks>Meaning only for <see cref="T:PX.Data.ReferentialIntegrity.Reference"/> instances that were obtained by inference from a select-statement</remarks>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.FieldMap">
            <summary>
            Represents a mapper from child table fields to parent table fields
            </summary>
        </member>
        <member name="P:PX.Data.ReferentialIntegrity.Reference.TableReferencesToItself">
            <summary>
            Indicates whether <see cref="P:PX.Data.ReferentialIntegrity.Reference.Child"/> is referencing to itself by the same set of fields (e.g. BAccount(acctCD) references BAccount(acctCD))
            </summary>
        </member>
        <member name="M:PX.Data.ReferentialIntegrity.Reference.ToOnClause">
            <summary>
            Represents a <see cref="T:PX.Data.IBqlOn"/>-clause that describes a rule of joining the child table to the parent table
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.ReferenceOrigin">
            <summary>
            Indicates how referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.ForeignKeyApi">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <a href="https://wiki.acumatica.com/display/TND/Primary+and+Foreign+Key+API">Foreign Key API</a>.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.ParentAttribute">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <see cref="T:PX.Data.PXParentAttribute"/>.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.DeclareReferenceAttribute">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <see cref="T:PX.Data.ReferentialIntegrity.Attributes.PXForeignReferenceAttribute"/>.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.SelectorAttribute">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <see cref="T:PX.Data.PXSelectorAttribute"/>.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.WhereInCustomSelect">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <see cref="T:PX.Data.IBqlWhere"/> declared as a part of a BQL view inside a graph.
            </summary>
        </member>
        <member name="F:PX.Data.ReferentialIntegrity.ReferenceOrigin.JoinInCustomSelect">
            <summary>
            Referential relationship between <see cref="T:PX.Data.IBqlTable"/>s is achieved by a <see cref="T:PX.Data.IBqlJoin"/> declared as a part of a BQL view inside a graph.
            </summary>
        </member>
        <member name="T:PX.Data.ReferentialIntegrity.TableWithKeys">
            <summary>
            Represents one side of a referencing relationship (i.e. <see cref="T:PX.Data.ReferentialIntegrity.Reference"/>) between two <see cref="T:PX.Data.IBqlTable"/>s
            </summary>
        </member>
        <member name="M:PX.Data.Reports.BqlSoapCommand.InsertFields(System.Type,PX.Data.PXCache,System.String,System.Collections.Generic.List{PX.Data.SQLTree.SQLExpression})">
            <summary>
            Optimization reports, insert only those fields that are used in the report.
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.IsFormula(System.String)">
            <summary>
            true, if expr is formula, otherwise false
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.GetChildNavigator(System.Object)">
            <summary>
            Gets the child rows navigator for specified record.
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.GetList">
            <summary>
            Returns a list of the data rows.
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.Refresh">
            <summary>
            Clear data navigator
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.Reset">
            <summary>
            Sets the navigator to its initial position.
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.MoveNext">
            <summary>
            Moves navigator to the next record.
            </summary>
        </member>
        <member name="P:PX.Data.Reports.SoapNavigator.Current">
            <summary>
            Gets the current record object.
            </summary>
        </member>
        <member name="M:PX.Data.Reports.SoapNavigator.GetValue(System.Object,System.String,System.String@,System.Boolean)">
            <summary>
            Gets the specified field value for specified record.
            </summary>
        </member>
        <member name="P:PX.Data.Reports.SoapNavigator.Item(System.String)">
            <summary>
            Gets the specified field value for current record.
            </summary>
        </member>
        <member name="P:PX.Data.Reports.SoapNavigator.SelectArguments">
            <summary>
            Gets the the report data source select arguments.
            </summary>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContact">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContact.contactID">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContact.eMail">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContact.firstName">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContact.lastName">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichFileRevision">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichFileRevision.fileID">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichFileRevision.comment">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.SiteMapEntry">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.SiteMapEntry.screenid">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.SiteMapEntry.title">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.SiteMapEntry.module">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.ParsedOpeningTag">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.ParsedOpeningTag.ParseRange">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.ParsedOpeningTag.Replacer">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.ParsedClosingTag">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.EntityFile">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichSiteMapGraph">
            <exclude/>
        </member>
        <member name="T:PX.Data.RichTextEdit.RichContactGraph">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.SPWikiCategory">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.PXEntitySearch">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.EntitySearchResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.EntitySearchBqlConstructor">
            <summary>
            A BQL queries constructor which composes dynamic BQL at runtime for search and user records engines to retrieve <see cref="T:PX.Data.IBqlTable"/> DACs by their NoteID. 
            It interoperates with <see cref="T:PX.Data.PXSearchableAttribute"/> and provides an ability to construct BQL queries with or without row level security access rights checks 
            specified in the <see cref="T:PX.Data.PXSearchableAttribute"/>.
            </summary>
        </member>
        <member name="M:PX.Data.Search.EntitySearchBqlConstructor.CreateBqlQueryForMultipleEntitiesWithoutAccessChecks(System.Type,System.Type)">
            <summary>
            Creates bql query for multiple entities without access rights checks.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="noteIdField">The NoteID field.</param>
            <returns>
            The new BQL query for multiple entities without access rights checks.
            </returns>
        </member>
        <member name="M:PX.Data.Search.EntitySearchBqlConstructor.CreateBqlQueryWithAccessChecks(System.Type,PX.Data.PXSearchableAttribute,System.Type,System.Boolean)">
            <summary>
            Creates BQL query for one or multiple entities of <paramref name="entityType"/> type with row level security access checks.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="searchableAttribute">The <see cref="T:PX.Data.PXSearchableAttribute"/> attribute declared on entity type's NoteID DAC property.</param>
            <param name="noteIdField">The NoteID field.</param>
            <param name="isQueryForMultipleEntities">True if query shouold be created to obtain multiple entities, false if it is used to obtain only a single entity.</param>
            <returns>
            The new BQL query with row level security access checks.
            </returns>
        </member>
        <member name="T:PX.Data.Search.FileCacheResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.FileSearchResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.IForeignDacFieldRetrievalInfo">
            <summary>
            Interface for information used for foreign DAC fields retrieval during search results creation.
            See <see cref="T:PX.Data.Maintenance.GI.GIDesign"/> for examples.
            </summary>
        </member>
        <member name="P:PX.Data.Search.IForeignDacFieldRetrievalInfo.ForeignDac">
            <summary>
            Gets the type of the foreign DAC which fields should be retrieved.
            </summary>
            <value>
            The type of the foreign DAC.
            </value>
        </member>
        <member name="P:PX.Data.Search.IForeignDacFieldRetrievalInfo.ForeignDacFields">
            <summary>
            Gets the foreign DAC field types whose values should be retrieved for search results creation.
            </summary>
            <value>
            The foreign DAC field types.
            </value>
        </member>
        <member name="P:PX.Data.Search.IForeignDacFieldRetrievalInfo.RequiredDacFields">
            <summary>
            Gets the required DAC field types from the DAC declaring the <see cref="T:PX.Data.PXSearchableAttribute"/> which will be used as <see cref="P:PX.Data.Search.IForeignDacFieldRetrievalInfo.Query"/> parameters.
            The fields must be declared in the same order as the parameters in the <see cref="P:PX.Data.Search.IForeignDacFieldRetrievalInfo.Query"/>
            </summary>
            <value>
            The required DAC field types from the DAC declaring the <see cref="T:PX.Data.PXSearchableAttribute"/>.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:PX.Data.Search.IForeignDacFieldRetrievalInfo.Query" -->
        <member name="T:PX.Data.Search.PXHelpSearch">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.HelpSearchResult">
            <exclude/>
        </member>
        <member name="M:PX.Data.Search.ISearchManagementService.RestartFullTextFeature">
            <summary>
            Restarts Full-Text feature on the DB side
            </summary>
        </member>
        <member name="T:PX.Data.Search.PXScreenSearch">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.ScreenSearchResult">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.CacheResult">
            <summary>
            Represents a single record that is cached in user session. This is an abstract class,
            when creating such records use <see cref="T:PX.Data.Search.CacheResult`1"/>.
            </summary>
        </member>
        <member name="P:PX.Data.Search.CacheResult.Query">
            <summary>
            Search query.
            </summary>
        </member>
        <member name="P:PX.Data.Search.CacheResult.SearchType">
            <summary>
            Type of search.
            </summary>
        </member>
        <member name="T:PX.Data.Search.CacheResult`1">
            <summary>
            Represents a single record that is cached in user session.
            </summary>
            <typeparam name="T">Type of identifiers which will be saved in user session.</typeparam>
        </member>
        <member name="P:PX.Data.Search.CacheResult`1.Results">
            <summary>
            A list of records identifying database records.
            </summary>
        </member>
        <member name="T:PX.Data.Search.PXSearchCacheable`1">
            <summary>
            Represents a base class for searching records with paging support.
            This class caches records IDs to implement paging functionality.
            </summary>
            <typeparam name="DACType">Type of records to search in.</typeparam>
        </member>
        <member name="P:PX.Data.Search.PXSearchCacheable`1.TotalCount">
            <summary>
            Gets total number of records matching specified search query and options.
            </summary>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.SaveCache(PX.Data.Search.CacheResult)">
            <summary>
            Saves given CacheResult record to user session. If record for this type
            of search exists it will be replaced with "result".
            </summary>
            <param name="result">A record to be saved in cache.</param>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.GetCache">
            <summary>
            Gets a CacheResult record for the current search type from user session.
            </summary>
            <returns>A record from cache.</returns>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.ResetCache">
            <summary>
            Resets search cache.
            </summary>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.Search(System.String,System.Int32,System.Int32)">
            <summary>
            Searches records which match specified query.
            </summary>
            <param name="query">Search query.</param>
            <param name="first">Index of the first record to return.</param>
            <param name="count">Number of records to return.</param>
            <returns>A list of PXSearchResult objects.</returns>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.IsValidResult(PX.Data.Search.CacheResult,System.String)">
            <summary>
            Determines, whether data stored in cache is valid for the current type of search and given query.
            If this nethod returns true search results will be formed using IDs stored in user session,
            otherwise cache will be recreated.
            </summary>
            <param name="result">Cache record to validate.</param>
            <param name="query">Search query to check.</param>
            <returns>True if cache record is valid for the given query and current search type. False otherwise.</returns>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.CreateResult(System.String)">
            <summary>
            Creates a new CacheResult containing IDs of records which match
            specified search query to be saved in user session. Method retrieves matching records from database
            and saves their keys (IDs) in user session to allow paging support without additional database operations.
            </summary>
            <param name="query">Search query.</param>
            <returns>A CacheResult object matching given query and current search type.</returns>
        </member>
        <member name="M:PX.Data.Search.PXSearchCacheable`1.CreateSearchResult(PX.Data.Search.CacheResult,System.Int32,System.Int32)">
            <summary>
            Retrieves records which match IDs stored in cache from database and creates an
            PXSearchResult object for each of them.
            </summary>
            <param name="cacheRes">A cached results object containing IDs of records to retrieve.</param>
            <param name="first">Number of the first record to retrieve.</param>
            <param name="count">Total number of records to retrieve (-1 to select all records).</param>
            <returns>A list of <see cref="T:PX.Data.Search.PXSearchResult"/> objects.</returns>
        </member>
        <member name="T:PX.Data.Search.PXSearchResult">
            <summary>
            Represents search results.
            </summary>
        </member>
        <member name="T:PX.Data.Search.PXResultButton">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.PXDescriptionColumn">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.SearchService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Search.SearchService.SearchLookupItem">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.CompanyService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.FeatureService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.LicenseWarningService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.SessionContextService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.UserService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.VersionService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.Interfaces.IAppInstanceInfo">
            <summary>
            Contains the information about the current application instance.
            </summary>
        </member>
        <member name="P:PX.Data.Services.Interfaces.IAppInstanceInfo.Version">
            <summary>
            Returns the version of the current application instance (not including the published customizations).
            </summary>
        </member>
        <member name="P:PX.Data.Services.Interfaces.IAppInstanceInfo.InstallationId">
            <summary>
            Returns the Installation ID that is unique for each application instance.
            </summary>
        </member>
        <member name="P:PX.Data.Services.Interfaces.IAppInstanceInfo.IsPortal">
            <summary>
            Returns <see langword="true"/> if the current application instance is Self-Service Portal;
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="P:PX.Data.Services.Interfaces.IAppInstanceInfo.WebAppType">
            <summary>
            Returns 0 if the current application instance is ERP.
            Returns 1 if the current application instance is Self-Service Portal.
            Other application types may be introduced in future.
            </summary>
        </member>
        <member name="P:PX.Data.Services.Interfaces.IAppInstanceInfo.IsCluster">
            <summary>
            Returns <see langword="true"/> if the current application instance is a part of a cluster configuration;
            <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:PX.Data.Services.Interfaces.IFavoriteActionsService">
            <summary>
            Interface for favorite actions service.
            </summary>
        </member>
        <member name="M:PX.Data.Services.Interfaces.IFavoriteActionsService.AddToCurrentUserFavorites(System.String,System.String)">
            <summary>
            Adds record with Action Name <paramref name="actionName"/> to the current user favorites. Returns true if it succeeds, false if it fails.
            </summary>
            <param name="actionName">Name of the action added to favorites.</param>
            <param name="screenId">Screen Id.</param>
            <returns/>
        </member>
        <member name="M:PX.Data.Services.Interfaces.IFavoriteActionsService.RemoveFromCurrentUserFavorites(System.String,System.String)">
            <summary>
            Removes Action from current user favorites described by <paramref name="actionName"/>.
            </summary>
            <param name="actionName">Name of the action added to favorites.</param>
            <param name="screenId">Screen Id.</param>
        </member>
        <member name="M:PX.Data.Services.Interfaces.IFavoriteActionsService.GetCurrentUserFavoriteActions(PX.Data.PXGraph,System.String)">
            <summary>
            Gets the current user favorite actions.
            </summary>
            <returns>
            The current user favorite actions.
            </returns>
        </member>
        <member name="T:PX.Data.Services.ICompanyService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.IFeatureService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.ILicenseWarningService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.ISessionContextService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.ISnapshotService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.ISnapshotServiceWithLogger">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.IStorageService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.IUserService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.IVersionService">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.SnapshotServiceStub">
            <exclude/>
        </member>
        <member name="T:PX.Data.Services.StorageServiceStub">
            <exclude/>
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncExpressionNode.#ctor(Remotion.Linq.Parsing.Structure.IntermediateModel.MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncExpressionNode.CreateResultOperator(Remotion.Linq.Parsing.Structure.IntermediateModel.ClauseGenerationContext)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncResultOperator.#ctor(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncResultOperator.GetOutputDataInfo(Remotion.Linq.Clauses.StreamedData.IStreamedDataInfo)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncResultOperator.Clone(Remotion.Linq.Clauses.CloneContext)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncResultOperator.TransformExpressions(System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.FirstAsyncResultOperator.ExecuteInMemory``1(Remotion.Linq.Clauses.StreamedData.StreamedSequence)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.SQLinqAsyncViewOfT`1.#ctor(PX.Data.PXGraph,PX.Data.SQLTree.SQLinqBqlCommand,PX.Data.SQLTree.SQLinqExecutor)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLQueryable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.SQLTree.Async.AsyncSQLQueryable`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLinqExecutor.ExecuteScalarAsync``1(Remotion.Linq.QueryModel,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLinqExecutor.ExecuteSingleAsync``1(Remotion.Linq.QueryModel,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLinqExecutor.ExecuteCollectionAsync``1(Remotion.Linq.QueryModel,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLinqExecutor.AsyncSQLinqQueryModelVisitor.#ctor(PX.Data.SQLTree.SQLinqBqlCommandInfo,PX.Data.PXGraph,System.Nullable{System.Boolean},System.Collections.Generic.IDictionary{Remotion.Linq.Clauses.IQuerySource,System.String})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLinqExecutor.AsyncSQLinqExpressionVisitor.#ctor(PX.Data.SQLTree.SQLinqBqlCommandInfo,PX.Data.PXGraph,System.Collections.Generic.IDictionary{Remotion.Linq.Clauses.IQuerySource,System.String})">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLQueryProvider.#ctor(System.Type,Remotion.Linq.Parsing.Structure.IQueryParser,PX.Data.SQLTree.Async.AsyncSQLinqExecutor)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLQueryProvider.ExecuteCollectionAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Async.AsyncSQLQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new execution helper instance for the specified expression tree representing a computation over asynchronous enumerable sequences.
            </summary>
            <param name="expression">Expression tree representing a computation over asynchronous enumerable sequences.</param>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableExecutor`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Evaluated the expression tree.
            </summary>
            <param name="token">Token to cancel the evaluation.</param>
            <returns>Task representing the evaluation of the expression tree.</returns>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery.Enumerable">
            <summary>
            Gets the enumerable sequence obtained from evaluating the expression tree.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery.Expression">
            <summary>
            Gets the expression tree representing the asynchronous enumerable sequence.
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new asynchronous enumerable sequence represented by the specified expression tree.
            </summary>
            <param name="expression">The expression tree representing the asynchronous enumerable sequence.</param>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.#ctor(System.Collections.Generic.IAsyncEnumerable{`0})">
            <summary>
            Creates a new asynchronous enumerable sequence by wrapping the specified sequence in an expression tree representation.
            </summary>
            <param name="enumerable">The asynchronous enumerable sequence to represent using an expression tree.</param>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a new asynchronous enumerable sequence by wrapping the specified sequence in an expression tree representation.
            </summary>
            <param name="enumerable">The asynchronous enumerable sequence to represent using an expression tree.</param>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new asynchronous enumerable sequence by wrapping the specified sequence in an expression tree representation.
            </summary>
            <param name="enumerable">The asynchronous enumerable sequence to represent using an expression tree.</param>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#ElementType">
            <summary>
            Gets the type of the elements in the sequence.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Linq#IQueryable#Provider">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Linq#IQueryable#ElementType">
            <inheritdoc />
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Linq#IQueryable#Expression">
            <summary>
            Gets the expression representing the sequence.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#Expression">
            <summary>
            Gets the expression representing the sequence.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.PX#Data#SQLTree#Linq#Async#IAsyncQueryable#Provider">
            <summary>
            Gets the query provider used to execute the sequence.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.Enumerable">
            <summary>
            Gets the enumerable sequence obtained from evaluating the expression tree.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.Expression">
            <summary>
            Gets the expression tree representing the asynchronous enumerable sequence.
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.ExecuteCollectionAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.PX#Data#SQLTree#Async#IAsyncQueryProvider#CreateAsyncQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new asynchronous enumerable sequence represented by an expression tree.
            </summary>
            <typeparam name="TElement">The type of the elements in the sequence.</typeparam>
            <param name="expression">The expression tree representing the asynchronous enumerable sequence.</param>
            <returns>Asynchronous enumerable sequence represented by the specified expression tree.</returns>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.PX#Data#SQLTree#Async#IAsyncQueryProvider#ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
            Executes an expression tree representing a computation over asynchronous enumerable sequences.
            </summary>
            <typeparam name="TResult">The type of the result of evaluating the expression tree.</typeparam>
            <param name="expression">The expression tree to evaluate.</param>
            <param name="token">Cancellation token used to cancel the evaluation.</param>
            <returns>Task representing the result of evaluating the specified expression tree.</returns>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Gets an enumerator to enumerate the elements in the sequence.
            </summary>
            <param name="cancellationToken">Cancellation token used to cancel the enumeration.</param>
            <returns>A new enumerator instance used to enumerate the elements in the sequence.</returns>
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.Linq.Async.AsyncEnumerableQuery`1.ToString">
            <summary>
            Gets a string representation of the enumerable sequence.
            </summary>
            <returns>String representation of the enumerable sequence.</returns>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.IAsyncQueryable.ElementType">
            <summary>Gets the type of the elements in the sequence.</summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.IAsyncQueryable.Expression">
            <summary>Gets the expression representing the sequence.</summary>
        </member>
        <member name="P:PX.Data.SQLTree.Linq.Async.IAsyncQueryable.Provider">
            <summary>Gets the query provider used to execute the sequence.</summary>
        </member>
        <member name="T:PX.Data.SQLTree.Linq.ErrorMessages">
            <summary>
            Contains strings for exceptions that can be thrown in Acumatica Platform.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.MergeCacheContext.CreateNew">
            <summary>
            Tells Projection to create object for dac that was inserted in PXCache
            </summary>
        </member>
        <member name="T:PX.Data.SQLTree.ProjectionFabricMethod">
            <summary>
            Encapsulates method that creates object
            </summary>
        </member>
        <member name="T:PX.Data.SQLTree.ProjectionGrouping`2">
            <summary>
            For every row return object that implements <see cref="T:System.Linq.IGrouping`2"/> interface.
            Only when client enumerates group, it performs SQL-query to retrieve data for group.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
        </member>
        <member name="M:PX.Data.SQLTree.ProjectionGrouping`2.#ctor(PX.Data.SQLTree.Query,System.Collections.Generic.List{PX.Data.SQLTree.SQLExpression},PX.Data.SQLTree.ProjectionItem,PX.Data.PXGraph,PX.Data.SQLTree.SQLinqBqlCommandInfo)">
            Constructor is used via reflection in <see cref="!:SQLinqQueryModelVisitor"/>
        </member>
        <member name="M:PX.Data.SQLTree.ProjectionDependsOnFields.GetValue(PX.Data.PXDataRecord,System.Int32@,PX.Data.SQLTree.MergeCacheContext)">
            <inheritdoc />
        </member>
        <member name="M:PX.Data.SQLTree.SQL.Substring``1(``0,System.Int32)">
            <summary>
             SQL-specific startIndex behavior (starts with 1)!
            </summary>
            <param name="startIndex">Starts with 1</param>
        </member>
        <member name="M:PX.Data.SQLTree.SQL.Substring``1(``0,System.Int32,System.Int32)">
            <summary>
             SQL-specific startIndex behavior (starts with 1)!
            </summary>
            <param name="startIndex">Starts with 1</param>
        </member>
        <member name="M:PX.Data.SQLTree.SQL.GetExtensionProperty``1(PX.Data.IBqlTable,System.String)">
            <summary>
            This method allows to refer property that is not declared in DAC. For LINQ use only.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.SQLinqExecutor.DacToMerge">
            <summary>
            Point what type of DAC we meed to merge.
            Makes sense with <see cref="P:PX.Data.SQLTree.SQLinqExecutor.MergeCache"/>
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.SQLinqExecutor.MergeCache">
            <summary>
            Indicates do we need to merge objects retrieved from DB with data in PXCache.
            True - yes. False - no. Null - default behaviour.
            See <see cref="P:PX.Data.SQLTree.SQLinqExecutor.DacToMerge"/> also.
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.SQLExpression.substituteColumnAliases(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Changes table prefix of columns.
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.SQLExpression.substituteExternalColumnAliases(System.Collections.Generic.Dictionary{System.String,PX.Data.SQLTree.SQRenamer},System.Boolean,System.Collections.Generic.HashSet{System.String},System.Boolean,System.Func{PX.Data.SQLTree.Column,System.Boolean})">
            <summary>
            Substitutes column with whole new expression
            </summary>
        </member>
        <member name="F:PX.Data.SQLTree.SQLExpression._dbTypesPrecedences">
            <summary>
            Used MS-SQL data type precedence
            https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-type-precedence-transact-sql?view=sql-server-2017
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.Table.Meet(PX.Data.PXCache,System.Object,System.Object[])">
            <summary>
            Verifies if the item meets the SQL Tree and provided parameters
            </summary>
            <param name="cache">Cache the item is contained in</param>
            <param name="item">Data item to verify</param>
            <param name="parameters">Query parameters</param>
            <returns>True if the item meets or it is impossible to determine</returns>
        </member>
        <member name="M:PX.Data.SQLTree.Query.transformTableName(System.String,System.String)">
            <summary>
            Changes name of tables in FROM and JOIN statements recursively.
            If table doesn't have alias, its old name is moved to alias.
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.Query.FlattenSubselectsInternal">
            <summary>
            This method changes internal structure and don't guarantee it will be valid if it fails.
            </summary>
            <exception cref="T:PX.Data.PXNotSupportedException">If flattening is not supported for this query</exception>
        </member>
        <member name="M:PX.Data.SQLTree.Query.CreateOptimizedListInclusionCheck(PX.Data.SQLTree.SQLExpression,System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates expression to check if the <paramref name="column"/> value included in the <paramref name="list"/> elements.
            </summary>
            <param name="column">Column to be checked</param>
            <param name="list">List of values</param>
            <remarks>
            As recursion is used while transforming IN <see cref="T:PX.Data.SQLTree.SQLExpression"/> to SQL query, it fails with StackOverflowException
            on large amount of elements. So we have to avoid using IN in such a case.
            If the <paramref name="list"/> contains more than <see cref="F:PX.Data.SQLTree.Query.SequenceClusteringThreshold"/> elements, BETWEEN will be used instead of simple WHERE IN clause.
            In that case it will split the source <paramref name="list"/> to sequential chunks and use its minimal and maximal values in the BETWEEN clause.
            To avoid StackOverflowException during multiple OR processing, several expressions grouped into clusters with <see cref="F:PX.Data.SQLTree.Query.SequenceClusterSize"/> elements and embraced.
            For example,
            [1, 2, 3, 4, 5] will be converted to "column BETWEEN 1 AND 5",
            [1, 2, ..., 24, 25, 27, 28, ..., 44, 45] will be converted to "column BETWEEN 1 AND 25 OR column BETWEEN 27 AND 45"
            [1, 2, ..., 24, 25, 27, 29, ..., 44, 45] will be converted to "column BETWEEN 1 AND 25 OR column = 27 OR column BETWEEN 29 AND 45"
            </remarks>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.ElementName">
            <summary>
            Specifies a name for the row element. Empty string value means skipping row tag.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.HasXsinil">
            <summary>
            Specifies that an element that has an xsi:nil attribute set to True be created for NULL column values.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.HasBinaryBase64">
            <summary>
            If the this option is specified, any binary data returned by the query is represented in base64-encoded format
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.HasType">
            <summary>
            Specifies that the query returns the results as the xml type (makes sense for MS-SQL only)
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.HasRoot">
            <summary>
            Specifies that a single, top-level element be added to the resulting XML.
            </summary>
        </member>
        <member name="P:PX.Data.SQLTree.XMLPathQuery.RootName">
            <summary>
            Specifies the root element name to generate. The default value is "root"
            </summary>
        </member>
        <member name="M:PX.Data.SQLTree.XMLPathQuery.EnsureColumnAliases">
            <summary>
            FOR XML needs every non-column expression to have an alias.
            During flattening simple column may be replaced with expression, so we need alias for every column
            </summary>
        </member>
        <member name="M:PX.Data.Auth.UserValidationExtensions.GetValidationMessage(System.Web.Security.MembershipUser)">
            <returns><see langword="null"/> if validation successful, message otherwise.</returns>
        </member>
        <member name="T:PX.Data.ILoginUiService">
            <remarks> This service is intended to be used only from the UI context, such as login/error pages.</remarks>
            <exclude/>
        </member>
        <member name="M:PX.Data.ILoginUiService.SendUserLogin(System.String,System.String,System.String)">
            <param name="company">Company where to look for the user by <paramref name="userEmail"/>.</param>
        </member>
        <member name="M:PX.Data.ILoginUiService.SendUserPassword(System.String,System.String,System.String)">
            <param name="paramName">Name of the parameter which will be used in query string and will contain unique recovery number.</param>
        </member>
        <member name="M:PX.Data.LoginUiService.CreateHash(System.String)">
            <summary>
            Creates an SHA1 hash from user PKID which can be sent through e-mail and writes it into database for further check.
            </summary>
            <param name="value">Value to compute hash for (user PKID).</param>
            <param name="UserLogin">User name (login).</param>
            <returns>A string containing SHA1 hash computed from user PKID.</returns>
        </member>
        <member name="M:PX.Data.Update.PXCriptoHelper.ConvertBytes(System.Byte[],System.Int32)">
            <remarks>Will insert a separator (<c>-</c>) every <paramref name="chars"/> characters</remarks>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.Delete(System.Guid)">
            <summary>
            Deletes file
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.Test">
            <summary>
            Test connection to the remote service
            </summary>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.Exists(System.String)">
            <summary>
            Checks if the specified S3 object exits in AWS S3
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.OpenWrite(System.String)">
            <summary>
            Opens stream for writing to S3 object.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.OpenRead(System.String)">
            <summary>
            Opens file for reading by the specified identifier
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.GetSize(System.String)">
            <summary>
            Gets the size of the S3 object
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.GetRootPath">
            <summary>
            Returns name for root folder, all files of this company will placed at this root
            </summary>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.CreateKeyToObject(System.String)">
            <summary>
            Generates an AWS access key for a given file object. The key may be used to access the object in AWS
            </summary>
            <param name="id">identifier of the file being processed</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.Delete(System.String)">
            <summary>
            Deletes S3 object by the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.DownloadToStream(System.String,System.IO.Stream)">
            <summary>
            Downloads the S3 object by the specified key into the specified stream
            </summary>
            <param name="key"></param>
            <param name="stream"></param>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.UploadFromStream(System.String,System.IO.Stream)">
            <summary>
            Uploads the stream to S3 storage.
            </summary>
            <param name="key"></param>
            <param name="source"></param>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.DeleteIfExits(System.String)">
            <summary>
            Deletes S3 object by the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:PX.Data.Update.Storage.AmazonS3Storage.Factory">
            <summary>
            Gets instance of <see cref="T:PX.SM.AmazonS3ClientFactory"/>
            </summary>
        </member>
        <member name="M:PX.Data.Update.Storage.AmazonS3Storage.CreateFactory">
            <summary>
            Creates an instance of <see cref="T:PX.SM.AmazonS3ClientFactory"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Update.PXInstanceHelper.CaptureProcessUser">
            <summary>Store user to use it on installation id generating</summary>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExchangeServiceBinding">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.#ctor">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ResolveNamesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExpandDLCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServerTimeZonesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UploadItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExportItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ConvertIdCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderPathCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.EmptyFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnsubscribeCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetEventsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetStreamingEventsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderHierarchyCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateManagedFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemInRecoverableItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SendItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ArchiveItemCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateAttachmentCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteAttachmentCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAttachmentCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetClientAccessTokenCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDelegateCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDelegateCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDelegateCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateDelegateCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateUserConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteUserConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateUserConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserAvailabilityCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserOofSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetUserOofSettingsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServiceConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMailTipsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.PlayOnPhoneCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPhoneCallInformationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisconnectPhoneCallCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingMetadataCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RefreshSharingFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingFolderCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetTeamMailboxCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnpinTeamMailboxCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomListsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindMessageTrackingReportCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMessageTrackingReportCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindConversationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ApplyConversationActionCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetConversationItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindPeopleCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPersonaCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetInboxRulesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateInboxRulesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPasswordExpirationDateCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSearchableMailboxesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SearchMailboxesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDiscoverySearchConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetHoldOnMailboxesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetHoldOnMailboxesCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemStatisticsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemDetailsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAllItemsAsReadCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAsJunkCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppManifestsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewImContactToGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewTelUriContactToGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImContactToGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImContactFromGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDistributionGroupToImListCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemListCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveContactFromImListCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDistributionGroupFromImListCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImGroupCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImListMigrationCompletedCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserRetentionPolicyTagsCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.InstallAppCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UninstallAppCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisableAppCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppMarketplaceUrlCompleted">
            <remarks/>
        </member>
        <member name="E:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserPhotoCompleted">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ResolveNames(PX.Data.Update.ExchangeService.ResolveNamesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ResolveNamesAsync(PX.Data.Update.ExchangeService.ResolveNamesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ResolveNamesAsync(PX.Data.Update.ExchangeService.ResolveNamesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExpandDL(PX.Data.Update.ExchangeService.ExpandDLType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExpandDLAsync(PX.Data.Update.ExchangeService.ExpandDLType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExpandDLAsync(PX.Data.Update.ExchangeService.ExpandDLType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServerTimeZones(PX.Data.Update.ExchangeService.GetServerTimeZonesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServerTimeZonesAsync(PX.Data.Update.ExchangeService.GetServerTimeZonesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServerTimeZonesAsync(PX.Data.Update.ExchangeService.GetServerTimeZonesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindFolder(PX.Data.Update.ExchangeService.FindFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindFolderAsync(PX.Data.Update.ExchangeService.FindFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindFolderAsync(PX.Data.Update.ExchangeService.FindFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindItem(PX.Data.Update.ExchangeService.FindItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindItemAsync(PX.Data.Update.ExchangeService.FindItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindItemAsync(PX.Data.Update.ExchangeService.FindItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetFolder(PX.Data.Update.ExchangeService.GetFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetFolderAsync(PX.Data.Update.ExchangeService.GetFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetFolderAsync(PX.Data.Update.ExchangeService.GetFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UploadItems(PX.Data.Update.ExchangeService.UploadItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UploadItemsAsync(PX.Data.Update.ExchangeService.UploadItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UploadItemsAsync(PX.Data.Update.ExchangeService.UploadItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExportItems(PX.Data.Update.ExchangeService.ExportItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExportItemsAsync(PX.Data.Update.ExchangeService.ExportItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ExportItemsAsync(PX.Data.Update.ExchangeService.ExportItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ConvertId(PX.Data.Update.ExchangeService.ConvertIdType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ConvertIdAsync(PX.Data.Update.ExchangeService.ConvertIdType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ConvertIdAsync(PX.Data.Update.ExchangeService.ConvertIdType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolder(PX.Data.Update.ExchangeService.CreateFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderAsync(PX.Data.Update.ExchangeService.CreateFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderAsync(PX.Data.Update.ExchangeService.CreateFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderPath(PX.Data.Update.ExchangeService.CreateFolderPathType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderPathAsync(PX.Data.Update.ExchangeService.CreateFolderPathType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateFolderPathAsync(PX.Data.Update.ExchangeService.CreateFolderPathType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteFolder(PX.Data.Update.ExchangeService.DeleteFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteFolderAsync(PX.Data.Update.ExchangeService.DeleteFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteFolderAsync(PX.Data.Update.ExchangeService.DeleteFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.EmptyFolder(PX.Data.Update.ExchangeService.EmptyFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.EmptyFolderAsync(PX.Data.Update.ExchangeService.EmptyFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.EmptyFolderAsync(PX.Data.Update.ExchangeService.EmptyFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateFolder(PX.Data.Update.ExchangeService.UpdateFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateFolderAsync(PX.Data.Update.ExchangeService.UpdateFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateFolderAsync(PX.Data.Update.ExchangeService.UpdateFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveFolder(PX.Data.Update.ExchangeService.MoveFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveFolderAsync(PX.Data.Update.ExchangeService.MoveFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveFolderAsync(PX.Data.Update.ExchangeService.MoveFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyFolder(PX.Data.Update.ExchangeService.CopyFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyFolderAsync(PX.Data.Update.ExchangeService.CopyFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyFolderAsync(PX.Data.Update.ExchangeService.CopyFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.Subscribe(PX.Data.Update.ExchangeService.SubscribeType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SubscribeAsync(PX.Data.Update.ExchangeService.SubscribeType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SubscribeAsync(PX.Data.Update.ExchangeService.SubscribeType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.Unsubscribe(PX.Data.Update.ExchangeService.UnsubscribeType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnsubscribeAsync(PX.Data.Update.ExchangeService.UnsubscribeType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnsubscribeAsync(PX.Data.Update.ExchangeService.UnsubscribeType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetEvents(PX.Data.Update.ExchangeService.GetEventsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetEventsAsync(PX.Data.Update.ExchangeService.GetEventsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetEventsAsync(PX.Data.Update.ExchangeService.GetEventsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetStreamingEvents(PX.Data.Update.ExchangeService.GetStreamingEventsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetStreamingEventsAsync(PX.Data.Update.ExchangeService.GetStreamingEventsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetStreamingEventsAsync(PX.Data.Update.ExchangeService.GetStreamingEventsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderHierarchy(PX.Data.Update.ExchangeService.SyncFolderHierarchyType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderHierarchyAsync(PX.Data.Update.ExchangeService.SyncFolderHierarchyType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderHierarchyAsync(PX.Data.Update.ExchangeService.SyncFolderHierarchyType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderItems(PX.Data.Update.ExchangeService.SyncFolderItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderItemsAsync(PX.Data.Update.ExchangeService.SyncFolderItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SyncFolderItemsAsync(PX.Data.Update.ExchangeService.SyncFolderItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateManagedFolder(PX.Data.Update.ExchangeService.CreateManagedFolderRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateManagedFolderAsync(PX.Data.Update.ExchangeService.CreateManagedFolderRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateManagedFolderAsync(PX.Data.Update.ExchangeService.CreateManagedFolderRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetItem(PX.Data.Update.ExchangeService.GetItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetItemAsync(PX.Data.Update.ExchangeService.GetItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetItemAsync(PX.Data.Update.ExchangeService.GetItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateItem(PX.Data.Update.ExchangeService.CreateItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateItemAsync(PX.Data.Update.ExchangeService.CreateItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateItemAsync(PX.Data.Update.ExchangeService.CreateItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteItem(PX.Data.Update.ExchangeService.DeleteItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteItemAsync(PX.Data.Update.ExchangeService.DeleteItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteItemAsync(PX.Data.Update.ExchangeService.DeleteItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItem(PX.Data.Update.ExchangeService.UpdateItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemAsync(PX.Data.Update.ExchangeService.UpdateItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemAsync(PX.Data.Update.ExchangeService.UpdateItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemInRecoverableItems(PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemInRecoverableItemsAsync(PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateItemInRecoverableItemsAsync(PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SendItem(PX.Data.Update.ExchangeService.SendItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SendItemAsync(PX.Data.Update.ExchangeService.SendItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SendItemAsync(PX.Data.Update.ExchangeService.SendItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveItem(PX.Data.Update.ExchangeService.MoveItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveItemAsync(PX.Data.Update.ExchangeService.MoveItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MoveItemAsync(PX.Data.Update.ExchangeService.MoveItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyItem(PX.Data.Update.ExchangeService.CopyItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyItemAsync(PX.Data.Update.ExchangeService.CopyItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CopyItemAsync(PX.Data.Update.ExchangeService.CopyItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ArchiveItem(PX.Data.Update.ExchangeService.ArchiveItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ArchiveItemAsync(PX.Data.Update.ExchangeService.ArchiveItemType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ArchiveItemAsync(PX.Data.Update.ExchangeService.ArchiveItemType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateAttachment(PX.Data.Update.ExchangeService.CreateAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateAttachmentAsync(PX.Data.Update.ExchangeService.CreateAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateAttachmentAsync(PX.Data.Update.ExchangeService.CreateAttachmentType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteAttachment(PX.Data.Update.ExchangeService.DeleteAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteAttachmentAsync(PX.Data.Update.ExchangeService.DeleteAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteAttachmentAsync(PX.Data.Update.ExchangeService.DeleteAttachmentType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAttachment(PX.Data.Update.ExchangeService.GetAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAttachmentAsync(PX.Data.Update.ExchangeService.GetAttachmentType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAttachmentAsync(PX.Data.Update.ExchangeService.GetAttachmentType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetClientAccessToken(PX.Data.Update.ExchangeService.GetClientAccessTokenType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetClientAccessTokenAsync(PX.Data.Update.ExchangeService.GetClientAccessTokenType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetClientAccessTokenAsync(PX.Data.Update.ExchangeService.GetClientAccessTokenType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDelegate(PX.Data.Update.ExchangeService.GetDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDelegateAsync(PX.Data.Update.ExchangeService.GetDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDelegateAsync(PX.Data.Update.ExchangeService.GetDelegateType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDelegate(PX.Data.Update.ExchangeService.AddDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDelegateAsync(PX.Data.Update.ExchangeService.AddDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDelegateAsync(PX.Data.Update.ExchangeService.AddDelegateType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDelegate(PX.Data.Update.ExchangeService.RemoveDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDelegateAsync(PX.Data.Update.ExchangeService.RemoveDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDelegateAsync(PX.Data.Update.ExchangeService.RemoveDelegateType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateDelegate(PX.Data.Update.ExchangeService.UpdateDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateDelegateAsync(PX.Data.Update.ExchangeService.UpdateDelegateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateDelegateAsync(PX.Data.Update.ExchangeService.UpdateDelegateType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateUserConfiguration(PX.Data.Update.ExchangeService.CreateUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateUserConfigurationAsync(PX.Data.Update.ExchangeService.CreateUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CreateUserConfigurationAsync(PX.Data.Update.ExchangeService.CreateUserConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteUserConfiguration(PX.Data.Update.ExchangeService.DeleteUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteUserConfigurationAsync(PX.Data.Update.ExchangeService.DeleteUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DeleteUserConfigurationAsync(PX.Data.Update.ExchangeService.DeleteUserConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserConfiguration(PX.Data.Update.ExchangeService.GetUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserConfigurationAsync(PX.Data.Update.ExchangeService.GetUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserConfigurationAsync(PX.Data.Update.ExchangeService.GetUserConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateUserConfiguration(PX.Data.Update.ExchangeService.UpdateUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateUserConfigurationAsync(PX.Data.Update.ExchangeService.UpdateUserConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateUserConfigurationAsync(PX.Data.Update.ExchangeService.UpdateUserConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserAvailability(PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserAvailabilityAsync(PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserAvailabilityAsync(PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserOofSettings(PX.Data.Update.ExchangeService.GetUserOofSettingsRequest)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserOofSettingsAsync(PX.Data.Update.ExchangeService.GetUserOofSettingsRequest)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserOofSettingsAsync(PX.Data.Update.ExchangeService.GetUserOofSettingsRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetUserOofSettings(PX.Data.Update.ExchangeService.SetUserOofSettingsRequest)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetUserOofSettingsAsync(PX.Data.Update.ExchangeService.SetUserOofSettingsRequest)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetUserOofSettingsAsync(PX.Data.Update.ExchangeService.SetUserOofSettingsRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServiceConfiguration(PX.Data.Update.ExchangeService.GetServiceConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServiceConfigurationAsync(PX.Data.Update.ExchangeService.GetServiceConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetServiceConfigurationAsync(PX.Data.Update.ExchangeService.GetServiceConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMailTips(PX.Data.Update.ExchangeService.GetMailTipsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMailTipsAsync(PX.Data.Update.ExchangeService.GetMailTipsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMailTipsAsync(PX.Data.Update.ExchangeService.GetMailTipsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.PlayOnPhone(PX.Data.Update.ExchangeService.PlayOnPhoneType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.PlayOnPhoneAsync(PX.Data.Update.ExchangeService.PlayOnPhoneType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.PlayOnPhoneAsync(PX.Data.Update.ExchangeService.PlayOnPhoneType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPhoneCallInformation(PX.Data.Update.ExchangeService.GetPhoneCallInformationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPhoneCallInformationAsync(PX.Data.Update.ExchangeService.GetPhoneCallInformationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPhoneCallInformationAsync(PX.Data.Update.ExchangeService.GetPhoneCallInformationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisconnectPhoneCall(PX.Data.Update.ExchangeService.DisconnectPhoneCallType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisconnectPhoneCallAsync(PX.Data.Update.ExchangeService.DisconnectPhoneCallType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisconnectPhoneCallAsync(PX.Data.Update.ExchangeService.DisconnectPhoneCallType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingMetadata(PX.Data.Update.ExchangeService.GetSharingMetadataType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingMetadataAsync(PX.Data.Update.ExchangeService.GetSharingMetadataType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingMetadataAsync(PX.Data.Update.ExchangeService.GetSharingMetadataType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RefreshSharingFolder(PX.Data.Update.ExchangeService.RefreshSharingFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RefreshSharingFolderAsync(PX.Data.Update.ExchangeService.RefreshSharingFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RefreshSharingFolderAsync(PX.Data.Update.ExchangeService.RefreshSharingFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingFolder(PX.Data.Update.ExchangeService.GetSharingFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingFolderAsync(PX.Data.Update.ExchangeService.GetSharingFolderType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSharingFolderAsync(PX.Data.Update.ExchangeService.GetSharingFolderType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetTeamMailbox(PX.Data.Update.ExchangeService.SetTeamMailboxRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetTeamMailboxAsync(PX.Data.Update.ExchangeService.SetTeamMailboxRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetTeamMailboxAsync(PX.Data.Update.ExchangeService.SetTeamMailboxRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnpinTeamMailbox(PX.Data.Update.ExchangeService.UnpinTeamMailboxRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnpinTeamMailboxAsync(PX.Data.Update.ExchangeService.UnpinTeamMailboxRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UnpinTeamMailboxAsync(PX.Data.Update.ExchangeService.UnpinTeamMailboxRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomLists(PX.Data.Update.ExchangeService.GetRoomListsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomListsAsync(PX.Data.Update.ExchangeService.GetRoomListsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomListsAsync(PX.Data.Update.ExchangeService.GetRoomListsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRooms(PX.Data.Update.ExchangeService.GetRoomsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomsAsync(PX.Data.Update.ExchangeService.GetRoomsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetRoomsAsync(PX.Data.Update.ExchangeService.GetRoomsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindMessageTrackingReport(PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindMessageTrackingReportAsync(PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindMessageTrackingReportAsync(PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMessageTrackingReport(PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMessageTrackingReportAsync(PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetMessageTrackingReportAsync(PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindConversation(PX.Data.Update.ExchangeService.FindConversationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindConversationAsync(PX.Data.Update.ExchangeService.FindConversationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindConversationAsync(PX.Data.Update.ExchangeService.FindConversationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ApplyConversationAction(PX.Data.Update.ExchangeService.ApplyConversationActionType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ApplyConversationActionAsync(PX.Data.Update.ExchangeService.ApplyConversationActionType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.ApplyConversationActionAsync(PX.Data.Update.ExchangeService.ApplyConversationActionType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetConversationItems(PX.Data.Update.ExchangeService.GetConversationItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetConversationItemsAsync(PX.Data.Update.ExchangeService.GetConversationItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetConversationItemsAsync(PX.Data.Update.ExchangeService.GetConversationItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindPeople(PX.Data.Update.ExchangeService.FindPeopleType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindPeopleAsync(PX.Data.Update.ExchangeService.FindPeopleType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.FindPeopleAsync(PX.Data.Update.ExchangeService.FindPeopleType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPersona(PX.Data.Update.ExchangeService.GetPersonaType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPersonaAsync(PX.Data.Update.ExchangeService.GetPersonaType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPersonaAsync(PX.Data.Update.ExchangeService.GetPersonaType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetInboxRules(PX.Data.Update.ExchangeService.GetInboxRulesRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetInboxRulesAsync(PX.Data.Update.ExchangeService.GetInboxRulesRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetInboxRulesAsync(PX.Data.Update.ExchangeService.GetInboxRulesRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateInboxRules(PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateInboxRulesAsync(PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UpdateInboxRulesAsync(PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPasswordExpirationDate(PX.Data.Update.ExchangeService.GetPasswordExpirationDateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPasswordExpirationDateAsync(PX.Data.Update.ExchangeService.GetPasswordExpirationDateType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetPasswordExpirationDateAsync(PX.Data.Update.ExchangeService.GetPasswordExpirationDateType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSearchableMailboxes(PX.Data.Update.ExchangeService.GetSearchableMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSearchableMailboxesAsync(PX.Data.Update.ExchangeService.GetSearchableMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetSearchableMailboxesAsync(PX.Data.Update.ExchangeService.GetSearchableMailboxesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SearchMailboxes(PX.Data.Update.ExchangeService.SearchMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SearchMailboxesAsync(PX.Data.Update.ExchangeService.SearchMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SearchMailboxesAsync(PX.Data.Update.ExchangeService.SearchMailboxesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDiscoverySearchConfiguration(PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDiscoverySearchConfigurationAsync(PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetDiscoverySearchConfigurationAsync(PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetHoldOnMailboxes(PX.Data.Update.ExchangeService.GetHoldOnMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetHoldOnMailboxesAsync(PX.Data.Update.ExchangeService.GetHoldOnMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetHoldOnMailboxesAsync(PX.Data.Update.ExchangeService.GetHoldOnMailboxesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetHoldOnMailboxes(PX.Data.Update.ExchangeService.SetHoldOnMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetHoldOnMailboxesAsync(PX.Data.Update.ExchangeService.SetHoldOnMailboxesType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetHoldOnMailboxesAsync(PX.Data.Update.ExchangeService.SetHoldOnMailboxesType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemStatistics(PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemStatisticsAsync(PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemStatisticsAsync(PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemDetails(PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemDetailsAsync(PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetNonIndexableItemDetailsAsync(PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAllItemsAsRead(PX.Data.Update.ExchangeService.MarkAllItemsAsReadType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAllItemsAsReadAsync(PX.Data.Update.ExchangeService.MarkAllItemsAsReadType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAllItemsAsReadAsync(PX.Data.Update.ExchangeService.MarkAllItemsAsReadType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAsJunk(PX.Data.Update.ExchangeService.MarkAsJunkType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAsJunkAsync(PX.Data.Update.ExchangeService.MarkAsJunkType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.MarkAsJunkAsync(PX.Data.Update.ExchangeService.MarkAsJunkType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppManifests(PX.Data.Update.ExchangeService.GetAppManifestsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppManifestsAsync(PX.Data.Update.ExchangeService.GetAppManifestsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppManifestsAsync(PX.Data.Update.ExchangeService.GetAppManifestsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewImContactToGroup(PX.Data.Update.ExchangeService.AddNewImContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewImContactToGroupAsync(PX.Data.Update.ExchangeService.AddNewImContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewImContactToGroupAsync(PX.Data.Update.ExchangeService.AddNewImContactToGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewTelUriContactToGroup(PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewTelUriContactToGroupAsync(PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddNewTelUriContactToGroupAsync(PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImContactToGroup(PX.Data.Update.ExchangeService.AddImContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImContactToGroupAsync(PX.Data.Update.ExchangeService.AddImContactToGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImContactToGroupAsync(PX.Data.Update.ExchangeService.AddImContactToGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImContactFromGroup(PX.Data.Update.ExchangeService.RemoveImContactFromGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImContactFromGroupAsync(PX.Data.Update.ExchangeService.RemoveImContactFromGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImContactFromGroupAsync(PX.Data.Update.ExchangeService.RemoveImContactFromGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImGroup(PX.Data.Update.ExchangeService.AddImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImGroupAsync(PX.Data.Update.ExchangeService.AddImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddImGroupAsync(PX.Data.Update.ExchangeService.AddImGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDistributionGroupToImList(PX.Data.Update.ExchangeService.AddDistributionGroupToImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDistributionGroupToImListAsync(PX.Data.Update.ExchangeService.AddDistributionGroupToImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.AddDistributionGroupToImListAsync(PX.Data.Update.ExchangeService.AddDistributionGroupToImListType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemList(PX.Data.Update.ExchangeService.GetImItemListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemListAsync(PX.Data.Update.ExchangeService.GetImItemListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemListAsync(PX.Data.Update.ExchangeService.GetImItemListType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItems(PX.Data.Update.ExchangeService.GetImItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemsAsync(PX.Data.Update.ExchangeService.GetImItemsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetImItemsAsync(PX.Data.Update.ExchangeService.GetImItemsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveContactFromImList(PX.Data.Update.ExchangeService.RemoveContactFromImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveContactFromImListAsync(PX.Data.Update.ExchangeService.RemoveContactFromImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveContactFromImListAsync(PX.Data.Update.ExchangeService.RemoveContactFromImListType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDistributionGroupFromImList(PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDistributionGroupFromImListAsync(PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveDistributionGroupFromImListAsync(PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImGroup(PX.Data.Update.ExchangeService.RemoveImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImGroupAsync(PX.Data.Update.ExchangeService.RemoveImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.RemoveImGroupAsync(PX.Data.Update.ExchangeService.RemoveImGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImGroup(PX.Data.Update.ExchangeService.SetImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImGroupAsync(PX.Data.Update.ExchangeService.SetImGroupType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImGroupAsync(PX.Data.Update.ExchangeService.SetImGroupType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImListMigrationCompleted(PX.Data.Update.ExchangeService.SetImListMigrationCompletedType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImListMigrationCompletedAsync(PX.Data.Update.ExchangeService.SetImListMigrationCompletedType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.SetImListMigrationCompletedAsync(PX.Data.Update.ExchangeService.SetImListMigrationCompletedType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserRetentionPolicyTags(PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserRetentionPolicyTagsAsync(PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserRetentionPolicyTagsAsync(PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.InstallApp(PX.Data.Update.ExchangeService.InstallAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.InstallAppAsync(PX.Data.Update.ExchangeService.InstallAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.InstallAppAsync(PX.Data.Update.ExchangeService.InstallAppType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UninstallApp(PX.Data.Update.ExchangeService.UninstallAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UninstallAppAsync(PX.Data.Update.ExchangeService.UninstallAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.UninstallAppAsync(PX.Data.Update.ExchangeService.UninstallAppType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisableApp(PX.Data.Update.ExchangeService.DisableAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisableAppAsync(PX.Data.Update.ExchangeService.DisableAppType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.DisableAppAsync(PX.Data.Update.ExchangeService.DisableAppType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppMarketplaceUrl(PX.Data.Update.ExchangeService.GetAppMarketplaceUrlType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppMarketplaceUrlAsync(PX.Data.Update.ExchangeService.GetAppMarketplaceUrlType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetAppMarketplaceUrlAsync(PX.Data.Update.ExchangeService.GetAppMarketplaceUrlType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserPhoto(PX.Data.Update.ExchangeService.GetUserPhotoType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserPhotoAsync(PX.Data.Update.ExchangeService.GetUserPhotoType)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.GetUserPhotoAsync(PX.Data.Update.ExchangeService.GetUserPhotoType,System.Object)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.ExchangeService.ExchangeServiceBinding.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DateTimePrecisionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DateTimePrecisionType.Text">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TimeZoneContextType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneContextType.TimeZoneDefinition">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneContextType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TimeZoneDefinitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneDefinitionType.Periods">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneDefinitionType.TransitionsGroups">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneDefinitionType.Transitions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneDefinitionType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneDefinitionType.Name">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PeriodType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PeriodType.Bias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PeriodType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PeriodType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetUserOofSettingsResponse">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetUserOofSettingsResponse.ResponseMessage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.MessageText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.ResponseCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.ResponseCodeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.DescriptiveLinkKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.DescriptiveLinkKeySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.MessageXml">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageType.ResponseClass">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseCodeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.NoError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAccessDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAccessModeSpecified">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAccountDisabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAddDelegatesFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAddressSpaceNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorADOperation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorADSessionFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorADUnavailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAutoDiscoverFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAffectedTaskOccurrencesRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAttachmentNestLevelLimitExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAttachmentSizeLimitExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorArchiveFolderPathCreation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorArchiveMailboxNotEnabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorArchiveMailboxServiceDiscoveryFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorAvailabilityConfigNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorBatchProcessingStopped">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarCannotMoveOrCopyOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarCannotUpdateDeletedItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarCannotUseIdForOccurrenceId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarCannotUseIdForRecurringMasterId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarDurationIsTooLong">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarEndDateIsEarlierThanStartDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarFolderIsInvalidForCalendarView">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidAttributeValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidDayForTimeChangePattern">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidDayForWeeklyRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidPropertyState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidPropertyValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarInvalidTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsCancelledForAccept">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsCancelledForDecline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsCancelledForRemove">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsCancelledForTentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsDelegatedForAccept">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsDelegatedForDecline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsDelegatedForRemove">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsDelegatedForTentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsNotOrganizer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsOrganizerForAccept">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsOrganizerForDecline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsOrganizerForRemove">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsOrganizerForTentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarOccurrenceIsDeletedFromRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarOutOfRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarMeetingRequestIsOutOfDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarViewRangeTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCallerIsInvalidADAccount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotArchiveCalendarContactTaskFolderException">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotArchiveItemsInPublicFolders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotArchiveItemsInArchiveMailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotCreateCalendarItemInNonCalendarFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotCreateContactInNonContactFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotCreatePostItemInNonMailFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotCreateTaskInNonTaskFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotDeleteObject">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotDisableMandatoryExtension">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotGetSourceFolderPath">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotGetExternalEcpUrl">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotOpenFileAttachment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotDeleteTaskOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotEmptyFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotSetCalendarPermissionOnNonCalendarFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotSetNonCalendarPermissionOnCalendarFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotSetPermissionUnknownEntries">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotSpecifySearchFolderAsSourceFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotUseFolderIdForItemId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCannotUseItemIdForFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorChangeKeyRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorChangeKeyRequiredForWriteOperations">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorClientDisconnected">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorClientIntentInvalidStateDefinition">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorClientIntentNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorConnectionFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorContainsFilterWrongType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorContentConversionFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorContentIndexingNotEnabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCorruptData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCreateItemAccessDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCreateManagedFolderPartialCompletion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCreateSubfolderAccessDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCrossMailboxMoveCopy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCrossSiteRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDataSizeLimitExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDataSourceOperation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDelegateAlreadyExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDelegateCannotAddOwner">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDelegateMissingConfiguration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDelegateNoUser">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDelegateValidationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDeleteDistinguishedFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDeleteItemsFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDeleteUnifiedMessagingPromptFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDistinguishedUserNotSupported">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDistributionListMemberNotExist">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDuplicateInputFolderNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDuplicateUserIdsSpecified">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorEmailAddressMismatch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorEventNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExceededConnectionCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExceededSubscriptionCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExceededFindCountLimit">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExpiredSubscription">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExtensionNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderCorrupt">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderPropertRequestFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderSave">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderSaveFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderSavePropertyError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFolderExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFreeBusyGenerationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorGetServerSecurityDescriptorFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImContactLimitReached">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImGroupDisplayNameAlreadyExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImGroupLimitReached">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImpersonateUserDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImpersonationDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorImpersonationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorIncorrectSchemaVersion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorIncorrectUpdatePropertyCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorIndividualMailboxLimitReached">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInsufficientResources">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInternalServerError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInternalServerTransientError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidAccessLevel">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidArgument">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidAttachmentId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidAttachmentSubfilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidAttachmentSubfilterTextFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidAuthorizationContext">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidChangeKey">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidClientSecurityContext">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidCompleteDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidContactEmailAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidContactEmailIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidCrossForestCredentials">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidDelegatePermission">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidDelegateUserId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExcludesRestriction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExpressionTypeForSubFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExtendedProperty">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExtendedPropertyValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidFolderTypeForOperation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidFractionalPagingParameters">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidFreeBusyViewType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdEmpty">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdMalformed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdMalformedEwsLegacyIdFormat">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdMonikerTooLong">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdNotAnItemAttachmentId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdReturnedByResolveNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdStoreObjectIdTooLong">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdTooManyAttachmentLevels">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIdXml">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidImContactId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidImDistributionGroupSmtpAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidImGroupId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidIndexedPagingParameters">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidInternetHeaderChildNodes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationArchiveItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationCreateItemAttachment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationCreateItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationAcceptItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationDeclineItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationCancelItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationExpandDL">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationRemoveItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationSendItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidItemForOperationTentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidLogonType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidLikeRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidMailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidManagedFolderProperty">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidManagedFolderQuota">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidManagedFolderSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidMergedFreeBusyInterval">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidNameForNameResolution">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidOperation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidNetworkServiceContext">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidOofParameter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPagingMaxRows">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidParentFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPercentCompleteValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPermissionSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPhoneCallId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPhoneNumber">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidUserInfo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyAppend">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyForExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyForOperation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertySet">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPropertyUpdateSentMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidProxySecurityContext">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPullSubscriptionId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPushSubscriptionUrl">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRecipientSubfilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRecipientSubfilterComparison">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRecipientSubfilterOrder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRecipientSubfilterTextFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidReferenceItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRestriction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRetentionTagTypeMismatch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRetentionTagInvisible">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRetentionTagInheritance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRetentionTagIdGuid">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRoutingType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidScheduledOofDuration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSchemaVersionForMailboxVersion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSecurityDescriptor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSendItemSaveSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSerializedAccessToken">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidServerVersion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSid">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSIPUri">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSmtpAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSubfilterType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSubfilterTypeNotAttendeeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSubfilterTypeNotRecipientType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSubscription">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSubscriptionRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSyncStateData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidTimeInterval">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidUserOofSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidUserPrincipalName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidUserSid">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidUserSidMissingUPN">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidValueForProperty">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidWatermark">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorIPGatewayNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorIrresolvableConflict">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorItemCorrupt">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorItemNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorItemPropertyRequestFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorItemSave">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorItemSavePropertyError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLegacyMailboxFreeBusyViewTypeNotMerged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLocalServerObjectNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLogonAsNetworkServiceFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxConfiguration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxDataArrayEmpty">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxDataArrayTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxHoldNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxLogonFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxMoveInProgress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxStoreUnavailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailRecipientNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailTipsDisabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorManagedFolderAlreadyExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorManagedFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorManagedFoldersRootFailure">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMeetingSuggestionGenerationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMessageDispositionRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMessageSizeExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMimeContentConversionFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMimeContentInvalid">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMimeContentInvalidBase64String">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingArgument">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingEmailAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingEmailAddressForManagedFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingInformationEmailAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingInformationReferenceItemId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingItemForCreateItemAttachment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingManagedFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingUserIdInformation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMoreThanOneAccessModeSpecified">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMoveCopyFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMoveDistinguishedFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMultiLegacyMailboxAccess">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNameResolutionMultipleResults">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNameResolutionNoMailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNameResolutionNoResults">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoApplicableProxyCASServersAvailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoCalendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoDestinationCASDueToKerberosRequirements">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoDestinationCASDueToSSLRequirements">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoDestinationCASDueToVersionMismatch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoFolderClassOverride">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoFreeBusyAccess">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNonExistentMailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNonPrimarySmtpAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoPropertyTagForCustomProperties">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoPublicFolderReplicaAvailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoPublicFolderServerAvailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoRespondingCASInDestinationSite">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNotDelegate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNotEnoughMemory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorObjectTypeChanged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorOccurrenceCrossingBoundary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorOccurrenceTimeSpanTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorOperationNotAllowedWithPublicFolderRoot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorParentFolderIdRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorParentFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPasswordChangeRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPasswordExpired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPhoneNumberNotDialable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPropertyUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPromptPublishingOperationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPropertyValidationFailure">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxiedSubscriptionCallFailure">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyCallFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyGroupSidLimitExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyRequestNotAllowed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyRequestProcessingFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyServiceDiscoveryFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorProxyTokenExpired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPublicFolderMailboxDiscoveryFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPublicFolderOperationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPublicFolderRequestProcessingFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPublicFolderServerNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPublicFolderSyncException">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorQueryFilterTooLong">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorQuotaExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorReadEventsFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorReadReceiptNotPending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRecurrenceEndDateTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRecurrenceHasNoOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRemoveDelegatesFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRequestAborted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRequestStreamTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRequiredPropertyMissing">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorResolveNamesInvalidFolderType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorResolveNamesOnlyOneContactsFolderAllowed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorResponseSchemaValidation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRestrictionTooLong">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRestrictionTooComplex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorResultSetTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExchangeImpersonationHeaderData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSavedItemFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSchemaValidation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSearchFolderNotInitialized">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSendAsDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSendMeetingCancellationsRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSendMeetingInvitationsOrCancellationsRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSendMeetingInvitationsRequired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSentMeetingRequestUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSentTaskRequestUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorServerBusy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorServiceDiscoveryFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorStaleObject">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSubmissionQuotaExceeded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSubscriptionAccessDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSubscriptionDelegateAccessNotSupported">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSubscriptionNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSubscriptionUnsubscribed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSyncFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxNotLinkedToSharePoint">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxUrlValidationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxNotAuthorizedOwner">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxActiveToPendingDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxFailedSendingNotifications">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTeamMailboxErrorUnknown">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTimeIntervalTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTimeoutExpired">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorToFolderNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTokenSerializationDenied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorTooManyObjectsOpened">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUpdatePropertyMismatch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnifiedMessagingDialPlanNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnifiedMessagingReportDataNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnifiedMessagingPromptNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnifiedMessagingRequestFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnifiedMessagingServerNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnableToGetUserOofSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnableToRemoveImContactFromGroup">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedSubFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedCulture">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedMapiPropertyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedMimeConversion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedPathForQuery">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedPathForSortGroup">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedPropertyDefinition">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedQueryFilter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUnsupportedTypeForConversion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUpdateDelegatesFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUserNotUnifiedMessagingEnabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorVoiceMailNotImplemented">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorValueOutOfRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorVirusDetected">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorVirusMessageDeleted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWebRequestInInvalidState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWin32InteropError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWorkingHoursSaveFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWorkingHoursXmlMalformed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWrongServerVersion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWrongServerVersionDelegate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissingInformationSharingFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDuplicateSOAPHeader">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSharingSynchronizationFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSharingNoExternalEwsAvailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFreeBusyDLLimitReached">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidGetSharingFolderRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNotAllowedExternalSharingByPolicy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUserNotAllowedByPolicy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorPermissionNotAllowedByPolicy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorOrganizationNotFederated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxFailover">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExternalSharingInitiator">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMessageTrackingPermanentError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMessageTrackingTransientError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMessageTrackingNoSuchDomain">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUserWithoutFederatedProxyAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidOrganizationRelationshipForFreeBusy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidFederatedOrganizationId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidExternalSharingSubscriber">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSharingData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidSharingMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNotSupportedSharingMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorApplyConversationActionFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInboxRulesValidationError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorOutlookRuleBlobExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRulesOverQuota">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNewEventStreamConnectionOpened">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMissedNotificationEvents">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDuplicateLegacyDistinguishedName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidClientAccessTokenRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorNoSpeechDetected">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorUMServerUnavailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRecipientNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorRecognizerNotInstalled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSpeechGrammarError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidManagementRoleHeader">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLocationServicesDisabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLocationServicesRequestTimedOut">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLocationServicesRequestFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorLocationServicesInvalidRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorWeatherServiceDisabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorMailboxScopeNotAllowedWithoutQueryString">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorArchiveMailboxSearchFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorGetRemoteArchiveFolderFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorFindRemoteArchiveFolderFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorGetRemoteArchiveItemFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorExportRemoteArchiveItemsFailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidPhotoSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSearchQueryHasTooManyKeywords">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorSearchTooManyMailboxes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorInvalidRetentionTagNone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorDiscoverySearchesDisabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarSeekToConditionNotSupported">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsGroupMailboxForAccept">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsGroupMailboxForDecline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsGroupMailboxForTentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseCodeType.ErrorCalendarIsGroupMailboxForSuppressReadReceipt">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseMessageTypeMessageXml">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseMessageTypeMessageXml.Any">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseClassType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseClassType.Success">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseClassType.Warning">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseClassType.Error">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.IsOOF">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.IsTranscriptionEnabledInMailboxConfig">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.IsMailboxQuotaExceeded">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.Greeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.GreetingName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataResponseMessageType.TaskTimedOut">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UMMailboxTranscriptionEnabledSetting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMMailboxTranscriptionEnabledSetting.Disabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMMailboxTranscriptionEnabledSetting.Enabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMMailboxTranscriptionEnabledSetting.Unknown">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientIntentResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientIntentResponseMessageType.ClientIntent">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientIntentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.Intent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.ItemVersion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.WouldRepair">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.PredictedAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientIntentType.PredictedActionSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemIdType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemIdType.ChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseItemIdType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurringMasterItemIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringMasterItemIdType.OccurrenceId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringMasterItemIdType.ChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OccurrenceItemIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceItemIdType.RecurringMasterId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceItemIdType.ChangeKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceItemIdType.InstanceIndex">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RootItemIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RootItemIdType.RootItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RootItemIdType.RootItemChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RequestAttachmentIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RequestAttachmentIdType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttachmentIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentIdType.RootItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentIdType.RootItemChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurringMasterItemIdRangesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringMasterItemIdRangesType.Ranges">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OccurrencesRangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.EndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.Count">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.CountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.CompareOriginalStartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrencesRangeType.CompareOriginalStartTimeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.SendCancellation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.ReviveMeeting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.SendUpdateForMaster">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.MeetingAlreadyExists">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.ExistingOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.HasDelegates">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.DeletedVersionNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.PairedCancellationFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientIntentMeetingInquiryActionType.FailedToRevive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPinResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPinResponseMessageType.PinInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PinInfoType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PinInfoType.PIN">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PinInfoType.IsValid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PinInfoType.PinExpired">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PinInfoType.LockedOut">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PinInfoType.FirstTimeUser">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SaveUMPinResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ValidateUMPinResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ValidateUMPinResponseMessageType.PinInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResetUMMailboxResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InitUMMailboxResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMCallSummaryResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallSummaryResponseMessageType.UMReportRawCountersCollection">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UMReportRawCountersType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.AutoAttendantCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.FailedCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.FaxCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.MissedCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.OtherCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.OutboundCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.SubscriberAccessCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.VoiceMailCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.TotalCalls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.Date">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportRawCountersType.AudioMetricsAverages">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.NMOS">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.NMOSDegradation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.Jitter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.PercentPacketLoss">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.RoundTrip">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.BurstLossDuration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UMReportAudioMetricsAverageCountersType.TotalAudioQualityCallsSampled">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AudioMetricsAverageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioMetricsAverageType.TotalValue">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioMetricsAverageType.TotalCount">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMCallDataRecordsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsResponseMessageType.CallDataRecords">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CDRDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallStartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallIdentity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.ParentCallIdentity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.UMServerName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.DialPlanGuid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.DialPlanName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallDuration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.IPGatewayAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.IPGatewayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.GatewayGuid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CalledPhoneNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallerPhoneNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.OfferResult">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.DropCallReason">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.ReasonForCall">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.TransferredNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.DialedString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallerMailboxAlias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CalleeMailboxAlias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CallerLegacyExchangeDN">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CalleeLegacyExchangeDN">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.AutoAttendantName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.AudioQualityMetrics">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CDRDataType.CreationTime">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AudioQualityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.NMOS">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.NMOSDegradation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.NMOSDegradationPacketLoss">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.NMOSDegradationJitter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.Jitter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.PacketLoss">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.RoundTrip">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.BurstDensity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.BurstDuration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AudioQualityType.AudioCodec">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUMCallDataRecordResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CompleteFindInGALSpeechRecognitionResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteFindInGALSpeechRecognitionResponseMessageType.RecognitionResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecognitionResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecognitionResultType.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionResponseMessageType.RecognitionId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecognitionIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecognitionIdType.RequestId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserPhotoResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserPhotoResponseMessageType.HasChanged">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserPhotoResponseMessageType.PictureData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsResponseMessageType.RetentionPolicyTags">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RetentionPolicyTagType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.RetentionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.RetentionPeriod">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.Type">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.RetentionAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.Description">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.IsVisible">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.OptedInto">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionPolicyTagType.IsArchive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ElcFolderType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Calendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Contacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.DeletedItems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Drafts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Inbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.JunkEmail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Journal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Notes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Outbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.SentItems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Tasks">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.All">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.ManagedCustomFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.RssSubscriptions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.SyncIssues">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.ConversationHistory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.Personal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.RecoverableItems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ElcFolderType.NonIpmRoot">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RetentionActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.MoveToDeletedItems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.MoveToFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.DeleteAndAllowRecovery">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.PermanentlyDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.MarkAsPastRetentionLimit">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionActionType.MoveToArchive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImListMigrationCompletedResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveContactFromImListResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemsResponseMessageType.ImItemList">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ImItemListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImItemListType.Groups">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImItemListType.Personas">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ImGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.GroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.ExchangeStoreId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.MemberCorrelationKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.ExtendedProperties">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImGroupType.SmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonEmptyArrayOfExtendedPropertyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonEmptyArrayOfExtendedPropertyType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExtendedPropertyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedPropertyType.ExtendedFieldURI">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedPropertyType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PathToExtendedFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.DistinguishedPropertySetId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.DistinguishedPropertySetIdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertySetId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertyTag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertyName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertyId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertyIdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExtendedFieldType.PropertyType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistinguishedPropertySetType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Meeting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Appointment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Common">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.PublicStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Address">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.InternetHeaders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.CalendarAssistant">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.UnifiedMessaging">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Task">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedPropertySetType.Sharing">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MapiPropertyTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.ApplicationTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.ApplicationTimeArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Binary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.BinaryArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Boolean">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.CLSID">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.CLSIDArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Currency">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.CurrencyArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Double">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.DoubleArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Error">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Float">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.FloatArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Integer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.IntegerArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Long">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.LongArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Null">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Object">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.ObjectArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.Short">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.ShortArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.SystemTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.SystemTimeArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.String">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MapiPropertyTypeType.StringArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BasePathToElementType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PathToExceptionFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToExceptionFieldType.FieldURI">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExceptionPropertyURIType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.attachmentName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.attachmentContentType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.attachmentContent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceMonth">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceDayOfWeekIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceDaysOfWeek">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceDayOfMonth">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceInterval">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.recurrenceNumberOfOccurrences">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExceptionPropertyURIType.timezoneOffset">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PathToIndexedFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToIndexedFieldType.FieldURI">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToIndexedFieldType.FieldIndex">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DictionaryURIType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.itemInternetMessageHeader">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsImAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhysicalAddressStreet">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhysicalAddressCity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhysicalAddressState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhysicalAddressCountryOrRegion">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhysicalAddressPostalCode">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsPhoneNumber">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.contactsEmailAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DictionaryURIType.distributionlistMembersMember">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PathToUnindexedFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PathToUnindexedFieldType.FieldURI">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnindexedFieldURIType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderParentFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderDisplayName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderUnreadCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderTotalCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderChildFolderCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderFolderClass">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderSearchParameters">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderManagedFolderInformation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderPermissionSet">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderEffectiveRights">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderSharingEffectiveRights">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderDistinguishedFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderPolicyTag">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.folderArchiveTag">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemItemId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemParentFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemItemClass">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemMimeContent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemSubject">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemDateTimeReceived">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemHasAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemInReplyTo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemInternetMessageHeaders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsAssociated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsDraft">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsFromMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsResend">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsSubmitted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsUnmodified">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemDateTimeSent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemDateTimeCreated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemBody">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemResponseObjects">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemSensitivity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemReminderDueBy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemReminderIsSet">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemReminderNextTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemReminderMinutesBeforeStart">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemDisplayTo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemDisplayCc">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemCulture">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemEffectiveRights">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemLastModifiedName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemLastModifiedTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemConversationId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemUniqueBody">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemFlag">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemStoreEntryId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemInstanceKey">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemNormalizedBody">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemEntityExtractionResult">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemPolicyTag">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemArchiveTag">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemRetentionDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemPreview">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemNextPredictedAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemGroupingAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemPredictedActionReasons">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIsClutter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemRightsManagementLicenseData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemBlockStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemHasBlockedImages">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemWebClientReadFormQueryString">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemWebClientEditFormQueryString">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemTextBody">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.itemIconIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageConversationIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageConversationTopic">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageInternetMessageId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageIsRead">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageIsResponseRequested">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageIsReadReceiptRequested">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageIsDeliveryReceiptRequested">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageReceivedBy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageReceivedRepresenting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageReferences">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageReplyTo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageFrom">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageSender">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageToRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageCcRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageBccRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageApprovalRequestData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageVotingInformation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.messageReminderMessageData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingAssociatedCalendarItemId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingIsDelegated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingIsOutOfDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingHasBeenProcessed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingResponseType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingProposedStart">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingProposedEnd">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingRequestMeetingRequestType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingRequestIntendedFreeBusyStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.meetingRequestChangeHighlights">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarStart">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarEnd">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarOriginalStart">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarStartWallClock">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarEndWallClock">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarStartTimeZoneId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarEndTimeZoneId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsAllDayEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarLegacyFreeBusyStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarLocation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarEnhancedLocation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarWhen">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsMeeting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsCancelled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsRecurring">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarMeetingRequestWasSent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsResponseRequested">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarCalendarItemType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarMyResponseType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarOrganizer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarRequiredAttendees">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarOptionalAttendees">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarResources">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarConflictingMeetingCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAdjacentMeetingCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarConflictingMeetings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAdjacentMeetings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarDuration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAppointmentReplyTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAppointmentSequenceNumber">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAppointmentState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarFirstOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarLastOccurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarModifiedOccurrences">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarDeletedOccurrences">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarMeetingTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarConferenceType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarAllowNewTimeProposal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsOnlineMeeting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarMeetingWorkspaceUrl">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarNetShowUrl">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarUID">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarRecurrenceId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarDateTimeStamp">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarStartTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarEndTimeZone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarJoinOnlineMeetingUrl">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarOnlineMeetingSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.calendarIsOrganizer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskActualWork">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskAssignedTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskBillingInformation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskChangeCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskCompanies">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskCompleteDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskContacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskDelegationState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskDelegator">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskDueDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskIsAssignmentEditable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskIsComplete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskIsRecurring">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskIsTeamTask">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskMileage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskOwner">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskPercentComplete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskRecurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskStartDate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskStatusDescription">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.taskTotalWork">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsAlias">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsAssistantName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsBirthday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsBusinessHomePage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsChildren">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsCompanies">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsCompanyName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsCompleteName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsContactSource">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsCulture">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsDepartment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsDisplayName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsDirectoryId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsDirectReports">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsEmailAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsFileAs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsFileAsMapping">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsGeneration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsGivenName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsImAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsInitials">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsJobTitle">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsManager">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsManagerMailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsMiddleName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsMileage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsMSExchangeCertificate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsNickname">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsNotes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsOfficeLocation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhoneNumbers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhoneticFullName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhoneticFirstName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhoneticLastName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhoto">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPhysicalAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsPostalAddressIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsProfession">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsSpouseName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsSurname">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsWeddingAnniversary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsUserSMIMECertificate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.contactsHasPicture">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.distributionlistMembers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.postitemPostedTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationConversationId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationConversationTopic">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationUniqueRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalUniqueRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationUniqueUnreadSenders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalUniqueUnreadSenders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationUniqueSenders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalUniqueSenders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationLastDeliveryTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalLastDeliveryTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationFlagStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalFlagStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationHasAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalHasAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationHasIrm">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalHasIrm">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationMessageCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalMessageCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationUnreadCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalUnreadCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationItemClasses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalItemClasses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationItemIds">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalItemIds">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationLastModifiedTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationInstanceKey">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationPreview">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationNextPredictedAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGroupingAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationIconIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationGlobalIconIndex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationDraftItemIds">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.conversationHasClutter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPersonaId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPersonaType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaGivenName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaCompanyName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaSurname">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaDisplayName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmailAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaFileAs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHomeCity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaCreationTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaRelevanceScore">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaWorkCity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPersonaObjectStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaFileAsId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaDisplayNamePrefix">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiCompanyName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiFirstName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiLastName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaTitle">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmailAddress1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmailAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPhoneNumber">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaImAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaImAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaImAddresses2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaImAddresses3">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaFolderIds">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaAttributions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaDisplayNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaInitials">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaFileAses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaFileAsIds">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaDisplayNamePrefixes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaGivenNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaMiddleNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaSurnames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaGenerations">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaNicknames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiCompanyNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiFirstNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaYomiLastNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBusinessPhoneNumbers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBusinessPhoneNumbers2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHomePhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHomePhones2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaMobilePhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaMobilePhones2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaAssistantPhoneNumbers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaCallbackPhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaCarPhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHomeFaxes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOrganizationMainPhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOtherFaxes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOtherTelephones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOtherPhones2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPagers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaRadioPhones">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaTelexNumbers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaWorkFaxes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmails1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmails2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaEmails3">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBusinessHomePages">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaSchool">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPersonalHomePages">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOfficeLocations">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBusinessAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHomeAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaOtherAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaTitles">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaDepartments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaCompanyNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaManagers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaAssistantNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaProfessions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaSpouseNames">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaHobbies">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaWeddingAnniversaries">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBirthdays">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaChildren">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaLocations">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaExtendedProperties">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaPostalAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UnindexedFieldURIType.personaBodies">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonEmptyArrayOfPropertyValuesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonEmptyArrayOfPropertyValuesType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PersonaType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.PersonaId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.PersonaType1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.PersonaObjectStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CreationTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CreationTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Bodies">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameFirstLastSortKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameLastFirstSortKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CompanyNameSortKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomeCitySortKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.WorkCitySortKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameFirstLastHeader">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameLastFirstHeader">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameFirstLast">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNameLastFirst">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.FileAs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.FileAsId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNamePrefix">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.GivenName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.MiddleName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Surname">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Generation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Nickname">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiCompanyName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiFirstName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiLastName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Title">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Department">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CompanyName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.EmailAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.PhoneNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.ImAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomeCity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.WorkCity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.RelevanceScore">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.RelevanceScoreSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.FolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Attributions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.FileAses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.FileAsIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.DisplayNamePrefixes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.GivenNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.MiddleNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Surnames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Generations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Nicknames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Initials">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiCompanyNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiFirstNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.YomiLastNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.BusinessPhoneNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.BusinessPhoneNumbers2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomePhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomePhones2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.MobilePhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.MobilePhones2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.AssistantPhoneNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CallbackPhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CarPhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomeFaxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OrganizationMainPhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OtherFaxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OtherTelephones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OtherPhones2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Pagers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.RadioPhones">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.TelexNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.TTYTDDPhoneNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.WorkFaxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Emails1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Emails2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Emails3">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.BusinessHomePages">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.PersonalHomePages">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OfficeLocations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.ImAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.ImAddresses2">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.ImAddresses3">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.BusinessAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.HomeAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.OtherAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Titles">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Departments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.CompanyNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Managers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.AssistantNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Professions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.SpouseNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Children">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Schools">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Hobbies">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.WeddingAnniversaries">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Birthdays">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.Locations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaType.ExtendedProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BodyContentAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyContentAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyContentAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BodyContentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyContentType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyContentType.BodyType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BodyTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.BodyTypeType.HTML">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.BodyTypeType.Text">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddressType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.RoutingType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.MailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.MailboxTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressType.OriginalDisplayName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.Unknown">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.OneOff">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.Mailbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.PublicDL">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.PrivateDL">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.Contact">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.PublicFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxTypeType.GroupMailbox">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseEmailAddressType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PersonaPhoneNumberType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPhoneNumberType.Number">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPhoneNumberType.Type">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderIdType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderIdType.ChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseFolderIdType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddressListIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddressListIdType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistinguishedFolderIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistinguishedFolderIdType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistinguishedFolderIdType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistinguishedFolderIdType.ChangeKey">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.calendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.contacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.deleteditems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.drafts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.inbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.journal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.notes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.outbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.sentitems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.tasks">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.msgfolderroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.publicfoldersroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.root">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.junkemail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.searchfolders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.voicemail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.recoverableitemsroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.recoverableitemsdeletions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.recoverableitemsversions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.recoverableitemspurges">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiveroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archivemsgfolderroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archivedeleteditems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiveinbox">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiverecoverableitemsroot">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiverecoverableitemsdeletions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiverecoverableitemsversions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.archiverecoverableitemspurges">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.syncissues">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.conflicts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.localfailures">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.serverfailures">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.recipientcache">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.quickcontacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.conversationhistory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.adminauditlogs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.todosearch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.mycontacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.directory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.imcontactlist">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.peopleconnect">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedFolderIdNameType.favorites">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PersonaAttributionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.SourceId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsWritable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsWritableSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsQuickContact">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsQuickContactSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsHidden">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.IsHiddenSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaAttributionType.FolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StringAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StringAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StringAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneNumberAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneNumberAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneNumberAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddressAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostalAddressAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostalAddressAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostalAddressAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PersonaPostalAddressType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Street">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.City">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.State">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Country">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.PostalCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.PostOfficeBox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Type">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Latitude">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.LatitudeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Longitude">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.LongitudeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Accuracy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.AccuracySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.Altitude">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.AltitudeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.AltitudeAccuracy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.AltitudeAccuracySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.FormattedAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.LocationUri">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.LocationSource">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaPostalAddressType.LocationSourceSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.LocationSourceType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.LocationServices">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.PhonebookServices">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.Device">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.Contact">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LocationSourceType.Resource">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StringArrayAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StringArrayAttributedValueType.Values">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StringArrayAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExtendedPropertyAttributedValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedPropertyAttributedValueType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedPropertyAttributedValueType.Attributions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemListResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemListResponseMessageType.ImItemList">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDistributionGroupToImListResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDistributionGroupToImListResponseMessageType.ImGroup">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImGroupResponseMessageType.ImGroup">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImContactFromGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImContactToGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupResponseMessageType.Persona">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewImContactToGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewImContactToGroupResponseMessageType.Persona">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisableAppResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UninstallAppResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InstallAppResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAsJunkResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAsJunkResponseMessageType.MovedItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlResponseMessageType.AppMarketplaceUrl">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppManifestsResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAppManifestsResponseType.Manifests">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetEncryptionConfigurationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EncryptionConfigurationResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptionConfigurationResponseType.ImageBase64">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptionConfigurationResponseType.EmailText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptionConfigurationResponseType.PortalText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptionConfigurationResponseType.DisclaimerText">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientExtensionResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionResponseType.ClientExtensions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionResponseType.RawMasterTableXml">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientExtensionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.SpecificUsers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.Manifest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsAvailable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsAvailableSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsMandatory">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsMandatorySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsEnabledByDefault">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.IsEnabledByDefaultSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.ProvidedTo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.ProvidedToSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.Type">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.TypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.Scope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.ScopeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.MarketplaceAssetId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.MarketplaceContentMarket">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.AppStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientExtensionType.Etoken">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientExtensionProvidedToType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionProvidedToType.Everyone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionProvidedToType.SpecificUsers">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientExtensionTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionTypeType.Default">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionTypeType.Private">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionTypeType.MarketPlace">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientExtensionScopeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionScopeType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionScopeType.User">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionScopeType.Organization">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientExtensionScopeType.Default">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetConversationItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsResponseMessageType.Conversation">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationResponseType.ConversationId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationResponseType.SyncState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationResponseType.ConversationNodes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationNodeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationNodeType.InternetMessageId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationNodeType.ParentInternetMessageId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationNodeType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonEmptyArrayOfAllItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonEmptyArrayOfAllItemsType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AcceptItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingRegistrationResponseObjectType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRegistrationResponseObjectType.ProposedStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRegistrationResponseObjectType.ProposedStartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRegistrationResponseObjectType.ProposedEnd">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRegistrationResponseObjectType.ProposedEndSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.WellKnownResponseObjectType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseObjectType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseObjectType.ObjectName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseObjectCoreType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResponseObjectCoreType.ReferenceItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.Sender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.CcRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.BccRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsReadReceiptRequested">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsReadReceiptRequestedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsDeliveryReceiptRequested">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsDeliveryReceiptRequestedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ConversationIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ConversationTopic">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.From">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.InternetMessageId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsRead">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsReadSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsResponseRequested">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.IsResponseRequestedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.References">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ReplyTo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ReceivedBy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ReceivedRepresenting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ApprovalRequestData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.VotingInformation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageType.ReminderMessageData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SingleRecipientType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SingleRecipientType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ApprovalRequestDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.IsUndecidedApprovalRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.IsUndecidedApprovalRequestSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.ApprovalDecision">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.ApprovalDecisionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.ApprovalDecisionMaker">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.ApprovalDecisionTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApprovalRequestDataType.ApprovalDecisionTimeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.VotingInformationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.VotingInformationType.UserOptions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.VotingInformationType.VotingResponse">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.VotingOptionDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.VotingOptionDataType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.VotingOptionDataType.SendPrompt">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.VotingOptionDataType.SendPromptSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendPromptType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SendPromptType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SendPromptType.Send">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SendPromptType.VotingOption">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReminderMessageDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.ReminderText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.StartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.StartTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.EndTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.EndTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderMessageDataType.AssociatedCalendarItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.MimeContent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ItemClass">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Sensitivity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.SensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Body">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Attachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeReceived">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeReceivedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Size">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Categories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Importance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.InReplyTo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsSubmitted">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsSubmittedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsDraft">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsDraftSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsFromMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsFromMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsResend">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsResendSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsUnmodified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsUnmodifiedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.InternetMessageHeaders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeSent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeSentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeCreated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DateTimeCreatedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ResponseObjects">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderDueBy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderDueBySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderIsSet">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderIsSetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderNextTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderNextTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ReminderMinutesBeforeStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DisplayCc">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.DisplayTo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.HasAttachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.HasAttachmentsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ExtendedProperty">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Culture">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.EffectiveRights">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.LastModifiedName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.LastModifiedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.LastModifiedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsAssociated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsAssociatedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.WebClientReadFormQueryString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.WebClientEditFormQueryString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ConversationId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.UniqueBody">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Flag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.StoreEntryId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.InstanceKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.NormalizedBody">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.EntityExtractionResult">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.PolicyTag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.ArchiveTag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.RetentionDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.RetentionDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.Preview">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.RightsManagementLicenseData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.NextPredictedAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.NextPredictedActionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.GroupingAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.GroupingActionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.PredictedActionReasons">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsClutter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IsClutterSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.BlockStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.BlockStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.HasBlockedImages">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.HasBlockedImagesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.TextBody">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IconIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemType.IconIndexSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MimeContentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MimeContentType.CharacterSet">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MimeContentType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SensitivityChoicesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SensitivityChoicesType.Normal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SensitivityChoicesType.Personal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SensitivityChoicesType.Private">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SensitivityChoicesType.Confidential">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BodyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyType.BodyType1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyType.IsTruncated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyType.IsTruncatedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BodyType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FileAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FileAttachmentType.IsContactPhoto">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FileAttachmentType.IsContactPhotoSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FileAttachmentType.Content">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.AttachmentId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.ContentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.ContentId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.ContentLocation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.Size">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.LastModifiedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.LastModifiedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.IsInline">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentType.IsInlineSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReferenceAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReferenceAttachmentType.AttachLongPathName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemAttachmentType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.UID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.RecurrenceId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.RecurrenceIdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.DateTimeStamp">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.DateTimeStampSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.OriginalStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.OriginalStartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsAllDayEvent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsAllDayEventSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.LegacyFreeBusyStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.LegacyFreeBusyStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.When">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsMeeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsMeetingSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsCancelled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsCancelledSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsRecurring">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsRecurringSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MeetingRequestWasSent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MeetingRequestWasSentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsResponseRequested">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsResponseRequestedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.CalendarItemType1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.CalendarItemType1Specified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MyResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MyResponseTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Organizer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.RequiredAttendees">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.OptionalAttendees">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Resources">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ConflictingMeetingCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ConflictingMeetingCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AdjacentMeetingCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AdjacentMeetingCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ConflictingMeetings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AdjacentMeetings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Duration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.TimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentReplyTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentReplyTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentSequenceNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentSequenceNumberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AppointmentStateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.Recurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.FirstOccurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.LastOccurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ModifiedOccurrences">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.DeletedOccurrences">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MeetingTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.StartTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EndTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ConferenceType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.ConferenceTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AllowNewTimeProposal">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.AllowNewTimeProposalSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsOnlineMeeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsOnlineMeetingSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.MeetingWorkspaceUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.NetShowUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EnhancedLocation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.StartWallClock">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.StartWallClockSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EndWallClock">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EndWallClockSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.StartTimeZoneId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.EndTimeZoneId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IntendedFreeBusyStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IntendedFreeBusyStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.JoinOnlineMeetingUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.OnlineMeetingSettings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsOrganizer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarItemType.IsOrganizerSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.LegacyFreeBusyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.Free">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.Tentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.Busy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.OOF">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.WorkingElsewhere">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LegacyFreeBusyType.NoData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarItemTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemTypeType.Single">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemTypeType.Occurrence">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemTypeType.Exception">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemTypeType.RecurringMaster">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResponseTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.Unknown">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.Organizer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.Tentative">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.Accept">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.Decline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResponseTypeType.NoResponseReceived">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttendeeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ResponseTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.LastResponseTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.LastResponseTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ProposedStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ProposedStartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ProposedEnd">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttendeeType.ProposedEndSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurrenceType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurrenceType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurrenceType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AbsoluteMonthlyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AbsoluteMonthlyRecurrencePatternType.DayOfMonth">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IntervalRecurrencePatternBaseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.IntervalRecurrencePatternBaseType.Interval">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurrencePatternBaseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AbsoluteYearlyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AbsoluteYearlyRecurrencePatternType.DayOfMonth">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AbsoluteYearlyRecurrencePatternType.Month">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MonthNamesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.January">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.February">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.March">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.April">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.May">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.June">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.July">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.August">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.September">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.October">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.November">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MonthNamesType.December">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RelativeYearlyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RelativeYearlyRecurrencePatternType.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RelativeYearlyRecurrencePatternType.DayOfWeekIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RelativeYearlyRecurrencePatternType.Month">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DayOfWeekIndexType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekIndexType.First">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekIndexType.Second">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekIndexType.Third">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekIndexType.Fourth">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekIndexType.Last">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DailyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.WeeklyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WeeklyRecurrencePatternType.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WeeklyRecurrencePatternType.FirstDayOfWeek">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RelativeMonthlyRecurrencePatternType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RelativeMonthlyRecurrencePatternType.DaysOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RelativeMonthlyRecurrencePatternType.DayOfWeekIndex">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DayOfWeekType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Sunday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Monday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Tuesday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Wednesday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Thursday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Friday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Saturday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Day">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.Weekday">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DayOfWeekType.WeekendDay">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RegeneratingPatternBaseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.YearlyRegeneratingPatternType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MonthlyRegeneratingPatternType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.WeeklyRegeneratingPatternType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DailyRegeneratingPatternType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EndDateRecurrenceRangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EndDateRecurrenceRangeType.EndDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurrenceRangeBaseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurrenceRangeBaseType.StartDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NumberedRecurrenceRangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NumberedRecurrenceRangeType.NumberOfOccurrences">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NoEndRecurrenceRangeType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OccurrenceInfoType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceInfoType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceInfoType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceInfoType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OccurrenceInfoType.OriginalStart">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeletedOccurrenceInfoType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeletedOccurrenceInfoType.Start">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TimeZoneType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneType.BaseOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneType.Standard">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneType.Daylight">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeZoneType.TimeZoneName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TimeChangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeChangeType.Offset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeChangeType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeChangeType.Time">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TimeChangeType.TimeZoneName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EnhancedLocationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EnhancedLocationType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EnhancedLocationType.Annotation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EnhancedLocationType.PostalAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OnlineMeetingSettingsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OnlineMeetingSettingsType.LobbyBypass">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OnlineMeetingSettingsType.AccessLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OnlineMeetingSettingsType.Presenters">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.LobbyBypassType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LobbyBypassType.Disabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.LobbyBypassType.EnabledForGatewayParticipants">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OnlineMeetingAccessLevelType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OnlineMeetingAccessLevelType.Locked">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OnlineMeetingAccessLevelType.Invited">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OnlineMeetingAccessLevelType.Internal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OnlineMeetingAccessLevelType.Everyone">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PresentersType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PresentersType.Disabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PresentersType.Internal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PresentersType.Everyone">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContactItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.FileAs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.FileAsMapping">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.FileAsMappingSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.GivenName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Initials">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.MiddleName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Nickname">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.CompleteName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.CompanyName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.EmailAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PhysicalAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PhoneNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.AssistantName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Birthday">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.BirthdaySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.BusinessHomePage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Children">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Companies">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.ContactSource">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.ContactSourceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Department">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Generation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.ImAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.JobTitle">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Manager">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Mileage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.OfficeLocation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PostalAddressIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PostalAddressIndexSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Profession">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.SpouseName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Surname">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.WeddingAnniversary">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.WeddingAnniversarySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.HasPicture">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.HasPictureSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PhoneticFullName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PhoneticFirstName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.PhoneticLastName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Alias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Notes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.Photo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.UserSMIMECertificate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.MSExchangeCertificate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.DirectoryId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.ManagerMailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactItemType.DirectReports">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FileAsMappingType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastCommaFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.FirstSpaceLast">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.Company">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastCommaFirstCompany">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.CompanyLastFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastFirstCompany">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.CompanyLastCommaFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastFirstSuffix">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastSpaceFirstCompany">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.CompanyLastSpaceFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastSpaceFirst">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.DisplayName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.FirstName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastFirstMiddleSuffix">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.LastName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FileAsMappingType.Empty">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CompleteNameType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.Title">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.FirstName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.MiddleName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.LastName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.Suffix">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.Initials">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.FullName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.Nickname">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.YomiFirstName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteNameType.YomiLastName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.Key">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.RoutingType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.MailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.MailboxTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressDictionaryEntryType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddressKeyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailAddressKeyType.EmailAddress1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailAddressKeyType.EmailAddress2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailAddressKeyType.EmailAddress3">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.Street">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.City">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.State">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.CountryOrRegion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.PostalCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhysicalAddressDictionaryEntryType.Key">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhysicalAddressKeyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressKeyType.Business">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressKeyType.Home">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressKeyType.Other">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneNumberDictionaryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneNumberDictionaryEntryType.Key">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneNumberDictionaryEntryType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneNumberKeyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.AssistantPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.BusinessFax">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.BusinessPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.BusinessPhone2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.Callback">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.CarPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.CompanyMainPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.HomeFax">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.HomePhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.HomePhone2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.Isdn">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.MobilePhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.OtherFax">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.OtherTelephone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.Pager">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.PrimaryPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.RadioPhone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.Telex">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneNumberKeyType.TtyTddPhone">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContactSourceType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContactSourceType.ActiveDirectory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContactSourceType.Store">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ImAddressDictionaryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImAddressDictionaryEntryType.Key">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ImAddressDictionaryEntryType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ImAddressKeyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImAddressKeyType.ImAddress1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImAddressKeyType.ImAddress2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImAddressKeyType.ImAddress3">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhysicalAddressIndexType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressIndexType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressIndexType.Business">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressIndexType.Home">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhysicalAddressIndexType.Other">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingCancellationMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.EndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.Recurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.CalendarItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingCancellationMessageType.EnhancedLocation">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.AssociatedCalendarItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsDelegated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsDelegatedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsOutOfDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsOutOfDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.HasBeenProcessed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.HasBeenProcessedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.ResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.ResponseTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.UID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.RecurrenceId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.RecurrenceIdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.DateTimeStamp">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.DateTimeStampSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsOrganizer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingMessageType.IsOrganizerSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.EndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.Recurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.CalendarItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.ProposedStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.ProposedStartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.ProposedEnd">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.ProposedEndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingResponseMessageType.EnhancedLocation">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingRequestMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingRequestTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IntendedFreeBusyStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IntendedFreeBusyStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EndSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.OriginalStart">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.OriginalStartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsAllDayEvent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsAllDayEventSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.LegacyFreeBusyStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.LegacyFreeBusyStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.When">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsMeeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsMeetingSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsCancelled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsCancelledSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsRecurring">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsRecurringSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingRequestWasSent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingRequestWasSentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.CalendarItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.CalendarItemTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MyResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MyResponseTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Organizer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.RequiredAttendees">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.OptionalAttendees">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Resources">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ConflictingMeetingCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ConflictingMeetingCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AdjacentMeetingCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AdjacentMeetingCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ConflictingMeetings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AdjacentMeetings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Duration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.TimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentReplyTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentReplyTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentSequenceNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentSequenceNumberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AppointmentStateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.Recurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.FirstOccurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.LastOccurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ModifiedOccurrences">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.DeletedOccurrences">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.StartTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EndTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ConferenceType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ConferenceTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AllowNewTimeProposal">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.AllowNewTimeProposalSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsOnlineMeeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.IsOnlineMeetingSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.MeetingWorkspaceUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.NetShowUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EnhancedLocation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.ChangeHighlights">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.StartWallClock">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.StartWallClockSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EndWallClock">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EndWallClockSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.StartTimeZoneId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingRequestMessageType.EndTimeZoneId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingRequestTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.FullUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.InformationalUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.NewMeetingRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.Outdated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.SilentUpdate">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingRequestTypeType.PrincipalWantsCopy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ChangeHighlightsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasLocationChanged">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasLocationChangedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasStartTimeChanged">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasStartTimeChangedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.Start">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.StartSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasEndTimeChanged">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.HasEndTimeChangedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.End">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeHighlightsType.EndSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.ConversationIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.ConversationTopic">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.From">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.InternetMessageId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.IsRead">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.IsReadSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.PostedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.PostedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.References">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostItemType.Sender">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TaskType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.ActualWork">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.ActualWorkSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.AssignedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.AssignedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.BillingInformation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.ChangeCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.ChangeCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Companies">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.CompleteDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.CompleteDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Contacts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.DelegationState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.DelegationStateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Delegator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.DueDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.DueDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsAssignmentEditable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsAssignmentEditableSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsComplete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsCompleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsRecurring">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsRecurringSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsTeamTask">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.IsTeamTaskSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Mileage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Owner">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.PercentComplete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.PercentCompleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Recurrence">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.StartDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.StartDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.Status">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.StatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.StatusDescription">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.TotalWork">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskType.TotalWorkSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TaskDelegateStateType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.NoMatch">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.OwnNew">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.Owned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.Accepted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.Declined">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskDelegateStateType.Max">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TaskRecurrenceType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskRecurrenceType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskRecurrenceType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TaskStatusType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskStatusType.NotStarted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskStatusType.InProgress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskStatusType.Completed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskStatusType.WaitingOnOthers">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TaskStatusType.Deferred">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ImportanceChoicesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImportanceChoicesType.Low">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImportanceChoicesType.Normal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ImportanceChoicesType.High">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InternetHeaderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InternetHeaderType.HeaderName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InternetHeaderType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AcceptSharingInvitationType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReferenceItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SuppressReadReceiptType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddItemToMyCalendarType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CancelCalendarItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SmartResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SmartResponseType.NewBodyContent">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SmartResponseBaseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ForwardItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReplyAllToItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReplyToItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeclineItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostReplyItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostReplyItemType.NewBodyContent">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostReplyItemBaseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProposeNewTimeType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TentativelyAcceptItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EffectiveRightsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.CreateAssociated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.CreateContents">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.CreateHierarchy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.Delete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.Modify">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.Read">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.ViewPrivateItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EffectiveRightsType.ViewPrivateItemsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FlagType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.FlagStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.StartDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.StartDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.DueDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.DueDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.CompleteDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FlagType.CompleteDateSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FlagStatusType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlagStatusType.NotFlagged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlagStatusType.Flagged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlagStatusType.Complete">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EntityExtractionResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.Addresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.MeetingSuggestions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.TaskSuggestions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.EmailAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.Contacts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.Urls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityExtractionResultType.PhoneNumbers">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddressEntityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddressEntityType.Address">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EntityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EntityType.Position">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailPositionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailPositionType.LatestReply">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailPositionType.Other">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailPositionType.Subject">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.EmailPositionType.Signature">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TaskSuggestionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskSuggestionType.TaskString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TaskSuggestionType.Assignees">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailUserType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailUserType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailUserType.UserId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneEntityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneEntityType.OriginalPhoneString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneEntityType.PhoneString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneEntityType.Type">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContactType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.PersonName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.BusinessName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.PhoneNumbers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.Urls">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.EmailAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.Addresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactType.ContactString">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneType.OriginalPhoneString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneType.PhoneString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneType.Type">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingSuggestionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.Attendees">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.MeetingString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.StartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.StartTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.EndTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MeetingSuggestionType.EndTimeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UrlEntityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UrlEntityType.Url">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddressEntityType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddressEntityType.EmailAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RetentionTagType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionTagType.IsExplicit">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RetentionTagType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.RightsManagedMessageDecryptionStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.RightsManagedMessageDecryptionStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.RmsTemplateId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.TemplateName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.TemplateDescription">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.EditAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.EditAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ReplyAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ReplyAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ReplyAllAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ReplyAllAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ForwardAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ForwardAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ModifyRecipientsAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ModifyRecipientsAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ExtractAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ExtractAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.PrintAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.PrintAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ExportAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ExportAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ProgrammaticAccessAllowed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ProgrammaticAccessAllowedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.IsOwner">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.IsOwnerSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ContentOwner">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RightsManagementLicenseDataType.ContentExpiryDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PredictedMessageActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedMessageActionType.None">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PredictedActionReasonType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ConversationStarterIsYou">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.OnlyRecipient">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ConversationContributions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.MarkedImportantBySender">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.SenderIsManager">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.SenderIsInManagementChain">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.SenderIsDirectReport">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ActionBasedOnSender">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.NameOnToLine">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.NameOnCcLine">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ManagerPosition">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ReplyToAMessageFromMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.PreviouslyFlagged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ActionBasedOnRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ActionBasedOnSubjectWords">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PredictedActionReasonType.ActionBasedOnBasedOnBodyWords">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IconIndexType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.Default">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.PostItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailRead">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailUnread">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailReplied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailForwarded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailEncrypted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailSmimeSigned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailEncryptedReplied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailSmimeSignedReplied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailEncryptedForwarded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailSmimeSignedForwarded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailEncryptedRead">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailSmimeSignedRead">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailIrm">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailIrmForwarded">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.MailIrmReplied">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.SmsSubmitted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.SmsRoutedToDeliveryPoint">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.SmsRoutedToExternalMessagingSystem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.SmsDelivered">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.OutlookDefaultForContacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentRecur">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeet">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetRecur">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetNY">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetYes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetNo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetMaybe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetCancel">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.AppointmentMeetInfo">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.TaskItem">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.TaskRecur">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.TaskOwned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IconIndexType.TaskDelegated">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistributionListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistributionListType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistributionListType.FileAs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistributionListType.ContactSource">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistributionListType.ContactSourceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistributionListType.Members">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MemberType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MemberType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MemberType.Status">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MemberType.StatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MemberType.Key">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MemberStatusType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MemberStatusType.Unrecognized">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MemberStatusType.Normal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MemberStatusType.Demoted">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsResponseMessageType.NonIndexableItemDetailsResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonIndexableItemDetailResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailResultType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailResultType.FailedMailboxes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonIndexableItemDetailType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.ErrorCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.ErrorDescription">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.IsPartiallyIndexed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.IsPermanentFailure">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.SortValue">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.AttemptCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.LastAttemptTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.LastAttemptTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemDetailType.AdditionalInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemIndexErrorType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.GenericError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.Timeout">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.StaleEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.MailboxOffline">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.AttachmentLimitReached">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.MarsWriterTruncation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemIndexErrorType.DocumentParserFailure">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FailedSearchMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FailedSearchMailboxType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FailedSearchMailboxType.ErrorCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FailedSearchMailboxType.ErrorMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FailedSearchMailboxType.IsArchive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsResponseMessageType.NonIndexableItemStatistics">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonIndexableItemStatisticType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemStatisticType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemStatisticType.ItemCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonIndexableItemStatisticType.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetHoldOnMailboxesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesResponseMessageType.MailboxHoldResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxHoldResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldResultType.HoldId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldResultType.Query">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldResultType.MailboxHoldStatuses">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxHoldStatusType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldStatusType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldStatusType.Status">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxHoldStatusType.AdditionalInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.HoldStatusType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldStatusType.NotOnHold">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldStatusType.Pending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldStatusType.OnHold">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldStatusType.PartialHold">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldStatusType.Failed">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetHoldOnMailboxesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetHoldOnMailboxesResponseMessageType.MailboxHoldResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationResponseMessageType.DiscoverySearchConfigurations">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.SearchId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.SearchQuery">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.SearchableMailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.InPlaceHoldIdentity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.ManagedByOrganization">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DiscoverySearchConfigurationType.Language">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchableMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.Guid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.PrimarySmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.IsExternalMailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.ExternalEmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.IsMembershipGroup">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchableMailboxType.ReferenceId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResponseMessageType.SearchMailboxesResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.SearchQueries">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.ResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.ItemCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.Size">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.PageItemCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.PageItemSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.KeywordStats">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.FailedMailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.Refiners">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesResultType.MailboxStats">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxQueryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxQueryType.Query">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxQueryType.MailboxSearchScopes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxSearchScopeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxSearchScopeType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxSearchScopeType.SearchScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxSearchScopeType.ExtendedAttributes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxSearchLocationType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxSearchLocationType.PrimaryOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxSearchLocationType.ArchiveOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailboxSearchLocationType.All">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExtendedAttributeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedAttributeType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExtendedAttributeType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchResultType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchResultType.StatisticsOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchResultType.PreviewOnly">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.KeywordStatisticsSearchResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.KeywordStatisticsSearchResultType.Keyword">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.KeywordStatisticsSearchResultType.ItemHits">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.KeywordStatisticsSearchResultType.Size">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchPreviewItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ParentId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ItemClass">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.UniqueHash">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.SortValue">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.OwaLink">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Sender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.CcRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.BccRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.CreatedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.CreatedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ReceivedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ReceivedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.SentTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.SentTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Size">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Preview">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Importance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.Read">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ReadSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.HasAttachment">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.HasAttachmentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchPreviewItemType.ExtendedProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PreviewItemMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PreviewItemMailboxType.MailboxId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PreviewItemMailboxType.PrimarySmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchRefinerItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchRefinerItemType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchRefinerItemType.Value">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchRefinerItemType.Count">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchRefinerItemType.Token">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxStatisticsItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsItemType.MailboxId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsItemType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsItemType.ItemCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsItemType.Size">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSearchableMailboxesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesResponseMessageType.SearchableMailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesResponseMessageType.FailedMailboxes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsResponseMessageType.MailboxStatisticsSearchResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxStatisticsSearchResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsSearchResultType.UserMailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxStatisticsSearchResultType.KeywordStatisticsSearchResult">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserMailboxType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserMailboxType.IsArchive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateInboxRulesResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesResponseType.RuleOperationErrors">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleOperationErrorType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleOperationErrorType.OperationIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleOperationErrorType.ValidationErrors">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleValidationErrorType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleValidationErrorType.FieldURI">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleValidationErrorType.ErrorCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleValidationErrorType.ErrorMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleValidationErrorType.FieldValue">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleFieldURIType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.RuleId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.DisplayName">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.Priority">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.IsNotSupported">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.Actions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsBodyStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsHeaderStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsRecipientStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsSenderStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsSubjectOrBodyStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionContainsSubjectStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionFlaggedForAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionFromAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionFromConnectedAccounts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionHasAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsApprovalRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsAutomaticForward">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsAutomaticReply">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsEncrypted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsMeetingRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsMeetingResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsNDR">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsPermissionControlled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsReadReceipt">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsSigned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionIsVoicemail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionItemClasses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionMessageClassifications">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionNotSentToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSentCcMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSentOnlyToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSentToAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSentToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSentToOrCcMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionSensitivity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionWithinDateRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ConditionWithinSizeRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsBodyStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsHeaderStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsRecipientStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsSenderStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsSubjectOrBodyStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionContainsSubjectStrings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionFlaggedForAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionFromAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionFromConnectedAccounts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionHasAttachments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsApprovalRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsAutomaticForward">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsAutomaticReply">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsEncrypted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsMeetingRequest">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsMeetingResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsNDR">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsPermissionControlled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsReadReceipt">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsSigned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionIsVoicemail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionItemClasses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionMessageClassifications">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionNotSentToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSentCcMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSentOnlyToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSentToAddresses">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSentToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSentToOrCcMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionSensitivity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionWithinDateRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ExceptionWithinSizeRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionAssignCategories">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionCopyToFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionForwardAsAttachmentToRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionForwardToRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionMarkImportance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionMarkAsRead">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionMoveToFolder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionPermanentDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionRedirectToRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionSendSMSAlertToRecipients">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionServerReplyWithMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.ActionStopProcessingRules">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.IsEnabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.IsInError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.Conditions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleFieldURIType.Exceptions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.ADOperationFailure">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.ConnectedAccountNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.CreateWithRuleId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.EmptyValueFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.DuplicatedPriority">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.DuplicatedOperationOnTheSameRule">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.FolderDoesNotExist">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.InvalidAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.InvalidDateRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.InvalidFolderId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.InvalidSizeRange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.InvalidValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.MessageClassificationNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.MissingAction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.MissingParameter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.MissingRangeValue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.NotSettable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.RecipientDoesNotExist">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.RuleNotFound">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.SizeLessThanZero">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.StringValueTooBig">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.UnsupportedAddress">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.UnexpectedError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RuleValidationErrorCodeType.UnsupportedRule">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetInboxRulesResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetInboxRulesResponseType.OutlookRuleBlobExists">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetInboxRulesResponseType.OutlookRuleBlobExistsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetInboxRulesResponseType.InboxRules">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.RuleId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.Priority">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.IsEnabled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.IsNotSupported">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.IsNotSupportedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.IsInError">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.IsInErrorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.Conditions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.Exceptions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleType.Actions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RulePredicatesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.Categories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsBodyStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsHeaderStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsRecipientStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsSenderStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsSubjectOrBodyStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ContainsSubjectStrings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.FlaggedForAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.FlaggedForActionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.FromAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.FromConnectedAccounts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.HasAttachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.HasAttachmentsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.Importance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsApprovalRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsApprovalRequestSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsAutomaticForward">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsAutomaticForwardSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsAutomaticReply">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsAutomaticReplySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsEncrypted">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsEncryptedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsMeetingRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsMeetingRequestSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsMeetingResponse">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsMeetingResponseSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsNDR">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsNDRSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsPermissionControlled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsPermissionControlledSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsReadReceipt">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsReadReceiptSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsSigned">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsSignedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsVoicemail">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.IsVoicemailSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.ItemClasses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.MessageClassifications">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.NotSentToMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.NotSentToMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentCcMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentCcMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentOnlyToMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentOnlyToMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentToAddresses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentToMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentToMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentToOrCcMe">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SentToOrCcMeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.Sensitivity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.SensitivitySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.WithinDateRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicatesType.WithinSizeRange">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FlaggedForActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Any">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Call">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.DoNotForward">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.FollowUp">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.FYI">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Forward">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.NoResponseNecessary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Read">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Reply">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.ReplyToAll">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FlaggedForActionType.Review">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RulePredicateDateRangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateDateRangeType.StartDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateDateRangeType.StartDateTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateDateRangeType.EndDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateDateRangeType.EndDateTimeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RulePredicateSizeRangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateSizeRangeType.MinimumSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateSizeRangeType.MinimumSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateSizeRangeType.MaximumSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RulePredicateSizeRangeType.MaximumSizeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleActionsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.AssignCategories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.CopyToFolder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.Delete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.DeleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.ForwardAsAttachmentToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.ForwardToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.MarkImportance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.MarkImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.MarkAsRead">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.MarkAsReadSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.MoveToFolder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.PermanentDelete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.PermanentDeleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.RedirectToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.SendSMSAlertToRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.ServerReplyWithMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.StopProcessingRules">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RuleActionsType.StopProcessingRulesSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TargetFolderIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TargetFolderIdType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationNameType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationNameType.Name">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMessageTrackingReportResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportResponseMessageType.MessageTrackingReport">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportResponseMessageType.Diagnostics">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportResponseMessageType.Errors">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportResponseMessageType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MessageTrackingReportType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.Sender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.PurportedSender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.SubmitTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.SubmitTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.OriginalRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.RecipientTrackingEvents">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MessageTrackingReportType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecipientTrackingEventType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.Date">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.Recipient">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.DeliveryStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.EventDescription">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.EventData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.Server">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.InternalId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.BccRecipient">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.BccRecipientSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.HiddenRecipient">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.HiddenRecipientSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.UniquePathId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.RootAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecipientTrackingEventType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TrackingPropertyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TrackingPropertyType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TrackingPropertyType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfTrackingPropertiesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfTrackingPropertiesType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType.Diagnostics">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType.MessageTrackingSearchResults">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType.ExecutedSearchScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType.Errors">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportResponseMessageType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.Sender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.PurportedSender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.Recipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.SubmittedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.MessageTrackingReportId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.PreviousHopServer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.FirstHopServer">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingSearchResultType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ServiceConfigurationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServiceConfigurationResponseMessageType.MailTipsConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServiceConfigurationResponseMessageType.UnifiedMessagingConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServiceConfigurationResponseMessageType.ProtectionRulesConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServiceConfigurationResponseMessageType.PolicyNudgeRulesConfiguration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.MailTipsEnabled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.MaxRecipientsPerGetMailTipsRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.MaxMessageSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.LargeAudienceThreshold">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.ShowExternalRecipientCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.InternalDomains">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.PolicyTipsEnabled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsServiceConfiguration.LargeAudienceCap">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SmtpDomain">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SmtpDomain.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SmtpDomain.IncludeSubdomains">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SmtpDomain.IncludeSubdomainsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ServiceConfiguration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRulesServiceConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRulesServiceConfiguration.Rules">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRulesServiceConfiguration.InternalDomains">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRulesServiceConfiguration.RefreshInterval">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleType.Condition">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleType.Action">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleType.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleType.UserOverridable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleType.Priority">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleConditionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleConditionType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleConditionType.ItemElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleAndType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleAndType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleAndType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleRecipientIsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleRecipientIsType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleSenderDepartmentsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleSenderDepartmentsType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemsChoiceType3">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType3.AllInternal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType3.And">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType3.RecipientIs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType3.SenderDepartments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType3.True">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemChoiceType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemChoiceType.AllInternal">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemChoiceType.And">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemChoiceType.RecipientIs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemChoiceType.SenderDepartments">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemChoiceType.True">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleActionType.Argument">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleActionType.Name">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleArgumentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ProtectionRuleArgumentType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ProtectionRuleActionKindType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ProtectionRuleActionKindType.RightsProtectMessage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnifiedMessageServiceConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnifiedMessageServiceConfiguration.UmEnabled">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnifiedMessageServiceConfiguration.PlayOnPhoneDialString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnifiedMessageServiceConfiguration.PlayOnPhoneEnabled">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PolicyNudgeRulesServiceConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PolicyNudgeRulesServiceConfiguration.Any">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServiceConfigurationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServiceConfigurationResponseMessageType.ResponseMessages">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PerformReminderActionResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PerformReminderActionResponseMessageType.UpdatedItemIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRemindersResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersResponseMessageType.Reminders">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReminderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.ReminderTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.StartDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.EndDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.RecurringMasterItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.ReminderGroup">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.ReminderGroupSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderType.UID">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReminderGroupType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ReminderGroupType.Calendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ReminderGroupType.Task">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRoomsResponseMessageType.Rooms">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RoomType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DirectoryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DirectoryEntryType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomListsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRoomListsResponseMessageType.RoomLists">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnpinTeamMailboxResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetTeamMailboxResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserConfigurationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserConfigurationResponseMessageType.UserConfiguration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationType.UserConfigurationName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationType.Dictionary">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationType.XmlData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationType.BinaryData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationDictionaryEntryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationDictionaryEntryType.DictionaryKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationDictionaryEntryType.DictionaryValue">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectType.Type">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.DateTime">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.Boolean">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.Byte">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.String">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.Integer32">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.UnsignedInteger32">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.Integer64">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.UnsignedInteger64">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.StringArray">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationDictionaryObjectTypesType.ByteArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingFolderResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderResponseMessageType.SharingFolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RefreshSharingFolderResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingMetadataResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataResponseMessageType.EncryptedSharedFolderDataCollection">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataResponseMessageType.InvalidRecipients">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EncryptedSharedFolderDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptedSharedFolderDataType.Token">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EncryptedSharedFolderDataType.Data">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InvalidRecipientType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InvalidRecipientType.SmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InvalidRecipientType.ResponseCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InvalidRecipientType.MessageText">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType.OtherError">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType.RecipientOrganizationNotFederated">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType.CannotObtainTokenFromSTS">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType.SystemPolicyBlocksSharingWithThisRecipient">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.InvalidRecipientResponseCodeType.RecipientOrganizationFederatedWithUnknownTokenIssuer">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseDelegateResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseDelegateResponseMessageType.ResponseMessages">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DelegateUserResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserResponseMessageType.DelegateUser">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DelegateUserType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.UserId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.DelegatePermissions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.ReceiveCopiesOfMeetingMessages">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.ReceiveCopiesOfMeetingMessagesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.ViewPrivateItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegateUserType.ViewPrivateItemsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.SID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.PrimarySmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.DistinguishedUser">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.DistinguishedUserSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserIdType.ExternalUserIdentity">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistinguishedUserType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedUserType.Default">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DistinguishedUserType.Anonymous">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DelegatePermissionsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.CalendarFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.CalendarFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.TasksFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.TasksFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.InboxFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.InboxFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.ContactsFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.ContactsFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.NotesFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.NotesFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.JournalFolderPermissionLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DelegatePermissionsType.JournalFolderPermissionLevelSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType.Editor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType.Reviewer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType.Author">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DelegateFolderPermissionLevelType.Custom">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateDelegateResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDelegateResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDelegateResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDelegateResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDelegateResponseMessageType.DeliverMeetingRequests">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDelegateResponseMessageType.DeliverMeetingRequestsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeliverMeetingRequestsType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DeliverMeetingRequestsType.DelegatesOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DeliverMeetingRequestsType.DelegatesAndMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DeliverMeetingRequestsType.DelegatesAndSendInformationToMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DeliverMeetingRequestsType.NoForward">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConvertIdResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConvertIdResponseMessageType.AlternateId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AlternateIdBaseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternateIdBaseType.Format">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IdFormatType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.EwsLegacyId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.EwsId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.EntryId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.HexEntryId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.StoreId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IdFormatType.OwaId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AlternatePublicFolderIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternatePublicFolderIdType.FolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AlternatePublicFolderItemIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternatePublicFolderItemIdType.ItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AlternateIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternateIdType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternateIdType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternateIdType.IsArchive">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AlternateIdType.IsArchiveSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsResponseMessageType.SyncState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsResponseMessageType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsResponseMessageType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsResponseMessageType.Changes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsChangesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsChangesType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsChangesType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsCreateOrUpdateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsCreateOrUpdateType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsDeleteType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsDeleteType.ItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsReadFlagType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsReadFlagType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsReadFlagType.IsRead">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemsChoiceType2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType2.Create">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType2.Delete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType2.ReadFlagChange">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType2.Update">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseMessageType.SyncState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseMessageType.IncludesLastFolderInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseMessageType.IncludesLastFolderInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseMessageType.Changes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyChangesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyChangesType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyChangesType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyCreateOrUpdateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyCreateOrUpdateType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarFolderType.SharingEffectiveRights">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarFolderType.SharingEffectiveRightsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarFolderType.PermissionSet">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarPermissionReadAccessType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionReadAccessType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionReadAccessType.TimeOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionReadAccessType.TimeAndSubjectAndLocation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionReadAccessType.FullDetails">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarPermissionSetType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarPermissionSetType.CalendarPermissions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarPermissionSetType.UnknownEntries">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarPermissionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarPermissionType.ReadItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarPermissionType.ReadItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarPermissionType.CalendarPermissionLevel">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarPermissionLevelType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Owner">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.PublishingEditor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Editor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.PublishingAuthor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Author">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.NoneditingAuthor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Reviewer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Contributor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.FreeBusyTimeOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.FreeBusyTimeAndSubjectAndLocation">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarPermissionLevelType.Custom">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BasePermissionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.UserId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.CanCreateItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.CanCreateItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.CanCreateSubFolders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.CanCreateSubFoldersSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderOwner">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderOwnerSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderVisible">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderVisibleSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderContact">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.IsFolderContactSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.EditItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.EditItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.DeleteItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePermissionType.DeleteItemsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PermissionActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionActionType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionActionType.Owned">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionActionType.All">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PermissionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PermissionType.ReadItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PermissionType.ReadItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PermissionType.PermissionLevel">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PermissionReadAccessType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionReadAccessType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionReadAccessType.FullDetails">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PermissionLevelType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Owner">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.PublishingEditor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Editor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.PublishingAuthor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Author">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.NoneditingAuthor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Reviewer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Contributor">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PermissionLevelType.Custom">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.FolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.FolderClass">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.TotalCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.TotalCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ChildFolderCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ChildFolderCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ExtendedProperty">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ManagedFolderInformation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.EffectiveRights">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.DistinguishedFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.DistinguishedFolderIdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.PolicyTag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseFolderType.ArchiveTag">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ManagedFolderInformationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.CanDelete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.CanDeleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.CanRenameOrMove">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.CanRenameOrMoveSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.MustDisplayComment">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.MustDisplayCommentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.HasQuota">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.HasQuotaSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.IsManagedFoldersRoot">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.IsManagedFoldersRootSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.ManagedFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.Comment">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.StorageQuota">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.StorageQuotaSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.FolderSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.FolderSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagedFolderInformationType.HomePage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContactsFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactsFolderType.SharingEffectiveRights">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactsFolderType.SharingEffectiveRightsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactsFolderType.PermissionSet">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PermissionSetType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PermissionSetType.Permissions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PermissionSetType.UnknownEntries">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderType.PermissionSet">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderType.UnreadCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderType.UnreadCountSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TasksFolderType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchFolderType.SearchParameters">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchParametersType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchParametersType.Restriction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchParametersType.BaseFolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchParametersType.Traversal">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchParametersType.TraversalSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RestrictionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RestrictionType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AndType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MultipleOperandBooleanExpressionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MultipleOperandBooleanExpressionType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContainsExpressionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.Constant">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.ContainmentMode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.ContainmentModeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.ContainmentComparison">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContainsExpressionType.ContainmentComparisonSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConstantValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConstantValueType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContainmentModeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentModeType.FullString">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentModeType.Prefixed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentModeType.Substring">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentModeType.PrefixOnWords">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentModeType.ExactPhrase">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContainmentComparisonType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.Exact">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.IgnoreCase">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.IgnoreNonSpacingCharacters">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.Loose">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.IgnoreCaseAndNonSpacingCharacters">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.LooseAndIgnoreCase">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.LooseAndIgnoreNonSpace">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ContainmentComparisonType.LooseAndIgnoreCaseAndIgnoreNonSpace">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchExpressionType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NotType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExcludesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExcludesType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExcludesType.Bitmask">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExcludesValueType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExcludesValueType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExistsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExistsType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsEqualToType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TwoOperandExpressionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TwoOperandExpressionType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TwoOperandExpressionType.FieldURIOrConstant">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FieldURIOrConstantType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FieldURIOrConstantType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsLessThanOrEqualToType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsLessThanType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsGreaterThanOrEqualToType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsGreaterThanType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IsNotEqualToType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OrType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchFolderTraversalType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchFolderTraversalType.Shallow">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchFolderTraversalType.Deep">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyDeleteType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyDeleteType.FolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemsChoiceType1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType1.Create">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType1.Delete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType1.Update">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendNotificationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SendNotificationResponseMessageType.Notification">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NotificationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.SubscriptionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.PreviousWatermark">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.MoreEvents">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.MoreEventsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NotificationType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MovedCopiedEventType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MovedCopiedEventType.Item1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MovedCopiedEventType.OldParentFolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseObjectChangedEventType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseObjectChangedEventType.TimeStamp">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseObjectChangedEventType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseObjectChangedEventType.ParentFolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseNotificationEventType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseNotificationEventType.Watermark">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ModifiedEventType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ModifiedEventType.UnreadCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ModifiedEventType.UnreadCountSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.CopiedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.CreatedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.DeletedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.FreeBusyChangedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.ModifiedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.MovedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.NewMailEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType.StatusEvent">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetStreamingEventsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsResponseMessageType.Notifications">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsResponseMessageType.ErrorSubscriptionIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsResponseMessageType.ConnectionStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsResponseMessageType.ConnectionStatusSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConnectionStatusType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionStatusType.OK">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionStatusType.Closed">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEventsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetEventsResponseMessageType.Notification">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SubscribeResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SubscribeResponseMessageType.SubscriptionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SubscribeResponseMessageType.Watermark">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServerTimeZonesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServerTimeZonesResponseMessageType.TimeZoneDefinitions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfTimeZoneDefinitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfTimeZoneDefinitionType.TimeZoneDefinition">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.DLExpansion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.IndexedPagingOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.IndexedPagingOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.NumeratorOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.NumeratorOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.AbsoluteDenominator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.AbsoluteDenominatorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.TotalItemsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLResponseMessageType.TotalItemsInViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.IndexedPagingOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.IndexedPagingOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.NumeratorOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.NumeratorOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.AbsoluteDenominator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.AbsoluteDenominatorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.TotalItemsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfDLExpansionType.TotalItemsInViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPromptResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptResponseMessageType.AudioData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPromptNamesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptNamesResponseMessageType.PromptNames">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUMPromptResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUMPromptsResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisconnectPhoneCallResponseMessageType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPhoneCallInformationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPhoneCallInformationResponseMessageType.PhoneCallInformation">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneCallInformationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallInformationType.PhoneCallState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallInformationType.ConnectionFailureCause">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallInformationType.SIPResponseText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallInformationType.SIPResponseCode">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallInformationType.SIPResponseCodeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneCallStateType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Idle">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Connecting">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Alerted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Connected">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Disconnected">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Incoming">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Transferring">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PhoneCallStateType.Forwarding">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConnectionFailureCauseType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionFailureCauseType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionFailureCauseType.UserBusy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionFailureCauseType.NoAnswer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionFailureCauseType.Unavailable">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConnectionFailureCauseType.Other">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PlayOnPhoneResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PlayOnPhoneResponseMessageType.PhoneCallId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PhoneCallIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PhoneCallIdType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailTipsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTipsResponseMessageType.MailTips">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailTips">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.RecipientAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.PendingMailTips">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.OutOfOffice">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.MailboxFull">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.MailboxFullSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.CustomMailTip">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.TotalMemberCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.TotalMemberCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.ExternalMemberCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.ExternalMemberCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.MaxMessageSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.MaxMessageSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.DeliveryRestricted">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.DeliveryRestrictedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.IsModerated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.IsModeratedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.InvalidRecipient">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.InvalidRecipientSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.Scope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailTips.ScopeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailTipTypes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.All">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.OutOfOfficeMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.MailboxFullStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.CustomMailTip">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.ExternalMemberCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.TotalMemberCount">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.MaxMessageSize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.DeliveryRestriction">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.ModerationStatus">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.InvalidRecipient">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MailTipTypes.Scope">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OutOfOfficeMailTip">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OutOfOfficeMailTip.ReplyBody">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.OutOfOfficeMailTip.Duration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReplyBody">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReplyBody.Message">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReplyBody.lang">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.Duration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Duration.StartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Duration.EndTime">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMailTipsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMailTipsResponseMessageType.ResponseMessages">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPasswordExpirationDateResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPasswordExpirationDateResponseMessageType.PasswordExpirationDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesResponseMessageType.ResolutionSet">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfResolutionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.Resolution">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.IndexedPagingOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.IndexedPagingOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.NumeratorOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.NumeratorOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.AbsoluteDenominator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.AbsoluteDenominatorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.TotalItemsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResolutionType.TotalItemsInViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolutionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolutionType.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolutionType.Contact">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientAccessTokenResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientAccessTokenResponseMessageType.Token">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientAccessTokenType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenType.TokenType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenType.TokenValue">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenType.TTL">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientAccessTokenTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientAccessTokenTypeType.CallerIdentity">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientAccessTokenTypeType.ExtensionCallback">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ClientAccessTokenTypeType.ScopedToken">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemResponseMessageType.RootFolder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemResponseMessageType.HighlightTerms">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemParentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.IndexedPagingOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.IndexedPagingOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.NumeratorOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.NumeratorOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.AbsoluteDenominator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.AbsoluteDenominatorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.TotalItemsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemParentType.TotalItemsInViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfGroupedItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfGroupedItemsType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupedItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupedItemsType.GroupIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupedItemsType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfRealItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfRealItemsType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.HighlightTermType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.HighlightTermType.Scope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.HighlightTermType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFederatedDirectoryUserResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryUserResponseMessageType.Groups">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryUserResponseMessageType.PhotoUrl">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.Alias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.CalendarUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.ExternalDirectoryObjectId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.GroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.GroupTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.InboxUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.IsMember">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.IsMemberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.IsPinned">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.IsPinnedSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.JoinDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.JoinDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.LegacyDn">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.PeopleUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.PhotoUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryGroupType.SmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FederatedDirectoryGroupTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FederatedDirectoryGroupTypeType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FederatedDirectoryGroupTypeType.Private">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FederatedDirectoryGroupTypeType.Secret">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FederatedDirectoryGroupTypeType.Public">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPersonaResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPersonaResponseMessageType.Persona">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.People">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.TotalNumberOfPeopleInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.TotalNumberOfPeopleInViewSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.FirstMatchingRowIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.FirstMatchingRowIndexSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.FirstLoadedRowIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleResponseMessageType.FirstLoadedRowIndexSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindConversationResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.Conversations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.HighlightTerms">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.TotalConversationsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.TotalConversationsInViewSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.IndexedOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationResponseMessageType.IndexedOffsetSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.ConversationId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.ConversationTopic">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.UniqueRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalUniqueRecipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.UniqueUnreadSenders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalUniqueUnreadSenders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.UniqueSenders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalUniqueSenders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.LastDeliveryTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.LastDeliveryTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalLastDeliveryTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalLastDeliveryTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.Categories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalCategories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.FlagStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.FlagStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalFlagStatus">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalFlagStatusSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.HasAttachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.HasAttachmentsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalHasAttachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalHasAttachmentsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.MessageCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.MessageCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalMessageCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalMessageCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.UnreadCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.UnreadCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalUnreadCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalUnreadCountSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.Size">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.SizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.ItemClasses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalItemClasses">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.Importance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.ImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalImportance">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalImportanceSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.ItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.LastModifiedTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.LastModifiedTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.InstanceKey">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.Preview">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.NextPredictedAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.NextPredictedActionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GroupingAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GroupingActionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.MailboxScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.MailboxScopeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.IconIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.IconIndexSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalIconIndex">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalIconIndexSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.DraftItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.HasIrm">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.HasIrmSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalHasIrm">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationType.GlobalHasIrmSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteAttachmentResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteAttachmentResponseMessageType.RootItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttachmentInfoResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentInfoResponseMessageType.Attachments">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemInfoResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemInfoResponseMessageType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsResponseMessageType.Attachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsResponseMessageType.ConflictResults">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConflictResultsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConflictResultsType.Count">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemResponseMessageType.ConflictResults">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderResponseMessageType.RootFolder">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderParentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.Folders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.IndexedPagingOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.IndexedPagingOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.NumeratorOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.NumeratorOffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.AbsoluteDenominator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.AbsoluteDenominatorSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.IncludesLastItemInRange">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.IncludesLastItemInRangeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.TotalItemsInView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderParentType.TotalItemsInViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderInfoResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderInfoResponseMessageType.Folders">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExportItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExportItemsResponseMessageType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExportItemsResponseMessageType.Data">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemsResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemsResponseMessageType.ItemId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserOofSettingsResponse">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsResponse.ResponseMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsResponse.OofSettings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsResponse.AllowExternalOof">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsResponse.AllowExternalOofSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserOofSettings">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserOofSettings.OofState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserOofSettings.ExternalAudience">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserOofSettings.Duration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserOofSettings.InternalReply">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UserOofSettings.ExternalReply">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.OofState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OofState.Disabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OofState.Enabled">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.OofState.Scheduled">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExternalAudience">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExternalAudience.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExternalAudience.Known">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExternalAudience.All">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttendeeConflictData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupAttendeeConflictData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupAttendeeConflictData.NumberOfMembers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupAttendeeConflictData.NumberOfMembersAvailable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupAttendeeConflictData.NumberOfMembersWithConflict">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupAttendeeConflictData.NumberOfMembersWithNoData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IndividualAttendeeConflictData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.IndividualAttendeeConflictData.BusyType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TooBigGroupAttendeeConflictData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnknownAttendeeConflictData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.Suggestion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Suggestion.MeetingTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Suggestion.IsWorkTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Suggestion.SuggestionQuality">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.Suggestion.AttendeeConflictDataArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SuggestionQuality">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SuggestionQuality.Excellent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SuggestionQuality.Good">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SuggestionQuality.Fair">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SuggestionQuality.Poor">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SuggestionDayResult">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionDayResult.Date">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionDayResult.DayQuality">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionDayResult.SuggestionArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SuggestionsResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsResponseType.ResponseMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsResponseType.SuggestionDayResultArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.WorkingPeriod">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WorkingPeriod.DayOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WorkingPeriod.StartTimeInMinutes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WorkingPeriod.EndTimeInMinutes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.WorkingHours">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WorkingHours.TimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.WorkingHours.WorkingPeriodArray">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SerializableTimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZone.Bias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZone.StandardTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZone.DaylightTime">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SerializableTimeZoneTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.Bias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.Time">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.DayOrder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.Month">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.DayOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SerializableTimeZoneTime.Year">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarEventDetails">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.ID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.Location">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.IsMeeting">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.IsRecurring">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.IsException">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.IsReminderSet">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEventDetails.IsPrivate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarEvent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEvent.StartTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEvent.EndTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEvent.BusyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarEvent.CalendarEventDetails">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FreeBusyView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyView.FreeBusyViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyView.MergedFreeBusy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyView.CalendarEventArray">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyView.WorkingHours">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FreeBusyViewType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.MergedOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.FreeBusy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.FreeBusyMerged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.Detailed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FreeBusyViewType.DetailedMerged">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FreeBusyResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyResponseType.ResponseMessage">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyResponseType.FreeBusyView">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserAvailabilityResponseType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityResponseType.FreeBusyResponseArray">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityResponseType.SuggestionsResponse">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FederatedDirectoryIdentityDetailsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FederatedDirectoryIdentityDetailsType.ExternalDirectoryObjectId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfResponseMessagesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResponseMessagesType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfResponseMessagesType.ItemsElementName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemsChoiceType4">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ApplyConversationActionResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ArchiveItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ConvertIdResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CopyFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CopyItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateAttachmentResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateFolderPathResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateManagedFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.CreateUserConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.DeleteAttachmentResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.DeleteFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.DeleteItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.DeleteUserConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.EmptyFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ExpandDLResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ExportItemsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.FindFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.FindItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.FindMailboxStatisticsByKeywordsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.FindPeopleResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetAppManifestsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetAttachmentResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetClientAccessTokenResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetClientExtensionResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetConversationItemsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetDiscoverySearchConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetEncryptionConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetEventsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetHoldOnMailboxesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetNonIndexableItemDetailsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetNonIndexableItemStatisticsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetPasswordExpirationDateResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetPersonaResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetRemindersResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetRoomListsResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetRoomsResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetSearchableMailboxesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetServerTimeZonesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetSharingFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetSharingMetadataResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetStreamingEventsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetUserConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetUserPhotoResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.GetUserRetentionPolicyTagsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.MarkAllItemsAsReadResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.MarkAsJunkResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.MoveFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.MoveItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.PerformReminderActionResponse">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.PostModernGroupItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.RefreshSharingFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.ResolveNamesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SearchMailboxesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SendItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SendNotificationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SetClientExtensionResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SetEncryptionConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SetHoldOnMailboxesResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SubscribeResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SyncFolderHierarchyResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.SyncFolderItemsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UnsubscribeResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateFolderResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateGroupMailboxResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateItemInRecoverableItemsResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateItemResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateMailboxAssociationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UpdateUserConfigurationResponseMessage">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemsChoiceType4.UploadItemsResponseMessage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseResponseMessageType.ResponseMessages">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserPhotoResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAsJunkResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetClientExtensionResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetConversationItemsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAllItemsAsReadResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateUserConfigurationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserConfigurationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUserConfigurationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUserConfigurationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConvertIdResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendNotificationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetStreamingEventsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEventsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnsubscribeResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SubscribeResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateManagedFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServerTimeZonesResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExpandDLResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientAccessTokenResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArchiveItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAttachmentResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteAttachmentResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateAttachmentResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupResponseMessageType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupResponseMessageType.Members">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupResponseMessageType.Owners">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateGroupMailboxResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateMailboxAssociationResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ApplyConversationActionResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostModernGroupItemResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderPathResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmptyFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExportItemsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemsResponseType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseCalendarItemStateDefinitionType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.LocationBasedStateDefinitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.LocationBasedStateDefinitionType.OrganizerLocation">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.LocationBasedStateDefinitionType.AttendeeLocation">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFromFolderStateDefinitionType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeletedOccurrenceStateDefinitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeletedOccurrenceStateDefinitionType.OccurrenceDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeletedOccurrenceStateDefinitionType.IsOccurrencePresent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeletedOccurrenceStateDefinitionType.IsOccurrencePresentSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NonEmptyStateDefinitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.NonEmptyStateDefinitionType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetClientExtensionActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetClientExtensionActionType.ClientExtension">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetClientExtensionActionType.ActionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetClientExtensionActionType.ExtensionId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetClientExtensionActionIdType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SetClientExtensionActionIdType.Install">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SetClientExtensionActionIdType.Uninstall">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SetClientExtensionActionIdType.Configure">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType.UserEnabledExtensions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType.UserDisabledExtensions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType.UserId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType.EnabledOnly">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionUserParametersType.EnabledOnlySpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationRequestType.ConversationId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationRequestType.SyncState">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PreviewItemResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PreviewItemResponseShapeType.BaseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PreviewItemResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PreviewItemBaseShapeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PreviewItemBaseShapeType.Default">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.PreviewItemBaseShapeType.Compact">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RuleOperationType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteRuleOperationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteRuleOperationType.RuleId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetRuleOperationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetRuleOperationType.Rule">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateRuleOperationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateRuleOperationType.Rule">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConfigurationRequestDetailsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConfigurationRequestDetailsType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReminderItemActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderItemActionType.ActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderItemActionType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ReminderItemActionType.NewReminderTime">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ReminderActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ReminderActionType.Dismiss">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ReminderActionType.Snooze">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.GoodThreshold">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.GoodThresholdSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MaximumResultsByDay">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MaximumResultsByDaySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MaximumNonWorkHourResultsByDay">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MaximumNonWorkHourResultsByDaySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MeetingDurationInMinutes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MeetingDurationInMinutesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MinimumSuggestionQuality">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.MinimumSuggestionQualitySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.DetailedSuggestionsWindow">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.CurrentMeetingTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.CurrentMeetingTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SuggestionsViewOptionsType.GlobalObjectId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType.TimeWindow">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType.MergedFreeBusyIntervalInMinutes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType.MergedFreeBusyIntervalInMinutesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType.RequestedView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FreeBusyViewOptionsType.RequestedViewSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddress.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddress.Address">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmailAddress.RoutingType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxData.Email">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxData.AttendeeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxData.ExcludeConflicts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxData.ExcludeConflictsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MeetingAttendeeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingAttendeeType.Organizer">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingAttendeeType.Required">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingAttendeeType.Optional">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingAttendeeType.Room">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MeetingAttendeeType.Resource">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StreamingSubscriptionRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StreamingSubscriptionRequestType.FolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StreamingSubscriptionRequestType.EventTypes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StreamingSubscriptionRequestType.SubscribeToAllFolders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StreamingSubscriptionRequestType.SubscribeToAllFoldersSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.NotificationEventTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.CopiedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.CreatedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.DeletedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.ModifiedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.MovedEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.NewMailEvent">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.NotificationEventTypeType.FreeBusyChangedEvent">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType.FolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType.EventTypes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType.Watermark">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType.SubscribeToAllFolders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseSubscriptionRequestType.SubscribeToAllFoldersSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PullSubscriptionRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PullSubscriptionRequestType.Timeout">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PushSubscriptionRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PushSubscriptionRequestType.StatusFrequency">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PushSubscriptionRequestType.URL">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PushSubscriptionRequestType.CallerData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ClientAccessTokenRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenRequestType.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenRequestType.TokenType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ClientAccessTokenRequestType.Scope">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AttachmentResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.IncludeMimeContent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.IncludeMimeContentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.BodyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.BodyTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.FilterHtmlContent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.FilterHtmlContentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AttachmentResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BodyTypeResponseType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.BodyTypeResponseType.Best">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.BodyTypeResponseType.HTML">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.BodyTypeResponseType.Text">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MasterMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.MailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.Alias">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.SmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.GroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.GroupTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.Description">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.Photo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.SharePointUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.InboxUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.CalendarUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MasterMailboxType.DomainController">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ModernGroupTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ModernGroupTypeType.None">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ModernGroupTypeType.Private">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ModernGroupTypeType.Secret">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ModernGroupTypeType.Public">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxLocatorType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxLocatorType.ExternalDirectoryObjectId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxLocatorType.LegacyDn">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserLocatorType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupLocatorType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxAssociationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.Group">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.User">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.IsMember">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.IsMemberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.JoinDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.JoinDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.IsPin">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.IsPinSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxAssociationType.JoinedBy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PersonaResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaResponseShapeType.BaseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PersonaResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DefaultShapeNamesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DefaultShapeNamesType.IdOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DefaultShapeNamesType.Default">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DefaultShapeNamesType.AllProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.Action">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ConversationId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ContextFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ConversationLastSyncTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ConversationLastSyncTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ProcessRightAway">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.ProcessRightAwaySpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.DestinationFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.Categories">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.EnableAlwaysDelete">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.EnableAlwaysDeleteSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.IsRead">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.IsReadSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.DeleteType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.DeleteTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.RetentionPolicyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.RetentionPolicyTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.RetentionPolicyTagId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.Flag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.SuppressReadReceipts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationActionType.SuppressReadReceiptsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationActionTypeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.AlwaysCategorize">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.AlwaysDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.AlwaysMove">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.Delete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.Move">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.Copy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.SetReadState">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.SetRetentionPolicy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationActionTypeType.Flag">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisposalType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisposalType.HardDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisposalType.SoftDelete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisposalType.MoveToDeletedItems">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RetentionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionType.Delete">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.RetentionType.Archive">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationResponseShapeType.BaseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConversationResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.QueryStringType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ResetCache">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ResetCacheSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ReturnHighlightTerms">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ReturnHighlightTermsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ReturnDeletedItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.ReturnDeletedItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.QueryStringType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FieldOrderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FieldOrderType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FieldOrderType.Order">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SortDirectionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SortDirectionType.Ascending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SortDirectionType.Descending">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AggregateOnType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AggregateOnType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AggregateOnType.Aggregate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AggregateType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.AggregateType.Minimum">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.AggregateType.Maximum">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseGroupByType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseGroupByType.Order">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DistinguishedGroupByType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DistinguishedGroupByType.StandardGroupBy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StandardGroupByType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.StandardGroupByType.ConversationTopic">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupByType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupByType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GroupByType.AggregateOn">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemChangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemChangeType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemChangeType.Updates">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AppendToItemFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AppendToItemFieldType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemChangeDescriptionType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ChangeDescriptionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ChangeDescriptionType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderChangeDescriptionType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AppendToFolderFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AppendToFolderFieldType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFolderFieldType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetFolderFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetFolderFieldType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteItemFieldType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetItemFieldType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetItemFieldType.Item1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.BaseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.IncludeMimeContent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.IncludeMimeContentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.BodyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.BodyTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.UniqueBodyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.UniqueBodyTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.NormalizedBodyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.NormalizedBodyTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.FilterHtmlContent">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.FilterHtmlContentSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.ConvertHtmlCodePageToUTF8">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.ConvertHtmlCodePageToUTF8Specified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.InlineImageUrlTemplate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.BlockExternalImages">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.BlockExternalImagesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.AddBlankTargetToLinks">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.AddBlankTargetToLinksSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.MaximumBodySize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.MaximumBodySizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ItemResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TransitionTargetType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TransitionTargetType.Kind">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TransitionTargetType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TransitionTargetKindType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TransitionTargetKindType.Period">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TransitionTargetKindType.Group">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TransitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.TransitionType.To">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurringTimeTransitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringTimeTransitionType.TimeOffset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringTimeTransitionType.Month">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurringDayTransitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringDayTransitionType.DayOfWeek">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringDayTransitionType.Occurrence">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RecurringDateTransitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RecurringDateTransitionType.Day">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AbsoluteDateTransitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AbsoluteDateTransitionType.DateTime">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArrayOfTransitionsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfTransitionsType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArrayOfTransitionsType.Id">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderChangeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderChangeType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderChangeType.Updates">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BasePagingType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePagingType.MaxEntriesReturned">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BasePagingType.MaxEntriesReturnedSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ContactsViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactsViewType.InitialName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ContactsViewType.FinalName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarViewType.StartDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CalendarViewType.EndDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SeekToConditionPageViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SeekToConditionPageViewType.Condition">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SeekToConditionPageViewType.BasePoint">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IndexBasePointType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IndexBasePointType.Beginning">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.IndexBasePointType.End">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FractionalPageViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FractionalPageViewType.Numerator">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FractionalPageViewType.Denominator">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.IndexedPageViewType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.IndexedPageViewType.Offset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.IndexedPageViewType.BasePoint">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.Data">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.CreateAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.IsAssociated">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemType.IsAssociatedSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CreateActionType.CreateNew">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CreateActionType.Update">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CreateActionType.UpdateOrCreate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderResponseShapeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderResponseShapeType.BaseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FolderResponseShapeType.AdditionalProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseRequestType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMSubscriberCallAnsweringDataType.Timeout">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientIntentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientIntentType.GlobalObjectId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientIntentType.StateDefinition">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPinType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SaveUMPinType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SaveUMPinType.PinInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SaveUMPinType.UserUMMailboxPolicyGuid">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ValidateUMPinType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ValidateUMPinType.PinInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ValidateUMPinType.UserUMMailboxPolicyGuid">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResetUMMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResetUMMailboxType.KeepProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InitUMMailboxType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMCallSummaryType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallSummaryType.DailPlanGuid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallSummaryType.GatewayGuid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallSummaryType.GroupRecordsBy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UMCDRGroupByType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMCDRGroupByType.Day">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMCDRGroupByType.Month">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMCDRGroupByType.Total">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.StartDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.StartDateTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.EndDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.EndDateTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.Offset">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.OffsetSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.NumberOfRecords">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.NumberOfRecordsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.UserLegacyExchangeDN">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMCallDataRecordsType.FilterBy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UMCDRFilterByType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMCDRFilterByType.FilterByUser">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UMCDRFilterByType.FilterByDate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUMCallDataRecordType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUMCallDataRecordType.CDRData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CompleteFindInGALSpeechRecognitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteFindInGALSpeechRecognitionType.RecognitionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CompleteFindInGALSpeechRecognitionType.AudioData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionType.Culture">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionType.TimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionType.UserObjectGuid">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.StartFindInGALSpeechRecognitionType.TenantGuid">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserPhotoType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserPhotoType.Email">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserPhotoType.SizeRequested">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserPhotoSizeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR48x48">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR64x64">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR96x96">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR120x120">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR240x240">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR360x360">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR432x432">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR504x504">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserPhotoSizeType.HR648x648">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImListMigrationCompletedType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetImListMigrationCompletedType.ImListMigrationCompleted">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetImGroupType.GroupId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetImGroupType.NewDisplayName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveImGroupType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveContactFromImListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveContactFromImListType.ContactId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemsType.ContactIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemsType.GroupIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemsType.ExtendedProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemListType.ExtendedProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDistributionGroupToImListType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDistributionGroupToImListType.SmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDistributionGroupToImListType.DisplayName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImGroupType.DisplayName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImContactFromGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveImContactFromGroupType.ContactId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveImContactFromGroupType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImContactToGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImContactToGroupType.ContactId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImContactToGroupType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType.TelUriAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType.ImContactSipUriAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType.ImTelephoneNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewImContactToGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewImContactToGroupType.ImAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewImContactToGroupType.DisplayName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewImContactToGroupType.GroupId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisableAppType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DisableAppType.ID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DisableAppType.DisableReason">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisableReasonType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisableReasonType.NoReason">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisableReasonType.OutlookClientPerformance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisableReasonType.OWAClientPerformance">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.DisableReasonType.MobileClientPerformance">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UninstallAppType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UninstallAppType.ID">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InstallAppType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InstallAppType.Manifest">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAsJunkType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAsJunkType.ItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAsJunkType.IsJunk">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAsJunkType.MoveItem">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppManifestsType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetEncryptionConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetEncryptionConfigurationType.ImageBase64">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetEncryptionConfigurationType.EmailText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetEncryptionConfigurationType.PortalText">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetEncryptionConfigurationType.DisclaimerText">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetClientExtensionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetClientExtensionType.Actions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEncryptionConfigurationType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientExtensionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionType.RequestedExtensionIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionType.UserParameters">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionType.IsDebug">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientExtensionType.IsDebugSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetConversationItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.ItemShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.FoldersToIgnore">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.MaxItemsToReturn">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.MaxItemsToReturnSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.SortOrder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.SortOrderSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.MailboxScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.MailboxScopeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsType.Conversations">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationNodeSortOrder">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationNodeSortOrder.TreeOrderAscending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationNodeSortOrder.TreeOrderDescending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationNodeSortOrder.DateOrderAscending">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationNodeSortOrder.DateOrderDescending">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAllItemsAsReadType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAllItemsAsReadType.ReadFlag">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAllItemsAsReadType.SuppressReadReceipts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAllItemsAsReadType.FolderIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.Mailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.PageSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.PageSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.PageItemReference">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.PageDirection">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.PageDirectionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.SearchArchiveOnly">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsType.SearchArchiveOnlySpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchPageDirectionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchPageDirectionType.Previous">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchPageDirectionType.Next">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType.Mailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType.SearchArchiveOnly">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsType.SearchArchiveOnlySpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.ActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.HoldId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.Query">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.Mailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.Language">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.IncludeNonIndexableItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.IncludeNonIndexableItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.Deduplication">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.DeduplicationSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.InPlaceHoldIdentity">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesType.ItemHoldPeriod">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.HoldActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldActionType.Create">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldActionType.Update">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.HoldActionType.Remove">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetHoldOnMailboxesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetHoldOnMailboxesType.HoldId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType.SearchId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType.ExpandGroupMembership">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType.ExpandGroupMembershipSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType.InPlaceHoldConfigurationOnly">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationType.InPlaceHoldConfigurationOnlySpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.SearchQueries">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.ResultType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PreviewItemResponseShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.SortBy">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.Language">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.Deduplication">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.DeduplicationSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PageSize">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PageSizeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PageItemReference">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PageDirection">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesType.PageDirectionSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSearchableMailboxesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesType.SearchFilter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesType.ExpandGroupMembership">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesType.ExpandGroupMembershipSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.Mailboxes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.Keywords">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.Language">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.Senders">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.Recipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.FromDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.FromDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.ToDate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.ToDateSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.MessageTypes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.SearchDumpster">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.SearchDumpsterSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.IncludePersonalArchive">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.IncludePersonalArchiveSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.IncludeUnsearchableItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMailboxStatisticsByKeywordsType.IncludeUnsearchableItemsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchItemKindType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Email">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Meetings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Tasks">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Notes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Docs">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Journals">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Contacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Im">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Voicemail">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Faxes">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Posts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SearchItemKindType.Rssfeeds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType.MailboxSmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType.RemoveOutlookRuleBlob">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType.RemoveOutlookRuleBlobSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesRequestType.Operations">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetInboxRulesRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetInboxRulesRequestType.MailboxSmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.Scope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.ReportTemplate">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.RecipientFilter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.MessageTrackingReportId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.ReturnQueueEvents">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.ReturnQueueEventsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.DiagnosticsLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportRequestType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MessageTrackingReportTemplateType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MessageTrackingReportTemplateType.Summary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MessageTrackingReportTemplateType.RecipientPath">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Scope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Domain">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Sender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.PurportedSender">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Recipient">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Subject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.StartDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.StartDateTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.EndDateTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.EndDateTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.MessageId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.FederatedDeliveryMailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.DiagnosticsLevel">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.ServerHint">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportRequestType.Properties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServiceConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServiceConfigurationType.ActingAs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServiceConfigurationType.RequestedConfiguration">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServiceConfigurationType.ConfigurationRequestDetails">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ServiceConfigurationType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ServiceConfigurationType.MailTips">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ServiceConfigurationType.UnifiedMessagingConfiguration">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ServiceConfigurationType.ProtectionRules">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ServiceConfigurationType.PolicyNudges">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PerformReminderActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PerformReminderActionType.ReminderItemActions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRemindersType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.BeginTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.BeginTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.EndTime">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.EndTimeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.MaxItems">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.MaxItemsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.ReminderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRemindersType.ReminderTypeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRemindersTypeReminderType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GetRemindersTypeReminderType.All">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GetRemindersTypeReminderType.Current">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GetRemindersTypeReminderType.Old">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRoomsType.RoomList">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomListsType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnpinTeamMailboxRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnpinTeamMailboxRequestType.EmailAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetTeamMailboxRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetTeamMailboxRequestType.EmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetTeamMailboxRequestType.SharePointSiteUrl">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetTeamMailboxRequestType.State">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.TeamMailboxLifecycleStateType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TeamMailboxLifecycleStateType.Active">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TeamMailboxLifecycleStateType.Closed">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TeamMailboxLifecycleStateType.Unlinked">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.TeamMailboxLifecycleStateType.PendingDelete">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateUserConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateUserConfigurationType.UserConfiguration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserConfigurationType.UserConfigurationName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserConfigurationType.UserConfigurationProperties">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UserConfigurationPropertyType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationPropertyType.Id">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationPropertyType.Dictionary">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationPropertyType.XmlData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationPropertyType.BinaryData">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.UserConfigurationPropertyType.All">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUserConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteUserConfigurationType.UserConfigurationName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUserConfigurationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUserConfigurationType.UserConfiguration">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderType.SmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderType.DataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderType.DataTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderType.SharedFolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SharingDataType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SharingDataType.Calendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SharingDataType.Contacts">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RefreshSharingFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RefreshSharingFolderType.SharingFolderId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingMetadataType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataType.IdOfFolderToShare">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataType.SenderSmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataType.Recipients">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseDelegateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseDelegateType.Mailbox">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateDelegateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateDelegateType.DelegateUsers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateDelegateType.DeliverMeetingRequests">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateDelegateType.DeliverMeetingRequestsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDelegateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveDelegateType.UserIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDelegateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDelegateType.DelegateUsers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDelegateType.DeliverMeetingRequests">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDelegateType.DeliverMeetingRequestsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDelegateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDelegateType.UserIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDelegateType.IncludePermissions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConvertIdType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConvertIdType.SourceIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConvertIdType.DestinationFormat">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetUserOofSettingsRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetUserOofSettingsRequest.Mailbox">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetUserOofSettingsRequest.UserOofSettings">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserOofSettingsRequest">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsRequest.Mailbox">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType.TimeZone">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType.MailboxDataArray">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType.FreeBusyViewOptions">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityRequestType.SuggestionsViewOptions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.ItemShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.SyncFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.SyncState">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.Ignore">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.MaxChangesReturned">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.SyncScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsType.SyncScopeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsScopeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SyncFolderItemsScopeType.NormalItems">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.SyncFolderItemsScopeType.NormalAndAssociatedItems">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyType.FolderShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyType.SyncFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyType.SyncState">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetStreamingEventsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsType.SubscriptionIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsType.ConnectionTimeout">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEventsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetEventsType.SubscriptionId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetEventsType.Watermark">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnsubscribeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnsubscribeType.SubscriptionId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SubscribeType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SubscribeType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateManagedFolderRequestType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateManagedFolderRequestType.FolderNames">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateManagedFolderRequestType.Mailbox">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServerTimeZonesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServerTimeZonesType.Ids">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServerTimeZonesType.ReturnFullTimeZoneData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServerTimeZonesType.ReturnFullTimeZoneDataSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExpandDLType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLType.Mailbox">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPromptType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptType.ConfigurationObject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptType.PromptName">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUMPromptNamesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptNamesType.ConfigurationObject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUMPromptNamesType.HoursElapsedSinceLastModified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUMPromptType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUMPromptType.ConfigurationObject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUMPromptType.PromptName">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUMPromptType.AudioData">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUMPromptsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteUMPromptsType.ConfigurationObject">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteUMPromptsType.PromptNames">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisconnectPhoneCallType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DisconnectPhoneCallType.PhoneCallId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPhoneCallInformationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPhoneCallInformationType.PhoneCallId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PlayOnPhoneType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PlayOnPhoneType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PlayOnPhoneType.DialString">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMailTipsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMailTipsType.SendingAs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMailTipsType.Recipients">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMailTipsType.MailTipsRequested">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPasswordExpirationDateType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPasswordExpirationDateType.MailboxSmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.ParentFolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.UnresolvedEntry">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.ReturnFullContactData">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.SearchScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.ContactDataShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesType.ContactDataShapeSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesSearchScopeType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResolveNamesSearchScopeType.ActiveDirectory">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResolveNamesSearchScopeType.ActiveDirectoryContacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResolveNamesSearchScopeType.Contacts">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ResolveNamesSearchScopeType.ContactsActiveDirectory">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientAccessTokenType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientAccessTokenType.TokenRequests">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAttachmentType.AttachmentShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAttachmentType.AttachmentIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteAttachmentType.AttachmentIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateAttachmentType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateAttachmentType.ParentItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateAttachmentType.Attachments">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupType.Properties">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryGroupType.Identity">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFederatedDirectoryUserType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFederatedDirectoryUserType.ExternalDirectoryObjectId">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateGroupMailboxType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.GroupSmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.ExecutingUserSmtpAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.DomainController">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.ForceConfigurationAction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.MemberIdentifierType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.MemberIdentifierTypeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.AddedMembers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.RemovedMembers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.AddedPendingMembers">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateGroupMailboxType.RemovedPendingMembers">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.SetRegionalSettings">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.CreateDefaultFolders">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.SetInitialFolderPermissions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.SetAllFolderPermissions">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.ConfigureCalendar">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMailboxConfigurationActionType.SendWelcomeMessage">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GroupMemberIdentifierType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMemberIdentifierType.ExternalDirectoryObjectId">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMemberIdentifierType.LegacyExchangeDN">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.GroupMemberIdentifierType.SmtpAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateMailboxAssociationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateMailboxAssociationType.Association">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateMailboxAssociationType.Master">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPersonaType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPersonaType.PersonaId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPersonaType.EmailAddress">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindPeopleType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.PersonaShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.IndexedPageItemView">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.Restriction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.AggregationRestriction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.SortOrder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleType.QueryString">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ApplyConversationActionType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApplyConversationActionType.ConversationActions">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindConversationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.SortOrder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.MailboxScope">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.MailboxScopeSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.QueryString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.ConversationShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.Traversal">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.TraversalSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.ViewFilter">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationType.ViewFilterSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConversationQueryTraversalType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationQueryTraversalType.Shallow">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConversationQueryTraversalType.Deep">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ViewFilterType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.All">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.Flagged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.HasAttachment">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.ToOrCcMe">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.Unread">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.TaskActive">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.TaskOverdue">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.TaskCompleted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.NoClutter">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ViewFilterType.Clutter">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.ItemShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.Item1">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.Restriction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.SortOrder">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.ParentFolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.QueryString">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemType.Traversal">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ItemQueryTraversalType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemQueryTraversalType.Shallow">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemQueryTraversalType.SoftDeleted">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ItemQueryTraversalType.Associated">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SendItemType.ItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SendItemType.SavedItemFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SendItemType.SaveItemToFolder">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArchiveItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArchiveItemType.ArchiveSourceFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArchiveItemType.ItemIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseMoveCopyItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyItemType.ToFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyItemType.ItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyItemType.ReturnNewItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyItemType.ReturnNewItemIdsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveItemType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.ItemIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.DeleteType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.SendMeetingCancellations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.SendMeetingCancellationsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.AffectedTaskOccurrences">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.AffectedTaskOccurrencesSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.SuppressReadReceipts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemType.SuppressReadReceiptsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarItemCreateOrDeleteOperationType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemCreateOrDeleteOperationType.SendToNone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemCreateOrDeleteOperationType.SendOnlyToAll">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemCreateOrDeleteOperationType.SendToAllAndSaveCopy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AffectedTaskOccurrencesType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.AffectedTaskOccurrencesType.AllOccurrences">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.AffectedTaskOccurrencesType.SpecifiedOccurrenceOnly">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType.ItemId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType.Updates">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType.Attachments">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType.MakeItemImmutable">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsType.MakeItemImmutableSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.SavedItemFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.ItemChanges">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.ConflictResolution">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.MessageDisposition">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.MessageDispositionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.SendMeetingInvitationsOrCancellations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.SendMeetingInvitationsOrCancellationsSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.SuppressReadReceipts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemType.SuppressReadReceiptsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConflictResolutionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConflictResolutionType.NeverOverwrite">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConflictResolutionType.AutoResolve">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ConflictResolutionType.AlwaysOverwrite">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MessageDispositionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MessageDispositionType.SaveOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MessageDispositionType.SendOnly">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.MessageDispositionType.SendAndSaveCopy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType.SendToNone">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType.SendOnlyToAll">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType.SendOnlyToChanged">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType.SendToAllAndSaveCopy">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.CalendarItemUpdateOperationType.SendToChangedAndSaveCopy">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PostModernGroupItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostModernGroupItemType.ModernGroupEmailAddress">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PostModernGroupItemType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.SavedItemFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.Items">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.MessageDisposition">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.MessageDispositionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.SendMeetingInvitations">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemType.SendMeetingInvitationsSpecified">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetItemType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetItemType.ItemShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetItemType.ItemIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderPathType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderPathType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderPathType.RelativeFolderPath">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateFolderType.FolderChanges">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.BaseMoveCopyFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyFolderType.ToFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.BaseMoveCopyFolderType.FolderIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyFolderType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveFolderType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmptyFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmptyFolderType.FolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmptyFolderType.DeleteType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmptyFolderType.DeleteSubFolders">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteFolderType.FolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteFolderType.DeleteType">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderType.FolderShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderType.Item">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderType.Restriction">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderType.ParentFolderIds">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderType.Traversal">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FolderQueryTraversalType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FolderQueryTraversalType.Shallow">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FolderQueryTraversalType.Deep">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.FolderQueryTraversalType.SoftDeleted">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderType.ParentFolderId">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderType.Folders">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExportItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExportItemsType.ItemIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemsType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemsType.Items">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFolderType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFolderType.FolderShape">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFolderType.FolderIds">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SmtpAddressType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SmtpAddressType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PrimarySmtpAddressType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PrimarySmtpAddressType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SIDType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SIDType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PrincipalNameType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PrincipalNameType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConnectingSIDType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConnectingSIDType.Item">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExchangeImpersonationType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExchangeImpersonationType.ConnectingSID">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExchangeImpersonationType.AnyAttr">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MailboxCultureType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxCultureType.AnyAttr">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MailboxCultureType.Value">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ServerVersionInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MajorVersion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MajorVersionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MinorVersion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MinorVersionSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MajorBuildNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MajorBuildNumberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MinorBuildNumber">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.MinorBuildNumberSpecified">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ServerVersionInfo.Version">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RequestServerVersion">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RequestServerVersion.Version">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RequestServerVersion.AnyAttr">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExchangeVersionType">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2007">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2007_SP1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2010">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2010_SP1">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2010_SP2">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2013">
            <remarks/>
        </member>
        <member name="F:PX.Data.Update.ExchangeService.ExchangeVersionType.Exchange2013_SP1">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ManagementRoleType">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagementRoleType.UserRoles">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ManagementRoleType.ApplicationRoles">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ResolveNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ResolveNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExpandDLCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExpandDLCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExpandDLCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServerTimeZonesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServerTimeZonesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServerTimeZonesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UploadItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UploadItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExportItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ExportItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ExportItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConvertIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ConvertIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ConvertIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderPathCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateFolderPathCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateFolderPathCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmptyFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.EmptyFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.EmptyFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MoveFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CopyFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnsubscribeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnsubscribeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnsubscribeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetStreamingEventsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetStreamingEventsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetStreamingEventsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderHierarchyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderHierarchyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SyncFolderItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SyncFolderItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateManagedFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateManagedFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateManagedFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateItemInRecoverableItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SendItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SendItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MoveItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MoveItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CopyItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CopyItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArchiveItemCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ArchiveItemCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ArchiveItemCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateAttachmentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateAttachmentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateAttachmentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteAttachmentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteAttachmentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteAttachmentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAttachmentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAttachmentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAttachmentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientAccessTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetClientAccessTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetClientAccessTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDelegateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDelegateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDelegateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDelegateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDelegateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDelegateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDelegateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDelegateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveDelegateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateDelegateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateDelegateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateDelegateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUserConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.CreateUserConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.CreateUserConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUserConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DeleteUserConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DeleteUserConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateUserConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateUserConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateUserConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserAvailabilityCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserAvailabilityCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserAvailabilityCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserOofSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserOofSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserOofSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetUserOofSettingsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetUserOofSettingsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetUserOofSettingsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServiceConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetServiceConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetServiceConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMailTipsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMailTipsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMailTipsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PlayOnPhoneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.PlayOnPhoneCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.PlayOnPhoneCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPhoneCallInformationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPhoneCallInformationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPhoneCallInformationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisconnectPhoneCallCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisconnectPhoneCallCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DisconnectPhoneCallCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingMetadataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingMetadataCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingMetadataCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RefreshSharingFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RefreshSharingFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RefreshSharingFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingFolderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSharingFolderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSharingFolderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetTeamMailboxCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetTeamMailboxCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetTeamMailboxCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnpinTeamMailboxCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UnpinTeamMailboxCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UnpinTeamMailboxCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomListsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomListsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRoomListsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetRoomsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetRoomsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMessageTrackingReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindMessageTrackingReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindMessageTrackingReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMessageTrackingReportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetMessageTrackingReportCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetMessageTrackingReportCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindConversationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindConversationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindConversationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ApplyConversationActionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.ApplyConversationActionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.ApplyConversationActionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetConversationItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetConversationItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetConversationItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindPeopleCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.FindPeopleCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.FindPeopleCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPersonaCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPersonaCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPersonaCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetInboxRulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetInboxRulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetInboxRulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateInboxRulesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UpdateInboxRulesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UpdateInboxRulesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPasswordExpirationDateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetPasswordExpirationDateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetPasswordExpirationDateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSearchableMailboxesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetSearchableMailboxesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetSearchableMailboxesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SearchMailboxesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SearchMailboxesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetDiscoverySearchConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetHoldOnMailboxesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetHoldOnMailboxesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetHoldOnMailboxesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetHoldOnMailboxesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetHoldOnMailboxesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetHoldOnMailboxesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemStatisticsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetNonIndexableItemDetailsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAllItemsAsReadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAllItemsAsReadCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAllItemsAsReadCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAsJunkCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.MarkAsJunkCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.MarkAsJunkCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppManifestsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppManifestsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAppManifestsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewImContactToGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewImContactToGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewImContactToGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddNewTelUriContactToGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImContactToGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImContactToGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImContactToGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImContactFromGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImContactFromGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveImContactFromGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddImGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddImGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDistributionGroupToImListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.AddDistributionGroupToImListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.AddDistributionGroupToImListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetImItemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetImItemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveContactFromImListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveContactFromImListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveContactFromImListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveDistributionGroupFromImListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.RemoveImGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.RemoveImGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImGroupCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImGroupCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetImGroupCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImListMigrationCompletedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.SetImListMigrationCompletedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.SetImListMigrationCompletedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserRetentionPolicyTagsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InstallAppCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.InstallAppCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.InstallAppCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UninstallAppCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.UninstallAppCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.UninstallAppCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisableAppCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.DisableAppCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.DisableAppCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetAppMarketplaceUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserPhotoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.ExchangeService.GetUserPhotoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.ExchangeService.GetUserPhotoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.WebServices.IPXExchangeServerProvider">
            <summary>
            Provider of the <see cref="T:PX.Data.Update.WebServices.PXExchangeServer"/>.
            </summary>
        </member>
        <member name="T:PX.Data.Update.WebServices.Category">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.Color">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.KeyboardShortcut">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.UsageCount">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedNotes">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedJournal">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedContacts">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedTasks">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedCalendar">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsedMail">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastTimeUsed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.LastSessionUsed">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.Id">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.WebServices.Category.RenameOnFirstUse">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.LicensingService.LicensingServiceGate">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.LicensingService.InstanceInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.LicensingService.LicenseInfo">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UntypedService.NewRow">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UntypedService.DeleteRow">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UpdateService.UpdateServiceGate">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.UpdateService.UpdateServiceGate.#ctor(System.String)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.UpdateService.UpdateServiceGate.CheckUpdates(PX.Data.Update.UpdateService.VersionInfo)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.UpdateService.UpdateServiceGate.GetBranchesFiltered(PX.Data.Update.UpdateService.VersionInfo,System.String)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.UpdateService.UpdateServiceGate.GetBuilds(PX.Data.Update.UpdateService.VersionInfo,System.String)">
            <remarks/>
        </member>
        <member name="M:PX.Data.Update.UpdateService.UpdateServiceGate.DownloadBuildPartially(PX.Data.Update.UpdateService.VersionInfo,System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UpdateService.VersionInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.VersionInfo.Type">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.VersionInfo.Major">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.VersionInfo.Minor">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.VersionInfo.Build">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UpdateService.BuildInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Quality">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Restricted">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Date">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Description">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BuildInfo.Notes">
            <remarks/>
        </member>
        <member name="T:PX.Data.Update.UpdateService.BranchInfo">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BranchInfo.Name">
            <remarks/>
        </member>
        <member name="P:PX.Data.Update.UpdateService.BranchInfo.Description">
            <remarks/>
        </member>
        <member name="F:PX.Data.PXLogOutReason.UserDisabled">
            <summary>
            When current user has been disabled.
            </summary>
        </member>
        <member name="T:PX.Data.ActionData">
            <summary>
            Information about a <see cref="T:PX.Data.PXAction"/> being executed.
            </summary>
        </member>
        <member name="P:PX.Data.ActionData.Name">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="P:PX.Data.ActionData.Origin">
            <summary>
            Action's origin.
            </summary>
        </member>
        <member name="M:PX.Data.Utility.HttpContextHelper.RegisterJavaScript(System.String)">
            <summary>
            Register Java script which will be executed in browser.
            </summary>
        </member>
        <member name="T:PX.Data.PXErrorLevelUtils">
            <summary>
            An utilities class for <see cref="T:PX.Data.PXErrorLevel"/> enum.
            </summary>
        </member>
        <member name="M:PX.Data.PXErrorLevelUtils.IsError(PX.Data.PXErrorLevel)">
            <summary>
            Does <paramref name="errorLevel"/> indicate error.
            </summary>
            <param name="errorLevel">The errorLevel to act on.</param>
            <returns>
            True if error, false if not.
            </returns>
        </member>
        <member name="M:PX.Data.PXErrorLevelUtils.IsWarning(PX.Data.PXErrorLevel)">
            <summary>
            Does <paramref name="errorLevel"/> indicate warning.
            </summary>
            <param name="errorLevel">The errorLevel to act on.</param>
            <returns>
            True if warning, false if not.
            </returns>
        </member>
        <member name="M:PX.Data.PXErrorLevelUtils.ChangeIntoNonRowErrorLevel(PX.Data.PXErrorLevel,System.Nullable{PX.Data.PXErrorLevel})">
            <summary>
            Change error level for rows like <see cref="F:PX.Data.PXErrorLevel.RowError"/>, <see cref="F:PX.Data.PXErrorLevel.RowWarning"/>, <see cref="F:PX.Data.PXErrorLevel.RowInfo"/> 
            into the corresponding "non-row" error levels.
            </summary>
            <param name="errorLevel">The errorLevel to act on.</param>
            <param name="rowInfoErrorLevel">
            (Optional) The level to use for row information error level. If not specified then the <see cref="F:PX.Data.PXErrorLevel.Undefined"/> will be used.
            </param>
            <returns>
            A non-row <see cref="T:PX.Data.PXErrorLevel"/>.
            </returns>
        </member>
        <member name="M:PX.Data.PXErrorLevelUtils.MergeWith(PX.Data.PXErrorLevel,PX.Data.PXErrorLevel)">
            <summary>
            Merge two error levels to return the result with the highest error level. 
            If an error level for row and a non-row error level are merged then info regarding row is lost. 
            For example, the merge of RowError and Error will return Error.
            </summary>
            <param name="originalErrorLevel">The original <see cref="T:PX.Data.PXErrorLevel"/> to act on.</param>
            <param name="errorLevelToMerge">The error level to merge.</param>
            <returns>
            A merged <see cref="T:PX.Data.PXErrorLevel"/>.
            </returns>
        </member>
        <member name="M:PX.Data.PXErrorLevelUtils.IsErrorLevelForRow(PX.Data.PXErrorLevel)">
            <summary>
            Check if <paramref name="errorLevel"/> is error level for rows.
            </summary>
            <param name="errorLevel">The errorLevel to act on.</param>
            <returns>
            True if error level is a row error level like <see cref="F:PX.Data.PXErrorLevel.RowError"/>, false if not.
            </returns>
        </member>
        <member name="T:PX.Data.Webhooks.IWebhookHandler">
            <summary>The interface that you need to implement to expose webhooks out of Acumatica ERP for external applications.</summary>
            <remarks>
              <para>Acumatica ERP provides webhooks as a way to integrate external applications that provide data in their own format and need to submit this data to Acumatica
            ERP. For example, HubSpot collects data about email clicks and can export this data in a specific format to a particular URL. With the webhooks, a developer
            can configure Acumatica ERP to process the data submitted to a particular URL and save the data in Acumatica ERP.</para>
              <para>To process data from an external application in Acumatica ERP with webhooks, you need to create a class that implements the <tt>IWebhookHandler</tt>
            interface. For more convenient implementation, we recommend that you implement this interface in a graph (that is, a class of the <see cref="T:PX.Data.PXGraph" /> type).</para>
              <para>You need to place a DLL file with the implementation class in the Bin folder of the Acumatica ERP instance.</para>
            </remarks>
        </member>
        <member name="M:PX.Data.Webhooks.IWebhookHandler.ProcessRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>Processes the requests from an external application.</summary>
            <param name="request">The HTTP request message that has been sent to Acumatica ERP.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <remarks>
              <para>In this method, the developer needs to process a request from an external application, including the following:</para>
              <list type="bullet">
                <item>Process authentication information in the request</item>
                <item>Transform the data in external format to the data that can be saved in Acumatica ERP</item>
                <item>Invoke graph methods that save the data in Acumatica ERP</item>
              </list>
            </remarks>
            <returns>The result of processing of the request, such as <tt>System.Web.Http.Results.OkResult</tt>.</returns>
        </member>
        <member name="T:PX.Data.Wiki.ConversionType1">
            <exclude/>
        </member>
        <member name="T:PX.Data.Wiki.ConversionType2">
            <exclude/>
        </member>
        <member name="T:PX.Data.Wiki.ConversionType3">
            <exclude/>
        </member>
        <member name="T:PX.Data.Wiki.CutWikiPage">
            <exclude/>
        </member>
        <member name="T:PX.Data.Wiki.IWikiExport">
            <exclude/>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXBaseTextParser">
            <summary>
            Base class for parsing plain and styled text.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXBlockParser">
            <summary>
            Main parsing class.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXBlockParser.ParseContext">
            <summary>
            Parsing context which is passed to every parser during parsing.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.Parse(System.String,PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Parses given wiki-text.
            </summary>
            <param name="wikiText">Wiki-text to parse.</param>
            <param name="settings">Parsing settings.</param>
            <returns>A WikiArticle object representing a parsed article in memory.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.Parse(PX.Data.Wiki.Parser.PXBlockParser.ParseContext,PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Parses wiki-text depending on context and puts result inside of WikiArticle object.
            </summary>
            <param name="context">Parsing context.</param>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.DoParse(PX.Data.Wiki.Parser.PXBlockParser.ParseContext,PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Parses a block of wiki-text and puts result inside of WikiArticle object.
            Override this method in your derived classes to provide parsing of your custom tags.
            </summary>
            <param name="context">Parsing context.</param>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.InitDictionary">
            <summary>
            Inits dictionary which determines which PXBlockParser-derived object to use to parse given wiki-tag.
            Override this method and fill the allowedBlocks dictionary if you want your custom
            PXBlockParser-derived object to be called to parse a specific or custom tag.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.IsAllowedForParsing(PX.Data.Wiki.Parser.Token)">
            <summary>
            Determines whether a parser object whould be called for parsing a specific tag or it
            should be treated as plain text. Override this method in your custom block parsers if
            you want to exclude any tags from parsing and simply send them to output.
            </summary>
            <param name="tk">Token representing wiki-tag.</param>
            <returns>True. Override this method to provide custom logic.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.IsThisToken(PX.Data.Wiki.Parser.Token)">
            <summary>
            Determines whether given wiki-tag matches to the one being parsed.
            Override this method to determine when your custom parser should terminate.
            </summary>
            <param name="tk">Token representing wiki-tag.</param>
            <returns>True. Override this method to provide custom logic.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.ProcessToken(PX.Data.Wiki.Parser.Token,System.String,PX.Data.Wiki.Parser.PXBlockParser.ParseContext,PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Processes next token by calling an appropriate block parser for it or by sending it to output as text.
            </summary>
            <param name="tk">A Token to process.</param>
            <param name="tkValue">String containing token value.</param>
            <param name="context">Parsing context.</param>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.GetNextToken(PX.Data.Wiki.Parser.PXBlockParser.ParseContext,System.String@)">
            <summary>
            Returns next Token from non-parsed text.
            </summary>
            <param name="context">Parsing context.</param>
            <param name="TokenValue">[out] String containing token value.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.IsReservedSymbol(System.Char)">
            <summary>
            Determines whether given character is one of reserved symbols.
            </summary>
            <param name="symbol">A character to check.</param>
            <returns>True if 'symbol' is a reserved character. Otherwise false.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBlockParser.AddText(System.String,PX.Data.Wiki.Parser.PXBlockParser.ParseContext,PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Appends plain text to output.
            </summary>
            <param name="text">A string of text to append.</param>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBoxParser.CheckForSpecBox(PX.Data.Wiki.Parser.PXBlockParser.ParseContext)">
            <summary>
            Determines whether box is a hint or warning box.
            </summary>
            <param name="context">Parsing context.</param>
            <returns>{s:hint} or {s:warn} if box is a special box. Empty string otherwise.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBoxParser.StartBlock(PX.Data.Wiki.Parser.WikiArticle,PX.Data.Wiki.Parser.PXBlockParser.ParseContext,System.String)">
            <summary>
            Adds a new box element to output.
            </summary>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
            <param name="context">Parsing context.</param>
            <param name="specialBox">{s:hint}, {s:warn}, {s:danger} or {s:goodpractice} if box is a special box.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXBoxParser.CloseBlock(PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Reduces all box element children from output stack.
            </summary>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXHeaderParser.StartBlock(PX.Data.Wiki.Parser.PXBlockParser.ParseContext)">
            <summary>
            Creates a new header element and puts it into new output which will contain all its children.
            </summary>
            <param name="context">Parsing context.</param>
            <returns>A WikiArticle object representing parsed header in memory.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXHeaderParser.AddHeader(PX.Data.Wiki.Parser.WikiArticle,PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Creates a new section element and adds a header to it.
            </summary>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
            <param name="headerValue">A WikiArticle object representing parsed header in memory.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXHtmlParser.tagInsideCodeBlock(System.String,System.Int32)">
            <summary>
            Determines if target index range is inside a CodePh block
            </summary>
            <param name="text">Text to search inside of</param>
            <param name="startIndex">First index in the range</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXSectionParser.IsNextSection(PX.Data.Wiki.Parser.Token)">
            <summary>
            Determines whether given Token indicates beginning of next section (i.e. section of the same or less level).
            </summary>
            <param name="tk">H1, H2, H3 or H4 Token value.</param>
            <returns>True if Token indicates beginning of next section. Otherwise false.</returns>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSectionParser.Level">
            <summary>
            Gets level of current section.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXSectionParser.CloseBlock(PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Reduces all section element children from output stack.
            </summary>
            <param name="result">A WikiArticle object representing a parsed article in memory.</param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.HtmlContentProcessor">
            <summary>
            Used for processing of any content which is inside of &lt;HTML&gt;&lt;/HTML&gt; tag.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.MimeTypes">
            <summary>
            Contains a list of MIME Types.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.MimeTypes.GetMimeType(System.String)">
            <summary>
            Retrieves a MIME type for the given file extension.
            </summary>
            <param name="ext">An extension to retrieve MIME type for.</param>
            <returns>A string containing MIME type.</returns>
        </member>
        <member name="P:PX.Data.Wiki.Parser.MimeTypes.Types">
            <summary>
            Gets the list of the MIME Types.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.TextStyle">
            <summary>
            Allowed text styles. Can be a masked value.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.SectionLevel">
            <summary>
            Level of section or header.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.ImageType">
            <summary>
            Image types.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.ListType">
            <summary>
            Type of list.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.ElementFloat">
            <summary>
            Type of element floating in PDF document
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.LinkInfo">
            <summary>
            Information about link which is to be filled by a LinkCreatorDelegate method.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.Url">
            <summary>
            Link to a file.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.FileInfoPath">
            <summary>
            Path to a screen which displays this file's revisions.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.DefaultCaption">
            <summary>
            Text to be displayed as a link caption.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.IsExisting">
            <summary>
            Whether location to which this link refers exists.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.Extension">
            <summary>
            File extension.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.IsInvalid">
            <summary>
            Whether link is invalid (refers to guid for which no page found).
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.LinkInfo.BinData">
            <summary>
            Reference to an array of file bytes.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXBoxElement">
            <summary>
            Represents a gray box in memory.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXBoxElement.IsHintBox">
            <summary>
            Gets or sets value indicating whether this is a box with information icon.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXBoxElement.IsWarnBox">
            <summary>
            Gets or sets value indicating whether this is a box with warning icon.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXBoxElement.IsDangerBox">
            <summary>
            Gets or sets value indicating whether this is a box with danger icon.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXBoxElement.IsGoodPracticeBox">
            <summary>
            Gets or sets value indicating whether this is a box with good practice icon.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXCodeBoxElement">
            <summary>
            Represents a box in memory containing text wich should be displayed monotyped.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXContainerElement">
            <summary>
            Represents a base class for all container elements (i.e. elements which can contain other elements).
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXContainerElement.AddChild(PX.Data.Wiki.Parser.PXElement)">
            <summary>
            Adds a new child element to this container.
            </summary>
            <param name="elem">A child element to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXContainerElement.AddChildren(System.Collections.Generic.List{PX.Data.Wiki.Parser.PXElement})">
            <summary>
            Adds new children elements to this container.
            </summary>
            <param name="elems">A list of children to add.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXContainerElement.Children">
            <summary>
            Gets an array containing child elements.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXContainerElement.IsReduced">
            <summary>
            Gets or sets value indicating whether this container is reduced (
            includes child elements it should have had contained).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXEmbeddedVideoElement.VideoUrl">
            <summary>
            Represents the URL to the video content
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXEmptySpace">
            <summary>
            Represents an empty space element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXHeaderElement">
            <summary>
            Represents a header element in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXHeaderElement.#ctor(PX.Data.Wiki.Parser.SectionLevel)">
            <summary>
            Initializes a new PXHeaderElement object.
            </summary>
            <param name="level">Header level.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.Name">
            <summary>
            Gets name of this PXHeaderElement object (H1, H2, H3 or H4).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.Level">
            <summary>
            Gets a SectionLevel value representing level of this PXHeaderElement object.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.SectionID">
            <summary>
            Gets or sets an ID of section preceeded with this header.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.HasExpTag">
            <summary>
            Gets a value indicating whether this header should be expandable.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.HasCollapsedTag">
            <summary>
            Gets a value indicating whether this header should be initially collapsed.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.IsCollapsable">
            <summary>
            Gets a value indicating whether this header should be initially collapsed.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.IsDefaultExpanded">
            <summary>
            Gets a value indicating whether this header should be initially collapsed.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.IsNestedTopics">
            <summary>
            Gets a value indicating whether the section under this header was automatically filled with nested topics.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHeaderElement.Value">
            <summary>
            Gets a string representing header caption.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXHeaderElement.ExtractExpandProps">
            <summary>
            Parses header caption and determines whether it can be expandable and
            whether succeeding section should be initially collapsed.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXHiddenElement">
            <summary>
            Represents text which can be expanded or collapsed by user.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXHorLineElement">
            <summary>
            Represents a horizontal line element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXHtmlTagElement">
            <summary>
            Represents a single html-tag element in memory
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHtmlTagElement.TagValue">
            <summary>
            Gets inner tag elements.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHtmlTagElement.TagName">
            <summary>
            Gets or sets tag name.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXHtmlTagElement.Attributes">
            <summary>
            Gets or sets an attribute list for this HTML tag.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXHtmlContentElement">
            <summary>
            Represents a single &lt;HTML&gt;&lt;/HTML&gt; element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXImageElement">
            <summary>
            Represents an image element in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXImageElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PXImageElement
            </summary>
            <param name="name">Name of picture to be retrieved from storage.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Name">
            <summary>
            Gets name of picture to be retrieved from storage.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Caption">
            <summary>
            Gets or sets image caption.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Type">
            <summary>
            Gets or sets image type.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Location">
            <summary>
            Gets or sets image location on a page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Width">
            <summary>
            Gets or sets image width.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Height">
            <summary>
            Gets or sets image height.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.IsClickable">
            <summary>
            Gets or sets value indicating, whether user will be allowed to click on image in order to see its full size.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.NavigateUrl">
            <summary>
            Gets or sets an external url to which user will be navigated when clicking an image.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.WikiText">
            <summary>
            Gets or sets wiki representation of the current image which is used for WYSIWYG editor.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.InternalLink">
            <summary>
            Gets or sets name of article to navigate to when user clicks this image.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.Props">
            <summary>
            Gets or sets any additional HTML attributes for the current image.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.IsEmbedded">
            <summary>
            Gets or sets value indicating whether this image should be displayed as embedded into page
            when its type is video.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.HasEditLink">
            <summary>
            Gets or sets value indicating whether image has "edit" link (when user has appropriate access rights).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXImageElement.FileRevision">
            <summary>
            Gets or sets number of file revision.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXIndentContainer.#ctor(System.Char)">
            <summary>
            Initializes a new PXIndentContainer object.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXIndentElement">
            <summary>
            Represents a collection of indented elements in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXLinkElement">
            <summary>
            Represents a link element in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.GetLinkElements">
            <summary>
            Returns an array of elements which are contained inside of this links value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.AddToLink(PX.Data.Wiki.Parser.PXElement)">
            <summary>
            Adds a new element to collection representing this links value.
            </summary>
            <param name="e">An element to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.AddToLink(System.Collections.Generic.IEnumerable{PX.Data.Wiki.Parser.PXElement})">
            <summary>
            Adds a collection of new elements to collection representing this links value.
            </summary>
            <param name="elems">A collection of elements to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.GetCaptionElements">
            <summary>
            Returns an array of elements which are contained inside of this links caption.
            </summary>
            <returns>An array of elements which are contained inside of this links caption.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.AddToCaption(PX.Data.Wiki.Parser.PXElement)">
            <summary>
            Adds a new element to collection representing this links caption.
            </summary>
            <param name="e">An element to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXLinkElement.AddToCaption(System.Collections.Generic.IEnumerable{PX.Data.Wiki.Parser.PXElement})">
            <summary>
            Adds a collection of new elements to collection representing this links caption.
            </summary>
            <param name="elems">A collection of elements to add.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.Props">
            <summary>
            Gets or sets additional link styles and attributes.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.NoIcon">
            <summary>
            Gets or sets value indicating whether file icon should be displayed for file links
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.IsFileLink">
            <summary>
            Gets or sets value indicating whether this is a file link.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.IsPopup">
            <summary>
            Gets or sets value indicating whether link will be displayed like a popup image when user clicks it.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.IsInNewWindow">
            <summary>
            Gets or sets value indicating whether link should be opened in a new window.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.FileRevision">
            <summary>
            Gets or sets number of file revision (if this link points to file).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXLinkElement.Width">
            <summary>
            Used for links to popup video (flash).
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXNewslineDeclaration">
            <summary>
            Represents newsline declaration.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.WikiArticle">
            <summary>
            Represents parsed article with all its elements in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.WikiArticle.AddElement(PX.Data.Wiki.Parser.PXElement)">
            <summary>
            Adds an element to stack.
            </summary>
            <param name="elem">An element to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.WikiArticle.AddElementsRange(System.Collections.Generic.IEnumerable{PX.Data.Wiki.Parser.PXElement})">
            <summary>
            Adds an range of elements to stack.
            </summary>
            <param name="elems">An elements collection to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.WikiArticle.AddElementsRange(PX.Data.Wiki.Parser.WikiArticle)">
            <summary>
            Adds an range of elements to stack.
            </summary>
            <param name="article">An article with elements collection to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.WikiArticle.GetAllElements">
            <summary>
            Returns a list of all elements of this WikiArticle in order of appearance.
            </summary>
            <returns>A list of all elements of this WikiArticle in order of appearance.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.WikiArticle.ReduceToContainer">
            <summary>
            Puts all elements from top of stack inside of nearest non-reduced container element.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.WikiArticle.Current">
            <summary>
            Gets the last added element.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXElement">
            <summary>
            Represents a base class for all wiki elements in memory.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXElement.IsError">
            <summary>
            Gets or sets value indicating whether an error occured during parsing of this element.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXElement.WikiTag">
            <summary>
            Gets or sets wiki tag to be added to element in design mode.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXElement.NeedClear">
            <summary>
            Determines whether div with class="clear" should be inserted before element.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXParagraphElement">
            <summary>
            Represents a text paragraph.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXRedirectElement">
            <summary>
            Represents a redirect element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXRssArticleLink">
            <summary>
            Represents an RSS Article link element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXRssLink">
            <summary>
            Represents an RSS link element in memory.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXSectionElement">
            <summary>
            Represents a section of elements in memory.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSectionElement.Header">
            <summary>
            Gets or sets a header for this section.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSectionElement.IsCollapsable">
            <summary>
            Gets or sets value indicating whether this section is collapsable.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSectionElement.IsCollapsed">
            <summary>
            Gets or sets value indicating whether this section is initially collapsed.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXSpecialTagElement">
            <summary>
            Represents an element with special tag in memory.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSpecialTagElement.Props">
            <summary>
            Gets or sets additional properties for this special tag.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXStyledTextElement">
            <summary>
            Represents styled text in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXStyledTextElement.#ctor(PX.Data.Wiki.Parser.TextStyle)">
            <summary>
            Initializes a new instance of PXStyledTextElement class.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXStyledTextElement.Style">
            <summary>
            Gets a TextStyle value for this styled text.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXTableElement">
            <summary>
            Represents a table element in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableElement.#ctor">
            <summary>
            Initializes a new instance of PXTableElement class.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of PXTableElement class.
            </summary>
            <param name="props">A string with CSS properties for this table.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableElement.Rows">
            <summary>
            Gets an array of rows contained by this table.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableElement.Props">
            <summary>
            Gets or sets CSS table properties.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableElement.Caption">
            <summary>
            Gets or sets table caption text.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableElement.AddRow(PX.Data.Wiki.Parser.PXTableRow)">
            <summary>
            Adds a new row to the table.
            </summary>
            <param name="row">A row to add.</param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXTableRow">
            <summary>
            Represents a single table row in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableRow.#ctor">
            <summary>
            Initializes a new instance of PXTableRow class.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableRow.#ctor(System.String)">
            <summary>
            Initializes a new instance of PXTableRow class.
            </summary>
            <param name="props">A string with CSS properties for this table row.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableRow.Props">
            <summary>
            Gets or sets CSS properties for this table row.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableRow.Cells">
            <summary>
            Gets an array of cells contained inside of this PXTableRow object.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableRow.AddCell(PX.Data.Wiki.Parser.PXTableCell)">
            <summary>
            Adds a new cell to this PXTableRow object.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXTableCell">
            <summary>
            Represents a table cell in memory.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableCell.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of PXTableCell class.
            </summary>
            <param name="isHeader">Value indicating whether header or ordinary cell should created.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXTableCell.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of PXTableCell class.
            </summary>
            <param name="isHeader">Value indicating whether header or ordinary cell should created.</param>
            <param name="props">Gets or sets CSS properties for this table row.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableCell.IsHeader">
            <summary>
            Gets a value indicating whether this is a header cell.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTableCell.Props">
            <summary>
            Gets or sets CSS properties for this cell.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXTextElement">
            <summary>
            Represents plain text in memory.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXTextElement.Value">
            <summary>
            Gets or sets text value for this PXTextElement object.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.EditLinkText">
            <summary>
            Gets or sets text whic is used as caption for EditLink in 'edit' mode.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.CloseLinkText">
            <summary>
            Gets or sets text which is used as caption for EditLink in 'close' mode.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.HintImageUrl">
            <summary>
            Gets or sets URL of image used as Info icon inside of HintBox.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.WarnImageUrl">
            <summary>
            Gets or sets URL of image used as Warning icon inside of WarnBox.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.IsHtml">
            <summary>
            Gets or sets path to CSS styles for wiki.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.DefaultExtensionImage">
            <summary>
            Gets or sets path to a default image displayed as icon for files with unknown extensions.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.ISettings.ExtensionsImages">
            <summary>
            Gets or sets paths to images displayed as icons for files with specified extensions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:PX.Data.Wiki.Parser.PXSettings._searchLink" -->
        <member name="P:PX.Data.Wiki.Parser.PXSettings.EditLinkText">
            <summary>
            Gets or sets text whic is used as caption for EditLink in 'edit' mode.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSettings.CloseLinkText">
            <summary>
            Gets or sets text which is used as caption for EditLink in 'close' mode.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSettings.HintImageUrl">
            <summary>
            Gets or sets URL of image used as Info icon inside of HintBox.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSettings.WarnImageUrl">
            <summary>
            Gets or sets URL of image used as Warning icon inside of WarnBox.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSettings.DefaultStylesPath">
            <summary>
            Gets or sets path to CSS styles for wiki.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXSettings.DefaultExtensionImage">
            <summary>
            Gets or sets path to a default image displayed as icon for files with unknown extensions.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.PXSettings._extensionsImages">
            <summary>
            Gets or sets paths to images displayed as icons for files with specified extensions.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXWikiParserContext">
            <summary>
            Represents settings that are used during output rendering.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.WikiTitle">
            <summary>
            Gets or sets wiki title.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.ThemePath">
            <summary>
            Gets or sets path to a theme used for wiki formatting.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.PageTitle">
            <summary>
            Gets or sets a title for current wiki page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.LastModified">
            <summary>
            Gets or sets time of last modification for current wiki page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.CreatedByLogin">
            <summary>
            Gets or sets name of user who created current wiki page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.LastModifiedByLogin">
            <summary>
            Gets or sets name of user who was the last to modify current wiki page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.EditLink">
            <summary>
            Gets or sets link to a web-page which allows to edit current wiki page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.RenderSectionLink">
            <summary>
            Gets or sets value indicating whether section editing is allowed (EnableScript should be true).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.HideBrokenLink">
            <summary>
            Gets or sets value indicating whether broken link is hidden.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.RedirectAvailable">
            <summary>
            Gets or sets value indicating whether redirect is available.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.RedirectEnable">
            <summary>
            Gets or sets value indicating whether redirect is enabled on render page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.ExpandableTOC">
            <summary>
            Gets or sets value indicating whether table of contents should be expandable.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.AllowSectionsExpand">
            <summary>
            Gets or sets value indicating whether sections are expandable.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.SectionCount">
            <summary>
            Gets or sets number of sections in current wiki article.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.RenderFileList">
            <summary>
            Gets value indicating whether FileList control will be rendered somewhere in the article.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.EnableScript">
            <summary>
            Gets or sets value indicating whether client-side scripts should be enabled for HTML rendering.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.StylesPath">
            <summary>
            Gets or sets path to CSS styles for wiki.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.IsDesignMode">
            <summary>
            Gets or sets value indicating whether wiki text will be parsed for design mode (when WYSIWYG editor is available).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.IDSuffix">
            <summary>
            Gets or sets string which will be added to sections ID and images in order that several PXWikiShow controls could be shown on a page.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.ContentWidth">
            <summary>
            Gets or sets width of rendered content.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.ContentHeight">
            <summary>
            Gets or sets height of rendered content.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.Renderer">
            <summary>
            Gets or sets renderer which will be used to display parsed article (PXHtmlRenderer is used by default).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.IsSimpleRender">
            <summary>
            Gets or sets value inicating whether article should be rendered as simple, not intended for use with PXWikiShow control.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PXWikiParserContext.Listlevel">
            <summary>
            Gets or sets value level of list during parsing.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXBoxRenderer">
            <summary>
            Represents a class for rendering PXBoxElement to HTML.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXCodeBoxRenderer">
            <summary>
            Represents a class for PXCodeBoxElement rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXEmbeddedVideoRenderer">
            <summary>
            Represents a class for PXEmbeddedVideoElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXEmptyRenderer">
            <summary>
            Represents a class for PXEmptySpaceElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXFileListTagRenderer">
            <summary>
            Represents a class for PXSpecialTagElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXHeaderRenderer">
            <summary>
            Represents a class for PXHeaderElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXHiddenRenderer">
            <summary>
            Represents a class for PXHiddenElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXHorLineRenderer">
            <summary>
            Represents a class for PXHorLineElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXHtmlRenderer">
            <summary>
            Represents a base class for all HTML renderers of wiki elements.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.#ctor">
            <summary>
            Initializes a new instance of PXHtmlRenderer class.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.#ctor(PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Initializes a new instance of PXHtmlRenderer class.
            </summary>
            <param name="settings">Formatting settings.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.ResultHtml">
            <summary>
            Gets resulting HTML containing rendered elements.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.OnRegisterCustomRenderers">
            <summary>
            Registers custom HTML renderers for PXElement-derived objects.
            Override this method to provide rendering of your custom objects.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.DoRender(PX.Data.Wiki.Parser.PXElement,System.Text.StringBuilder,PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Performs rendering of the given element if its renderer is available.
            </summary>
            <param name="el">An element to render.</param>
            <param name="resultHtml">A StringBuilder object which will contain rendered result.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXHtmlRenderer.Render(PX.Data.Wiki.Parser.PXElement,System.Text.StringBuilder,PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Renders specified element. The default implementation does nothing.
            Override this method and provide rendering logic in your custom renderers.
            </summary>
            <param name="elem">An element to render.</param>
            <param name="resultHtml">A StringBuilder object which will contain rendered result.</param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXHtmlTagRenderer">
            <summary>
            Represents a class for PXHtmlTagElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXImageRenderer">
            <summary>
            Represents a class for PXImageElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXIndentRenderer">
            <summary>
            Represents a class for PXIndentElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXLinkRenderer">
            <summary>
            Represents a class for PXLinkElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXRssArticleRenderer">
            <summary>
            Represents a class for PXRssArticleLink HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXRssRenderer">
            <summary>
            Represents a class for PXRssLink HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXSectionRenderer">
            <summary>
            Represents a class for PXSectionElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXSpecialTagRenderer">
            <summary>
            Represents a class for PXSpecialTagElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXTableRenderer">
            <summary>
            Represents a class for PXTableElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXTableRowRenderer">
            <summary>
            Represents a class for PXTableRow HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXTableCellRenderer">
            <summary>
            Represents a class for PXTableCell HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXStyledTextRenderer">
            <summary>
            Represents a class for PXStyledTextElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Html.PXTextRenderer">
            <summary>
            Represents a class for PXTextElement HTML rendering.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXTextRenderer.ReplaceNewLines(PX.Data.Wiki.Parser.PXTextElement,System.Text.StringBuilder)">
            <summary>
            Writes new lines standing in the beginning of text element as HTML line breaks into resultHtml.
            </summary>
            <param name="e">Text element to search starting new lines in.</param>
            <param name="resultHtml">A string builder containing resulting HTML.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Html.PXTextRenderer.ReplaceSiblingNewLines(System.String,System.Text.StringBuilder)">
            <summary>
            This methods handles newlines using algorithm which is utilized by MediaWiki.org
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Pdf.PXImageRenderer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of PXImageRenderer class.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXBoxRenderer">
            <summary>
            Represents a class for rendering PXBoxElement to txt.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXEmptyRenderer">
            <summary>
            Represents a class for PXEmptySpaceElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXHeaderRenderer">
            <summary>
            Represents a class for PXHeaderElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXHtmlTagRenderer">
            <summary>
            Represents a class for PXHtmlTagElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXIndentRenderer">
            <summary>
            Represents a class for PXIndentElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXTxtLinkRenderer">
            <summary>
            Represents a class for PXLinkElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXSectionRenderer">
            <summary>
            Represents a class for PXSectionElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXSpecialTagRenderer">
            <summary>
            Represents a class for PXSpecialTagElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXStyledTextRenderer">
            <summary>
            Represents a class for PXStyledTextElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PlainTxt.PXTextRenderer">
            <summary>
            Represents a class for PXTextElement txt rendering.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.Result">
            <summary>
            Gets resulting text string.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.CharsSpace">
            <summary>
            Gets or sets space between two sibling characters.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.ColsCount">
            <summary>
            Gets or sets maximum number of columns in each line of resulting txt document.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.LinePrefix">
            <summary>
            Gets or sets prefix which is displayed in the beginning of each line.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.LineSuffix">
            <summary>
            Gets or sets suffix which is displayed in the end of each line.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.FillEachLine">
            <summary>
            Gets or sets value indicating whether each line of text will occupy ColsCount space.
            If the line is shorter than ColsCount it will be expanded by filling with whitespaces.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.AllowJustify">
            <summary>
            Gets or sets value indicating whether added text should be justified.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PlainTxt.PXTxtRenderContext.Append(System.String)">
            <summary>
            Appends given value to text result.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXRenderer">
            <summary>
            Represents a base class for rendering of parsed wiki text.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXElementRendererAttribute">
            <summary>
            Represents information of elements available for rendering in specific renderer
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXRenderer`1">
            <summary>
            Represents a base rendering class with thread-safe capabilities.
            </summary>
            <typeparam name="T">PXRender-derived type.</typeparam>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXRenderer`1.RegisterRenderer(System.Type,`0)">
            <summary>
            Registers a T-type renderer for specified element type.
            </summary>
            <param name="elementType">Type of element renderer is being registered for.</param>
            <param name="renderer">An object which should render 'elementType' objects.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXRenderer`1.GetRenderer(PX.Data.Wiki.Parser.PXElement)">
            <summary>
            Returns renderer for the given element.
            </summary>
            <param name="elem">Element to find renderer for.</param>
            <returns>An PXHtmlRenderer object which is able to render 'elem' or null if appropriate renderer can not be found.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXRenderer`1.OnRegisterCustomRenderers">
            <summary>
            Registers custom renderers for PXElement-derived objects.
            Override this method to provide rendering of your custom objects.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXBoxRenderer">
            <summary>
            Represents a class for rendering PXBoxElement to RTF.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXCodeBoxRenderer">
            <summary>
            Represents a class for PXCodeBoxElement rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXEmbeddedVideoRenderer">
            <summary>
            Represents a class for PXEmbeddedVideoElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXEmptyRenderer">
            <summary>
            Represents a class for PXEmptySpaceElement HTML rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXHeaderRenderer">
            <summary>
            Represents a class for PXHeaderElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXHiddenRenderer">
            <summary>
            Represents a class for PXHiddenElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXHorLineRenderer">
            <summary>
            Represents a class for PXHorLineElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXHtmlTagRenderer">
            <summary>
            Represents a class for PXHtmlTagElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXImageRenderer">
            <summary>
            Represents a class for PXImageElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXIndentRenderer">
            <summary>
            Represents a class for PXIndentElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXLinkRenderer">
            <summary>
            Represents a class for PXLinkElement HTML rendering.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.Rtf.PXRowSettings.CellSpacing">
            <summary>
            Half the space between the cells of a table row in twips.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.Rtf.PXRowSettings.MinRowHeight">
            <summary>
            Height of a table row in twips.
            When 0, the height is sufficient for all the text in the line;
            when positive, the height is guaranteed to be at least the specified height;
            when negative, the absolute value of the height is used, regardless of the height of the text in the line.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.Rtf.PXRowSettings.Offset">
            <summary>
            Position in twips of the leftmost edge of the table with respect to the left edge of its column.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.Rtf.PXRowSettings.KeepRow">
            <summary>
            Keep table row together. This row cannot be split by a page break.
            </summary>
        </member>
        <member name="F:PX.Data.Wiki.Parser.Rtf.PXRowSettings.KeepFollowingRow">
            <summary>
            Keep row in the same page as the following row.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXDocument.ClientWidth">
            <summary>
            Gets page width without its margins.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXListDefinition.ID">
            <summary>
            Gets list definition ID.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXListDefinition.LevelIndent">
            <summary>
            Gets or sets indentation of each single level for a list in twips.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXPicture.Width">
            <summary>
            Gets target width of the image in twips
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXPicture.Height">
            <summary>
            Gets target height of the image in twips
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXPicture.ScaleX">
            <summary>
            Gets or sets horizontal scaling value.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXPicture.ScaleY">
            <summary>
            Gets or sets vertical scaling value.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXShape.#ctor(PX.Data.Wiki.Parser.Rtf.PXDocument,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of PXShape class.
            </summary>
            <param name="width">Shape width in twips.</param>
            <param name="height">Shape height in twips.</param>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.Width">
            <summary>
            Gets width of shape. The value is in twips.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.Height">
            <summary>
            Gets height of shape. The value is in twips.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.Wrap">
            <summary>
            Gets or sets the type of wrap for the shape.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.SideWrap">
            <summary>
            Gets or sets wrap on side (for types Around and AroundTightly for Wrap).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.IsBelowText">
            <summary>
            Gets or sets relative z-ordering (false - text is below shape, true - shape is below text).
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.ZIndex">
            <summary>
            Gets or sets the z-order of the shape.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.Type">
            <summary>
            Gets or sets type of shape.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.PosH">
            <summary>
            Gets or sets spae horizontal alignment.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.PosV">
            <summary>
            Gets or sets shape vertical alignment.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Rtf.PXShape.Properties">
            <summary>
            Gets shape properties dictionary.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer">
            <summary>
            Represents a base class for all RTF renderers of wiki elements.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer.#ctor">
            <summary>
            Initializes a new instance of PXRtfRenderer class.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer.#ctor(PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Initializes a new instance of PXRtfRenderer class.
            </summary>
            <param name="settings">Formatting settings.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer.OnRegisterCustomRenderers">
            <summary>
            Registers custom RTF renderers for PXElement-derived objects.
            Override this method to provide rendering of your custom objects.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer.DoRender(PX.Data.Wiki.Parser.PXElement,PX.Data.Wiki.Parser.Rtf.PXRtfBuilder)">
            <summary>
            Performs rendering of the given element if its renderer is available.
            </summary>
            <param name="el">An element to render.</param>
            <param name="resultHtml">A StringBuilder object which will contain rendered result.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Rtf.PXRtfRenderer.Render(PX.Data.Wiki.Parser.PXElement,PX.Data.Wiki.Parser.Rtf.PXRtfBuilder)">
            <summary>
            Renders specified element. The default implementation does nothing.
            Override this method and provide rendering logic in your custom renderers.
            </summary>
            <param name="elem">An element to render.</param>
            <param name="resultHtml">A StringBuilder object which will contain rendered result.</param>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXSectionRenderer">
            <summary>
            Represents a class for PXSectionElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXSpecialTagRenderer">
            <summary>
            Represents a class for PXSpecialTagElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXTableRenderer">
            <summary>
            Represents a class for PXTableElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXStyledTextRenderer">
            <summary>
            Represents a class for PXStyledTextElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Rtf.PXTextRenderer">
            <summary>
            Represents a class for PXTextElement RTF rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXBoxRenderer">
            <summary>
            Represents a class for rendering PXBoxElement to txt.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXCodeBoxRenderer">
            <summary>
            Represents a class for rendering PXCodeBoxElement to txt.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXEmptyRenderer">
            <summary>
            Represents a class for PXEmptySpaceElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXHeaderRenderer">
            <summary>
            Represents a class for PXHeaderElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXTxtHiddenRenderer">
            <summary>
            Represents a class for rendering PXHiddenElement to txt.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXHorLineRenderer">
            <summary>
            Represents a class for PXHorLineElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXHtmlTagRenderer">
            <summary>
            Represents a class for PXHtmlTagElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXIndentRenderer">
            <summary>
            Represents a class for PXIndentElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXTxtLinkRenderer">
            <summary>
            Represents a class for PXLinkElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXSectionRenderer">
            <summary>
            Represents a class for PXSectionElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXSpecialTagRenderer">
            <summary>
            Represents a class for PXSpecialTagElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXStyledTextRenderer">
            <summary>
            Represents a class for PXStyledTextElement txt rendering.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.Txt.PXTextRenderer">
            <summary>
            Represents a class for PXTextElement txt rendering.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.Result">
            <summary>
            Gets resulting text string.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.CharsSpace">
            <summary>
            Gets or sets space between two sibling characters.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.ColsCount">
            <summary>
            Gets or sets maximum number of columns in each line of resulting txt document.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.LinePrefix">
            <summary>
            Gets or sets prefix which is displayed in the beginning of each line.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.LineSuffix">
            <summary>
            Gets or sets suffix which is displayed in the end of each line.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.FillEachLine">
            <summary>
            Gets or sets value indicating whether each line of text will occupy ColsCount space.
            If the line is shorter than ColsCount it will be expanded by filling with whitespaces.
            </summary>
        </member>
        <member name="P:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.AllowJustify">
            <summary>
            Gets or sets value indicating whether added text should be justified.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.Append(System.String)">
            <summary>
            Appends given value to text result.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.NewLine">
            <summary>
            Safely adds a new line to the resulting text.
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.SplitByLines(System.String)">
            <summary>
            Splits given value by lines in such order that lines legth is less or equal to ColsCount property value.
            This method also determines left and right margins.
            </summary>
            <param name="value">Value to split.</param>
            <returns>An array of lines.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.Txt.PXTxtRenderContext.CompleteCurrentLine">
            <summary>
            Fills current line with spaces and adds right container border if needed.
            </summary>
        </member>
        <member name="T:PX.Data.Wiki.Parser.PXWikiSettings">
            <summary>
            Defines settings for all wiki pages.
            Absolute context is for external usages (emails, export, etc.),
            relative context is for internal representaion (within our application).
            </summary>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXWikiParser.Parse(System.String)">
            <summary>
            Parses wiki mark-up and translates it into HTML.
            </summary>
            <param name="wikiText">Wiki-markup to translate.</param>
            <returns>Translated HTML or null if wikiText is null or empty.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXWikiParser.Parse(System.String,PX.Data.Wiki.Parser.PXWikiParserContext)">
            <summary>
            Parses wiki mark-up and translates it into HTML.
            </summary>
            <param name="wikiText">Wiki-markup to translate.</param>
            <param name="context">Settings which define how wikiText should be parsed and presented to user.</param>
            <returns>Translated HTML or null if wikiText is null or empty.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXWikiParser.Parse(System.String,PX.Data.Wiki.Parser.PXWikiParserContext,PX.Data.PXGraph,System.Type,System.Object[])">
            <summary>
            Format a wiki article, subsituting parameters from the graph type
            </summary>
            <param name="wikiText">Wiki-markup to translate.</param>
            <param name="context">Settings which define how wikiText should be parsed and presented to user.</param>
            <param name="graphType">Graph type.</param>
            <returns></returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXWikiParser.GetSection(System.String,System.Int32)">
            <summary>
            Returns specified section of wiki-markup (each section is a block of wiki-markup between two headers).
            </summary>
            <param name="wikiText">Wiki-markup to get specified section from.</param>
            <param name="nSection">Zero-based index of section to retrieve.</param>
            <returns>Text of the section (wiki-markup) or null if section could not be found.</returns>
        </member>
        <member name="M:PX.Data.Wiki.Parser.PXWikiParser.GetSection(System.String,System.Int32,System.String@,System.String@)">
            <summary>
            Returns specified section of wiki-markup (each section is a block of wiki-markup between two headers).
            </summary>
            <param name="wikitext">Wiki-markup to get specified section from.</param>
            <param name="nSection">Zero-based index of section to retrieve.</param>
            <param name="prevtext">After method finishes will contain wiki text preceding specified section.</param>
            <param name="nexttext">After method finishes will contain wiki text following specified section.</param>
            <returns>Text of the section (wiki-markup) or null if section could not be found.</returns>
        </member>
        <member name="T:PX.Data.Wiki.WikiExportCollection">
            <exclude/>
        </member>
        <member name="T:PX.Security.IUserManagementService">
            <remarks>
            Not only is this internal, it is also <b>experimental</b>, we're still fiddling with it.
            So don't use it unless you either really have to or like living on the bleeding edge.
            </remarks>
        </member>
        <member name="M:PX.Security.UserManagementServiceExtensions.GetUserAndMarkOnline(PX.Security.IUserManagementService,System.Web.HttpContext)">
            <summary>Mimics <see cref="M:System.Web.Security.Membership.GetUser">Membership.GetUser()</see>.</summary>
        </member>
        <member name="M:PX.Security.UserManagementServiceExtensions.GetCurrentUserName(System.Web.HttpContext)">
            <summary>Mimics (private) <see cref="!:Membership.GetCurrentUserName()">Membership.GetCurrentUserName</see>.</summary>
        </member>
        <member name="F:PX.SM.PXPerformanceMonitor.UserExpirationMinutes">
            <summary>
            Expiration time in minutes for PXPerformanceInfo object in the last requests queue.
            </summary>
        </member>
        <member name="T:PX.SM.PXViewsAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXWizardSummaryAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.graph">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.templateID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.description">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.noteID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplate.tStamp">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.templateId">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.orderId">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.active">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.line">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.container">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.view">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.rowType">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.field">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.value">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateData.fieldId">
            <exclude/>
        </member>
        <member name="T:PX.SM.AUTemplateController">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.orderId">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.active">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.line">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.cName">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.fName">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboard.value">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboardSettings">
            <exclude/>
        </member>
        <member name="T:PX.SM.RowClipboardSettings.templateName">
            <exclude/>
        </member>
        <member name="T:PX.SM.TranslationMaint">
            <exclude/>
            <exclude/>
            <exclude/>
            <exclude/>
        </member>
        <member name="T:PX.SM.LocalizationRecordView">
            <exclude/>
        </member>
        <member name="T:PX.SM.TranslationSetMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.TranslationSetProcessing">
            <exclude/>
        </member>
        <member name="T:PX.SM.CollectResourceSettings">
            <exclude/>
        </member>
        <member name="T:PX.SM.CollectStringsSettings">
            <exclude/>
        </member>
        <member name="M:PX.SM.Access.UpdateParent(PX.SM.Role)">
            <summary>
            Sets Roles current to update the main view (Roles) because Audit requires this to save the batch correctly.
            </summary>
        </member>
        <member name="T:PX.SM.SFEntitySetup">
            <summary>
            Dummy DAC for PX.Salesforce.SFEntitySetup
            </summary>
        </member>
        <member name="T:PX.SM.SFSyncRecord">
            <summary>
            Dummy DAC for PX.Salesforce.SFSyncRecord
            </summary>
        </member>
        <member name="T:PX.SM.RelationGroup.ModuleAllAttribute">
            <summary>
            Allow show list of application modules.
            </summary>
            <example>
            [ModuleAll]
            </example>
        </member>
        <member name="T:PX.SM.PXSelectSiteMapTree`5">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSelectSiteMapTreeBase`6">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSiteMapEnumeratorBase">
            <exclude/>
        </member>
        <member name="M:PX.SM.PXSiteMapEnumeratorBase.CreateSiteMap(PX.Data.PXSiteMapNode)">
            <summary>
            Converts PXSiteMapNode to SiteMap object.
            </summary>
        </member>
        <member name="T:PX.SM.PXSiteMapEnumerator">
            <summary>
            Default site map enumerator that enumerates all nodes and applies defined filter.
            </summary>
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSiteMapFilteredPathEnumerator">
            <summary>
            Returns only nodes that matches defined filter rules, and path to them from the root node.
            </summary>
        </member>
        <member name="T:PX.SM.PXSiteMapFilterRuleStorage">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSiteMapNodeFilter">
            <exclude/>
        </member>
        <member name="M:PX.SM.PXSiteMapNodeFilter.MeetsFilter(PX.Data.PXSiteMapNode)">
            <summary>
            Returns true if defined node meets conditions for at least one filter rule.
            </summary>
        </member>
        <member name="T:PX.SM.WikiSiteMapEnumerator">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo">
            <summary>
            DAC for exposing several calculated date fields for a date.
            </summary>
        </member>
        <member name="T:PX.SM.DateInfo.DateDerivativeBaseAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.DayInWeekAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.WeekEndingAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.date">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.quarter">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.month">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.day">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.dateInt">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.monthName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.monthInCalendar">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.quarterInCalendar">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.dayInWeek">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.dayOfWeekName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DateInfo.weekEnding">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.localeName">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.description">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.showValidationWarnings">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.number">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.isActive">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.cultureReadableName">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.formatID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.isDefault">
            <exclude/>
        </member>
        <member name="T:PX.SM.Locale.isAlternative">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.formatID">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.templateLocale">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.numberDecimalSeporator">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.numberGroupSeparator">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.dateTimePattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.timeShortPattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.timeLongPattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.dateShortPattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.dateLongPattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.aMDesignator">
            <exclude/>
        </member>
        <member name="T:PX.SM.LocaleFormat.pMDesignator">
            <exclude/>
        </member>
        <member name="T:PX.SM.StandartDateTimeFormat">
            <exclude/>
        </member>
        <member name="T:PX.SM.StandartDateTimeFormat.pattern">
            <exclude/>
        </member>
        <member name="T:PX.SM.UserLocaleFormat">
            <exclude/>
        </member>
        <member name="T:PX.SM.UserLocaleFormat.localeName">
            <exclude/>
        </member>
        <member name="T:PX.SM.UserLocaleFormat.formatID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.script">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.type">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.MobileSiteMap.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.notificationID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.name">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.nfrom">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.nto">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.ncc">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.nBcc">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.subject">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.body">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.localeName">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.noteID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.Notification.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="P:PX.SM.Notification.ShowReportTabExpr">
            <summary>
            A service field. It is used to hide "Report" tab on SM204003 page.
            </summary>
        </member>
        <member name="P:PX.SM.Notification.ShowSendByEventsTabExpr">
            <summary>
            A service field. It is used to hide "Send by Events" tab on SM204003 page.
            </summary>
        </member>
        <member name="T:PX.SM.NotificationReport.reportID">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReport.notificationID">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReport.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReport.title">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReport.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReportParameter.reportID">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReportParameter.name">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationReportParameter.value">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.nodeID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.position">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.title">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.url">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.graphtype">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.parentID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMap.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.PortalMap">
            <exclude/>
        </member>
        <member name="T:PX.SM.PortalMap.nodeID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PortalMap.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PortalMap.parentID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PortalMap.position">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapFile">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapFile.nodeID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapFile.position">
            <exclude/>
        </member>
        <member name="T:PX.SM.SelectedTreeNode">
            <exclude/>
        </member>
        <member name="T:PX.SM.SelectedTreeNode.nodeID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXIconsListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry.title">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry.orderIndex">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry.graphType">
            <exclude/>
        </member>
        <member name="T:PX.SM.SiteMapCurrentUserEntry.accessRights">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.pKID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.urlGuid">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.isPublic">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.Tstamp">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMCalendarSettings.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMEntitySearchSettings">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMEntitySearchSettings.entityType">
            <exclude/>
        </member>
        <member name="T:PX.SM.SMEntitySearchSettings.entityName">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.defaultEMailAccountID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.emailTagPrefix">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.emailTagSuffix">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.archiveEmailsOlderThan">
            <exclude/>
        </member>
        <member name="P:PX.SM.PreferencesEmail.SendUserEmailsImmediately">
            <summary>
            If True: The system not only move email to Pending processing status, but also automatically apply Process action to move email activity into Processing status.
            </summary>
        </member>
        <member name="T:PX.SM.PreferencesEmail.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.PreferencesEmail.lastModifiedByID">
            <exclude/>
        </member>
        <member name="P:PX.SM.SMPrinter.Included">
            <summary>
            An unbound field that is used in the user interface to include the budget tree node into a <see cref="T:PX.SM.RelationGroup">restriction group</see>.
            Also see <see cref="!:GLBudgetTree.GroupMask"/>.
            </summary>
        </member>
        <member name="P:PX.SM.TaskTemplate.ShowCreatedByEventsTabExpr">
            <summary>
            A service field. It is used to hide "Created by Events" tab on SM204005 page.
            </summary>
        </member>
        <member name="T:PX.SM.SMGuidDefaultAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXPhoneValidationAttribute">
            <summary>Validates phone number field.</summary>
            <example>
            	<code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="T:PX.SM.FileAttachableAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXUsersSourceListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXUsersSourceListAttribute.application">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXUsersSourceListAttribute.activeDirectory">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXUsersSourceListAttribute.claim">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationStatusAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationStatusAttribute.draft">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationStatusAttribute.published">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationStatusAttribute.archived">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationMajorStatusesAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.NotificationMajorStatusesAttribute.published">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXViewDetailsButtonAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.IncomingMailProtocolsAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.AuthenticationType">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXAdministratorRoleAttribute.PXDefaultAdministratorRoleAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXPrinterSelectorAttribute">
            <summary>
            Searches for printers available for the current user
            </summary>
        </member>
        <member name="T:PX.SM.PXScaleSelectorAttribute">
            <summary>
            Searches for scales available for the current user
            </summary>
        </member>
        <member name="T:PX.SM.PXScannerSelectorAttribute">
            <summary>
            Searches for scanners available for the current user
            </summary>
        </member>
        <member name="M:PX.SM.SMPrintJobMaint.CreatePrintJobGroup(PX.Data.PXAdapter,System.Func{System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Guid}},System.String,System.String,System.Nullable{System.Int32},PX.Data.PXReportRequiredException,System.String)">
            <summary>
            Creates new print job. Automatically extracts ReportIDs and report parameters from PXReportRequiredException
            </summary>
            <param name="adapter"></param>
            <param name="GetPrinterFromNotification">expects NotificationUtility(...).SearchPrinter function</param>
            <param name="source"></param>
            <param name="reportID"></param>
            <param name="branchID"></param>
            <param name="ex"></param>
            <param name="description"></param>
            <returns>Returns true if print job is created successfully</returns>
        </member>
        <member name="M:PX.SM.TaskManager.DottedScreenId(System.String)">
            <summary>
            Formats screen ID with a dot after every 2 characters except after the rightmost 2 characters.
            </summary>
            <param name="screenId">ScreenId without dots.</param>
            <returns></returns>
        </member>
        <member name="P:PX.SM.TaskTemplateMaint.CurrentScreenIsGI">
            <summary>Indicates if the screen selected in a current task template is a Generic Inquiry</summary>
        </member>
        <member name="P:PX.SM.TaskTemplateMaint.CurrentScreenID">
            <summary>Identity of the screen selected in a current task template</summary>
        </member>
        <member name="P:PX.SM.TaskTemplateMaint.CurrentSiteMapNode">
            <summary>Site map node of the screen selected in a current task template</summary>
        </member>
        <member name="M:PX.SM.TaskTemplateMaint.UpdateValueFieldState(PX.Data.PXCache,PX.SM.TaskTemplateSetting)">
            <summary>Provides the Value field with the state of appropriate Task's field or with the list of fields from the selected screen.</summary>
        </member>
        <member name="T:PX.SM.ForceSaveInDashAttribute">
            <summary>Prohibits from saving cache records of a certain DAC. For example, if these records have been calculated only at run time.</summary>
            <example>
            [ForceSaveInDash]
            <code title="" description="" lang="neutral"></code></example>
        </member>
        <member name="T:PX.SM.DashDefinition">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.ownerName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.dashID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.nodeID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.frameID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.type">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.graphType">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.frameTitle">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.enquiryUrl">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.colIndex">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.colSpan">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.rowIndex">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.rowSpan">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDefinition.isPortal">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.defID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.dashID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.isDefault">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.defName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.viewName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.defValues">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.keys">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.sortColumns">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.filters">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashBaseDescription.sourceScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.dashID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.drilldownUrl">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.drilldownDefault">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.maxLines">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.fieldNames">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.fieldSizes">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.primaryViewName">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.availableFields">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashDescription.availableActions">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.dashID">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.maxPoints">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.chartType">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.chartMinHeight">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.chartXValueFields">
            <exclude/>
        </member>
        <member name="T:PX.SM.DashChartDescription.chartYValueFields">
            <exclude/>
        </member>
        <member name="T:PX.SM.Users">
            <summary>
            Represents a user account to access Acumatica ERP.
            </summary>
            <remarks>
            To access Acumatica ERP, an individual must have a user account in the system and a user role assigned to the account.
            Then based on their roles, users may access only the resources and perform only the actions they are authorized to.
            The records of this type are created and edited on the <i>Users (SM201010)</i> form,
            which corresponds to the <see cref="T:PX.SM.Access" /> graph.
            </remarks>
        </member>
        <member name="T:PX.SM.Users.PK">
            <summary>
            Primary Key
            </summary>
        </member>
        <member name="P:PX.SM.Users.PKID">
            <summary>
            The unique identifier assigned to the user login.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Username">
            <summary>
            The login name for the user.
            This field is a key field.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Domain">
            <summary>
            The domain name of the user login
            </summary>
        </member>
        <member name="P:PX.SM.Users.DisplayName">
            <inheritdoc cref="P:PX.SM.Users.FullName"/>
        </member>
        <member name="P:PX.SM.Users.ExtRef">
            <summary>
            The user <see cref="P:PX.Data.Access.ActiveDirectory.User.SID">SID (Security Identifier)</see> from AD.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Source">
            <summary>
            This field indicates the location from where the user logged in.
            </summary>
            <value>
            The field can have one of the values listed in the <see cref="T:PX.SM.PXUsersSourceListAttribute"/> class.
            The default value is <see cref="F:PX.SM.PXUsersSourceListAttribute.Application"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.FirstName">
            <summary>
            The first name of the user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.IsADUser">
            <summary>
            This field indicates whether the user login was created from AD.
            </summary>
        </member>
        <member name="P:PX.SM.Users.LastName">
            <summary>
            The last name of the user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.FullName">
            <summary>
            The full name of the user as a concatenation <see cref="P:PX.SM.Users.FirstName"/> and <see cref="P:PX.SM.Users.LastName"/>.
            </summary>
        </member>
        <member name="P:PX.SM.Users.ApplicationName">
            <summary>
            The name of the application for which the user was created.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Email">
            <summary>
            The email of the user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Phone">
            <summary>
            The phone number of the user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Comment">
            <summary>
            Additional information about this user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.LoginTypeID">
            <summary>
            The type of the user login.
            </summary>
            <value>
            Corresponds to the <see cref="P:PX.EP.EPLoginType.LoginTypeID"/> field.
            </value>
        </member>
        <member name="P:PX.SM.Users.ContactID">
            <summary>
            The linked contact for the user.
            </summary>
            <value>
            Corresponds to the <see cref="!:Contact.ContactID" /> field.
            </value>
        </member>
        <member name="P:PX.SM.Users.GeneratePassword">
            <summary>
            This field indicates whether the system needs to automatically generate the password automatically for this user.
            </summary>
            <value>
            The default value is <see langword="false"/> (the user has to input the password manually).
            </value>
        </member>
        <member name="P:PX.SM.Users.Password">
            <summary>
            The password of the user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.OldPassword">
            <exclude />
        </member>
        <member name="P:PX.SM.Users.NewPassword">
            <exclude />
        </member>
        <member name="P:PX.SM.Users.ConfirmPassword">
            <exclude />
        </member>
        <member name="P:PX.SM.Users.AllowPasswordRecovery">
            <summary>
            This field indicates whether the password can be recovered.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.PasswordQuestion">
            <summary>
            The question for recovering the password.
            </summary>
        </member>
        <member name="P:PX.SM.Users.PasswordAnswer">
            <summary>
            The answer to the question for recovering the password.
            </summary>
        </member>
        <member name="P:PX.SM.Users.RecoveryLink">
            <summary>
            The link for recovering the password.
            </summary>
        </member>
        <member name="P:PX.SM.Users.TwoFactorCode">
            <summary>
            The code name for two-factor authentication.
            </summary>
        </member>
        <member name="P:PX.SM.Users.PasswordChangeOnNextLogin">
            <summary>
            This field indicates that the user will have to change the password during next authentication.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.PasswordChangeable">
            <summary>
            This field indicates whether the user can change the password.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.PasswordNeverExpires">
            <summary>
            This field indicates whether the password can expire.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.IsHidden">
            <exclude />
        </member>
        <member name="P:PX.SM.Users.IsApproved">
            <summary>
            The field indicates that login was activated.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.IsPendingActivation">
            <summary>
            The field indicates that login is pending activation.
            </summary>
        </member>
        <member name="P:PX.SM.Users.Guest">
            <summary>
            The field indicates that login is guest account.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.IsAssigned">
            <exclude />
        </member>
        <member name="P:PX.SM.Users.LastActivityDate">
            <summary>
            The date and time of the user's last activity.
            </summary>
        </member>
        <member name="P:PX.SM.Users.LastLoginDate">
            <summary>
            The date and time of user's last login.
            </summary>
        </member>
        <member name="P:PX.SM.Users.LastPasswordChangedDate">
            <summary>
            The date and time of the last time the user changed the password.
            </summary>
        </member>
        <member name="P:PX.SM.Users.CreationDate">
            <summary>
            The date and time of when the login was created.
            </summary>
        </member>
        <member name="P:PX.SM.Users.IsOnLine">
            <summary>
            This field indicates whether the user is online.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.LockedOutDate">
            <summary>
            The date and time of the login lockout.
            </summary>
        </member>
        <member name="P:PX.SM.Users.IsLockedOut">
            <summary>
            This field indicates whether this login is temporarily locked out.
            </summary>
        </member>
        <member name="P:PX.SM.Users.OverrideADRoles">
            <summary>
            This field indicates whether the Active Directory roles will be overridden with local roles.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.SM.Users.LastLockedOutDate">
            <summary>
            The date and time of when the login was locked out.
            </summary>
        </member>
        <member name="P:PX.SM.Users.FailedPasswordAttemptCount">
            <summary>
            The number of unsuccessful attempts to enter the password after which the account should be locked.
            </summary>
        </member>
        <member name="P:PX.SM.Users.FailedPasswordAttemptWindowStart">
            <summary>
            The date and time of when the user's attempts to login were exhausted.
            </summary>
        </member>
        <member name="P:PX.SM.Users.FailedPasswordAnswerAttemptCount">
            <summary>
            The number of unsuccessful attempts to enter the answer to the <see cref="P:PX.SM.Users.PasswordQuestion"></see>, after which the account should be locked.
            </summary>
        </member>
        <member name="P:PX.SM.Users.FailedPasswordAnswerAttemptWindowStart">
            <summary>
            The date and time of when the user attempts to answer the <see cref="P:PX.SM.Users.PasswordQuestion"></see> were exhausted.
            </summary>
        </member>
        <member name="P:PX.SM.Users.State">
            <summary>
            This fields indicates what is the current status of the user login.
            </summary>
            <value>
            The field can have one of the values listed in the <see cref="T:PX.SM.Users.state.List"/> class.
            </value>
        </member>
        <member name="P:PX.SM.Users.Included">
            <exclude />
        </member>
        <!-- Badly formed XML comment ignored for member "P:PX.SM.Users.ActivationID" -->
        <member name="P:PX.SM.Users.MultiFactorType">
            <summary>
            The option of two-factor user authentication.
            </summary>
            <value>
            The field can have one of the values listed in the its PXIntListAttribute.
            The default value is 0 ("None").
            </value>
        </member>
        <member name="P:PX.SM.Users.MultiFactorOverride">
            <summary>
            This field indicates whether the security preferences will be overridden.
            </summary>
        </member>
        <member name="P:PX.SM.Users.AllowedSessions">
            <summary>
            The number of the allowed number of sessions for this user.
            </summary>
        </member>
        <member name="P:PX.SM.Users.ForbidLoginWithPassword">
            <summary>
            This field indicates whether the login with the password has to be forbidden.
            </summary>
        </member>
        <member name="P:PX.SM.Users.OverrideLocalRolesWithOidcProviderRoles">
            <summary>
            This field indicates whether the local roles are overridden with OIDC (OpenID Connect) provider roles.
            </summary>
        </member>
        <member name="T:PX.SM.UsersInRoles">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.rolename">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.applicationName">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.inherited">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.displayName">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.state">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.domain">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.comment">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.UsersInRoles.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="M:PX.SM.AUAuditInquire.FillFields(PX.Data.PXCache,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Fills modified fields with new values and updates "lastValues" dictionary.
            </summary>
        </member>
        <member name="T:PX.SM.IPXAuditSource">
            <summary>
            Provides an ability to customize which tables should be audited for a specific graph.
            </summary>
            <example>
            public class APVendorPriceMaint : PXGraph&lt;APVendorPriceMaint&gt;, IPXAuditSource
            </example>
        </member>
        <member name="M:PX.SM.IPXAuditSource.GetMainView">
            <summary>
            Returns the name of the main data view in the current graph.
            </summary>
            <remarks>
            In a typical case, if there is a PXFilter-typed view in the graph, it will be the primary view.
            But for audit purposes we need the data view instead of such "primary" view
            (e.g. when we need to share audit between multiple screens)
            </remarks>
            <returns>The name of the view.</returns>
        </member>
        <member name="M:PX.SM.IPXAuditSource.GetAuditedTables">
            <summary>
            Returns the list of tables that should be audited.
            </summary>
        </member>
        <member name="M:PX.SM.AUReportProcess.RenderUniversalReport(PX.SM.AUReportProcess.ReportSettings)">
            <summary>
            render report or aRmReport
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:PX.SM.PXCancelCommandPreparingScope">
            <summary>Cancels execution of command preparing events for specified field of specified cache.</summary>
        </member>
        <member name="M:PX.SM.PXCancelCommandPreparingScope.#ctor(PX.Data.PXCache,System.String)">
            <summary>Cancels execution of command preparing events for specified field of specified cache.</summary>
            <param name="cache">The cache object those command preparing events will be disabled.</param>
            <param name="fieldName">The name of the field for which events will be disabled.</param>
        </member>
        <member name="P:PX.SM.AUSchedule.ShouldBeRan">
            <summary>
            Determines whether schedule is fully active and should be ran (checks all required conditions like End Date, Run Counter and so on).
            </summary>
        </member>
        <member name="P:PX.SM.AUSchedule.ShowEventsTabExpr">
            <summary>
            A service field that is used to hide the Events tab on the Automation Schedules (SM205020) form.
            </summary>
        </member>
        <member name="P:PX.SM.AUSchedule.CreatedFromBusinessEvent">
            <summary>
            A service field that is used to hide warning about no events on the Automation Schedules (SM205020) form.
            </summary>
        </member>
        <member name="P:PX.SM.AUSchedule.StartDateTime">
            <summary>
            Represents merged StartDate and StartTime.
            </summary>
        </member>
        <member name="P:PX.SM.AUSchedule.EndDateTime">
            <summary>
            Represents merged EndDate and EndTime.
            </summary>
        </member>
        <member name="T:PX.SM.AUSchedule.nextRunDateTime">
            <summary>
            Represents merged NextRunDate and NextRunTime.
            </summary>
        </member>
        <member name="T:PX.SM.Alias.Note">
            <exclude/>
        </member>
        <member name="T:PX.SM.Alias.Note.entityType">
            <exclude/>
        </member>
        <member name="T:PX.SM.Alias.Note.graphType">
            <exclude/>
        </member>
        <member name="M:PX.SM.AUWorkflowActionsEngine.IsWorkflowCouldBeExecuted(PX.Data.PXGraph,System.Object,System.String,PX.Data.PXAdapter,PX.SM.AUScreenActionBaseState)">
            <summary>
            Checks if workflow engine should be executed for selected record and action.
            Currently checks existence of any transition from current records state and selected action
            and existence of any auto action in current current records
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.SM.AUWorkflowState.IsNonPersistent">
            <summary>
            If true, an entity in the state cannot be saved.
            </summary>
        </member>
        <member name="M:PX.SM.AUWorkflowState.GetNextDefaultLayout(System.Int32,System.Int32)">
            <summary>
            Get default X and Y coordinates in the format for new workflow state.
            </summary>
            <param name="lineNumber">Count of existing states.</param>
            <param name="maxInlineItemsCount">Count of possible inline states on diagram.</param>
            <returns>Formatted X and Y coordinates for new state.</returns>
        </member>
        <member name="M:PX.SM.FormFieldHelper.TryGetFieldFromFormFieldName(PX.Data.PXGraph,System.String,System.Type@,System.String@)">
            <summary>
            Get DAC type and DAC field name from the form field name.
            </summary>
        </member>
        <member name="T:PX.SM.IWorkflowConditionEvaluateService">
            <summary>
            Service that used to evaluate conditions in workflow process
            </summary>
        </member>
        <member name="M:PX.SM.IWorkflowConditionEvaluateService.EvaluateConditions(PX.Data.PXGraph,System.Object,PX.Data.Automation.State.Screen,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},PX.Data.PXCache,System.String)">
            <summary>
            Evaluate conditions for transitions, hidden fields on dialog forms in workflow process
            </summary>
            <param name="graph">Graph/</param>
            <param name="row">Object, that processed in workflow.</param>
            <param name="screen">Screen info with all screen conditions.</param>
            <param name="form">Name of the dialog form</param>
            <param name="formValues">Values of form fields</param>
            <param name="cache">Cache</param>
            <param name="screenId">Screen ID that have workflow process</param>
            <returns>Key-value pairs of condition identifier with evaluated boolean value</returns>
        </member>
        <member name="M:PX.SM.WhereWorkflowActionEnabled`2.#ctor">
            <exclude/>
        </member>
        <member name="M:PX.SM.WhereWorkflowActionEnabled`2.#ctor(PX.Data.IBqlField)">
            <exclude/>
        </member>
        <member name="T:PX.SM.WorkflowConditionEvaluateService">
            <inheritdoc />
        </member>
        <member name="T:PX.SM.PXWikiSelectorAttribute">
            <summary>
            Allow show acticles of certain wiki.
            Permissions for this records are validated.
            </summary>
            <example>
            [PXWikiSelector]
            </example>
        </member>
        <member name="T:PX.SM.PXWikiTemplateSelectorAttribute">
            <summary>
            Allow show articles of certain template wiki.
            </summary>
            <example>
            [PXWikiTemplateSelector(typeof(MyDAC.myWikiName)]
            </example>
        </member>
        <member name="T:PX.SM.PXWikiTemplateSelectorAttribute.Template">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXWikiTemplateSelectorAttribute.Template.wikiName">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXWikiTemplateSelectorAttribute.Template.key">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackIsFindAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackIsFindAttribute.Yes">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackIsFindAttribute.No">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackIsFindAttribute.Unsure">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r1">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r2">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r3">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r4">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r5">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r6">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r7">
            <exclude/>
        </member>
        <member name="T:PX.SM.FeedBackSatisfactionAttribute.r10">
            <exclude/>
        </member>
        <member name="T:PX.SM.TemplateLeftLike">
            <exclude/>
        </member>
        <member name="T:PX.SM.ContainerTemplateLeftLike">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiArticleTypeAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiArticleTypeAttribute.kb">
            <exclude/>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.Save(System.Byte[],PX.SM.PXBlobStorageContext)">
            <summary>
            Saves data to the S3 storage bucket
            </summary>
            <param name="data">Actual data to be saved to AWS</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.AddMetaData(Amazon.S3.Model.MetadataCollection,PX.SM.PXBlobStorageContext)">
            <summary>
            Adds metdata data to the specified medata data collection.
            </summary>
            <param name="metadata"></param>
            <param name="context"></param>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.Load(System.Guid)">
            <summary>
            Loads the object from the remote store by the specified object identifier
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.Remove(System.Guid)">
            <summary>
            Removes the object from the remote storage
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.CreateKeyToObject(System.Guid)">
            <summary>
            Generates an AWS access key for a given file object. The key may be used to access the object in AWS
            </summary>
            <param name="id">GUID identifier of the file being processed</param>
            <returns></returns>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.Init(System.Collections.Generic.IEnumerable{PX.SM.BlobProviderSettings})">
            <summary>
            Initializes this instance of the provider
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:PX.SM.PXBlobStorageS3Provider.CreateFactory">
            <summary>
            Creates an instance of <see cref="T:PX.SM.AmazonS3ClientFactory"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:PX.SM.PXBlobStorageS3Provider.Factory">
            <summary>
            Gets instance of <see cref="T:PX.SM.AmazonS3ClientFactory"/>
            </summary>
        </member>
        <member name="T:PX.SM.AmazonS3ClientFactory">
            <summary>
            Creates an instance of <see cref="T:Amazon.S3.AmazonS3Client"/>
            </summary>
        </member>
        <member name="M:PX.SM.AmazonS3ClientFactory.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:PX.SM.AmazonS3ClientFactory.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Initializes a new instance of <see cref="T:PX.SM.AmazonS3ClientFactory"/> 
            </summary>
            <param name="awsAccessKey"></param>
            <param name="awsSecretKey"></param>
        </member>
        <member name="M:PX.SM.AmazonS3ClientFactory.CreateProxy">
            <summary>
            Creates an instance of <see cref="T:Amazon.S3.AmazonS3Client"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:PX.SM.CRNowDefaultAttribute">
            <summary>
            Set DateTime.Now as default value
            </summary>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.currentOwnerID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.myOwner">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.ownerID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.workGroupID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.myWorkGroup">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageStatusFilter.filterSet">
            <exclude/>
        </member>
        <member name="P:PX.SM.UploadFile.IsAccessRightsFromEntities">
            <summary>
            Inherit Access Rights from Entities
            </summary>
        </member>
        <member name="P:PX.SM.UploadFileRevision.Size">
            <summary>
            Size in Kilobytes (!).
            </summary>
        </member>
        <member name="T:PX.SM.WikiRevision.uID">
            <summary>
            This is used for full-text indexing.
            </summary>
        </member>
        <member name="T:PX.SM.GuidToLink">
            <exclude/>
        </member>
        <member name="T:PX.SM.LinkToGuid">
            <exclude/>
        </member>
        <member name="T:PX.SM.KBArticleMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.KBFeedbackExplore">
            <exclude/>
        </member>
        <member name="T:PX.SM.KBFeedbackMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.SynchronizationProcess">
            <exclude/>
        </member>
        <member name="T:PX.SM.SynchronizationProcess.OrigUploadFileVersion">
            <exclude/>
        </member>
        <member name="T:PX.SM.SynchronizationFilter">
            <exclude/>
        </member>
        <member name="T:PX.SM.SynchronizationFilter.operation">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes.ListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes.ftp">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes.sftp">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes.http">
            <exclude/>
        </member>
        <member name="T:PX.SM.FIleSyncTypes.share">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncNamingFormat">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncNamingFormat.ListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncNamingFormat.revision">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncNamingFormat.date">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncOperations">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncOperations.ListAttribute">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncOperations.download">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileSyncOperations.upload">
            <exclude/>
        </member>
        <member name="T:PX.SM.FileExistsAction">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXNotSupportedFileTypeException">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXTooBigFileException">
            <exclude/>
        </member>
        <member name="T:PX.SM.UploadFileMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.UploadFileMaintenance.PXSelectFile">
            <exclude/>
        </member>
        <member name="T:PX.SM.UploadFileMaintenance.PXSelectFile.ViewPage">
            <exclude/>
        </member>
        <member name="M:PX.SM.UploadFileMaintenance.IsRestrictedFile(PX.SM.UploadFile)">
            <summary>
            Checks, whether file is attached to record which is restricted for viewing by current user.
            </summary>
        </member>
        <member name="M:PX.SM.UploadFileMaintenance.ComputeHash(PX.SM.UploadFile)">
            <summary>
            Check if file is system (restricted to view for all users)
            </summary>
            <param name="file"></param>
            <returns></returns>        
        </member>
        <member name="M:PX.SM.UploadFileMaintenance.SaveFile(PX.SM.FileInfo,PX.SM.FileExistsAction)">
            <summary>
            Saves a file to database or creates link to existing file.
            </summary>
            <param name="finfo">A structure describing file to save.</param>
            <param name="actionOnExisting">A <see cref="T:PX.SM.FileExistsAction"/> value.</param>
            <returns>True if file is successfully saved to database. Otherwise false.</returns>
        </member>
        <member name="M:PX.SM.UploadFileMaintenance.SaveFile(PX.SM.FileInfo)">
            <summary>
            Saves a file to database or creates link to existing file.
            </summary>
            <param name="finfo">A structure describing file to save.</param>
            <returns>True if file is successfully saved to database. Otherwise false.</returns>
        </member>
        <member name="P:PX.SM.UploadFileMaintenance.AllowedFileTypes">
            <summary>
            Gets an array of file types which are allowed for upload.
            </summary>
        </member>
        <member name="T:PX.SM.UploadFileInq">
            <exclude/>
        </member>
        <member name="T:PX.SM.Wiki">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSelectWikiFoldersTree">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAccessRightsMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementFilter">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementFilter.wikiID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementFilter.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementFilter.dateFrom">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementFilter.dateTo">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiAnnouncementReader">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiArticleMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiArticlesTree">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiCssMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.GetLinkFilterType">
            <exclude/>
        </member>
        <member name="T:PX.SM.GetLinkFilterType.externalLink">
            <exclude/>
        </member>
        <member name="T:PX.SM.GetLinkFilterType.wikiLink">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.PXSelectFile">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.PXSelectCurrentFile">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.ViewFile">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.CheckOutComment">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.CheckOutComment.comment">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.GetFilePath">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.LatestOnlySwitch">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.LatestOnlySwitch.latestOnly">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiFileMaintenance.FileInPageKey">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageMapMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource.key">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource.subKey">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource.screenID">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource.name">
            <exclude/>
        </member>
        <member name="T:PX.SM.EntityItemSource.number">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.key">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.subKey">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.name">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.path">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.icon">
            <exclude/>
        </member>
        <member name="T:PX.SM.CacheEntityItem.number">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate.key">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate.sourceType">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate.wiki">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate.notificationID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiTemplate.articleID">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSelectEMailTemplate">
            <exclude/>
        </member>
        <member name="T:PX.SM.PXSelectWikiPage">
            <exclude/>
        </member>
        <member name="T:PX.SM.EMailSourceHelper">
            <exclude/>
        </member>
        <member name="T:PX.SM.EMailSourceHelper.MakeSiteMapCondition">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiNotificationTemplateMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiNotificationTemplateMaintenanceNoRefresh">
            <exclude/>
        </member>
        <member name="T:PX.SM.IWikiMaintGraph">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageGraph`3">
            <exclude/>
        </member>
        <member name="T:PX.SM.IWikiPageMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageMaint`3">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageMaint`3.WikiPageSave">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageMaint`3.WikiPageDelete">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageReader`3">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageReader`6">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageReader`6.PXSelectPage">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiPageReader`6.PXSelectPage.ViewPage">
            <exclude/>
        </member>
        <member name="T:PX.SM.FilesLinkInfo">
            <exclude/>
        </member>
        <member name="T:PX.SM.FilesLinkInfo.externalPath">
            <exclude/>
        </member>
        <member name="T:PX.SM.FilesLinkInfo.internalPath">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiReader">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiShowReader">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiActions">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiActions.GetArticleEditGraph">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiSetupMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiSetupMaint.TemplateWikiPage">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiSetupMaint.TemplateWikiPage.pageID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiSitePageMaintenance">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiStatusMaint">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiStatusMaint.WikiPageOwned">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiStatusMaint.WikiPageOwned.approvalGroupID">
            <exclude/>
        </member>
        <member name="T:PX.SM.WikiStatusMaint.WikiPageOwned.approvable">
            <exclude/>
        </member>
        <member name="T:PX.Api.Compression.CompressedContent">
            <summary>
            Represents compressed HTTP content.
            </summary>
        </member>
        <member name="F:PX.Api.Compression.CompressedContent._originalContent">
            <summary>
            The original content
            </summary>
        </member>
        <member name="F:PX.Api.Compression.CompressedContent._compressor">
            <summary>
            The compressor
            </summary>
        </member>
        <member name="M:PX.Api.Compression.CompressedContent.#ctor(System.Net.Http.HttpContent,PX.Api.Compression.ICompressor)">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Api.Compression.CompressedContent"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="compressor">The compressor.</param>
        </member>
        <member name="M:PX.Api.Compression.CompressedContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
        </member>
        <member name="M:PX.Api.Compression.CompressedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            serialize to stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PX.Api.Compression.CompressedContent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="T:PX.Api.Compression.BaseCompressor">
            <summary>
            Base compressor for compressing streams.
            </summary>
            <remarks>
            Based on the work by: 
                Ben Foster (http://benfoster.io/blog/aspnet-web-api-compression)
                Kiran Challa (http://blogs.msdn.com/b/kiranchalla/archive/2012/09/04/handling-compression-accept-encoding-sample.aspx)
            </remarks>
        </member>
        <member name="P:PX.Api.Compression.BaseCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:PX.Api.Compression.BaseCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:PX.Api.Compression.BaseCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="T:PX.Api.Compression.DeflateCompressor">
            <summary>
            Compressor for handling <c>deflate</c> encodings.
            </summary>
        </member>
        <member name="P:PX.Api.Compression.DeflateCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:PX.Api.Compression.DeflateCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:PX.Api.Compression.DeflateCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="T:PX.Api.Compression.GZipCompressor">
            <summary>
            Compressor for handling <c>gzip</c> encodings.
            </summary>
        </member>
        <member name="P:PX.Api.Compression.GZipCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:PX.Api.Compression.GZipCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:PX.Api.Compression.GZipCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="T:PX.Api.Compression.ICompressor">
            <summary>
            Interface for stream compressors.
            </summary>
        </member>
        <member name="P:PX.Api.Compression.ICompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="T:PX.Api.Compression.HttpContentOperations">
            <summary>
            Helper methods for operating on <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
        </member>
        <member name="M:PX.Api.Compression.HttpContentOperations.CopyHeaders(System.Net.Http.HttpContent,System.Net.Http.HttpContent)">
            <summary>
            Copies the HTTP headers onto the new response.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:PX.Api.Compression.ServerCompressionHandler">
            <summary>
            Message handler for handling gzip/deflate requests/responses on a <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
        </member>
        <member name="F:PX.Api.Compression.ServerCompressionHandler._contentSizeThreshold">
            <summary>
            The content size threshold before compressing.
            </summary>
        </member>
        <member name="F:PX.Api.Compression.ServerCompressionHandler._httpContentOperations">
            <summary>
            The HTTP content operations
            </summary>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.#ctor(PX.Api.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Api.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.#ctor(System.Int32,PX.Api.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Api.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,PX.Api.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Api.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Int32,PX.Api.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:PX.Api.Compression.ServerCompressionHandler" /> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="P:PX.Api.Compression.ServerCompressionHandler.Compressors">
            <summary>
            Gets the compressors.
            </summary>
            <value>The compressors.</value>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.CompressResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Compresses the content.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:PX.Api.Compression.ServerCompressionHandler.DecompressRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Decompresses the request.
            </summary>
            <param name="request">The request.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:PX.Api.SingleAssemblyResolverHelper.UseCustomAssembliesResolver(System.Web.Http.HttpConfiguration,System.Reflection.Assembly[])">
            <summary>
            Registers custom <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/> implementation that returns only specified assemblies.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.Api.ISYObjectField" -->
        <member name="M:PX.Api.SyProviderRowResult.#ctor(System.Int32)">
            <summary>
            Construct positive row result
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="M:PX.Api.SyProviderRowResult.#ctor(System.Int32,System.String)">
            <summary>
            Construct negative row result with error message
            </summary>
            <param name="rowIndex"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:PX.Api.HtmlTableBuilder">
            *
        </member>
        <member name="T:PX.Api.Export.PXOptimizationBehaviorAttribute">
            <summary>
            Attribute can change behavior of optimized export.
            </summary>
        </member>
        <member name="P:PX.Api.Export.PXOptimizationBehaviorAttribute.IgnoreBqlDelegate">
            <summary>
            This flag says that bql delegate method is not change output rows of view and can be ignored in optimized export
            </summary>
        </member>
        <member name="P:PX.Api.ScreenUtils.ScreenInfo">
            <summary>
            <para>Returns the current ScreenInfo provider, if any, or the dummy provider if <see cref="T:CommonServiceLocator.ServiceLocator"/> is not set up.</para>
            <para>Use DI via injecting <see cref="T:PX.Metadata.IScreenInfoProvider"/> whenever possible.</para>
            </summary>
        </member>
        <member name="M:PX.Api.SYMappingMaint`1.FieldName_OnFieldSelecting``1(PX.Api.ISYObjectField,PX.Data.PXCache,System.Boolean)">
            <summary>
            Generic FieldSelecting event handler for ISYObjectField.FieldName.
            </summary>
            <typeparam name="TFieldType">Field type for filling PXStringListAttribute on it.</typeparam>
            <param name="fieldsOnly">If false, adds actions, "Add All Fields", "Dialog Answer" items.</param>
        </member>
        <member name="M:PX.Api.SYMappingMaint`1.CreateFieldNameList(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},PX.Data.PXSiteMap.ScreenInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <param name="fieldsOnly">If false, adds actions, "Add All Fields", "Dialog Answer" items.</param>
        </member>
        <member name="M:PX.Api.SyExpressionParser.SyExpressionContext.SubstituteAll(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Replaces original value to the corresponding substituted value from the list specified on the Substitution Lists (SM206026) form.
            Throws an exception if the specified original value is not found.
            </summary>
        </member>
        <member name="M:PX.Api.SyExpressionParser.SyExpressionContext.SubstituteListed(PX.Common.Parser.FunctionContext,System.Object,System.Object)">
            <summary>
            Replaces original value to the corresponding substituted value from the list specified on the Substitution Lists (SM206026) form.
            </summary>
        </member>
        <member name="P:PX.Api.SyExportContext.SkipFiltersWhenSearchPresent">
            <remarks>
            For some (yet unknown) reason export engine ignores view filters when a Search on key value is present.
            This behavior is wrong for (at least) Contract-based API, so we're adding an option to turn it off.
            We're not turning it off at all because of backwards compatibility. Maybe we will later.
            </remarks>
        </member>
        <member name="M:PX.Api.SyImportProcessor.SaveLineNumber(System.Int32)">
            <summary>Saves current row index to slot (used on LineNbr function evaluation).</summary>
            <param name="lineNbr">Row index to store (the first row index is 1).</param>
        </member>
        <member name="M:PX.Api.SyImportProcessor.SyStep.GetViewOrAddNew(System.String,PX.Api.SyImportProcessor.SyStep.SyView@)">
            <summary>Gets the view with the specified name or creates new one and adds it to the views collection of this step.</summary>
            <returns>True if view with the specified name was found; False if new view was created and added to the collection.</returns>
        </member>
        <member name="M:PX.Api.SyImportProcessor.SyStep.SyView.GetFieldOrAddNew(System.String,PX.Api.SyImportProcessor.SyStep.SyField@)">
            <summary>Gets the field with the specified name or creates new one and adds it to the fields collection of this view.</summary>
            <returns>True if field with the specified name was found; False if new field was created and added to the collection.</returns>
        </member>
        <member name="M:PX.Api.SyImportProcessor.PXInsertRightsScope.CheckRights(PX.Data.PXAction,System.String)">
            <summary>Throws exception if there is any inserted records and no insert rights.</summary>
            <exception cref="T:PX.Data.PXException" />
        </member>
        <member name="T:PX.Api.AbstractServiceGate">
            <summary>
            An abstract API service class, can be only used by the wrapper class
            that is generated by the ServiceManager and ApiBuilder classes
            and compiled at runtime. This is done to include types information
            into the service that is gathered at runtime.
            </summary>
        </member>
        <member name="T:PX.Api.ServiceGate">
            <summary>
            Summary description for ServiceGate
            </summary>
        </member>
        <member name="T:PX.Api.ApiServiceFactory">
            <summary>
            special http handler factory for service objects
            </summary>
        </member>
        <member name="T:PX.Api.GraphObject">
            <summary>
            Base class for object request
            </summary>
        </member>
        <member name="T:PX.Api.IBqlProxyTable">
            <summary>
            an interface used to identify the proxy table
            </summary>
        </member>
        <member name="T:PX.Api.ISwApiServce">
            <summary>
            Interface for the service
            </summary>
        </member>
        <member name="T:PX.Api.LoginResult">
            <summary>
            The result of login operation
            </summary>
        </member>
        <member name="F:PX.Api.PublicationOptions.AllCompanies">
            <summary>
             If <see langword="true"/>, then <see cref="F:PX.Api.PublicationOptions.CompanyList"/> is ingored.
            </summary>
        </member>
        <member name="F:PX.Api.PublicationOptions.CompanyList">
            <summary>
             Companies (company login names) to publish a customization into.
            </summary>
        </member>
        <member name="T:PX.Api.View">
            <summary>
            Chained list of views
            </summary>
        </member>
        <member name="M:PX.Api.Mobile.IMobileCache.Init">
            <summary>
            Need this to subscribe mobile caches on Database changes (Roles and Localizations mostly)
            to keep cache in correct state, if nobody started mobile app after IIS reset.
            </summary>
        </member>
        <member name="M:PX.Api.Models.Container.IsRecordsCollection">
            <summary>
            Marks that current container in new UI is bound to the collection of DACs,
            where PXFieldState of fields of each DAC in collection is transferred
            from the server to the client. It allows developer to create custom container controls,
            and display collection of DACs in any possible way.
            </summary>
            <remarks>
            The difference with <see cref="M:PX.Api.Models.Container.IsGrid"/> property is that in Grid mode only Value, Enabled and Visible
            properties of th field's state are transferred on the client.
            To activate this mode, view-model for graph's view in TypeScript code
            must be created with the createFullCollection() function.</remarks>
            <returns></returns>
        </member>
        <member name="M:PX.Api.Services.ILoginService.GetCurrentCompany">
            <returns>Current user's company name when multicompany or default (the only) company when singlecompany</returns>
        </member>
        <member name="M:PX.Api.Services.LoginService.TryLoginUserImpl(System.String@,System.String,System.String,System.String,System.String@)">
            <remarks>Return/exception behavior same as <see cref="M:PX.Data.IPXLogin.LoginUser(System.String@,System.String)"/>: will throw for most validation errors</remarks>
        </member>
        <member name="T:PX.Api.Soap.Screen.ServiceManager">
            <summary>
            Interface manager, contains the list for exposed dynamic types
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.#cctor">
            <summary>
            One time intializer
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GetGraphDescriptions">
            <summary>
            Registers another type into specified container
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GenerateShortNames(System.Collections.Generic.List{System.Type},PX.Api.Soap.Screen.ServiceManager.NameTypeDictionary)">
            <summary>
            group by class name
            if more then one, resolve conflict by suffix
            extract (module) from type name
            if distinct modules exists - include them in suffix, else do not include
            if in one module contains several types - include nearest segment, if this not helps - die
            </summary>
            <param name="list"></param>
            <param name="container"></param>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.IsTable(System.Type)">
            <summary>
            Returns true when the specified type is a BqlTable object.
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.IsGraph(System.Type)">
            <summary>
            Returns true when specified type is a subclass of SwGraph
            </summary>
        </member>
        <member name="P:PX.Api.Soap.Screen.ServiceManager.TableList">
            <summary>
            returns the compiled service type
            </summary>
        </member>
        <member name="P:PX.Api.Soap.Screen.ServiceManager.Tables">
            <summary>
            Returns the tables list
            </summary>
        </member>
        <member name="P:PX.Api.Soap.Screen.ServiceManager.TableNames">
            <summary>
            Returns array of table names
            </summary>
        </member>
        <member name="P:PX.Api.Soap.Screen.ServiceManager.GraphNames">
            <summary>
            Returns array of graph names
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.ListToStrings(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Converts the list of types into the array of string
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GetGraphType(System.String)">
            <summary>
            Returns the graph type by the name
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.CreateGraphInstance(System.Type)">
            <summary>
            Creates the graph by the type specified
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GetViews(System.Type)">
            <summary>
            Returns members of SwSelectBase type
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GetActions(System.Type)">
            <summary>
            Returns members of SwAction type
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.GetMembers(System.Type,System.Type[])">
            <summary>
            Returns filtered members of memberTypes
            </summary>
        </member>
        <member name="M:PX.Api.Soap.Screen.ServiceManager.LegacyReportNames.GetUniqueTableName(System.Type)">
            <summary>
            Returns unique table name (using namespaces
            </summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory">
            <summary>The DAC that works with the tracking history. The tracking history contains tracking points. The system saves tracking points only for active
            (<see cref="P:PX.FS.FSGPSTrackingRequest.IsActive" />=<tt>true</tt>) tracking requests.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.trackingID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._TrackingID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.TrackingID">
            <summary>The identifier of the tracking request, which allows to match the tracking point with the details of the tracking request, such as the user name and the
            device name.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.executionDate">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._ExecutionDate">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.ExecutionDate">
            <summary>The date and time when the tracking point was recorded.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.latitude">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._Latitude">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.Latitude">
            <summary>The latitude of the tracking point.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.longitude">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._Longitude">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.Longitude">
            <summary>The longitude of the tracking point.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.altitude">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._Altitude">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.Altitude">
            <summary>The altitude of the tracking point.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingHistory.createdDateTime">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingHistory._CreatedDateTime">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingHistory.CreatedDateTime">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest">
            <summary>A DAC that is used to set up GPS tracking of a mobile client.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.requestID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._RequestID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.RequestID">
            <summary>An auto-generated unique key of the GPS tracking request.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.description">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._Description">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.Description">
            <summary>A description of the GPS tracking request. The property is used to display a description of the GPS tracking request in the UI.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.isActive">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._IsActive">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.IsActive">
            <summary>A Boolean flag that indicates (if set to <tt>true</tt>) that the GPS tracking is active for this tracking request and the system writes the tracking history
            for this request.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.trackingID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._TrackingID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.TrackingID">
            <summary>An auto-generated unique identifier, which is saved in the <see cref="T:PX.FS.FSGPSTrackingHistory" /> DAC.</summary>
            <value>You can replace the auto-generated tracking ID with the tracking ID of another tracking request. In this case, these tracking request will have the same
            tracking ID in the tracking history. You may need to use this approach, for example, to create two tracking requests for one user to handle the lunch break of
            the user.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.userName">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._UserName">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.UserName">
            <summary>The login of a user in Acumatica ERP.</summary>
            <value>You specify the login without the tenant name. If the value is not specified, the system accepts tracking requests from the mobile devices on which any user is
            signed in.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.deviceID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._DeviceID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.DeviceID">
            <summary>The device ID of the mobile device.</summary>
            <value>If the value is an empty string, the system accepts tracking requests from devices with any device ID.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.deviceName">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._DeviceName">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.DeviceName">
            <summary>The device name of the mobile device.</summary>
            <value>If the value is an empty string, the system accepts tracking requests from devices with any name.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.timeZoneID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._TimeZoneID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.TimeZoneID">
            <summary>The ID of the time zone in which the <see cref="P:PX.FS.FSGPSTrackingRequest.StartDate" />, <see cref="P:PX.FS.FSGPSTrackingRequest.StartTime" />, <see cref="P:PX.FS.FSGPSTrackingRequest.EndDate" />, <see cref="P:PX.FS.FSGPSTrackingRequest.EndTime" /> are specified.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay1">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay1">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay1">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Sunday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay2">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay2">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay2">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Monday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay3">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay3">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay3">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Tuesday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay4">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay4">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay4">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Wednesday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay5">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay5">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay5">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Thursday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay6">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay6">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay6">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Friday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.weeklyOnDay7">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._WeeklyOnDay7">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.WeeklyOnDay7">
            <summary>A Boolean value that specifies (if set to <tt>false</tt>) that the mobile device does not report tracking points on Saturday.</summary>
            <value>The default value is <tt>true</tt>.</value>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.startDate">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._StartDate">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.StartDate">
            <summary>The date when the tracking of the mobile device starts.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.endDate">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._EndDate">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.EndDate">
            <summary>The date when the tracking of the mobile device ends.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.startTime">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._StartTime">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.StartTime">
            <summary>The time when the tracking of the mobile device starts.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.endTime">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._EndTime">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.EndTime">
            <summary>The time when the tracking of the mobile device ends.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.interval">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._Interval">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.Interval">
            <summary>The interval in minutes that should be passed from the latest report of the tracking point for the mobile device to report a new tracking point.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.distance">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._Distance">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.Distance">
            <summary>The distance in meters for which the mobile device should be moved to report a new tracking point.</summary>
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.noteID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._NoteID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.NoteID">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.createdByID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._CreatedByID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.CreatedByID">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.createdByScreenID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._CreatedByScreenID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.CreatedByScreenID">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.createdDateTime">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._CreatedDateTime">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.CreatedDateTime">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.lastModifiedByID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._LastModifiedByID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.LastModifiedByID">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.lastModifiedByScreenID">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._LastModifiedByScreenID">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.LastModifiedByScreenID">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.lastModifiedDateTime">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._LastModifiedDateTime">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.LastModifiedDateTime">
            <exclude />
        </member>
        <member name="T:PX.FS.FSGPSTrackingRequest.tStamp">
            <exclude />
        </member>
        <member name="F:PX.FS.FSGPSTrackingRequest._TStamp">
            <exclude />
        </member>
        <member name="P:PX.FS.FSGPSTrackingRequest.TStamp">
            <exclude />
        </member>
        <member name="T:PX.Caching.ICacheControl">
            <summary>
            An abstraction used to control cache invalidation for a particular cache.
            Every dependent cache must be registered in such a way that it can be resolved using this interface.
            Cache must not implement this interface directly, but use <see cref="T:PX.Caching.ICacheControlledBy`1"/> instead.
            </summary>
        </member>
        <member name="T:PX.Caching.ICacheControl`1">
            <summary>
            An abstraction that must be used as dependency to control cache invalidation for a particular cache.
            One must use this interface to resolve dependent cache. The cache itself must implement <see cref="T:PX.Caching.ICacheControlledBy`1"/> interface.
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="T:PX.Caching.ICacheControlledBy`1">
            <summary>
            An abstraction used to control cache invalidation and must be implemented by a particular cache.
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="T:PX.Caching.CacheControl`1">
            <summary>
            <para>A static helper to control cache invalidation for a particular cache marked by <typeparamref name="TCacheName"/>.</para>
            <para>Use DI via injecting <see cref="T:PX.Caching.ICacheControl`1"/> whenever possible.</para>
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="T:PX.Caching.CacheVersion`1">
            <summary>
            <para>A static helper to work with a particular cache version.</para>
            <para>Use DI via injecting <see cref="T:PX.Caching.ICacheVersion`1"/> whenever possible.</para>
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="T:PX.Caching.ICacheVersion`1">
            <summary>
            An abstraction to work with cache version for a particular cache type marked by <typeparamref name="TCacheName"/>.
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="M:PX.Caching.ContainerBuilderExtensions.RegisterDbCacheVersion``1(Autofac.ContainerBuilder)">
            <summary>
            Registers a new Cache Version implementation that
            can be used in <see cref="T:PX.Caching.CacheVersion`1"/> static helper
            or directly as <see cref="T:PX.Caching.ICacheVersion`1"/> after the registration.
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="M:PX.Caching.ContainerBuilderExtensions.RegisterVersionedCacheControl``1(Autofac.ContainerBuilder)">
            <summary>
            <para>Registers a new Cache Control implementation that utilizes cache versioning for cache invalidation.</para>
            <para>After the registration, it can be resolved either as <see cref="T:PX.Caching.ICacheControl"/> or <see cref="T:PX.Caching.ICacheControl`1"/>.
            Additionally, if <typeparamref name="TCacheName"/> is derived from <see cref="T:PX.Caching.VersionedCacheControl`1"/>,
            it can also be resolved as <typeparamref name="TCacheName"/> (but be aware that it always returns a single instance).</para>
            <para>Make sure that your cache utilizes <see cref="T:PX.Caching.ICacheVersion`1"/> either directly
            or by using <see cref="M:PX.Caching.CachingKeys.CacheVersion``1(PX.Caching.ICacheVersion{``0})"/> as a part of the key.</para>
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
            <example>
            <code title="Example" description="In the example below, the versioned cache control is registered using a marker type" lang="CS">
            builder.RegisterVersionedCacheControl&lt;PXSiteMap.ScreenInfo&gt;();
            </code>
            <code title="Example2" description="In the example below, the versioned cache control is registered using a VersionedCacheControl&lt;TCacheName&gt; inheritor that can be explicitly resolved later" lang="CS">
            public class DashboardsCacheControl : VersionedCacheControl&lt;DashboardsCacheControl&gt; { }
            ...
            builder.RegisterVersionedCacheControl&lt;DashboardsCacheControl&gt;();
            </code>
            </example>
        </member>
        <member name="T:PX.Caching.DACList">
            <summary>
            A marker type used in the <see cref="T:PX.Caching.ICacheControl`1"/> services for caches dependent on list of DACs in the system.
            </summary>
        </member>
        <member name="T:PX.Caching.PageCache">
            <summary>
            A marker type used in the <see cref="T:PX.Caching.ICacheVersion`1"/> and <see cref="T:PX.Caching.ICacheControl`1"/>
            services for the client-side page caching.
            </summary>
        </member>
        <member name="T:PX.Caching.PXReflectionCacheObjectSerializer">
            <summary>
            Uses <see cref="T:PX.Common.PXReflectionSerializer"/> internally (the same serializer that is used for the session state storage).
            </summary>
        </member>
        <member name="T:PX.Caching.VersionedCacheControl`1">
            <summary>
            <para>A Cache Control implementation that utilizes cache versioning for cache invalidation.</para>
            <para>Can be used as a base class for a type that can be used as a <typeparamref name="TCacheName"/>
            during the registration, e.g. <code lang="CS">class FooCacheControl : VersionedCacheControl&lt;FooCacheControl&gt;</code></para>
            <para>Use <see cref="M:PX.Caching.ContainerBuilderExtensions.RegisterVersionedCacheControl``1(Autofac.ContainerBuilder)"/> extension method
            on <see cref="T:Autofac.ContainerBuilder"/> to register your derived type in DI to be able to resolve it
            either explicitly (i.e., as <tt>FooCacheControl</tt>) or as <see cref="T:PX.Caching.ICacheControl"/>
            or <see cref="T:PX.Caching.ICacheControl`1"/>.</para>
            </summary>
            <typeparam name="TCacheName">A marker type used to distinguish different caches.</typeparam>
        </member>
        <member name="T:PX.Concurrency.ILongOperationManager">
            <summary>
            <para>An interface that is used to execute a long-running operation, such as processing data or releasing a document, asynchronously in a separate thread. This
            interface manages the threads created on the Acumatica ERP server to process long-running operations.</para>
            </summary>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.StartOperation(PX.Data.PXGraph,System.Action{System.Threading.CancellationToken})">
            <summary>
            <para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running
            operation in a separate thread. The method uses the unique identifier (UID) 
            of the graph specified in the <paramref name="graph"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="graph">A graph UID that is used as the ID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.StartOperation(System.Object,System.Action{System.Threading.CancellationToken})">
            <summary>
            <para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running 
            operation in a separate thread. The method also uses the key specified 
            in the <paramref name="key"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="key">A <tt>PXGraph</tt> object that contains the ID of the long-running operation,
            or the GUID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.GetOperationDetails(System.Object)">
            <summary>
            Returns the details of the long-running operation specified by the <paramref name="key"/> parameter.
            </summary>
            <param name="key">The ID of the long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.WaitCompletion(System.Object)">
            <summary>
            <para>Makes the current thread wait for the completion of the specified long-running operation.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <returns><c>true</c> if long-running operation was found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.ClearStatus(System.Object)">
            <summary>Removes information about completed task</summary>
            <param name="key"></param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.GetCustomInfo(System.String)">
            <summary>
            <para>From the custom information dictionary of the current long-running operation, 
            returns the data object that is stored under the specified key. If the <paramref name="customInfoKey"/> 
            value is null or empty, the method returns the data object that is stored under the default key.</para>
            </summary>
            <param name="customInfoKey">The key to access the data object in the dictionary.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.GetCustomInfoFor(System.Object,System.String,System.Object[]@)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/> parameter, 
            returns the data object that is stored under the key specified in the <paramref name="customInfoKey"/> parameter. 
            In the <paramref name="processingList"/> parameter, this method returns the list of the records processed by the 
            delegate of the long-running operation.
            If the PXLongOperation static class does not contain a long-running operation with the key specified 
            in the <paramref name="key"/> parameter, the method returns null. Otherwise, the method does the following:</para>
            	<list type="bullet">
            		<item>If the <paramref name="customInfoKey"/> parameter is null or empty: 
            		Returns the data object that is stored under the default key</item>
            		<item></item>Otherwise: Returns the data object that is stored under the key specified 
            		in the <paramref name="customInfoKey"/> parameter
            	</list>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="customInfoKey">The key to access the data object in the custom information dictionary 
            of the long-running operation specified by the first parameter.</param>
            <param name="processingList">The out parameter that is used to return the array of the data records 
            that must be processed by the delegate of the long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.SetCustomInfo(System.Object,System.String)">
            <summary>
            In the custom information dictionary of the current long-running operation, stores the data object, 
            which is specified in the <paramref name="info"/> parameter, under the key that is defined by the <paramref name="customInfoKey"/> parameter.
            </summary>
            <param name="info">The data object to be stored in the dictionary.</param>
            <param name="customInfoKey">The key to store and access in the dictionary the data object that is specified in the first parameter.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.GetTaskList">
            <summary>
            <para>Returns the collection of <see cref="T:PX.SM.RowTaskInfo"/> objects, which contain information about 
            the long-running operations that are in progress. The information includes the name of the user 
            that started the operation, the form on which the operation was started, the progress of the operation, 
            the number of errors, and the time the operation has been processing.</para>
            </summary>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManager.IsLongOperationContext">
            <summary>
            Returns true if long-running operation is in progress.
            </summary>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.StartOperation``1(PX.Concurrency.ILongOperationManager,PX.Data.PXGraphExtension{``0},System.Action{System.Threading.CancellationToken})">
            <summary>
            	<para>Starts the delegate specified in the <paramref name="method"/> parameter as a long-running
            operation in a separate thread. The method uses the unique identifier (UID) 
            of the graph extension specified in the <paramref name="graphExt"/> parameter to assign the long-running operation ID.</para>
            </summary>
            <param name="graphExt">A graph extension UID that is used as the ID of the long-running operation.</param>
            <param name="method">The delegate method to be executed asynchronously in a separate thread as a long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.GetStatus(PX.Concurrency.ILongOperationManager,System.Object)">
            <summary>
            <para>Returns the <see cref="T:PX.Data.PXLongRunStatus"/> status of the long-running operation specified by the <paramref name="key"/> parameter.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.GetCustomInfo(PX.Concurrency.ILongOperationManager)">
            <summary>
            <para>From the custom information dictionary of the current long-running operation, 
            returns the data object stored under the default key. </para>
            </summary>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.GetCustomInfoFor(PX.Concurrency.ILongOperationManager,System.Object)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/>, 
            returns the data object that is stored under the default key.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.GetCustomInfoFor(PX.Concurrency.ILongOperationManager,System.Object,System.String)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified 
            by the <paramref name="key"/> parameter, returns the data object that is stored under the key that 
            is defined by the <paramref name="customInfoKey"/> parameter.
            If the <see cref="T:PX.Data.PXLongOperation"/> static class does not contain a long-running operation with the 
            key specified in the <paramref name="key"/> parameter, the method returns null. Otherwise, the method does the following:</para>
            	<list type="bullet">
            		<item>If the <paramref name="customInfoKey"/> parameter is null or empty: 
            		Returns the data object that is stored under the default key</item>
            		<item>Otherwise: Returns the data object that is stored under the key specified 
            		in the <paramref name="customInfoKey"/> parameter</item>
            	</list>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="customInfoKey">The key to access the data object in the custom information dictionary of 
            the long-running operation specified by the first parameter.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.GetCustomInfoFor(PX.Concurrency.ILongOperationManager,System.Object,System.Object[]@)">
            <summary>
            <para>From the custom information dictionary of the long-running operation specified by the <paramref name="key"/> parameter, 
            returns the data object that is stored under the default key. 
            In the <paramref name="processingList"/> parameter, this method returns the list of the records processed 
            by the delegate of the long-running operation.</para>
            </summary>
            <param name="key">The ID of the long-running operation.</param>
            <param name="processingList">The out parameter that is used to return the array of the data records that must 
            be processed by the delegate of the long-running operation.</param>
        </member>
        <member name="M:PX.Concurrency.ILongOperationManagerExtensions.SetCustomInfo(PX.Concurrency.ILongOperationManager,System.Object)">
            <summary>
            In the custom information dictionary of the current long-running operation, stores the specified data object under the default key.
            </summary>
            <param name="info">The data object to be stored in the dictionary.</param>
        </member>
        <member name="P:PX.Concurrency.LongOperationDetails.Duration">
            <summary>the duration of the long-running operation</summary>
        </member>
        <member name="P:PX.Concurrency.LongOperationDetails.Message">
            <summary>the status message</summary>
        </member>
        <member name="P:PX.Concurrency.LongOperationDetails.IsRedirected">
            <summary> An indicator of whether the status message is of the PXBaseRedirectException exception type</summary>
        </member>
        <member name="M:PX.Concurrency.Internal.RuntimeLongOperationManager.SimulateOperation">
            <summary>
            Simulates operation for current thread
            </summary>
        </member>
        <member name="M:PX.Concurrency.LongOperationManager.SimulateOperation">
            <summary>
            Simulates operation for current thread
            </summary>
        </member>
        <member name="T:PX.Translation.LocalizationRecordObsolete">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecordObsolete.id">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecordObsolete.isNotLocalized">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecord">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecord.id">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecord.neutralValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecord.isNotLocalized">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecord.localizedValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete.id">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete.neutralValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete.isNotLocalized">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete.idRes">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecordObsolete.resKey">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord.id">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord.neutralValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord.isNotLocalized">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord.idRes">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationExceptionRecord.resKey">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.key">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.language">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.showExcluded">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.showLocalized">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.showUnboundOnly">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.showType">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.screenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LangFilter.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationRecordCache">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.screenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.idValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.idRes">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.tStamp">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceByScreen.title">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.idValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.idRes">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.locale">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslation.tStamp">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.id">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.description">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.isCollected">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.resourceToCollect">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.systemTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.systemVersion">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.currentSystemVersion">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSet.selected">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.setId">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.screenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.isActive">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.isCollected">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.createdByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.createdByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.createdDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.lastModifiedByID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.lastModifiedByScreenID">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.lastModifiedDateTime">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.title">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationTranslationSetItem.nameForStringCollection">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXCultureDictionary">
            <exclude/>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.Contains(System.String,System.String)">
            <summary>
            Determines whether PXCultureDictionary contains translation for the given word and locale.
            </summary>
            <param name="key">Word to look a translation for.</param>
            <param name="lang">Locale to look a translation for.</param>
            <returns>True if translation for the given word and locale is found, otherwise false.</returns>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.ContainsException(System.String,System.String,System.String)">
            <summary>
            Determines whether PXCultureDictionary contains exceptional translation for the given word, resource key and locale.
            </summary>
            <param name="key">Word to look a translation for.</param>
            <param name="resKey">Resource key.</param>
            <param name="lang">Locale to look a translation for.</param>
            <returns>True if exceptional translation for the given word, resource key and locale is found, otherwise false.</returns>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.Append(System.String,PX.Translation.PXCultureValue)">
            <summary>
            Adds the PXCultureValue object to a list of translated values at specified key.
            </summary>
            <param name="key">The key of the element to add value to.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.AppendException(System.String,PX.Translation.PXCultureEx)">
            <summary>
            Adds the PXCultureEx object to a list of exceptions at specified key (only if any translated values exist for this key).
            </summary>
            <param name="key">The key of the element to add exception to.</param>
            <param name="ex">The value of the xception to add.</param>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.TryGetLocal(System.String,System.String,System.Boolean@)">
            <summary>
            Looks for translation of the given phrase to specific language.
            </summary>
            <param name="key">A word or phrase to look for.</param>
            <param name="lang">Destination language.</param>
            <returns>Translated value if it exists, otherwise null.</returns>
        </member>
        <member name="M:PX.Translation.PXCultureDictionary.TryGetException(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Looks for exceptional translation value of the given word or phrase to specific language depending on specific resource key.
            </summary>
            <param name="key">A word or phrase to look for.</param>
            <param name="resKey">Destination resource key.</param>
            <param name="lang">Destination language.</param>
            <returns>Translated exceptional value if it exists, otherwise null.</returns>
        </member>
        <member name="T:PX.Translation.PXDictionaryManager">
            <exclude/>
        </member>
        <member name="M:PX.Translation.PXDictionaryManager.Translate(System.String,System.String,System.Boolean@)">
            <summary>
            Translates given value to specified language using currently loaded dictionary.
            </summary>
            <param name="value">A value to translate.</param>
            <param name="cultureName">Name of target culture.</param>
            <returns>Translated value.</returns>
        </member>
        <member name="M:PX.Translation.PXDictionaryManager.Translate(System.String,System.String,System.String,System.Boolean@)">
            <summary>
            Translates given value to specified language using currently loaded dictionary.
            </summary>
            <param name="value">A value to translate.</param>
            <param name="resourceKey">Resource key of value being translated (to avoid conflicts).</param>
            <param name="cultureName">Name of target culture.</param>
            <returns>Translated value.</returns>
        </member>
        <member name="T:PX.Translation.PXTranslatedRecord">
            <summary>
            Represents single record in culture dictionary.
            </summary>
        </member>
        <member name="F:PX.Translation.PXTranslatedRecord.Translated">
            <summary>
            List of translation of current word or phrase to different languages.
            </summary>
        </member>
        <member name="F:PX.Translation.PXTranslatedRecord.Exceptions">
            <summary>
            List of exceptions (alternative translations) of current
            word or phrase depending on resource key.
            </summary>
        </member>
        <member name="T:PX.Translation.PXCultureValue">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXCultureEx">
            <exclude/>
        </member>
        <member name="T:PX.Translation.ResourceByScreenCollection">
            <exclude/>
        </member>
        <member name="T:PX.Translation.ResourceCollection">
            <summary>
            Is used for collecting resources for translation.
            </summary>
            <exclude/>
        </member>
        <member name="T:PX.Translation.DllResourceTypesToCollect">
            <summary>
            Types of localizable resources present in DLLs that should be collected by strings collection process.
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.Message">
            <summary>
            Localizable string constant.
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.XmlComment">
            <summary>
            Localizable XML comment.
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.DisplayName">
            <summary>
            Display Name.
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.ListAttribute">
            <summary>
            Labels from <see cref="T:PX.Data.PXStringListAttribute"/> and <see cref="T:PX.Data.PXIntListAttribute"/> attributes
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.LabelAttribute">
            <summary>
            Text from <see cref="T:PX.Data.UI.PXUILabelAttribute"/>
            </summary>
        </member>
        <member name="F:PX.Translation.DllResourceTypesToCollect.All">
            <summary>
            All types of localizable resources that can be discovered in DLL.
            </summary>
        </member>
        <member name="T:PX.Translation.FieldSourceType">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceType">
            <exclude/>
        </member>
        <member name="T:PX.Translation.LocalizationResourceLite">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXControlPropertiesCollector">
            <exclude/>
        </member>
        <member name="T:PX.Translation.ResourceCollectingManager">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXControllRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXDllRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.MobileSiteMapRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXPageRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXReportRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXSiteMapRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXSpecialRipper">
            <exclude/>
        </member>
        <member name="T:PX.Translation.StringCollectingOptions">
            <summary>
            Options for collection of localization strings.
            </summary>
        </member>
        <member name="P:PX.Translation.StringCollectingOptions.CollectXmlComments">
            <summary>
            Gets or sets a value indicating whether to collect XML comments.
            </summary>
            <value>
            True if collect XML comments, false if not.
            </value>
        </member>
        <member name="T:PX.Translation.StringCollectingScope">
            <exclude/>
        </member>
        <member name="T:PX.Translation.PXTranslator">
            <exclude/>
        </member>
        <member name="M:PX.Translation.PXTranslator.GetNeutral(PX.Translation.ResourceByScreenCollection@)">
            <summary>
            Looks for all resources in working folder and returns a list of neutral resources.
            </summary>
        </member>
        <member name="T:PX.Translation.PXSystemTranslator">
            <summary>
            Finds strings for translation in the whole system and saves translated values to database.
            </summary>
        </member>
        <member name="T:PX.Translation.PXSystemTranslator.ResourceType">
            <exclude/>
        </member>
        <member name="M:PX.Translation.PXSystemTranslator.#ctor(System.String,PX.Translation.LocalizationResourceType[])">
            <summary>
            Initializes a new instance of PXSystemTranslator class
            </summary>
            <param name="workingFolder">Folder to search resources in.</param>
            <param name="language">Destination language.</param>
        </member>
        <member name="M:PX.Logging.Enrichers.AspNetCallbackEnricher.RequestAccessor">
            <summary>Gets current HTTP request</summary>
            <returns><c>null</c> if <see cref="P:System.Web.HttpContext.Current">HttpContext.Current</see> is <c>null</c></returns>
            <exception cref="T:System.Web.HttpException">Some obscure case when <see cref="P:System.Web.HttpContext.Request">HttpContext.Request</see> is not available</exception>
        </member>
        <member name="T:PX.Logging.Enrichers.HttpRequestIdEnricher">
            <summary>Adds a HttpRequestId GUID to log events.</summary>
        </member>
        <member name="F:PX.Logging.Enrichers.HttpRequestIdEnricher.HttpRequestIdPropertyName">
            <summary>
            The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:PX.Logging.Enrichers.HttpRequestIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enriches the log event with an id assigned to the currently-executing HTTP request, if any.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:PX.Logging.Enrichers.HttpSessionIdEnricher">
            <summary>
            Enrich log events with the HttpSessionId property.
            </summary>
        </member>
        <member name="F:PX.Logging.Enrichers.HttpSessionIdEnricher.HttpSessionIdPropertyName">
            <summary>
            The property name added to enriched log events.
            </summary>
        </member>
        <member name="M:PX.Logging.Enrichers.HttpSessionIdEnricher.Enrich(Serilog.Events.LogEvent,Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event with the current ASP.NET session id, if sessions are enabled.</summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="M:PX.Logging.LevelSwitchExtensions.ToLevelSwitch(Serilog.Events.LogEventLevel)">
            <summary>
            Will create a never-changing level switch (used for unification)
            </summary>
        </member>
        <member name="M:PX.Logging.LevelSwitchExtensions.Threshold(PX.Logging.IInformingLevelSwitch,Serilog.Events.LogEventLevel)">
            <summary>
            Will maintain minimum level that is the lowest between <paramref name="threshold"/> and <paramref name="levelSwitch"/> (i.e., no higher than the <paramref name="threshold"/>)
            </summary>
        </member>
        <member name="M:PX.Logging.LevelSwitchExtensions.CombineWith(PX.Logging.IInformingLevelSwitch,PX.Logging.IInformingLevelSwitch)">
            <summary>
            Will maintain minimum level between two given level switches
            </summary>
        </member>
        <member name="M:PX.Logging.LoggerBuilder.Build">
            <remarks>
            This method runs - should be run - once and only once, as early as possible in the application lifecycle
            Any exception leaving this method will (should) stop the application initialization.
            </remarks>
        </member>
        <member name="T:PX.Logging.LoggingExtensions">
            <exclude/>
        </member>
        <member name="M:PX.Logging.SelfLog.WriteAndRethrow(System.Exception,System.String,System.Object,System.Object)">
            <summary>This method is intended to use inside exception filters <b>only</b>.</summary>
            <returns>Always <c>false</c></returns>
            <example><code>catch (Exception e) when(SelfLog.WriteAndRethrow(e, "Exception while something"))</code></example>
        </member>
        <member name="T:PX.Logging.SessionTrace.PXSessionTraceStorage">
            <exclude/>
        </member>
        <member name="T:PX.Logging.SilentLoggerWithBinders">
            <exclude/>
        </member>
        <member name="T:PX.Logging.Sinks.SystemEventsDbSink.SystemEventCleansing">
            <summary>
            Manager class for SystemEvent table cleansing.
            Records older than 30 days are removed once per configured period.
            </summary>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventHelper.ForSystemEvents(Serilog.ILogger,System.String,System.String)">
            <summary>
            Adds properties to the logger in order to create a System Event logging event.
            </summary>
            <param name="logger">Logger that is going to issue a System Event.</param>
            <param name="eventGroupName">Event group name.</param>
            <param name="eventID">Event ID.</param>
            <returns>Original Logger object to chain as fluent syntax.</returns>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventHelper.WithoutUserName(Serilog.ILogger)">
            <summary>
            Supress username property adding in <see cref="T:PX.Logging.Enrichers.UserEnricher"/>
            </summary>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventHelper.GetContextCompanyName">
            <summary>
            Returns the current user's company name.
            </summary>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventHelper.ForCurrentCompanyContext(Serilog.ILogger)">
            <summary>
            Adds the current user's company name to the logging event context properties, if the company name can be retrieved at the moment.
            </summary>
            <param name="logger">Logger to add the property to.</param>
            <returns>Original Logger object to chain as fluent syntax.</returns>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventHelper.LogResourceGovernorSystemEvent(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Logs the Resource Governor event to SystemEvent table. Intended to be used by RG via reflection.
            </summary>
            <param name="logLevel">Logging level (Debug, Information, etc.).</param>
            <param name="logEventId">EventId within "ResourceGovernor" event category.</param>
            <param name="screenId">Screen identifier ('ScreenID' colum in SystemEvent table).</param>
            <param name="userId">User identifier  ('User' colum in SystemEvent table).</param>
            <param name="customData">Additional key/value dictionary to pass as the log event properties.</param>
        </member>
        <member name="F:PX.Logging.Sinks.SystemEventsDbSink.SystemEventsDbSink.DisplayedPropertiesPerEventType">
            <summary>
            Keys of the properties shown in "Details" column on the fly (output to the user in System Event grid)
            </summary>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.SystemEventsDbSink.RaiseProcessTerminating">
            <summary>
            Used by components outside of ERP worker process (via Reflection) to signal that the ERP worker process is getting terminated
            </summary>
        </member>
        <member name="T:PX.Logging.Sinks.SystemEventsDbSink.SystemEventPropertyName">
            <summary>
            Many names here were chosen in order to be equal to already used names throughout the existing code.
            </summary>
        </member>
        <member name="T:PX.Logging.Sinks.SystemEventsDbSink.ThrottledInvoker`1">
            <summary>
            Does not allow to invoke an action of a certain type more than specified times within a period of time.
            </summary>
            <typeparam name="T">Type whose values represent different kinds of throttled events</typeparam>
        </member>
        <member name="F:PX.Logging.Sinks.SystemEventsDbSink.ThrottledInvoker`1.InvocationCounter">
            <summary>
            Tuple's items meaning:
            Item1 - invocation counter (how many times the event type has been invoked so far);
            Item2 - DateTime of the last invocation;
            Item3 - if the event has already been throttled within the throttling period of time; to avoid resetting Item2.
            </summary>
        </member>
        <member name="M:PX.Logging.Sinks.SystemEventsDbSink.ThrottledInvoker`1.Invoke(`0,System.Action,System.Action,System.TimeSpan,System.Int32)">
            <summary>
            Invokes an action or throttles it if it has already been called <paramref name="maxInvocationCount"/> times within <paramref name="throttlingPeriod"/>.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="throttledAction">The throttled action.</param>
            <param name="actionWhenThrottlingOccurs">The action called when throttling occurs.</param>
            <param name="throttlingPeriod">Within this period only <paramref name="maxInvocationCount"/> of calls of throttled action is allowed.</param>
            <param name="maxInvocationCount">The maximum invocation count for the throttling period.</param>
            <returns><c>true</c>, if <paramref name="throttledAction"/> has been called,
            <c>false</c> otherwise (<paramref name="actionWhenThrottlingOccurs"/> has been called instead; 
            or nothing happened in case <paramref name="actionWhenThrottlingOccurs"/> has already been called
            once within <paramref name="throttlingPeriod"/>).</returns>
        </member>
        <member name="M:PX.Logging.TraceProviders.TraceExtensions.IsExcluded(System.Exception,System.String,System.ValueTuple{System.Type,System.String,System.String}[])">
            <summary>
            Returns 'true' if the <paramref name="exception"/> matches any condition in <paramref name="exclTypes"/> ; 'false' otherwise.
            </summary>
            <param name="exception">Exception to decide on.</param>
            <param name="stackTrace">The stack trace relevant to <paramref name="exception"/>.</param>
            <param name="exclTypes">Tuples of (ExceptionType,ExceptionMessage,ExceptionStackTraceText) that define
            the list of ignored exceptions.</param>
        </member>
        <member name="T:PX.EP.EPLoginType">
            <exclude/>
        </member>
        <member name="T:PX.EP.EPLoginTypeAllowsRole">
            <exclude/>
        </member>
        <member name="T:PX.EP.EPManagedLoginType">
            <exclude/>
        </member>
        <member name="T:PX.EP.EPLoginTypeMaint">
            <exclude/>
        </member>
        <member name="T:PX.TM.IOwnedFilter">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.currentOwnerID">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.ownerID">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.myOwner">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.workGroupID">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.myWorkGroup">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.filterSet">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedFilter.ProjectionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedEscalatedFilter">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedEscalatedFilter.myOwner">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedEscalatedFilter.myEscalated">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedEscalatedFilter.filterSet">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedEscalatedFilter.ProjectionAttribute">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXSelectCompanyTree">
            <exclude/>
        </member>
        <member name="T:PX.TM.EPCompanyTree">
            <summary>
            The base class for the workgroup class <see cref="T:PX.TM.EPCompanyTreeMaster"/> of the company tree (a hierarchy of workgroups).
            </summary>
        </member>
        <member name="P:PX.TM.EPCompanyTree.WorkGroupID">
            <summary>
            The idenifier of the workgroup.
            </summary>
        </member>
        <member name="P:PX.TM.EPCompanyTree.Description">
            <summary>
            An alphanumeric string of up to 50 characters that describes the workgroup.
            This field is used to add any information about the workgroup.
            </summary>
        </member>
        <member name="P:PX.TM.EPCompanyTree.ParentWGID">
            <summary>
            The identifier of the parent workgroup.
            </summary>
            <value>
            Corresponds to the value of <see cref="P:PX.TM.EPCompanyTree.WorkGroupID"/>
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTree.SortOrder">
            <summary>
            Sort order of the employees in the workgroup.
            </summary>
            <value>
            The default value is 0.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTree.WaitTime">
            <summary>
            Wait time that is allowed for work item approval or processing.
            </summary>
            <value>
            Time span in minutes.
            The default value is 0.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTree.BypassEscalation">
            <summary>
            Specifies whether escalation may bypass this workgroup.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTree.UseCalendarTime">
            <summary>
            Specifies whether the calendar time is used by the workgroup.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTree.AccessRights">
            <exclude/>
        </member>
        <member name="T:PX.TM.EPCompanyTreeMaster">
            <summary>
            Represents a workgroup in the company tree (a hierarchy of workgroups).
            </summary>
            <remarks>
            Company tree is a model of your organization's hierarchy that includes temporary and permanent workgroups.
            The company tree may reflect the administrative hierarchy and include sub-hierarchies of workgroups created within
            specific branches or departments. The company tree is used for creating assignment rules in approval and assignment
            maps and for determining the scope of the users who want to view items assigned to them.
            The records of this type are created and edited on the <i>Company Tree (EP204061)</i> form,
            which corresponds to the <see cref="!:PX.TM.CompanyTreeMaint"/> graph,
            and imported on the <i>Import Company Tree (EP204060)</i> form, which
            corresponds to the <see cref="!:PX.TM.ImportCompanyTreeMaint"/> graph.
            </remarks>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMaster.WorkGroupID">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.WorkGroupID"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMaster.Description">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.Description"/>
        </member>
        <member name="F:PX.TM.EPCompanyTreeMaster._TempChildID">
            <exclude/>
        </member>
        <member name="F:PX.TM.EPCompanyTreeMaster._TempParentID">
            <exclude/>
        </member>
        <member name="T:PX.TM.EPCompanyTreeH">
            <summary>
            Represents a heirarchy record of the workgroup in the company tree.
            </summary>
            <remarks>
            Company tree is a model of your organization's hierarchy that includes temporary and permanent workgroups.
            The company tree may reflect the administrative hierarchy and include sub-hierarchies of workgroups created within
            specific branches or departments. The company tree is used for creating assignment rules in approval and assignment
            maps and for determining the scope of the users who want to view items assigned to them.
            The records of this type are created and edited on the <i>Company Tree (EP204061)</i> form,
            which corresponds to the <see cref="!:CompanyTreeMaint"/> graph,
            and imported on the <i>Import Company Tree (EP204060)</i> form, which
            corresponds to the <see cref="!:ImportCompanyTreeMaint"/> graph.
            </remarks>
        </member>
        <member name="P:PX.TM.EPCompanyTreeH.WorkGroupID">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.WorkGroupID"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeH.ParentWGID">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.ParentWGID"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeH.WaitTime">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.WaitTime"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeH.WorkGroupLevel">
            <summary>
            Represents the workgroup level in the hierarchy.
            </summary>
            <value>
            The default value is 0.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTreeH.ParentWGLevel">
            <exclude/>
        </member>
        <member name="T:PX.TM.EPCompanyTreeMember">
            <summary>
            Represents a member of a workgroup.
            </summary>
            <remarks>
            Company tree is a model of your organization's hierarchy that includes temporary and permanent workgroups.
            The company tree may reflect the administrative hierarchy and include sub-hierarchies of workgroups created within
            specific branches or departments. The company tree is used for creating assignment rules in approval and assignment
            maps and for determining the scope of the users who want to view items assigned to them.
            The records of this type are created and edited on the <i>Company Tree (EP204061)</i> form,
            which corresponds to the <see cref="!:CompanyTreeMaint"/> graph,
            and imported on the <i>Import Company Tree (EP204060)</i> form, which
            corresponds to the <see cref="!:ImportCompanyTreeMaint"/> graph.
            </remarks>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.WorkGroupID">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.WorkGroupID"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.ContactID">
            <summary>
            The identifier of the member of the workgroup.
            </summary>
            <value>
            Corresponds to the value of <see cref="!:PX.CR.Contact.ContactID"/>
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.WaitTime">
            <inheritdoc cref="P:PX.TM.EPCompanyTree.WaitTime"/>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.IsOwner">
            <summary>
            Specifies whether the member is the owner of the workgroup.
            </summary>
            /// <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.Active">
            <summary>
            Specifies whether the user is an active member of the workgroup.
            </summary>
            <value>
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:PX.TM.EPCompanyTreeMember.MembershipType">
            <summary>
            The workgroup membership type of the user.
            </summary>
            <value>
            The field can have one of the values listed in the <see cref="T:PX.TM.MembershipTypeListAttribute" /> class.
            The default value is <see cref="F:PX.TM.MembershipTypeListAttribute.Permanent"/>
            </value>
        </member>
        <member name="T:PX.TM.PXCompanyTreeSelector">
            <summary>Shows a company tree.</summary>
            <example>
            	<code title="" description="" lang="neutral"></code>
            </example>
        </member>
        <member name="T:PX.TM.PXCompanyMemberSelectorAttribute">
            <summary>Shows members of a company tree.</summary>
            <example>
            	<code title="Example" description="The general attribute definition.
            " lang="CS">
            [PXCompanyMemberSelector(typeof(WikiPage.approvalGroupID))]</code>
            </example>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.key">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.targetTable">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.mainView">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.targetStartDate">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.targetEndDate">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.selectedItem">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.startDate">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.duration">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.endDate">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.regionType">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXScheduleState.allowUpdate">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.DateTimeRestriction">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.DateTimeRestriction.startEdge">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.DateTimeRestriction.endEdge">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.PXRestrictedSelectView`3">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.AddRecordHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.RemoveRecordHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.ViewDetailsHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.GetRecordsHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.GetWorkStartTimeHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.GetWorkEndTimeHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.IsCorrectHandler">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.HandlerAttribute.Types">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.Definition">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.Definition.DefinitionEmpty">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXResourceScheduleAttribute.LongDescComparer">
            <exclude/>
        </member>
        <member name="T:PX.TM.PXSubordinateGroupSelectorAttribute">
            <summary>
            Allows show work groups which are subordinated or include coworkers for current logined employee.
            </summary>
            <example>
            [PXSubordinateGroupSelector]
            </example>
        </member>
        <member name="T:PX.TM.PXEMailResponseAttribute">
            <summary>
            	<para>Allows you to specify an action to be processed once email is attached.</para>
            </summary>
            <example>
            	<code title="Example" description="" lang="CS">
            [PXEMailResponse("ReOpenCase")]</code>
            </example>
        </member>
        <member name="T:PX.TM.MembershipTypeListAttribute">
            <summary>
            Sets company tree member as a permanent or temporary member of a workgroup.
            </summary>
        </member>
        <member name="T:PX.TM.IsWorkgroupOfContact`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.IsWorkgroupOrSubgroupOfContact`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.IsSubordinateOfContact`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.Escalated`4">
            <exclude/>
        </member>
        <member name="M:PX.TM.Escalated`4.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.TM.Escalated`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.TM.InMember`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.Owned`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.OwnedUser`1">
            <exclude/>
        </member>
        <member name="T:PX.TM.EscalatedObsolete`4">
            <exclude/>
        </member>
        <member name="M:PX.TM.EscalatedObsolete`4.Verify(PX.Data.PXCache,System.Object,System.Collections.Generic.List{System.Object},System.Nullable{System.Boolean}@,System.Object@)">
            <exclude />
        </member>
        <member name="M:PX.TM.EscalatedObsolete`4.AppendExpression(PX.Data.SQLTree.SQLExpression@,PX.Data.PXGraph,PX.Data.BqlCommandInfo,PX.Data.BqlCommand.Selection)">
            <exclude />
        </member>
        <member name="T:PX.TM.Messages">
            <exclude/>
        </member>
        <member name="T:PX.Metadata.DistributedScreenInfoCache">
            <summary>
            <para>Provides persistent <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache"/>-based implementation of
            <see cref="T:PX.Metadata.IScreenInfoStorage"/> and <see cref="T:PX.Metadata.IScreenInfoCacheControl"/> interfaces.</para>
            </summary>
            <remarks>
            Made <see langword="public"/> for unit test purposes only.
            </remarks>
        </member>
        <member name="T:PX.Metadata.DistributedScreenInfoCacheOptions">
            <remarks>
            Made <see langword="public"/> only because <see cref="T:PX.Metadata.DistributedScreenInfoCache"/> is <see langword="public"/>
            </remarks>
        </member>
        <member name="T:PX.Metadata.IDacRegistry">
            <summary>
            A registry of Data Access Classes (DACs). To be used for retrieving lists of DACs available in the system.
            </summary>
            <remarks>Contains only DACs with <see langword="public" /> visibility.
            All other DACs are considered auxiliary classes that belong to their area of visibility.</remarks>
        </member>
        <member name="P:PX.Metadata.IDacRegistry.All">
            <summary>
            Returns the list of all Data Access Classes (DACs) available in the system.
            </summary>
            <remarks>Only DACs with <see langword="public" /> visibility are returned.</remarks>
        </member>
        <member name="P:PX.Metadata.IDacRegistry.Visible">
            <summary>
            Returns the list of all Data Access Classes (DACs) available in the system that are not marked with <see cref="T:PX.Data.PXHiddenAttribute"/>.
            </summary>
            <remarks>Only DACs with <see langword="public" /> visibility are returned.</remarks>
        </member>
        <member name="P:PX.Metadata.IDacRegistry.Hidden">
            <summary>
            Returns the list of all Data Access Classes (DACs) available in the system marked with <see cref="T:PX.Data.PXHiddenAttribute"/>.
            </summary>
            <remarks>Only DACs with <see langword="public" /> visibility are returned.</remarks>
        </member>
        <member name="T:PX.Metadata.InMemoryScreenInfoCache">
            <summary>
            <para>Provides in-memory <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache"/>-based implementation of
            <see cref="T:PX.Metadata.IScreenInfoStorage"/> and <see cref="T:PX.Metadata.IScreenInfoCacheControl"/> interfaces.</para>
            </summary>
            <remarks>
            Made <see langword="public"/> for unit test purposes only.
            </remarks>
        </member>
        <member name="T:PX.Metadata.IScreenInfoCacheControl">
            <summary>
            An abstraction used to granularly control cache invalidation for the <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> cache
            <b>in the current tenant.</b>
            </summary>
            <remarks>
            Changes in the following areas must (and do) invalidate the cache,
            either directly (via <see cref="M:PX.Metadata.IScreenInfoCacheControl.InvalidateCache(System.String)"/> call) or indirectly (by being included in the caching key):
            <list type="bullet">
            <item> <description>Application Version (including ISV version)</description> </item>
            <item> <description>Instance ID</description> </item>
            <item> <description>Customizations (publish/unpublish)</description> </item>
            <item> <description>Tenant ID</description> </item>
            <item> <description>Installation Type (ERP or Portal)</description> </item>
            <item> <description>Current Locale</description> </item>
            <item> <description>Locales List</description> </item>
            <item> <description>Localization</description> </item>
            <item> <description>Enabled Features</description> </item>
            <item> <description>Attribute Fields</description> </item>
            <item> <description>User-Defined Fields (UDF)</description> </item>
            <item> <description>Site Map / Portal Map</description> </item>
            <item> <description>Generic Inquiries</description> </item>
            <item> <description>User Reports (stored in DB)</description> </item>
            <item> <description>RPX Reports (stored on file system)</description> </item>
            <item> <description>ARM Reports</description> </item>
            <item> <description>Dashboards</description> </item>
            <item> <description>Pivot Tables</description> </item>
            <item> <description>Import/Export Scenarios</description> </item>
            <item> <description>Power BI Reports</description> </item>
            <item> <description>Business Scenarios (Wizards)</description> </item>
            <item> <description>ASPX pages</description> </item>
            <item> <description>Automation Definitions</description> </item>
            <item> <description>Workflow Configuration (indirectly: it can be changed either by customizations or by changes in App_Runtime folder, and these cases are already handled separately)</description> </item>
            <item> <description>Snapshot Restoration</description> </item>
            </list>
            </remarks>
        </member>
        <member name="M:PX.Metadata.IScreenInfoCollector.Collect(System.String,System.String)">
            <summary>
            Collects <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <param name="locale">Locale that is used to collect <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/>.</param>
            <returns>Screen metadata for the specific screen</returns>
            <remarks>This method is executed under the admin user.</remarks>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProvider.Get(System.String,System.String)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <param name="locale">Locale that is used to collect <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/>.</param>
            <returns>Screen metadata for the specific screen;
            <see langword="null"/>, if the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.Get(PX.Metadata.IScreenInfoProvider,System.String)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using the current locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <returns>Screen metadata for the specific screen (in the current locale),
            or <see langword="null"/> if the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.GetWithInvariantLocale(PX.Metadata.IScreenInfoProvider,System.String)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using invariant locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <returns>Screen metadata for the specific screen (in invariant locale),
            or <see langword="null"/> if the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.TryGet(PX.Metadata.IScreenInfoProvider,System.String)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using the current locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <returns>Screen metadata for the specific screen (in the current locale);
            <see langword="null"/>, if there were any errors during <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection
            or the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.TryGet(PX.Metadata.IScreenInfoProvider,System.String,System.Exception@)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using the current locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <param name="error">Exception that was thrown during the <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection (if any).</param>
            <returns>Screen metadata for the specific screen (in the current locale);
            <see langword="null"/>, if there were any errors during <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection
            or the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.TryGetWithInvariantLocale(PX.Metadata.IScreenInfoProvider,System.String)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using invariant locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <returns>Screen metadata for the specific screen (in invariant locale);
            <see langword="null"/>, if there were any errors during <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection
            or the screen does not exist.</returns>
        </member>
        <member name="M:PX.Metadata.IScreenInfoProviderExtensions.TryGetWithInvariantLocale(PX.Metadata.IScreenInfoProvider,System.String,System.Exception@)">
            <summary>
            Returns <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> for the specific screen using invariant locale.
            </summary>
            <param name="screenId">Screen ID for which <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> is collected.</param>
            <param name="error">Exception that was thrown during the <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection (if any).</param>
            <returns>Screen metadata for the specific screen (in invariant locale);
            <see langword="null"/>, if there were any errors during <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> collection
            or the screen does not exist.</returns>
        </member>
        <member name="T:PX.Metadata.IScreenInfoStorage">
            <summary>
            <para>Implementations of this interface provide a storage for ScreenInfo objects.</para>
            <para>It is utilized in <see cref="T:PX.Metadata.ScreenInfoProvider"/> and derived classes.</para>
            </summary>
            <remarks>
            <para>The implementation can be non-thread safe (thread-safety is handled inside <see cref="T:PX.Metadata.ScreenInfoProvider"/>)</para>
            <para>ScreenID passed to the method arguments is always in the upper case.</para>
            </remarks>
        </member>
        <member name="T:PX.Metadata.LayeredScreenInfoCache">
            <summary>
            <para>Provides a persistent, performance-optimized implementation of <see cref="T:PX.Metadata.IScreenInfoStorage"/>
            and <see cref="T:PX.Metadata.IScreenInfoCacheControl"/> interfaces.</para>
            <para>It attempts to retrieve <see cref="T:PX.Data.PXSiteMap.ScreenInfo"/> from the in-memory cache,
            and if it's not found there, uses the distributed cache to get the item and duplicate it
            to the in-memory cache.</para>
            </summary>
            <remarks>
            Made <see langword="public"/> only to be consistent with <see cref="T:PX.Metadata.InMemoryScreenInfoCache"/> and <see cref="T:PX.Metadata.DistributedScreenInfoCache"/>.
            </remarks>
        </member>
        <member name="T:PX.Metadata.XmlCommentsExtensions">
            <summary>
            An extension helping to retrieve XML comments from code.
            </summary>
        </member>
        <member name="M:PX.Metadata.XmlCommentsExtensions.GetXmlDocsValue(System.Type)">
            <summary>
            Returns the content of the <see langword="&lt;value&gt;" /> XML documentation tag.
            </summary>
            <remarks>In general, the <see langword="&lt;value&gt;" /> tag is not applicable to <see cref="T:System.Type"/>
            but there are some exceptions like BQL fields.</remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/value"/>
        </member>
        <member name="M:PX.Metadata.XmlCommentsExtensions.GetXmlDocsValue(System.Reflection.MemberInfo)">
            <summary>
            Returns the content of the <see langword="&lt;value&gt;" /> XML documentation tag.
            </summary>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/value"/>
        </member>
        <member name="T:PX.PushNotifications.Sources.IInCodeNotificationDefinition">
            <summary>An interface that you need to implement to create a built-in definition of the query.</summary>
        </member>
        <member name="T:PX.PushNotifications.Sources.IBqlCommandNotificationDefinition">
            <summary>An interface that contains the methods that must be implemented for a built-in definition.</summary>
        </member>
        <member name="M:PX.PushNotifications.Sources.IBqlCommandNotificationDefinition.GetSourceSelect">
            <summary>Returns a tuple of a <tt>BqlCommand</tt> object, which defines the data query, and a <tt>PXDataValue</tt> array, which defines the parameters that should be
            passed to the query.</summary>
            <remarks>The data query that the method defines should adhere to <see href="https://help.acumatica.com/Help?ScreenId=ShowWiki&amp;pageid=99dc32c1-00ac-498a-9412-6c7cf766eaa8">Recommendations for the Data Queries</see> in
            the Integration Development Guide.</remarks>
            <returns>A tuple of a <see cref="T:PX.Data.BqlCommand" /> object, which defines the data query, and a <see cref="T:PX.Data.PXDataValue" /> array, which defines the parameters that should be passed to the query.</returns>
            <example>
            The following example shows the GetSourceSelect() method implementation.
              <code title="Example" lang="CS">
            using PX.Data;
            using PX.PushNotifications.Sources;
            using PX.PushNotifications.UI.DAC;
             
            public class TestInCodeDefinition : IInCodeNotificationDefinition
            {  
                public Tuple&lt;BqlCommand, PXDataValue[]&gt; GetSourceSelect()      
                {               
                    return Tuple.Create(PXSelectJoin&lt;PushNotificationsHook,        
                        LeftJoin&lt;PushNotificationsSource,          
                            On&lt;PushNotificationsHook.hookId,            
                                Equal&lt;PushNotificationsSource.hookId&gt;&gt;&gt;&gt;.GetCommand(), new PXDataValue[0]);         
             
                }
            }</code>
            </example>
        </member>
        <member name="M:PX.PushNotifications.Sources.IBqlCommandNotificationDefinition.GetRestrictedFields">
            <summary>Returns an array of <tt>IBqlField</tt>-derived types, which contains the fields that should be returned from the query.</summary>
            <remarks>
              <para></para>
            </remarks>
            <returns>An array of <tt>IBqlField</tt>-derived types, which contains the fields that should be returned from the query. If you need to return all fields, the method must return
            <tt>null</tt>.</returns>
            <example>
              <code title="Example" description="The following code shows an example of the implementation of the GetRestictedFields() method." lang="CS">
            using PX.Data;
            using PX.PushNotifications.Sources;
            using PX.PushNotifications.UI.DAC;
             
            public class TestInCodeDefinition : IInCodeNotificationDefinition
            {  
                ...  
                public Type[] GetRestrictedFields()      
                {               
                    return new []     
                    {      
                        typeof(PushNotificationsHook.address),       
                        typeof(PushNotificationsHook.type),       
                        typeof(PushNotificationsSource.designID),       
                        typeof(PushNotificationsSource.inCodeClass),       
                        typeof(PushNotificationsSource.lineNbr)    
                    };         
                }
            }</code>
            </example>
        </member>
        <member name="T:PX.PushNotifications.NotificationResult">
            <exclude/>
        </member>
        <member name="T:PX.PushNotifications.ValueWithInternal">
            <exclude/>
        </member>
        <member name="T:PX.PushNotifications.KeyWithAlias">
            <exclude/>
        </member>
        <member name="T:PX.PushNotifications.KeyWithAliasConverter">
            <exclude/>
        </member>
        <member name="T:PX.Reports.ReportSchemaExtractor">
            <summary>
            Report schema extractor helper.
            </summary>
        </member>
        <member name="T:PX.Reports.ReportServicesExtensions">
            <summary>
            A collection of extensions for report services.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.CreateDirectoryObject(System.String)">
            <summary>
            Create a new DirectoryObject object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.objectType">
            <summary>
            There are no comments for Property objectType in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.objectId">
            <summary>
            There are no comments for Property objectId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.createdOnBehalfOf">
            <summary>
            There are no comments for createdOnBehalfOf in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.createdObjects">
            <summary>
            There are no comments for createdObjects in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.manager">
            <summary>
            There are no comments for manager in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.directReports">
            <summary>
            There are no comments for directReports in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.members">
            <summary>
            There are no comments for members in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.memberOf">
            <summary>
            There are no comments for memberOf in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.owners">
            <summary>
            There are no comments for owners in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.DirectoryObject.ownedObjects">
            <summary>
            There are no comments for ownedObjects in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.User.CreateUser(System.String,System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.AssignedLicense},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan},System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.ProvisionedPlan},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError},System.Collections.ObjectModel.Collection{System.String},System.Data.Services.Client.DataServiceStreamLink)">
            <summary>
            Create a new User object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
            <param name="assignedLicenses">Initial value of assignedLicenses.</param>
            <param name="assignedPlans">Initial value of assignedPlans.</param>
            <param name="otherMails">Initial value of otherMails.</param>
            <param name="provisionedPlans">Initial value of provisionedPlans.</param>
            <param name="provisioningErrors">Initial value of provisioningErrors.</param>
            <param name="proxyAddresses">Initial value of proxyAddresses.</param>
            <param name="thumbnailPhoto">Initial value of thumbnailPhoto.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.accountEnabled">
            <summary>
            There are no comments for Property accountEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.assignedLicenses">
            <summary>
            There are no comments for Property assignedLicenses in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.assignedPlans">
            <summary>
            There are no comments for Property assignedPlans in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.city">
            <summary>
            There are no comments for Property city in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.country">
            <summary>
            There are no comments for Property country in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.department">
            <summary>
            There are no comments for Property department in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.dirSyncEnabled">
            <summary>
            There are no comments for Property dirSyncEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.displayName">
            <summary>
            There are no comments for Property displayName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.facsimileTelephoneNumber">
            <summary>
            There are no comments for Property facsimileTelephoneNumber in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.givenName">
            <summary>
            There are no comments for Property givenName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.immutableId">
            <summary>
            There are no comments for Property immutableId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.jobTitle">
            <summary>
            There are no comments for Property jobTitle in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.lastDirSyncTime">
            <summary>
            There are no comments for Property lastDirSyncTime in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.mail">
            <summary>
            There are no comments for Property mail in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.mailNickname">
            <summary>
            There are no comments for Property mailNickname in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.mobile">
            <summary>
            There are no comments for Property mobile in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.otherMails">
            <summary>
            There are no comments for Property otherMails in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.passwordPolicies">
            <summary>
            There are no comments for Property passwordPolicies in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.passwordProfile">
            <summary>
            There are no comments for Property passwordProfile in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.physicalDeliveryOfficeName">
            <summary>
            There are no comments for Property physicalDeliveryOfficeName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.postalCode">
            <summary>
            There are no comments for Property postalCode in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.preferredLanguage">
            <summary>
            There are no comments for Property preferredLanguage in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.provisionedPlans">
            <summary>
            There are no comments for Property provisionedPlans in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.provisioningErrors">
            <summary>
            There are no comments for Property provisioningErrors in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.proxyAddresses">
            <summary>
            There are no comments for Property proxyAddresses in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.state">
            <summary>
            There are no comments for Property state in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.streetAddress">
            <summary>
            There are no comments for Property streetAddress in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.surname">
            <summary>
            There are no comments for Property surname in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.telephoneNumber">
            <summary>
            There are no comments for Property telephoneNumber in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.thumbnailPhoto">
            <summary>
            There are no comments for Property thumbnailPhoto in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.usageLocation">
            <summary>
            There are no comments for Property usageLocation in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.userPrincipalName">
            <summary>
            There are no comments for Property userPrincipalName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.userType">
            <summary>
            There are no comments for Property userType in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.permissions">
            <summary>
            There are no comments for permissions in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.registeredDevices">
            <summary>
            There are no comments for registeredDevices in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.User.ownedDevices">
            <summary>
            There are no comments for ownedDevices in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.Permission.CreatePermission(System.String)">
            <summary>
            Create a new Permission object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.clientId">
            <summary>
            There are no comments for Property clientId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.consentType">
            <summary>
            There are no comments for Property consentType in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.expiryTime">
            <summary>
            There are no comments for Property expiryTime in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.objectId">
            <summary>
            There are no comments for Property objectId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.principalId">
            <summary>
            There are no comments for Property principalId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.resourceId">
            <summary>
            There are no comments for Property resourceId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.scope">
            <summary>
            There are no comments for Property scope in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Permission.startTime">
            <summary>
            There are no comments for Property startTime in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.AssignedLicense.CreateAssignedLicense(System.Collections.ObjectModel.Collection{System.Guid})">
            <summary>
            Create a new AssignedLicense object.
            </summary>
            <param name="disabledPlans">Initial value of disabledPlans.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedLicense.disabledPlans">
            <summary>
            There are no comments for Property disabledPlans in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedLicense.skuId">
            <summary>
            There are no comments for Property skuId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan.assignedTimestamp">
            <summary>
            There are no comments for Property assignedTimestamp in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan.capabilityStatus">
            <summary>
            There are no comments for Property capabilityStatus in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan.service">
            <summary>
            There are no comments for Property service in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan.servicePlanId">
            <summary>
            There are no comments for Property servicePlanId in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.PasswordProfile.password">
            <summary>
            There are no comments for Property password in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.PasswordProfile.forceChangePasswordNextLogin">
            <summary>
            There are no comments for Property forceChangePasswordNextLogin in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisionedPlan.capabilityStatus">
            <summary>
            There are no comments for Property capabilityStatus in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisionedPlan.provisioningStatus">
            <summary>
            There are no comments for Property provisioningStatus in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisionedPlan.service">
            <summary>
            There are no comments for Property service in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError.errorDetail">
            <summary>
            There are no comments for Property errorDetail in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError.resolved">
            <summary>
            There are no comments for Property resolved in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError.service">
            <summary>
            There are no comments for Property service in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError.timestamp">
            <summary>
            There are no comments for Property timestamp in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.Role.CreateRole(System.String)">
            <summary>
            Create a new Role object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Role.description">
            <summary>
            There are no comments for Property description in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Role.displayName">
            <summary>
            There are no comments for Property displayName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Role.isSystem">
            <summary>
            There are no comments for Property isSystem in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Role.roleDisabled">
            <summary>
            There are no comments for Property roleDisabled in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.Group.CreateGroup(System.String,System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Create a new Group object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
            <param name="provisioningErrors">Initial value of provisioningErrors.</param>
            <param name="proxyAddresses">Initial value of proxyAddresses.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.description">
            <summary>
            There are no comments for Property description in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.dirSyncEnabled">
            <summary>
            There are no comments for Property dirSyncEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.displayName">
            <summary>
            There are no comments for Property displayName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.lastDirSyncTime">
            <summary>
            There are no comments for Property lastDirSyncTime in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.mail">
            <summary>
            There are no comments for Property mail in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.mailNickname">
            <summary>
            There are no comments for Property mailNickname in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.mailEnabled">
            <summary>
            There are no comments for Property mailEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.provisioningErrors">
            <summary>
            There are no comments for Property provisioningErrors in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.proxyAddresses">
            <summary>
            There are no comments for Property proxyAddresses in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.Group.securityEnabled">
            <summary>
            There are no comments for Property securityEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.capabilities">
            <summary>
            There are no comments for Property capabilities in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.default">
            <summary>
            There are no comments for Property default in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.id">
            <summary>
            There are no comments for Property id in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.initial">
            <summary>
            There are no comments for Property initial in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.name">
            <summary>
            There are no comments for Property name in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain.type">
            <summary>
            There are no comments for Property type in the schema.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.CreateTenantDetail(System.String,System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.AssignedPlan},System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.ProvisionedPlan},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.ProvisioningError},System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{Microsoft.WindowsAzure.ActiveDirectory.VerifiedDomain})">
            <summary>
            Create a new TenantDetail object.
            </summary>
            <param name="objectId">Initial value of objectId.</param>
            <param name="assignedPlans">Initial value of assignedPlans.</param>
            <param name="marketingNotificationEmails">Initial value of marketingNotificationEmails.</param>
            <param name="provisionedPlans">Initial value of provisionedPlans.</param>
            <param name="provisioningErrors">Initial value of provisioningErrors.</param>
            <param name="technicalNotificationMails">Initial value of technicalNotificationMails.</param>
            <param name="verifiedDomains">Initial value of verifiedDomains.</param>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.assignedPlans">
            <summary>
            There are no comments for Property assignedPlans in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.city">
            <summary>
            There are no comments for Property city in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.companyLastDirSyncTime">
            <summary>
            There are no comments for Property companyLastDirSyncTime in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.country">
            <summary>
            There are no comments for Property country in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.countryLetterCode">
            <summary>
            There are no comments for Property countryLetterCode in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.dirSyncEnabled">
            <summary>
            There are no comments for Property dirSyncEnabled in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.displayName">
            <summary>
            There are no comments for Property displayName in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.marketingNotificationEmails">
            <summary>
            There are no comments for Property marketingNotificationEmails in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.postalCode">
            <summary>
            There are no comments for Property postalCode in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.preferredLanguage">
            <summary>
            There are no comments for Property preferredLanguage in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.provisionedPlans">
            <summary>
            There are no comments for Property provisionedPlans in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.provisioningErrors">
            <summary>
            There are no comments for Property provisioningErrors in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.state">
            <summary>
            There are no comments for Property state in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.street">
            <summary>
            There are no comments for Property street in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.technicalNotificationMails">
            <summary>
            There are no comments for Property technicalNotificationMails in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.telephoneNumber">
            <summary>
            There are no comments for Property telephoneNumber in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.tenantType">
            <summary>
            There are no comments for Property tenantType in the schema.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsAzure.ActiveDirectory.TenantDetail.verifiedDomains">
            <summary>
            There are no comments for Property verifiedDomains in the schema.
            </summary>
        </member>
        <member name="M:SerilogTimings.Extensions.SerilogTimingsExtensions.TimeOperationVerbose(Serilog.ILogger,System.String,System.Object[])">
            <summary>
            Begin a new timed operation leveled at <see cref="F:Serilog.Events.LogEventLevel.Verbose"/>.
            The return value must be disposed to complete the operation.
            </summary>
            <param name="messageTemplate">A log message describing the operation, in message template format.</param>
            <param name="args">Arguments to the log message. These will be stored and captured only when the
            operation completes, so do not pass arguments that are mutated during the operation.</param>
            <seealso cref="M:SerilogTimings.Extensions.LoggerOperationExtensions.OperationAt(Serilog.ILogger,Serilog.Events.LogEventLevel,System.Nullable{Serilog.Events.LogEventLevel})"/>
            <seealso cref="M:SerilogTimings.Configuration.LevelledOperation.Time(System.String,System.Object[])"/>
        </member>
        <member name="M:SerilogTimings.Extensions.SerilogTimingsExtensions.BeginOperationVerbose(Serilog.ILogger,System.String,System.Object[])">
            <summary>
            Begin a new timed operation leveled at  at <see cref="F:Serilog.Events.LogEventLevel.Verbose"/>.
            The return value must be completed using <see cref="M:SerilogTimings.Operation.Complete" />,
            or disposed to record abandonment.
            </summary>
            <param name="messageTemplate">A log message describing the operation, in message template format.</param>
            <param name="args">Arguments to the log message. These will be stored and captured only when the
            operation completes, so do not pass arguments that are mutated during the operation.</param>
            <returns>An <see cref="T:SerilogTimings.Operation" /> object.</returns>
            <seealso cref="M:SerilogTimings.Extensions.LoggerOperationExtensions.OperationAt(Serilog.ILogger,Serilog.Events.LogEventLevel,System.Nullable{Serilog.Events.LogEventLevel})"/>
            <seealso cref="M:SerilogTimings.Configuration.LevelledOperation.Begin(System.String,System.Object[])"/>
        </member>
    </members>
</doc>
