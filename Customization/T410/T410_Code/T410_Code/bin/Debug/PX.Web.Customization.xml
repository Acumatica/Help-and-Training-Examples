<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PX.Web.Customization</name>
    </assembly>
    <members>
        <member name="P:Customization.CstCodeFile.PrefixForMerge">
            <summary>
            PrefixForMerge is almost always null. It's explicitly assigned in the
            body of <see cref="M:Customization.CstDocCollection.Merge(System.Boolean)"/> method to specify a
            unique key for two or more code files containing graph extensions for the
            same graph, during the merging of customization objects.
            </summary>
        </member>
        <member name="M:Customization.CstDocument.AddOrMergeItem``1(Customization.IPersistObject)">
            <summary>
            Merges <see cref="T:PX.DbServices.Model.DataSet.PxDataRows"/> from the argument item into an existing item with the same key or adds the argument item as the only
            item, if no items having this key exist in the customization document.
            </summary>
            <typeparam name="T">Type information of the enity to add or merge.</typeparam>
            <param name="newItem">Item that will be added or merged into the customization document.</param>
        </member>
        <member name="P:Customization.CstDocContainer.KeyAttrStopList">
            <summary>
            Attribute names that are excluded from <see cref="P:Customization.CstDocContainer.Key"/> concatenation.
            </summary>
        </member>
        <member name="P:Customization.IPersistObject.Key">
            <summary>
            Value of <see cref="P:PX.SM.CustObject.Name"/>
            </summary>
        </member>
        <member name="P:Customization.IPersistObject.Name">
            <summary>
            Value of <see cref="P:PX.SM.CustObject.Type"/>
            </summary>
        </member>
        <member name="P:Customization.CstDac.BaseDacType">
            <summary>
            Database table related DAC, First class with IBqlTable declaration
            </summary>
        </member>
        <member name="P:Customization.CstDac.Fields">
            <summary>
            Contains User Fields applied to BaseDacType
            and Customized attributes for all descendants
            </summary>
        </member>
        <member name="M:Customization.CstDac.GetContainerType(System.Type)">
             <summary>
             Container Type should be IBqlTable, otherwise extensions will not be created 
             the container is used to find customizations of the fields defined in the common base class
             suppose there is a base B and heirs C, D. we can start customizing a specific class C and redefine the field from B there
             after that we will not find these changes if we go from D
             it must be the table in which the rows are persisted (must be the same as dbtablename in the context)
             new fields must be added to this table, so that they are not added several times from different heirs
             rewriting of attributes seems to be needed there, when it was last declared
             but the question of how exactly extensions work, there is a suspicion that they are applied the most recent
             even if defined for the base class
            
             </summary>
             <param name="dacType"></param>
             <returns></returns>
        </member>
        <member name="M:Customization.CstDac.EnsureAttributeContainer(System.Type,System.String,System.Boolean)">
            <summary>
            Find place to override attributes
            </summary>
            <param name="overrideDacType"></param>
            <param name="fieldName"></param>
            <param name="lookupFieldDeclaration"></param>
            <returns></returns>
        </member>
        <member name="M:Customization.CstDac.GetExtensionName(Customization.TypeName,System.String)">
            <summary>
            new columns are going to database table related item
            </summary>
            <param name="dac"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="P:Customization.CstDac.DacField.IsOverrideExistingField">
            <summary>
            Overrides attributes of field declared in some ancestor class
            </summary>
        </member>
        <member name="F:Customization.CstDac.DacField.OverrideClassName">
            <summary>
            Valid for customized attributes, 
            points to type where attributes should be applied
            </summary>
        </member>
        <member name="F:Customization.CstDbTable.DbColumn.DecimalPrecision">
            <summary>
            number of decimal digits
            </summary>
        </member>
        <member name="M:Customization.PXTestUpgrade.SyncContext.SyncRange.ReadRanges">
            we will look for matching sequences of tags
            after connected elements
            the beginning of the range is postulated by the connected
            that is, we are looking for a sequence of tags from the beginning to the end or until the mismatch of tags or until the connected pair
            then skip to a couple in this range
            and repeat
        </member>
        <member name="M:Customization.PXTestUpgrade.SyncContext.Sync(Customization.PageNode[],Customization.PageNode[])">
            the task is to select the following types of nodes - having a pair, deleted, added, lost identity
            select attributes that potentially identify the node
            find pairs by identifiers
            then we start to connect neighbors along different axes
            and highlight bounded contexts in which it is easier to synchronize
            in particular, we connect parents who have the same children
            in the context of identical parents, we connect nodes based on weak characteristics
            in theory, the content of the grid should be synchronized only in its context, not subject to transfer
        </member>
        <member name="T:Customization.PropertyTrackingGraph">
            <summary>
            Service graph for PropertyTrackingBase class and it's children, that allows to get display names for different objects
            </summary>
        </member>
        <member name="F:Customization.CustomizationGraph.DropDownGenerated">
            <summary>
            Generated control type for drop-down
            </summary>
        </member>
        <member name="F:Customization.CustomizationGraph.DropDown">
            <summary>
            Correct control type label for drop-down
            </summary>
        </member>
        <member name="M:Customization.CustomizationGraph.FillElemInfoFromSystemWorkflow(Customization.RowElemInfo,System.String,System.Web.UI.Page)">
            <summary>
            Looks for the control, representing _clientId, in a dynamically created workflow.
            </summary>
        </member>
        <member name="T:Customization.ElementComboBoxValue">
            <summary>
            Record in the "Combo Box Values" dialog
            </summary>
            <seealso cref="T:PX.Data.IBqlTable" />
        </member>
        <member name="M:Customization.CstDbStorage.Customization#IObjectStorage#AddItem(Customization.IPersistObject)">
            <summary>
            Save object to database.
            </summary>
        </member>
        <member name="M:Customization.CstDbStorage.Customization#IObjectStorage#Load(System.String)">
            <summary>
            Load object from database by name.
            </summary>
        </member>
        <member name="M:Customization.CstDbStorage.Customization#IObjectStorage#Delete(System.String)">
            <summary>
            Delete object with specified name from database.
            </summary>
        </member>
        <member name="M:Customization.RuntimeNodesCollection.PageControlExplorer.IsSubarray``1(``0[],``0[])">
            <summary>
            Returns <see langword="true" />, if <paramref name="where"/> contains the whole sequence <paramref name="what"/>;
            <see langword="false" /> otherwise.
            E.g. the function returns <see langword="true" /> in the following cases:
            <para>
            // 'where' contains [1,2] as a series of its elements
            what = [2]; where = [1, 2, 3] 
            what = [1, 2]; where = [1, 2, 3] 
            what = [1, 2]; where = [3, 1, 2, 3] 
            </para>
            <para>
            and returns <see langword="false" /> in the following cases:
            // either 'what' or 'where' is an empty array (or both are empty)
            what = [1, 2]; where = [1, 1, 3, 2] 
            what = [1, 2]; where = [3, 1, 1, 3] 
            </para>
            </summary>
            <typeparam name="TElem">type of the array element in the arguments</typeparam>
            <param name="what">What element sequence to find.</param>
            <param name="where">Target array where to look for <paramref name="what"/> sequence.</param>
            <returns></returns>
        </member>
        <member name="F:Customization.CstWebsiteStorage.RestrictStateCustomizationPublishProgressID">
            <summary>
            // State row.
            </summary>
        </member>
        <member name="F:Customization.PXPublishOptions.SkipDocumentValidation">
            <summary>
            If <see langword="true" />, skip the validation of the application files and extensions in the customization being published.
            If <see langword="false" />, the regular validation of the application files and extensions applies.
            Validation is usually skipped during the installation process when an Acumatica instance is deployed
            with a customization for a learning course. In this case we consider such a customization validated and save
            resources.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.Certification.CertificationManager.PX#Web#Customization#Certification#ICertificationManager#RefreshLocalCertificationStatus(System.Boolean,System.Boolean,PX.Data.PXGraph)">
            <summary>
            Requests actual certification status from Certification Service for the
            customization packages in Acumatica instance (caller).
            </summary>
            <param name="synchronously">If <tt>true</tt>, calls ISV service synchronously. If <tt>false</tt>, calls ISV
            service asynchronously.</param>
            <param name="throttled">If set to <tt>true</tt>, the ISV service is only called once per configured "silence
            period". If set to <tt>false</tt>, the ISV service is invoked immediately.</param>
            <param name="graph">Graph to visualize the long-run status.</param>
            <returns>
            <para>
            If <paramref name="synchronously"/>=<tt>false</tt>, then the ISV service call will be invoked in a
            long-run, and RefreshLocalCertificationStatus() returns <tt>true</tt> if the long-run was started,
            <tt>false</tt> otherwise ("silence period" has not passed yet or due to other reasons).
            </para>
            <para>
            If <paramref name="synchronously"/>=<tt>true</tt>, then RefreshLocalCertificationStatus() always returns
            <tt>true</tt>.
            </para>
            </returns>
        </member>
        <member name="M:PX.Web.Customization.Certification.CertificationStatusHelper.ShowWarningAboutCertificationStatusLoss``1(PX.SM.CustProject,PX.Data.PXSelectBase{``0},System.Boolean)">
            <summary>
            Asks for confirmation to open a pre-modified customization project in Customization Editor. Pre-modification
            will set to <tt>null</tt> the certification status of the customization project represented by
            <paramref name="custProject"/> argument.
            </summary>
            <param name="custProject">Customization project that is about to be edited.</param>
            <param name="filter">An object to show a dialog for.</param>
            <typeparam name="Table">Parameter required by the chosen type of <paramref name="filter"/></typeparam>
            <typeparam name="yesNo">If <tt>true</tt>, the confirmation dialog is shown and the user should make a choice:
            to lose the certification status or not. If <tt>false</tt> the user is just notified about future possible
            certification status loss.</typeparam>
            <returns><tt>true</tt> if the user confirmed the certification status loss, <tt>false</tt> otherwise. The
            result can be either <tt>true</tt> or <tt>false</tt> in case <paramref name="yesNo"/> is <tt>false</tt>.</returns>
        </member>
        <member name="T:PX.Web.Customization.Controls.CompilerResults">
            <summary>
            CompilerResults class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.CompilerResults.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Dts.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.ds">
            <summary>
            ds control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.FormEditContent">
            <summary>
            FormEditContent control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.PanelSource">
            <summary>
            PanelSource control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.PanelCompiler">
            <summary>
            PanelCompiler control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.PanelNewFile">
            <summary>
            PanelNewFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.FormNewFile">
            <summary>
            FormNewFile control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.ButtonOk">
            <summary>
            ButtonOk control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Edit.ButtonCancel">
            <summary>
            ButtonCancel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.OpenProject.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:PX.Web.Customization.Controls.PP.Preview">
            <summary>
            Preview class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.PP.Preview.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:PX.Web.Customization.Controls.Source">
            <summary>
            Source class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.Source.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:PX.Web.Customization.Controls.WebsiteSolution.form1">
            <summary>
            form1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:PX.Web.Customization.Logger.ICustomizationLogger">
            <summary>
            Abstraction layer that allows sending information about the process of executing customization methods to different receivers.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.LayoutEditorMaint.GetDefaultBindingContainer">
            <summary>
            Gets the default binding container for selected control.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.LayoutEditorMaint.GetDefaultDataMember">
            <summary>
            Gets the default data member for selected control.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.LayoutEditorMaint._(PX.Data.Events.RowUpdating{Customization.RowViewField})">
            <summary>
            
            </summary>
        </member>
        <member name="M:PX.Web.Customization.LayoutEditorMaint.EnumViewFields">
            <summary>
            Collect the active data view fields.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.LayoutEditorMaint.GetUsedDataFields">
            <summary>
            Collect the list of fieds which already used inside active binding container.
            </summary>
        </member>
        <member name="T:PX.Web.Customization.PXContextSlotKey">
            <summary>
            Keys for the <see cref="T:PX.Common.PXContext"/> memory slots.
            </summary>
        </member>
        <member name="F:PX.Web.Customization.PXContextSlotKey.ViewDoesNotExistExceptionThrownFlag">
            <summary>
            Has value <see langword="true"/> if <see cref="T:PX.Data.PXViewDoesNotExistException"/> was thrown, <see langword="false"/> or <see langword="null"/> otherwise
            </summary>
        </member>
        <member name="F:PX.Web.Customization.PXContextSlotKey.ScreenUtilsException">
            <summary>
            Contains a message describing a general processing error in Customization Editor
            </summary>
        </member>
        <member name="F:PX.Web.Customization.PXContextSlotKey.ProjectMustBePublished">
            <summary>
            Contains a boolean flag designating if the project must be published.
            </summary>
        </member>
        <member name="T:PX.Web.Customization.AssemblyInfoProvider">
            <summary>
            An assembly information provider.
            </summary>
        </member>
        <member name="F:PX.Web.Customization.AssemblyInfoProvider.NonDllCustomizationsPrefix">
            <summary>
            Names of assemblies for non-dll customizations start with <c>RuntimeCode_</c>
            </summary>
        </member>
        <member name="M:PX.Web.Customization.AssemblyInfoProvider.IsAssemblyGeneratedAtRunTime(System.Reflection.Assembly)">
            <summary>
            Query if <paramref name="assembly" /> is generated at the run-time.
            </summary>
            <param name="assembly">The assembly. This cannot be null.</param>
            <returns>
            True if <paramref name="assembly" /> is generated at the run-time, false if not.
            </returns>
        </member>
        <member name="T:PX.Web.Customization.CustomizationProjectInfoProvider.ClassDeclarationChecker">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.CSharp.CSharpSyntaxWalker"/> that checks that the provided class <see cref="T:System.Type"/> is declared in the syntax tree.
            </summary>
            <remarks>Supports nested types but doesn't support nested namespaces since it is a rare case in customizations.</remarks>
        </member>
        <member name="F:PX.Web.Customization.CustomizationProjectInfoProvider._publishedItems">
            <summary>
            Contains all customization items by project, ordered by the project level.
            </summary>
        </member>
        <member name="T:PX.Web.Customization.CustomizationUrlHelper">
            <summary>
            A customization URL helper.
            </summary>
        </member>
        <member name="M:PX.Web.Customization.CustomizationUrlHelper.GetCustomizationProjectRelativeUrl(System.String,System.String)">
            <summary>
            Gets customization project relative URL.
            </summary>
            <param name="pathBase">The path base.</param>
            <param name="projectName">Name of the project. This cannot be null.</param>
            <returns>
            The customization project URL.
            </returns>
        </member>
        <member name="M:PX.Web.Customization.CustomizationUrlHelper.GetProjectBrowserRelativeUrl">
            <summary>
            Gets Customization Project Editor relative URL.
            </summary>
            <returns>
            The Customization Project Editor relative URL; <see langword="null" />, if the corresponding site map node does not exist.
            </returns>
        </member>
        <member name="M:PX.Web.Customization.CustomizationUrlHelper.GetProjectBrowserDefaultInnerScreenId">
            <summary>
            Gets the Screen ID of the default inner screen for the Customization Project Editor.
            </summary>
            <returns>Screen ID of the default inner screen; <see langword="null" />, if the corresponding site map node does not exist.</returns>
            <remarks>
            <para> If there is no explicit Screen ID in the URL,
            Customization Project Editor always opens the last accessed URL as the inner screen (see <see cref="!:Frames_ProjectBrowser.Page_Load"/>).</para>
            <para>Mimics the behavior of <see cref="M:PX.SM.ProjectList.view"/>.</para>
            </remarks>
        </member>
        <member name="M:PX.Web.Customization.utils.PublishOffline.GetSnapshot(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a snapshot using a specified config file and saves it to Snapshots directory of the instance.
            </summary>
            <param name="configModeName">Name of the config file without the extension</param>
            <param name="companyId">Id of the company to be exported</param>
            <param name="parentId">Id of the company, parent to the company to be exported</param>
        </member>
        <member name="T:PX.Web.Customization.utils.PXCustomizationEditorScope">
            <summary>
            <para>
            The scope wraps the code running in a Customization Editor "context".
            <see cref="P:PX.Web.Customization.utils.PXCustomizationEditorScope.Active"/> property can be used down the
            call stack to check the state of the scope.
            </para>
            <para>
            E.g. <see cref="T:PX.Web.Customization.utils.PXCustomizationEditorScope"/> is used to wrap a graph instance creation for Portal,
            when a portal screel is being opened in Layout Editor (in Customization Editor) to avoid throwing
            an exception about missing business account linked to the current user.
            </para>
            </summary>
        </member>
        <member name="P:PX.Web.Customization.utils.PXCustomizationEditorScope.Active">
            <summary>
            Returns <see langword="true"/> if the scope is active, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Attribute.IsvInitialsAttributeValidationRule">
            <summary>
            Attributes must start with the assigned initials
            Legacy customization objects utilizing Cst_ prefix are not allowed in an ISV solution
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Cache.IsvInitialsCacheExtensionValidationRule">
             <summary>
             DAC extensions introducing changes to standard Acumatica DAC fields behavior must start with the assigned initials
            
             Legacy customization objects utilizing Cst_ prefix are not allowed in an ISV solution
             </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Cache.IsvInitialsCacheValidationRule">
             <summary>
             custom DACs (not necessary for fields) must start with the assigned initials
            
             custom fields defined for DACs from Acumatica ERP or Acumatica xRP assemblies must start with the Usr prefix followed by the assigned solution initials (the Usr prefix is optional for DB-unbound fields)
            
             Legacy customization objects utilizing Cst_ prefix are not allowed in an ISV solution
             </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Class.IsvInitialsClassValidationRule">
             <summary>
             Legacy customization objects utilizing Cst_ prefix are not allowed in an ISV solution
            
             Localizable classes must start with the assigned initials
             </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Graph.IsvInitialsGraphExtensionValidationRule">
             <summary>
             BLC extensions must start with the assigned initials
            
             custom data views and actions names must start with the assigned initials when declared within BLC extensions
             </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Graph.IsvInitialsGraphValidationRule">
            <summary>
            custom BLCs, attributes, and classes containing localizable messages must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.Graph.LegacyGraphValidationRule">
            <summary>
            Graph inheritance is legacy. Instead, use PXGraphExtension class
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.BinFile.IsvFileValidationRule">
            <summary>
            An ISV solution should not replace or modify files distributed as part of standard Acumatica ERP application.
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Dac.LegacyDacValidationRule">
            <summary>
            Using of legacy DAC fields
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Dashboard.IsvInitialsDashboardValidationRule">
            <summary>
            the numbering used on custom dashboards must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Endpoint.IsvInitialsEntityEndpointValidationRule">
            <summary>
            Solution-specific push notifications and web service endpoints names must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.GI.IsvInitialsGIDesignValidationRule">
            <summary>
            the numbering used on custom screens and reports must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Push.IsvInitialsPushNotificationValidationRule">
            <summary>
            Solution-specific push notifications and web service endpoints names must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Report.IsvInitialsReportScreenValidationRule">
            <summary>
            the numbering used on custom screens and reports must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Screen.IsvInitialsScreenValidationRule">
            <summary>
            the numbering used on custom screens and reports must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.SiteMap.IsvInitialsSiteMapScreenValidationRule">
            <summary>
            Screen IDs of custom Site Map nodes (including the ones associated with Generic Inquiries, Dashboards, or Reports) must start with the assigned initials
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Sql.IsvSqlCorrespondenceValidationRule">
            <summary>
            There are no database columns, that are not mapped to a DAC field, except for the CompanyID, CompanyMask, WebAppType and DeletedDatabaseRecord columns
            all custom columns are of the supported data type corresponding to the data type of all DAC class fields bound to the column
            </summary>
        </member>
        <member name="T:PX.Web.Customization.Validation.Rules.Sql.IsvSqlSchemeChangesValidationRule">
             <summary>
             ISV solution-specific database tables must have a primary key constraint defined on at least one column.
            
             CompanyID required to be a part of the primary key constraint and is essential to work in multi-tenant environments
            
             NoteID used a global identifier for an object within the Acumatica ERP environment
            
             Audit columns to allow Acumatica automatically collect and store meta information
            
             Timestamp required for concurrency management, except for the tables storing accumulated values
            
             All extension tables created and used by an ISV solution must meet the following requirements:
                contain DeletedDatabaseRecord, if one exists in the base table
                share the same primary key as defined for the base table
             
             SQL scripts are strictly prohibited unless they are provided as part of Database upgrade scripts
             An ISV solution must not include any kind of database objects that are capable of running some kind of code
             (e.g. stored procedures, triggers, functions, views, etc.) 
             </summary>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.IsSubclassOf(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Is childTypeDef a subclass of parentTypeDef. Does not test interface inheritance
            </summary>
            <param name="childTypeDef"></param>
            <param name="parentTypeDef"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.DoesAnySubTypeImplementInterface(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Does childType inherit from parentInterface
            </summary>
            <param name="childType"></param>
            <param name="parentInterfaceDef"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.DoesSpecificTypeImplementInterface(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Does the childType directly inherit from parentInterface. Base
            classes of childType are not tested
            </summary>
            <param name="childTypeDef"></param>
            <param name="parentInterfaceDef"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.DoesSpecificInterfaceImplementInterface(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Does interface iface0 equal or implement interface iface1
            </summary>
            <param name="iface0"></param>
            <param name="iface1"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.IsAssignableFrom(Mono.Cecil.TypeDefinition,Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Is source type assignable to target type
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PX.Web.Customization.Validation.TypeDefinitionExtensions.EnumerateBaseClasses(Mono.Cecil.TypeDefinition,PX.Web.Customization.ProjectBrowserMaint.ExtendedValidationContext)">
            <summary>
            Enumerate the current type, it's parent and all the way to the top type
            </summary>
            <param name="classType"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:PX.Web.Customization.Validation.ValidationManagerHelper.GetCustomizedAttributes(System.Collections.Generic.List{Mono.Cecil.CustomAttribute},Mono.Cecil.IMemberDefinition)" -->
        <member name="P:PX.CloudServices.Customization.Certification.PackageCertificationVerificationResponse.CertifiedVersions">
            <summary>
            List of Acumatica versions and package versions
            </summary>
        </member>
        <member name="T:PX.CloudServices.Customization.Certification.CstPkgCertStatus">
            <summary>
            A record of a customization package versions compatible with the
            requested Acumatica instance.
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CstPkgCertStatus.Hash">
            <summary>
            Hash of the customization package
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CstPkgCertStatus.Status">
            <summary>
            Certification status text values (with their respective locales) for the customization package.
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CstPkgCertStatus.Warning">
            <summary>
            Certification warning text values (with their respective locales). These will be shown in the package
            list (Customization Projects screen) in Acumatica instance.
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CstPkgCertStatus.DevelopedBy">
            <summary>
            The company that developed the customization package (Business account)
            </summary>
        </member>
        <member name="T:PX.CloudServices.Customization.Certification.CstPkgCertReqData">
            <summary>
            Request from Acumatica instance to Certification Service to verify the
            actual certification status of the customization packages on Acumatica instance.
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CertificationStatusOptions.CertificationStatusServiceSilenceInterval">
            <summary>
            The minimum period of time between two calls to ISV service. The next call is allowed if it is made when this
            period has passed.  
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CertificationStatusOptions.TimeoutInterval">
            <summary>
            The minimum period of time between two calls to ISV service. The next call is allowed if it is made when this
            period has passed.  
            </summary>
        </member>
        <member name="P:PX.CloudServices.Customization.Certification.CertificationStatusOptions.EndpointType">
            <summary>
            If set to <tt>WebAPI</tt> or to <tt>Lambda</tt>, then:
            <para>- customization certification statuses and their respective warnings are shown in UI</para> 
            <para>- customization certification information is requested from the ISV web service and is updated in the
            database</para>
            If set to <tt>None</tt>, aforementioned actions are not taken. 
            </summary>
        </member>
        <member name="T:PX.SM.CustProject.noteID">
            <exclude/>
        </member>
        <member name="T:PX.SM.NavigationParameter.destinationScreenID">
            <summary> For attributes GIPrimaryViewFieldsList and GIPrimaryViewValueList </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PX.SM.SiteMapInt" -->
        <member name="F:PX.SM.GraphTableEdit.ViewAddSelectorCols">
            <summary>
            Separate caches to store items
            Virtual storage, command read from it, persits save to it
            </summary>
        </member>
        <member name="M:PX.SM.AUWorkflowMaint.SetEditValueFromSchema``2(PX.Data.Events.FieldSelecting{``0,``1},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <typeparam name="TField"></typeparam>
             <param name="e"></param>
             <param name="dummy">Prevents Acumatica from thinking that this method is event handler</param>
        </member>
        <member name="P:PX.SM.RowWorkflowAction.ViewChangesAvailable">
            <summary>
            The field is virtual and has no representation in the database.
            The field is used to enable or disable the View Changes button on the grid.
            </summary>
        </member>
        <member name="F:Controls_CustomizationExport.Head1">
            <summary>
            Head1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.PageHeader">
            <summary>
            PageHeader control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.ErrorMessage">
            <summary>
            ErrorMessage control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.form">
            <summary>
            form control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.GroupProjectName">
            <summary>
            GroupProjectName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.LabelProjectName">
            <summary>
            LabelProjectName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.EditProjectName">
            <summary>
            EditProjectName control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.ButtonSubmint">
            <summary>
            ButtonSubmint control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.ButtonSaveToSession">
            <summary>
            ButtonSaveToSession control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.SaveXml">
            <summary>
            SaveXml control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.ButtonUpload">
            <summary>
            ButtonUpload control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.File1">
            <summary>
            File1 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Controls_CustomizationExport.EditText">
            <summary>
            EditText control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Microsoft.Samples.SimplePDBReader.SymbolProvider">
            <summary>
            A SymbolProvider gets source locations given method/IL-offset pairs.
            The underlying readers are cached per module, but the cache can be cleared by calling Dispose
            </summary>
        </member>
        <member name="M:Microsoft.Samples.SimplePDBReader.SymbolProvider.#ctor(System.String,Microsoft.Samples.SimplePDBReader.SymbolProvider.SymSearchPolicies)">
            <summary>
            Create a new symbol provider.
            Note that the symbol provider will cache the symbol readers it creates
            </summary>
            <param name="searchPath">A semicolon separated list of paths to search for a PDB file</param>
            <param name="searchPolicy">Flags which specify where else to search</param>
        </member>
        <member name="T:Microsoft.Samples.SimplePDBReader.SymbolProvider.SourceLoc">
            <summary>
            Description of a location in a source file
            </summary>
        </member>
        <member name="M:Microsoft.Samples.SimplePDBReader.SymbolProvider.GetSourceLoc(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Get a string representing the source location for the given IL offset and method
            </summary>
            <param name="method">The method of interest</param>
            <param name="ilOffset">The offset into the IL</param>
            <returns>A string of the format [filepath]:[line] (eg. "C:\temp\foo.cs:123"), or null
            if a matching PDB couldn't be found</returns>
            <remarks>Thows various COMExceptions (from DIA SDK error values) if a PDB couldn't be opened/read</remarks>
        </member>
        <member name="M:Microsoft.Samples.SimplePDBReader.SymbolProvider.CreateSymbolReaderForFile(System.String)">
            <summary>
            Create a symbol reader object corresponding to the specified module (DLL/EXE)
            </summary>
            <param name="modulePath">Full path to the module of interest</param>
            <returns>A symbol reader object, or null if no matching PDB symbols can located</returns>
        </member>
        <member name="M:Microsoft.Samples.SimplePDBReader.SymbolProvider.GetSymbolReaderForFile(System.String)">
            <summary>
            Get or create a symbol reader for the specified module (caching the result)
            </summary>
            <param name="modulePath">Full path to the module of interest</param>
            <returns>A symbol reader for the specified module or null if none could be found</returns>
        </member>
        <member name="M:Microsoft.Samples.SimplePDBReader.SymbolProvider.Dispose">
            <summary>
            IDisposable implementation
            Note that the reader will release file handles eventually, so this isn't strictly necessary.
            Therefore I don't bother with a finalizer.  This method is mainly usefull to ensure determinstic
            file closing.
            </summary>
        </member>
        <member name="T:vbAccelerator.Components.Shell.ShellLink">
            <summary>
            Summary description for ShellLink.
            </summary>
        </member>
        <member name="T:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags">
            <summary>
            Flags determining how the links with missing
            targets are resolved.
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_ANY_MATCH">
            <summary>
            Allow any match during resolution.  Has no effect
            on ME/2000 or above, use the other flags instead.
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_INVOKE_MSI">
            <summary>
            Call the Microsoft Windows Installer. 
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NOLINKINFO">
            <summary>
            Disable distributed link tracking. By default, 
            distributed link tracking tracks removable media 
            across multiple devices based on the volume name. 
            It also uses the UNC path to track remote file 
            systems whose drive letter has changed. Setting 
            SLR_NOLINKINFO disables both types of tracking.
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NO_UI">
            <summary>
            Do not display a dialog box if the link cannot be resolved. 
            When SLR_NO_UI is set, a time-out value that specifies the 
            maximum amount of time to be spent resolving the link can 
            be specified in milliseconds. The function returns if the 
            link cannot be resolved within the time-out duration. 
            If the timeout is not set, the time-out duration will be 
            set to the default value of 3,000 milliseconds (3 seconds). 
            </summary>										    
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NO_UI_WITH_MSG_PUMP">
            <summary>
            Not documented in SDK.  Assume same as SLR_NO_UI but 
            intended for applications without a hWnd.
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NOUPDATE">
            <summary>
            Do not update the link information. 
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NOSEARCH">
            <summary>
            Do not execute the search heuristics. 
            </summary>																																																																																																																																																																																																														
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_NOTRACK">
            <summary>
            Do not use distributed link tracking. 
            </summary>
        </member>
        <member name="F:vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags.SLR_UPDATE">
            <summary>
            If the link object has changed, update its path and list 
            of identifiers. If SLR_UPDATE is set, you do not need to 
            call IPersistFile::IsDirty to determine whether or not 
            the link object has changed. 
            </summary>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.#ctor">
            <summary>
            Creates an instance of the Shell Link object.
            </summary>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.#ctor(System.String)">
            <summary>
            Creates an instance of a Shell Link object
            from the specified link file
            </summary>
            <param name="linkFile">The Shortcut file to open</param>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Finalize">
            <summary>
            Call dispose just in case it hasn't happened yet
            </summary>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Dispose">
            <summary>
            Dispose the object, releasing the COM ShellLink object
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.IconPath">
            <summary>
            Gets the path to the file containing the icon for this shortcut.
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.IconIndex">
            <summary>
            Gets the index of this icon within the icon path's resources
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.Target">
            <summary>
            Gets/sets the fully qualified path to the link's target
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.WorkingDirectory">
            <summary>
            Gets/sets the Working Directory for the Link
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.Description">
            <summary>
            Gets/sets the description of the link
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.Arguments">
            <summary>
            Gets/sets any command line arguments associated with the link
            </summary>
        </member>
        <member name="P:vbAccelerator.Components.Shell.ShellLink.DisplayMode">
            <summary>
            Gets/sets the initial display mode when the shortcut is
            run
            </summary>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Save">
            <summary>
            Saves the shortcut to ShortCutFile.
            </summary>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Save(System.String)">
            <summary>
            Saves the shortcut to the specified file
            </summary>
            <param name="linkFile">The shortcut file (.lnk)</param>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Open(System.String)">
            <summary>
            Loads a shortcut from the specified file
            </summary>
            <param name="linkFile">The shortcut file (.lnk) to load</param>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Open(System.String,System.IntPtr,vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags)">
            <summary>
            Loads a shortcut from the specified file, and allows flags controlling
            the UI behaviour if the shortcut's target isn't found to be set.
            </summary>
            <param name="linkFile">The shortcut file (.lnk) to load</param>
            <param name="hWnd">The window handle of the application's UI, if any</param>
            <param name="resolveFlags">Flags controlling resolution behaviour</param>
        </member>
        <member name="M:vbAccelerator.Components.Shell.ShellLink.Open(System.String,System.IntPtr,vbAccelerator.Components.Shell.ShellLink.EShellLinkResolveFlags,System.UInt16)">
            <summary>
            Loads a shortcut from the specified file, and allows flags controlling
            the UI behaviour if the shortcut's target isn't found to be set.  If
            no SLR_NO_UI is specified, you can also specify a timeout.
            </summary>
            <param name="linkFile">The shortcut file (.lnk) to load</param>
            <param name="hWnd">The window handle of the application's UI, if any</param>
            <param name="resolveFlags">Flags controlling resolution behaviour</param>
            <param name="timeOut">Timeout if SLR_NO_UI is specified, in ms.</param>
        </member>
    </members>
</doc>
